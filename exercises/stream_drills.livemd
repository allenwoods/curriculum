# 流处理练习

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stream Drills">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/file.livemd">文件</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/file_drills.livemd">文件练习</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 流处理练习

练习帮助你通过重复的练习来熟悉和记忆语法。与通常的问题不同，练习并不旨在培养解决问题的能力，它们纯粹是为了提高舒适度和速度。

这一组练习是关于[流](../reading/streams.livemd)。请按照每个练习的说明进行操作，并尽快完成它们。

## Stream.map/2

使用[Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2)将范围`1..10`中的元素翻倍，然后使用[Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1)将结果流转换为列表`[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]`。

```elixir

```

使用[Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2)和[Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1)将元组对`[{1, 1}, {2, 2}, {3, 3}]`求和为`[2, 4, 6]`。

```elixir

```

## Stream.filter/2

使用[Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2)和[Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1)从范围`1..10`中过滤出偶数，返回`[2, 4, 6, 8, 10]`。

```elixir

```

使用[Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2)和[Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1)从范围`1..10`中过滤出大于`5`的数字，返回`[6, 7, 8, 9, 10]`。

```elixir

```

## Stream.cycle/1

使用[Stream.cycle/1](https://hexdocs.pm/elixir/Stream.html#cycle/1)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成列表`[1, 2, 3, 1, 2, 3, 1, 2, 3]`。

```elixir

```

使用[Stream.cycle/1](https://hexdocs.pm/elixir/Stream.html#cycle/1)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成列表`["a", "b", "a", "b"]`。

```elixir

```

## Stream.iterate/2

使用[Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成从`1`到`10`的数字列表。

```elixir

```

使用[Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成从`0`到`-10`的负数列表。

```elixir

```

使用[Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成从`2`开始的逐渐增加的幂列表，通过将累加器乘以二。即$2^1$，$2^2$，$2^3$，$2^4$。

```elixir

```

## Stream.unfold/2

使用[Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成`10`个立方数的列表。即$1^3, 2^3, 3^3$。

```elixir

```

使用[Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成`5`个整数的字符串列表`["1", "2", "3", "4", "5"]`。

```elixir

```

使用[Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2)和[Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2)生成从`1`到`10`的整数列表，每个数除以`2`。

```elixir

```

## Stream.chunk_every/2

使用[Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2)和[Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1)将`[1, 1, 2, 2, 3, 3]`分块为`[[1, 1], [2, 2], [3, 3]]`。

```elixir

```

使用[Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2)将`[1, 1, 1, 2, 2, 2]`分块为`[[1, 1, 1], [2, 2, 2]]`。

```elixir

```

使用[Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2)将`[1, 2, 2, 1, 4, 4]`分块为对，然后使用[Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2)将对的和求出，得到`[3, 3, 8]`。

```elixir

```

## 提交你的进度

DockYard Academy 现在建议你使用最新的[发布版本](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行`git status`以确保没有不必要的更改。
然后在`curriculum`文件夹中运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成流处理练习"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受2023年6月至8月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stream Drills">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/file.livemd">文件</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/file_drills.livemd">文件练习</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>