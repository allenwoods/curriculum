# 分数追踪器

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Score Tracker">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/genserver_drills.livemd">GenServer 练习</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/stack_server.livemd">栈服务器</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 分数追踪器

你将创建一个 `ScoreTracker` [GenServer](https://hexdocs.pm/elixir/GenServer.html)，这是一个通用的分数追踪器。

### 需求

* 初始分数为 `0`。
* 处理异步 `{:add_points, amount}` 消息以增加分数状态。
* 处理同步 `:current_score` 消息以检索当前分数。
* 创建 `start_link/1`、`current_score/1` 和 `add_points/2` 客户端 API 函数，如下文所述。

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = ScoreTracker.start_link([])
:ok = ScoreTracker.add_points(pid, 10)
10 = ScoreTracker.current_score(pid)
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule ScoreTracker do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def add_points(score_tracker_pid, amount) do
    GenServer.cast(score_tracker_pid, {:add_points, amount})
  end

  def get_score(score_tracker_pid) do
    GenServer.call(score_tracker_pid, :current_score)
  end

  @impl true
  def init(_opts) do
    {:ok, 0}
  end

  @impl true
  def handle_cast({:add_points, points}, state) do
    {:noreply, state + points}
  end

  @impl true
  def handle_call(:current_score, _from, state) do
    {:reply, state, state}
  end
end
```

</details>

在下面实现 `ScoreTracker` 模块。

```elixir
defmodule ScoreTracker do
  @moduledoc """
  iex> {:ok, pid} = ScoreTracker.start_link([])
  iex> ScoreTracker.add_points(pid, 10)
  :ok
  iex> ScoreTracker.current_score(pid)
  10
  """
  use GenServer

  # 客户端 API

  def start_link(_opts) do
  end

  def add_points(score_tracker_pid, amount) do
  end

  def current_score(score_tracker_pid) do
  end

  # 服务器 API

  def init(_init_arg) do
  end

  def handle_cast({:add_points, amount}, state) do
  end

  def handle_call(:current_score, _from, state) do
  end
end
```

## 奖励：多人分数追踪器

创建一个 `MultiplayerScoreTracker`，可以跟踪多个命名玩家的分数。

### 需求

* 初始分数为一个空映射 `%{}`。
* 处理异步 `{:add_points, player_name, amount}` 消息以增加分数状态。
* 处理同步 `{:current_score, player_name}` 消息以检索当前分数。
* 处理同步 `:all_scores` 消息以检索所有分数的映射。
* 创建 `start_link/1`、`current_score/2`、`add_points/3` 和 `all_scores/1` 客户端 API 函数，如下文所述。为了练习，你需要定义任何必要的处理程序。

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = MultiplayerScoreTracker.start_link([])

:ok = MultiplayerScoreTracker.add_points(pid, :player1, 10)
:ok = MultiplayerScoreTracker.add_points(pid, :player1, 20)
:ok = MultiplayerScoreTracker.add_points(pid, :player2, 20)

%{
  player1: 30,
  player2: 20
} = MultiplayerScoreTracker.all_scores(pid)

30 = MultiplayerScoreTracker.current_score(pid, :player1)
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule MultiplayerScoreTracker do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def add_points(multiplayer_score_tracker_pid, player_name, amount) do
    GenServer.cast(multiplayer_score_tracker_pid, {:add_points, player_name, amount})
  end

  def all_scores(multiplayer_score_tracker_pid) do
    GenServer.call(multiplayer_score_tracker_pid, :all_scores)
  end

  def current_score(multiplayer_score_tracker_pid, player_name) do
    GenServer.call(multiplayer_score_tracker_pid, {:current_score, player_name})
  end

  @impl true
  def init(_opts) do
    {:ok, %{}}
  end

  @impl true
  def handle_cast({:add_points, player_name, amount}, state) do
    {:noreply, Map.update(state, player_name, amount, fn current -> current + amount end)}
  end

  @impl true
  def handle_call(:all_scores, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_call({:current_score, player_name}, _from, state) do
    {:reply, state[player_name], state}
  end
end
```

</details>

```elixir
defmodule MultiplayerScoreTracker do
  @moduledoc """
  iex> {:ok, pid} = MultiplayerScoreTracker.start_link([])
  iex> :ok = MultiplayerScoreTracker.add_points(pid, :player1, 10)
  iex> :ok = MultiplayerScoreTracker.add_points(pid, :player1, 20)
  iex> :ok = MultiplayerScoreTracker.add_points(pid, :player2, 20)
  iex> MultiplayerScoreTracker.all_scores(pid)
  %{
    player1: 30,
    player2: 20
  }
  iex> MultiplayerScoreTracker.current_score(pid, :player1)
  30
  """
  use GenServer

  def start_link(_opts) do
  end

  def add_points(multiplayer_score_tracker_pid, player_name, amount) do
  end

  def all_scores(multiplayer_score_tracker_pid) do
  end

  def current_score(multiplayer_score_tracker_pid, player_name) do
  end
end
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成分数追踪器练习"
$ git push
```

我们自豪地提供我们的开源课程，供任何人以自己的节奏学习。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Score Tracker">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/genserver_drills.livemd">GenServer 练习</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/stack_server.livemd">栈服务器</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>