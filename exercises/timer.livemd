# 计时器

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timer">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/stack_server.livemd">堆栈服务器</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/testing_genservers.livemd">测试 GenServers</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 计时器

你将创建一个 `Timer` GenServer。

### 需求

* 初始计时器状态为整数 `0` 秒。
* 在生成后，`Timer` 应该每秒向自己发送一条消息以递增计时器。
* 创建 `start_link/1` 和 `get_time/1` 客户端 API 函数以启动计时器并检索当前时间。
* 定义任何必要的服务器回调。

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Timer.start_link([])
Timer.get_time(pid)
0
Process.sleep(1500)
Timer.seconds(pid)
1
```

请记住，我们无法保证在间隔发送消息时的完美时机，这不是本练习的目的。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule Timer do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def get_time(timer_pid) do
    GenServer.call(timer_pid, :get_time)
  end

  @impl true
  def init(_opts) do
    schedule_timer()
    {:ok, 0}
  end

  @impl true
  def handle_info(:increment, state) do
    schedule_timer()
    {:noreply, state + 1}
  end

  @impl true
  def handle_call(:get_time, _from, state) do
    {:reply, state, state}
  end

  defp schedule_timer do
    Process.send_after(self(), :increment, 1000)
  end
end
```

</details>

按照下面的文档实现 `Timer` 模块。

```elixir
defmodule Timer do
  @moduledoc """
  iex> {:ok, pid} = Timer.start_link([])
  iex> Timer.seconds(pid)
  0
  iex> Process.sleep(1200)
  iex> Timer.seconds(pid)
  1
  """
  use GenServer

  def start_link(_opts) do
  end

  def get_time(timer_pid) do
  end
end
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成计时器练习"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timer">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/stack_server.livemd">堆栈服务器</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/testing_genservers.livemd">测试 GenServers</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
