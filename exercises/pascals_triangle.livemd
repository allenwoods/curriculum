# Pascal's Triangle

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pascal's Triangle">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/factorial.livemd">阶乘</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/mix.livemd">Mix</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Pascal's Triangle

在这个练习中，你将生成一定行数的帕斯卡三角形。

在帕斯卡三角形中，每个数字是其上方两个整数的和。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
a[1]
b1[1]
b2[1]
c1[1]
c2[2]
c3[1]
d1[1]
d2[3]
d3[3]
d4[1]
e1[1]
e2[4]
e3[6]
e4[4]
e5[1]

a --> b1
a --> b2

b1 --> c1
b1 --> c2

b2 --> c2
b2 --> c3

c1 --> d1
c1 --> d2

c2 --> d2
c2 --> d3

c3 --> d3
c3 --> d4

d1 --> e1
d1 --> e2

d2 --> e2
d2 --> e3

d3 --> e3
d3 --> e4

d4 --> e4
d4 --> e5
```

<!-- livebook:{"break_markdown":true} -->

我们还可以将帕斯卡三角形表示为列表的列表。

<!-- livebook:{"force_markdown":true} -->

```elixir
[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
```

在下面的Elixir单元中，完成`Pascal`模块中的`of/1`函数，该函数将返回`n`行的帕斯卡三角形列表。

<!-- livebook:{"force_markdown":true} -->

```elixir
Pascal.of(1)
[
  [1]
]

Pascal.of(2)
[
  [1],
  [1, 1],
]

Pascal.of(5)
[
  [1],
  [1, 1],
  [1, 2, 1],
  [1, 3, 3, 1],
  [1, 4, 6, 4, 1]
]
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

以下解决方案有效，但性能不佳，因为它必须重新计算每一行。

```elixir
defmodule Pascal do
  def row(1), do: [1]
  def row(2), do: [1, 1]
  def row(n), do: [1 | Enum.chunk(row(n - 1), 2, 1) |> Enum.map(fn [a, b] -> a + b end)] ++ [1]

  def of(n) do
    Enum.map(1..n, &row/1)
  end
end
```

通过构建解决方案并引用前一个值，我们可以避免重新计算每一行。

```elixir
defmodule Pascal do
  def of(1), do: [[1]]
  def of(2), do: [[1], [1, 1]]

  def of(n) do
    Enum.reduce(3..n, [[1, 1], [1]], fn each, [prev | _] = acc ->
      row = [1 | Enum.chunk(prev, 2, 1) |> Enum.map(fn [a, b] -> a + b end)] ++ [1]
      [row | acc]
    end)
    |> Enum.reverse()
  end
end
```

</details>

```elixir
# Enum.map([[1,2], [2, 3]], )
```

```elixir
defmodule Pascal do
  @doc ~S"""
  生成`n`行的帕斯卡三角形。
  这个方法虽然不高效，但具有很好的可读性

  ## 示例

      iex> Pascal.of(1)
      [[1]]

      iex> Pascal.of(5)
      [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
  """
  def row(1), do: [1]
  def row(2), do: [1, 1]
  def row(n) do
    row = Enum.chunk_every(row(n - 1), 2, 1, :discard) |> Enum.map(fn [a, b] -> a + b end)
    [1 | row] ++ [1]
  end 

  def of(n) do
    Enum.map(1..n, &row/1)
  end
end

Pascal.of(5)
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成帕斯卡三角形练习"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受2023年6月至8月的课程申请。

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pascal's Triangle">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/factorial.livemd">阶乘</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/mix.livemd">Mix</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
