# Pokemon API

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:finch, "~> 0.16.0"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pokemon API">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/apis.livemd">APIs</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/rdbms.livemd">关系数据库管理系统</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Pokemon API

当我们依赖外部 API 时，它们可能会更改响应的格式，从而导致我们应用程序出现问题。

这就是为什么在检索信息时，将 API 的信息转换为结构体通常很重要。这样，如果 API 响应的格式发生变化，我们可以在一个地方修复问题，即我们将 API 响应转换为结构体的地方。我们还可以只保留我们想要的信息，而不是返回的所有数据。

通常，某些 API 会有特定于语言的实现，使与 API 的交互更容易。

你将创建一个 `Pokelixir` 项目，该项目使用 [Pokemon API](https://pokeapi.co/) 返回 Elixir 友好的 `Pokemon` 结构体。

## 初始化 Mix 项目

创建一个新的 `Pokelixir` mix 项目。

```
mix new pokelixir
```

将 [Finch](https://github.com/sneako/finch) 和 [Jason](https://github.com/michalmuskala/jason) 添加为依赖项。确保将 Finch 添加到应用程序的监督树中，如 Finch GitHub 上所述。

## 定义一个 Pokemon 结构体

`Pokemon` 结构体应具有以下（必需）键。我们已包含类型以便于理解，你不需要实现数据验证。

```mermaid
classDiagram
  class Pokemon {
    id: integer
    name: string
    hp: integer
    attack: integer
    defense: integer
    special_attack: integer
    special_defense: integer
    speed: integer
    weight: integer
    height: integer
    types: list of strings
  }
```

以下是作为 `Pokemon` 结构体表示的数据。

<!-- livebook:{"force_markdown":true} -->

```elixir
%Pokemon{
  id: 6,
  name: "charizard",
  hp: 78,
  attack: 84,
  defense: 78,
  special_attack: 109,
  special_defense: 85,
  speed: 100,
  height: 17,
  weight: 905,
  types: ["fire", "flying"]
}
```

## 获取一个 Pokemon

使用 [Pokemon API](https://pokeapi.co/)，你可以通过以下 URL 检索有关某个 pokemon 的信息，其中 `name` 是 pokemon 的名称。

```
https://pokeapi.co/api/v2/pokemon/name
```

例如，你可以通过向以下 URL 发出 HTTP GET 请求来检索 `charizard` 的统计数据。

```
https://pokeapi.co/api/v2/pokemon/charizard
```

你应该能够检索到 pokemon 的数据并将其返回为 `Pokemon` 结构体。

<!-- livebook:{"force_markdown":true} -->

```elixir
Pokelixir.get("charizard")
```

## 获取所有 Pokemon

你可以使用以下 URL 检索 pokemon 列表。

```
https://pokeapi.co/api/v2/pokemon
```

默认情况下，此 URL 仅显示前 `20` 个 pokemon，并提供一个 `"next"` URL 以检索下一个 `20` 个 pokemon。这是一种常见的 [分页](https://en.wikipedia.org/wiki/Pagination) 策略，以避免一次加载过多数据。

<details style="background-color: lightgrey; padding: 1rem; margin: 1rem 0;">
<summary>响应示例</summary>

```javascript
{
  "count": 1154,
  "next": "https://pokeapi.co/api/v2/pokemon?offset=20&limit=20",
  "previous": null,
  "results": [
    {
    "name": "bulbasaur",
    "url": "https://pokeapi.co/api/v2/pokemon/1/"
    },
    {
    "name": "ivysaur",
    "url": "https://pokeapi.co/api/v2/pokemon/2/"
    },
    {
    "name": "venusaur",
    "url": "https://pokeapi.co/api/v2/pokemon/3/"
    },
    {
    "name": "charmander",
    "url": "https://pokeapi.co/api/v2/pokemon/4/"
    },
    {
    "name": "charmeleon",
    "url": "https://pokeapi.co/api/v2/pokemon/5/"
    },
    {
    "name": "charizard",
    "url": "https://pokeapi.co/api/v2/pokemon/6/"
    },
    {
    "name": "squirtle",
    "url": "https://pokeapi.co/api/v2/pokemon/7/"
    },
    {
    "name": "wartortle",
    "url": "https://pokeapi.co/api/v2/pokemon/8/"
    },
    {
    "name": "blastoise",
    "url": "https://pokeapi.co/api/v2/pokemon/9/"
    },
    {
    "name": "caterpie",
    "url": "https://pokeapi.co/api/v2/pokemon/10/"
    },
    {
    "name": "metapod",
    "url": "https://pokeapi.co/api/v2/pokemon/11/"
    },
    {
    "name": "butterfree",
    "url": "https://pokeapi.co/api/v2/pokemon/12/"
    },
    {
    "name": "weedle",
    "url": "https://pokeapi.co/api/v2/pokemon/13/"
    },
    {
    "name": "kakuna",
    "url": "https://pokeapi.co/api/v2/pokemon/14/"
    },
    {
    "name": "beedrill",
    "url": "https://pokeapi.co/api/v2/pokemon/15/"
    },
    {
    "name": "pidgey",
    "url": "https://pokeapi.co/api/v2/pokemon/16/"
    },
    {
    "name": "pidgeotto",
    "url": "https://pokeapi.co/api/v2/pokemon/17/"
    },
    {
    "name": "pidgeot",
    "url": "https://pokeapi.co/api/v2/pokemon/18/"
    },
    {
    "name": "rattata",
    "url": "https://pokeapi.co/api/v2/pokemon/19/"
    },
    {
    "name": "raticate",
    "url": "https://pokeapi.co/api/v2/pokemon/20/"
    }
  ]
}
```

</details>

结果列表中的每个 pokemon 也都有一个 URL，你可以用来获取每个 pokemon 的信息。

https://pokeapi.co/api/v2/pokemon/6/

你应该能够为每个 pokemon 返回一个 `Pokemon` 结构体的列表。

<!-- livebook:{"force_markdown":true} -->

```elixir
Pokemon.all()
```

<details style="background-color: burlywood; padding: 1rem; margin: 1rem 0;">
<summary>提示</summary>

你可以使用 `"next"` URL 递归地检索下一个 `20` 个 pokemon，或者
你可以使用 `limit` 查询参数发出请求，设置一个大于 pokemon 数量的值。

</details>

## GitHub 仓库

将你的 `Pokelixir` 项目连接到 GitHub 仓库，并创建一个 README 来描述项目的目的以及你在构建过程中学到的内容。

如果你还没有考虑重构、添加文档和测试，请考虑这样做，以使其成为一个更好的简历项目。

## 提交你的进展

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进展。

```
$ git add .
$ git commit -m "完成 Pokemon API 练习"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pokemon API">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/apis.livemd">APIs</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/rdbms.livemd">关系数据库管理系统</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>