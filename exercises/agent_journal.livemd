# 代理日志

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Agent Journal">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/agents_and_ets.livemd">状态：代理和ETS</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/inventory_management.livemd">ETS库存管理</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 代理日志

在这个练习中，你将创建一个 `Journal` [代理](https://hexdocs.pm/elixir/Agent.html)，它将以字符串形式存储日志条目。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule Journal do
  use Agent

  def start_link(entries) do
    Agent.start_link(fn -> entries end)
  end

  def all_entries(pid, opts \\ []) do
    entries = Agent.get(pid, fn state -> state end)
    if opts[:order] == :desc, do: Enum.reverse(entries), else: entries
  end

  def add_entry(pid, entry) do
    # 使用 ++ 的性能不如前置。
    # 更优的解决方案是以反向顺序存储条目，以便可以前置。
    Agent.update(pid, fn state -> state ++ [entry] end)
  end
end
```

</details>

按照下面的文档实现 `Journal` 模块。

```elixir
defmodule Journal do
  @moduledoc """
  Documentation for `Journal`
  """
  use Agent

  @doc """
  启动代理进程。

  ## 示例

      默认。

      iex> {:ok, pid} = Journal.start_link([])

      带有初始条目。

      iex> {:ok, pid} = Journal.start_link(["Entry1", "Entry 2"])
  """
  def start_link(_opts) do
  end

  @doc """
  获取所有日志条目。

  ## 示例
      
      空日志。
      
      iex> {:ok, pid} = Journal.start_link([])
      iex> Journal.all_entries(pid)
      []

      带有条目的日志。条目按升序返回（最旧的条目优先）。

      iex> {:ok, pid} = Journal.start_link(["Entry 1", "Entry 2"])
      iex> Journal.all_entries(pid)
      ["Entry 1", "Entry 2"]
       
      升序（默认）。
      
      iex> {:ok, pid} = Journal.start_link(["Entry 1", "Entry 2"])
      iex> Journal.all_entries(pid, order: :asc)
      ["Entry 1", "Entry 2"]

      降序。

      iex> {:ok, pid} = Journal.start_link(["Entry 1", "Entry 2"])
      iex> Journal.all_entries(pid, order: :desc)
      ["Entry 2", "Entry 1"]
  """
  def all_entries(pid, opts \\ []) do
  end

  @doc """
  添加日志条目。

  ## 示例

    iex> {:ok, pid} = Journal.start_link([])
    iex> Journal.add_entry(pid, "Entry 1")
    :ok
    iex> Journal.add_entry(pid, "Entry 2")
    :ok
    iex> Journal.all_entries(pid)
    ["Entry 1", "Entry 2"]
  """
  def add_entry(pid, entry) do
  end
end
```

```elixir
:
```

## 奖励：高级日志

在你的原始日志基础上扩展几个附加功能。日志条目现在将作为一个结构体存储，包含 `:id`、`:title`、`:content`、`:updated_at` 和 `created_at` 字段。强制所有键。

<!-- livebook:{"force_markdown":true} -->

```elixir
example_entry = %AdvancedJournal{
  # ids 从 `0` 开始，并随着每个新条目的增加而自动递增。
  id: 0,
  title: "标题",
  content: "内容",
  created_at: DateTime.utc_now(),
  updated_at: DateTime.utc_now()
}
```

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule AdvancedJournal do
  use Agent

  @enforce_keys [:id, :title, :content, :created_at, :updated_at]
  defstruct @enforce_keys

  def start_link(entry_attrs) do
    entries =
      entry_attrs
      |> Enum.with_index()
      |> Enum.map(fn {attrs, index} -> make_entry(index, attrs) end)
      |> Enum.reverse()

    Agent.start_link(fn -> %{entries: entries, current_index: Enum.count(entries)} end)
  end

  def all_entries(pid, opts \\ []) do
    entries = Agent.get(pid, fn state -> state.entries end)
    if opts[:order] == :desc, do: entries, else: Enum.reverse(entries)
  end

  def add_entry(pid, attrs) do
    Agent.update(pid, fn state ->
      entry = make_entry(state.current_index, attrs)

      %{
        state
        | current_index: state.current_index + 1,
          entries: [entry | state.entries]
      }
    end)
  end

  def update_entry(pid, id, attrs) do
    Agent.update(pid, fn state ->
      index = Enum.find_index(state.entries, fn entry -> entry.id == id end)

      new_entries = List.update_at(state.entries, index, fn entry -> Map.merge(entry, attrs) end)

      %{state | entries: new_entries}
    end)
  end

  def delete_entry(pid, id) do
    Agent.update(pid, fn state ->
      new_entries = Enum.reject(state.entries, fn entry -> entry.id == id end)
      %{state | entries: new_entries}
    end)
  end

  def make_entry(index, attrs) do
    %__MODULE__{
      id: index,
      title: attrs[:title] || "",
      content: attrs[:content] || "",
      created_at: DateTime.utc_now(),
      updated_at: DateTime.utc_now()
    }
  end
end
```

</details>

使用 [Agent](https://hexdocs.pm/elixir/Agent.html) 按照下面的文档实现 `AdvancedJournal`。

```elixir
defmodule AdvancedJournal do
  @moduledoc """
  Documentation for `AdvancedJournal`
  """
  use Agent

  @doc """
  启动代理进程

  ## 示例

      默认。

      iex> {:ok, pid} = AdvancedJournal.start_link([])

      带有初始条目。

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Entry 1", content: "Entry 1 Content"}])
  """
  def start_link(opts) do
  end

  @doc """
  返回所有条目。条目在创建时自动分配一个从 `0` 开始的 `:id`。`:created_at` 和 `:updated_at` 字段应为创建时的当前 UTC [DateTime](https://hexdocs.pm/elixir/DateTime.html)。

  我们不在文档测试中包含 `:created_at` 和 `:updated_at`，因为时间上的小差异可能导致这些测试失败。

  ## 示例

      空日志。

      iex> {:ok, pid} = AdvancedJournal.start_link([])
      iex> AdvancedJournal.all_entries(pid)
      []

      一条条目。 

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Title", content: "Content"}])
      iex> [%AdvancedJournal{id: 0, title: "Title", content: "Content", created_at: _, updated_at: _}] = AdvancedJournal.all_entries(pid)

      多条条目。默认按升序排列。

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Entry 1", content: "Entry 1"}, %{title: "Entry 2", content: "Entry 2"}])
      iex>
      ..>[
      ..>  %AdvancedJournal{id: 0, title: "Entry 1", content: "Entry 1", created_at: _, updated_at: _},
      ..>  %AdvancedJournal{id: 1, title: "Entry 2", content: "Entry 2", created_at: _, updated_at: _}
      ..>] = AdvancedJournal.all_entries(pid)

      升序（默认）。

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Entry 1", content: "Entry 1"}, %{title: "Entry 2", content: "Entry 2"}])
      iex>
      ..>[
      ..>  %AdvancedJournal{id: 0, title: "Entry 1", content: "Entry 1", created_at: _, updated_at: _},
      ..>  %AdvancedJournal{id: 1, title: "Entry 2", content: "Entry 2", created_at: _, updated_at: _}
      ..>] = AdvancedJournal.all_entries(pid, order: :asc)

      降序。

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Entry 1", content: "Entry 1"}, %{title: "Entry 2", content: "Entry 2"}])
      iex>
      ..>[
      ..>  %AdvancedJournal{id: 1, title: "Entry 2", content: "Entry 2", created_at: _, updated_at: _}
      ..>  %AdvancedJournal{id: 0, title: "Entry 1", content: "Entry 1", created_at: _, updated_at: _},
      ..>] = AdvancedJournal.all_entries(pid, order: :desc)
  """
  def all_entries(pid, opts \\ []) do
  end

  @doc """
  添加日志条目。自动创建 `:id`、`:created_at` 和 `:updated_at` 字段。

  ## 示例

      一条条目。

      iex> {:ok, pid} = AdvancedJournal.start_link([])
      iex> AdvancedJournal.add_entry(pid, %{title: "Title", content: "Content"})
      iex> [%AdvancedJournal{id: 0, title: "Title", content: "Content", created_at: _, updated_at: _}] = AdvancedJournal.all_entries(pid)

      多条条目。

      iex> {:ok, pid} = AdvancedJournal.start_link([])
      iex> AdvancedJournal.add_entry(pid, %{title: "Entry 1", content: "Entry 1"})
      iex> AdvancedJournal.add_entry(pid, %{title: "Entry 2", content: "Entry 2"})
      iex>
      ..>[
      ..>  %AdvancedJournal{id: 0, title: "Entry 1", content: "Entry 1", created_at: _, updated_at: _}
      ..>  %AdvancedJournal{id: 1, title: "Entry 2", content: "Entry 2", created_at: _, updated_at: _},
      ..>] = AdvancedJournal.all_entries(pid)
  """
  def add_entry(pid, attrs) do
  end

  @doc """
  更新日志条目。 
  这应该自动将 `:updated_at` 字段设置为当前 [DateTime](https://hexdocs.pm/elixir/DateTime.html)。

  ## 示例

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Title", content: "Content"}])
      iex> AdvancedJournal.update_entry(pid, 0, %{title: "Updated Title", content: "Updated Content"})
      iex> [%AdvancedJournal{id: 0, title: "Updated Title", content: "Updated Content", created_at: _, updated_at: _}] = AdvancedJournal.all_entries(pid)
  """
  def update_entry(pid, id, attrs) do
  end

  @doc """
  根据其 ID 删除日志条目。

  ## 示例

      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: "Title", content: "Content"}])
      iex> AdvancedJournal.delete_entry(pid, 0)
      iex> []
  """
  def delete_entry(pid, id, attrs) do
  end
end
```

## 提交你的进展

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进展。

```
$ git add .
$ git commit -m "完成代理日志练习"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Agent Journal">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/agents_and_ets.livemd">状态：代理和ETS</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/inventory_management.livemd">ETS库存管理</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>