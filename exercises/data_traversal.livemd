# 数据遍历

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Data Traversal">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/custom_enum_with_reduce.livemd">自定义枚举与归约</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/datetime.livemd">日期和时间</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 数据遍历

`Enum.reduce/3` 通常用于遍历复杂或嵌套的数据结构。

你将创建一个 `DataTraversal` 模块，可以执行一些复杂的数据遍历操作。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule DataTraversal do
  def sum_keyword_list(keyword_list) do
    Enum.reduce(keyword_list, 0, fn {_key, value}, acc -> value + acc end)
  end

  def aggregate(keyword_list) do
    Enum.reduce(keyword_list, [], fn {key, value}, acc ->
      previous = acc[key] || 0
      Keyword.put(acc, key, previous + value)
    end)
    |> Enum.sort()
  end

  def merge_maps(maps) do
    Enum.reduce(maps, %{}, fn map, acc ->
      Map.merge(acc, map)
    end)
  end
end
```

</details>

按照下面的文档实现 `DataTraversal` 模块。

```elixir
defmodule DataTraversal do
  @doc """
  求和关键字列表中的所有整数值。键不重要。

  iex> DataTraversal.sum([key: 10, key: 20, key: 30])
  60
  """
  def sum(keyword_list) do
  end

  @doc """
  聚合关键字列表中具有相同键的值。
  确保聚合值使用 Enum.sort/1 排序。

  iex> DataTraversal.aggregate([key1: 10, key1: 20, key2: 30, key2: 20])
  [key1: 30, key2: 50]
  """
  def aggregate(keyword_list) do
  end

  @doc """
  合并一组映射。新值将替换旧值。

  iex> maps = [%{keya: "a"}, %{keyb: "b"}, %{keyc: "c"}, %{keyc: "c2"}]
  iex> DataTraversal.merge_maps(maps)
  %{keya: "a", keyb: "b", keyc: "c2"}
  """
  def merge_maps(maps) do
  end
end
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 确保没有不必要的更改。
然后在 `curriculum` 文件夹中运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成数据遍历练习"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Data Traversal">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/custom_enum_with_reduce.livemd">自定义枚举与归约</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/datetime.livemd">日期和时间</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>