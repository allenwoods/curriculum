# 进程邮箱

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Process Mailbox">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/process_drills.livemd">进程练习</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/genservers.livemd">GenServers</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 进程邮箱

使用 [spawn/1](https://hexdocs.pm/elixir/Kernel.html#spawn/1)、[send/2](https://hexdocs.pm/elixir/Kernel.html#send/2) 和 `receive`，你将创建一个 `Mailbox` 进程，该进程递归地发送和接收消息。

<!-- livebook:{"break_markdown":true} -->

### 启动邮箱

`Mailbox` 应该递归循环并等待接收消息。

<!-- livebook:{"force_markdown":true} -->

```elixir
maibox_process = spawn(fn -> Mailbox.loop() end)
```

<!-- livebook:{"break_markdown":true} -->

### 发送邮件

向邮箱进程发送一个 `{:send, message}` 消息，它应该存储该消息。

<!-- livebook:{"force_markdown":true} -->

```elixir
send(mailbox_process, {:send, "你有邮件！"})
```

<!-- livebook:{"break_markdown":true} -->

### 读取邮件

向邮箱进程发送一个 `{:read, from_pid}` 消息，它应该将最近的消息发送回发送者，并将其从邮箱中移除。

<!-- livebook:{"force_markdown":true} -->

```elixir
send(mailbox_process, {:read, self()})

receive do
  message -> message 
end
# 返回 "你有邮件！"
```

如果没有消息，发送一个 `:empty` 消息回去。

<!-- livebook:{"force_markdown":true} -->

```elixir
send(mailbox_process, {:read, self()})

receive do
  message -> message 
end
# 返回 :empty
```

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule Mailbox do
  def loop(state \\ []) do
    receive do
      {:send, message} ->
        IO.inspect(message)
        loop([message | state])

      {:read, from_pid} ->
        case state do
          [head | tail] ->
            send(from_pid, head)
            loop(tail)

          [] ->
            send(from_pid, :empty)
            loop([])
        end
    end
  end
end
```

</details>

```elixir
defmodule Mailbox do
  @moduledoc """
  `Mailbox` 的文档
  """

  @doc """
  递归循环并接收消息。
  如果没有实现，这个 doctest 将超时。

  ## 示例

      iex> mailbox_process = spawn(fn -> Mailbox.loop() end)
      iex> send(mailbox_process, {:send, "你好！"})
      iex> send(mailbox_process, {:read, self()})
      iex> receive do
      ...>  message -> message 
      ...> end
      "你好！"
  """
  def loop(state \\ []) do
    receive do
      {:send, message} ->
        IO.inspect(message)
        loop([message | state])

      {:read, from_pid} ->
        case state do
          [head | tail] ->
            send(from_pid, head)
            loop(tail)

          [] ->
            send(from_pid, :empty)
            loop([])
        end
    end
  end
end
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成进程邮箱练习"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Process Mailbox">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/process_drills.livemd">进程练习</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/genservers.livemd">GenServers</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
