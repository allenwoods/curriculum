# 自定义断言

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Assertions">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/meta_math.livemd">MetaMath</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/queues.livemd">队列</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 自定义断言

创建一个 `CustomAssertion.assert` 宏，它提供以下格式的测试反馈：

<!-- livebook:{"force_markdown":true} -->

```elixir
"""
使用 `==` 的断言失败。

左侧: 1
右侧: 2
"""
```

你的解决方案应该适用于 `==`、`>`、`<`、`<=`、`>=` 和 `===` 操作符。

如果断言通过，则打印 `"成功"` 消息。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

如果我们想完全控制结果，一种解决方案是为每个操作符使用多个函数头（或任何控制流手段）。然而，如果我们没有为每个操作符提供自定义消息，我们可以巧妙地使用 `apply/3` 函数来保持解决方案的简洁。

```elixir
defmodule CustomAssertion do
  @success "成功！"

  def check(operator, left, right) do
    if apply(Kernel, operator, [left, right]) do
      @success
    else
      """
      使用 #{operator} 的断言失败。
      左侧: #{left}
      右侧: #{right}
      """
    end
  end

  defmacro assert({operator, _meta, [left, right]}) do
    quote do
      CustomAssertion.check(unquote(operator), unquote(left), unquote(right))
    end
  end
end
```

</details>

```elixir
defmodule CustomAssertion do
  defmacro assert({operator, _meta, [left, right]}) do
  end
end
```

你的解决方案应该能够显示以下断言的失败消息。

```elixir
require CustomAssertion

CustomAssertion.assert(1 == 2) |> IO.puts()
CustomAssertion.assert(1 === 2) |> IO.puts()
CustomAssertion.assert(1 > 2) |> IO.puts()
CustomAssertion.assert(1 >= 2) |> IO.puts()
CustomAssertion.assert(2 < 1) |> IO.puts()
CustomAssertion.assert(2 <= 1) |> IO.puts()
```

你的解决方案应该显示以下断言的成功消息。

```elixir
require CustomAssertion

CustomAssertion.assert(1 == 1) |> IO.puts()
CustomAssertion.assert(1 === 1) |> IO.puts()
CustomAssertion.assert(2 > 1) |> IO.puts()
CustomAssertion.assert(1 >= 1) |> IO.puts()
CustomAssertion.assert(1 < 2) |> IO.puts()
CustomAssertion.assert(1 <= 1) |> IO.puts()
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成自定义断言练习"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Assertions">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/meta_math.livemd">MetaMath</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/queues.livemd">队列</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>