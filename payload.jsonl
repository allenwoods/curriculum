{"custom_id": "task0-reading-phoenix_and_ecto", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Phoenix And Ecto\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix And Ecto\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/group_project_blog.livemd\">Group Project: Blog</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_posts.livemd\">Blog: Posts</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we generate a resource in a Phoenix application?\n* Explain Contexts, Schemas, Migrations, and Repo.\n\n## Overview\n\nThis is a companion reading for the [Blog: Posts](../exercises/blog_posts.livemd) exercise. This lesson is an overview of how to work with a database using Ecto in a Phoenix application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Ecto\n\n[Ecto](https://hexdocs.pm/ecto/Ecto.html) provides a standard API layer for communicating with the database of an Elixir application.\n\nBy default, [Ecto](https://hexdocs.pm/ecto/Ecto.html) uses a [PostgreSQL](https://www.postgresql.org/) Database. Ensure you already have [PostgreSQL](https://www.postgresql.org/) installed on your computer.\n\n[Ecto](https://hexdocs.pm/ecto/Ecto.html) splits into four main modules.\n\n* [Ecto.Repo](https://hexdocs.pm/ecto/Ecto.Repo.html) handles all communication between the application and the database. `Ecto.Repo` reads and writes from the underlying PostgreSQL database.\n* [Ecto.Query](https://hexdocs.pm/ecto/Ecto.Query.html) built queries to retrieve and manipulate data with the `Ecto.Repo` repository.\n* [Ecto.Schema](https://hexdocs.pm/ecto/Ecto.Schema.html) maps the application struct data representation to the underlying PostgreSQL database representation.\n* [Ecto.Changeset](https://hexdocs.pm/ecto/Ecto.Changeset.html) creates changesets for validating and applying constraints to structs.\n\n[Phoenix](https://hexdocs.pm/phoenix/Phoenix.html) uses [Ecto](https://hexdocs.pm/ecto/Ecto.html) to handle the data layer of a web application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Domain\n\nIn a Phoenix application, by default, there are four main modules responsible for managing business logic and the domain of our application. They are:\n\n* **Contexts**: They encapsulate specific domain areas, define the business logic and data access functions, and provide an API to expose functionality to other parts of the application.\n\n* **Schemas**: They define the structure of the data entities in the domain, including fields, types, and constraints.\n\n* **Repo**: It provides an abstraction layer for interacting with the database, encapsulating queries, and providing a clean interface to perform CRUD operations on the entities defined in **Schema** modules.\n\n* **Migrations**: They define changes to the database schema over time, such as creating or updating tables and columns.\n\nTogether, these modules provide a way to model the business logic and data entities in the application and work with a database. Note that we are not limited to these modules, but this is how Phoenix organizes an application by default.\n\n## Generators\n\nWe can define all of the necessary modules and boilerplate for part of our domain using the phoenix generators.\n\nFor example, we could generate posts in a blog project with the following command.\n\n```\nmix phx.gen.html Posts Post posts title:string body:text\n```\n\nThe command above would to the following:\n\n* Create a **Posts** context.\n* Create a **Post** schema\n* Creates a **posts** table in the database with the `title:string` and `body:text` fields. See the [Attributes](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Schema.html#module-attributes) documentation for a complete list of attribute types.\n\nIt also generates boilerplate for the web layer of our application including the controller, component, and template. It does not generate routes for our router though, as these have to be manually inserted.\n\nSee [mix phx.gen](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.html) for a complete list of phoenix generators.\n\n## Context\n\nPhoenix contexts are a way of organizing related functionality in a Phoenix application. Each context represents a coherent set of operations that relate to a specific domain or aspect of the application's functionality.\n\nFor example, we might have a `Blog` application with a `Posts` context that manages all operations for creating, editing, and deleting blog posts.\n\nHere's an example context module for a `Posts` context. We can see functions work with the `Post` schema and the `Repo` module to retrieve, create, edit, and delete posts in the database.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Posts do\n  import Ecto.Query, warn: false\n  alias Blog.Repo\n\n  alias Blog.Posts.Post\n\n  def list_posts do\n    Repo.all(Post)\n  end\n\n  def get_post!(id), do: Repo.get!(Post, id)\n\n  def create_post(attrs \\\\ %{}) do\n    %Post{}\n    |> Post.changeset(attrs)\n    |> Repo.insert()\n  end\n\n  def update_post(%Post{} = post, attrs) do\n    post\n    |> Post.changeset(attrs)\n    |> Repo.update()\n  end\n\n  def delete_post(%Post{} = post) do\n    Repo.delete(post)\n  end\n\n  def change_post(%Post{} = post, attrs \\\\ %{}) do\n    Post.changeset(post, attrs)\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Ecto.Query\n\n`Ecto.Query` is imported in the example above. Contexts often work with `Ecto.Query` when writing queries for retrieving and manipulating data in a database.\n\nHere's an example query that allows us to filter a list of posts query by a case insensitive and partially matching `title` field.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef list_posts(title) do\n  search = \"%#{title}%\"\n  query = from p in Post, where: ilike(p.title, ^search)\n\n  Repo.all(query)\nend\n```\n\n[ilike](https://hexdocs.pm/ecto/Ecto.Query.API.html#ilike/2) allows us to search a case insensitive string. The `%` symbol acts as a wildcard to find partially matching searches.\n\n[from/2](https://hexdocs.pm/ecto/Ecto.Query.html#from/2) selects the table to query, and [where/3](https://hexdocs.pm/ecto/Ecto.Query.html#where/3) filters the list of results.\n\nEcto allows for a pipeable syntax that some developers prefer. For example, the above could also be written as:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  def list_posts(title) do\n    search = \"%#{title}%\"\n    Post\n    |> where([p], ilike(p.title, ^search))\n    |> Repo.all()\n  end\n```\n\n## Schema\n\nIn Ecto, a schema is a module that defines the structure and properties of a database table. The schema maps the fields of the table to the fields of the struct in the module, and it also defines any constraints or validations on those fields.\n\nHere's an example of a `Post` schema that defines a post with `title`, `subtitle`, and `content` fields. We also see the `changeset/2` function used to define a `Post` changeset used with the `Repo` module earlier in the `Posts` context when creating or updating data.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Posts.Post do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"posts\" do\n    field :content, :string\n    field :subtitle, :string\n    field :title, :string\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(post, attrs) do\n    post\n    |> cast(attrs, [:title, :subtitle, :content])\n    |> validate_required([:title, :subtitle, :content])\n  end\nend\n```\n\nThe [Ecto.schema/2](https://hexdocs.pm/ecto/Ecto.Schema.html#schema/2) and [field/3](https://hexdocs.pm/ecto/Ecto.Schema.html#field/3) macros define the fields and the data types of those fields. The Schema maps the fields of the PostgreSQL table into valid Elixir terms in a `Post` struct to make records in the database elixir-friendly when we work with them. You can find the full list of valid field types at [Ecto.Schema: Types and casting](https://hexdocs.pm/ecto/Ecto.Schema.html#module-types-and-casting).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Validations And Constraints\n\nValidations ensure data is valid before entering the database. Constraints are rules enforced by the database.\n\nFor example, the [validate_required/3](https://hexdocs.pm/ecto/Ecto.Changeset.html#validate_required/3) validates that a field exists before inserting it into the database.\n\nHowever, we might add a [unique_constraint](https://hexdocs.pm/ecto/Ecto.Changeset.html#unique_constraint/3) that ensures a title is unique when compared with other posts in the database. This requires querying the database under the hood.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef changeset(post, attrs) do\n    post\n    |> cast(attrs, [:title, :subtitle, :content])\n    |> validate_required([:title, :subtitle, :content])\n    |> unique_constraint(:title)\n  end\n```\n\n## Migration\n\nMigrations are used to make changes to a database schema over time, as the requirements of an application evolve. Here's an example of a `CreatePosts` migration that would create a `posts` table in the database.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.CreatePosts do\n  use Ecto.Migration\n\n  def change do\n    create table(:posts) do\n      add :title, :string\n      add :subtitle, :string\n      add :content, :text\n\n      timestamps()\n    end\n    create unique_index(:posts, [:title])\n  end\nend\n```\n\nThe [Ecto.Migration](https://hexdocs.pm/ecto_sql/Ecto.Migration.html) module provides functions for manipulating tables and fields in a table. The [create/2](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#create/2) macro creates a new table in the database and the [add/3](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#add/3) adds a new column to the table.\n\nYou can use any of the [Elixir Primitive Types](https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types) and they will be converted to the appropriate [Field Type](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#module-field-types) for your database.\n\nSome database field types which are not Elixir primitive types such as `:text` can be given directly.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Generating Migrations\n\nMigrations should always be generated rather than manually created to add a timestamp to the migration file. For example, the example above might be in a file `priv/repo/migrations/20230508221034_create_posts.ex`\n\nMigrations can be created individually using the [mix ecto.gen.migration](https://hexdocs.pm/ecto_sql/Mix.Tasks.Ecto.Gen.Migration.html) command with the name of the migration.\n\nHere's an example where `create_posts` is the name of the migration.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ mix ecto.gen.migration create_posts\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Running Migrations\n\nMigrations are run in chronological order based on the timestamp, so they can be run or reset anytime using the following commands:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Run Migrations\n$ mix ecto.migrate\n\n# Reset The Database And Re-run Migrations\n$ mix ecto.reset\n```\n\nYou can also rollback migrations with [mix ecto.rollback](https://hexdocs.pm/ecto_sql/Mix.Tasks.Ecto.Rollback.html). There are options that allow you to rollback specific migrations.\n\n```\n$ mix ecto.rollback\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Manipulating Tables\n\nEcto provides functions for manipulating tables in a database. Here are a few common functions:\n\n* [create/2](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#create/2): creates a new table in the database\n* [alter/2](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#alter/2): modifies an existing table in the database\n* [rename/2](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#rename/2): renames an existing table in the database\n* [drop/2](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#drop/2): removes an existing table from the database\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Manipulating Fields\n\n[Ecto.Migration](https://hexdocs.pm/ecto_sql/Ecto.Migration.html) provides functions for manipulating fields in a table. Here are a few to get you started.\n\n* [add/3](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#add/3) adds a new field to the table.\n* [modify/2](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#modify/3) modifies an existing field in the table.\n* [remove/2](https://hexdocs.pm/ecto/Ecto.Migration.html#remove/1) removes an existing field from the table.\n\nHere is an example migration that uses some of these Ecto functions to manipulate fields on a table:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule MyApp.Repo.Migrations.AlterUsersTable do\n  use Ecto.Migration\n\n  def change do\n    alter table(:users) do\n      add :phone, :string\n\n      modify :email, :string, unique: true\n      modify :name, :string, null: false\n\n      remove :age\n    end\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Schemas Reflect Migrations\n\nThe schema maps the fields of our database table into Elixir data. A migration may involve changing the data type or structure of an existing column, which would in turn require updating the schema to reflect these changes. Always ensure the schema reflects the latest version of a table in the database.\n\n## Query\n\nThe [Ecto.Query](https://hexdocs.pm/ecto/Ecto.Query.html) module defines functions for creating database queries. Queries themselves do not manipulate data in the database, but are instead a set of instructions to perform some operation in the database typically provided the [Ecto.Repo](https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2) that performs the actual work on the Database.\n\nHere are some common functions:\n\n* [from/2](https://hexdocs.pm/ecto/Ecto.Query.html#from/2): Defines the table or tables to query\n* [where/3](https://hexdocs.pm/ecto/Ecto.Query.html#where/3): Specifies a condition that records must meet to be included in the query results.\n* [order_by/3](https://hexdocs.pm/ecto/Ecto.Query.html#order_by/3): Sorts the query results by one or more fields.\n* [select/3](https://hexdocs.pm/ecto/Ecto.Query.html#select/3): Specifies which fields to include in the query results.\n* [type](https://hexdocs.pm/ecto/Ecto.Query.API.html#type/2): Returns a new query object with a specific type. Often useful when providing Elixir terms in queries to convert them into a database type.\n\nHere's an example query using keyword list syntax. The `^` symbol is used to inject Elixir terms into a database query. Elixir terms must be bound to a variable to inject them.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nsearch = \"%#{title}%\"\n\ntoday = DateTime.utc_now()\n\nquery =\n  from(p in Post,\n    where: ilike(p.title, ^search),\n    where: p.visible,\n    where: p.published_on <= type(^today, :utc_datetime),\n    order_by: [desc: p.published_on]\n  )\n```\n\nThe same query could be written using an alternative [pipe-based syntax](https://hexdocs.pm/ecto/Ecto.Query.html#module-macro-api) like so:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nquery =\n  Post\n  |> where([p], ilike(p.title, ^search))\n  |> where([p], p.visible)\n  |> where([p], p.published_on <= type(^today, :utc_datetime))\n  |> order_by([p], desc: p.published_on)\n```\n\n## Repo\n\nThe [Ecto.Repo](https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2) module defines functions for working with the database. Anytime we need to manipulate records in the database we work with the `Repo` module.\n\nHere are some common functions:\n\n* [Repo.all](https://hexdocs.pm/ecto/Ecto.Repo.html#c:all/2): get all records.\n* [Repo.get!](https://hexdocs.pm/ecto/Ecto.Repo.html#c:get!/3): get one record.\n* [Repo.insert/2](https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert/2): insert a record.\n* [Repo.update](https://hexdocs.pm/ecto/Ecto.Repo.html#c:update/2): update existing record.\n* [Repo.delete](https://hexdocs.pm/ecto/Ecto.Repo.html#c:delete/2): delete record.\n\nThese cover the full range of CRUD (create, read, update, delete) actions. Typically these functions will work in combination with the Schema module that defines a struct and a schema.\n\nFor example, here's an example of how we use a `Post` struct to create a changeset that is then passed to the `Repo.insert/2` function to insert a new post into the database.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%Post{}\n|> Post.changeset(%{title: \"some title\", subtitle: \"some subtitle\" content: \"some content\"})\n|> Repo.insert()\n```\n\n## Entity Relationship Diagrams\n\nProjects often use Entity Relationship Diagrams or UML (Unified Modelling Language) diagrams of some kind to represent the data layer of the application.\n\nLivebook let's us write Entity Relationship Diagrams directly. See [Mermaid: Entity Relationship Diagrams](https://mermaid.js.org/syntax/entityRelationshipDiagram.html) for an overview of the syntax.\n\nIt's important to be able to read these diagrams. Here's an example:\n\n```mermaid\nerDiagram\n\nComment {\n  id post_id\n  text content\n}\n\nPost {\n  string title\n  text content\n  date published_on\n  boolean visibility\n}\n\nPost ||--O{ Comment : \"has many\"\n```\n\nThe above diagram describes both the fields and types of the data, as well as the associations between data.\n\nThe pipe `||` in the line between `Post` and `Comment` represents **one** and the triple-lined-arrow with a circle represents **zero or more**. This describes the **one to many** relationship between posts and comments.\n\nThe `post_id` field isn't strictly necessary given the diagram arrow implies the child contains a foreign key id but we've included it for sake of clarity.\n\n## Seeding\n\nPhoenix projects include a `priv/repo/seeds.exs` file for creating data (seeding) the database.\n\nThe `seed.exs` file can be run with the following command from the project folder:\n\n```\nmix run priv/repo/seeds.exs\n```\n\nTypically seed files work with the `Repo` module or functions in contexts to create data for manual testing purposes.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nBlog.Repo.insert!(%Blog.Posts.Post{\n  title: \"Some Title\",\n  subtitle: \"Some Subtitle\",\n  content: \"Some Content\",\n})\n\nBlog.Posts.create_post(%{\n  title: \"Some Title\",\n  subtitle: \"Some Subtitle\",\n  content: \"Some Content\",\n})\n```\n\nSeed files should not be run in the test environment, as they can interfere with test assertions.\n\nSeeds files are automatically run when resetting the database.\n\n```\nmix ecto.reset\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Phoenix Generators: mix phx.gen](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.html#content)\n* [Phoenix HTML Generator: mix phx.gen.html](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.html#content)\n* [Phoenix Schema Generator Types](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Schema.html#module-attributes)\n* [Pragmatic Bookshelf: Programming Ecto](https://pragprog.com/titles/wmecto/programming-ecto/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phoenix And Ecto reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix And Ecto\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/group_project_blog.livemd\">Group Project: Blog</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_posts.livemd\">Blog: Posts</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task1-reading-phoenix_1.7", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"Phoenix%201.7%20Architecture%20Diagram.png\",\"type\":\"attachment\"}]} -->\n\n# Phoenix 1.7\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix 1.7\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/sql_drills.livemd\">SQL Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/web_servers.livemd\">Web Servers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* What are body params, url params, and query params in an HTTP request?\n* What is the conn?\n* What are the layers of a Phoenix application?\n\n## Overview\n\n### Phoenix 1.7\n\nPhoenix 1.7 introduced several significant changes compared with Phoenix 1.6. See the [Release Announcement](https://phoenixframework.org/blog/phoenix-1.7-final-released) for a full overview of changes made. One of the most significant changes was [Replacing Phoenix.View with Phoenix.Component](https://hexdocs.pm/phoenix_view/2.0.0/Phoenix.View.html#module-replaced-by-phoenix-component). In addition, Phoenix now comes with Tailwind out of the box.\n\nPhoenix 1.7 also introduced [Verified Routes](https://hexdocs.pm/phoenix/1.7.0-rc.0/Phoenix.VerifiedRoutes.html) using the `~p` sigil. These routes replace [Path Helpers](https://hexdocs.pm/phoenix/routing.html#path-helpers).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n~p\"/home\"\n```\n\nMany projects in the Elixir ecosystem will still use Phoenix 1.6 or older. While this course focuses on Phoenix 1.7, consider reading the previous [Phoenix 1.6](./deprecated_phoenix_1.6.livemd) section to learn more about the older version.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Phoenix\n\nThe [Phoenix Framework](https://phoenixframework.org/) is the most popular web development framework for Elixir. Using Phoenix, we can build rich interactive and real-time web applications quickly.\n\n[Chris McCord](http://chrismccord.com/), the creator of Phoenix, has an excellent video to demonstrate the power of Phoenix. You may follow along and build a Twitter clone application in only 15 minutes.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=MZvmYaFkNJI\\\")\",\"title\":\"Build a real-time Twitter clone in 15 minutes with LiveView\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=MZvmYaFkNJI\")\n```\n\nThe video above uses [Phoenix LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html) to create interactive and real-time features. We will cover LiveView in a future lesson.\n\n## Model View Controller (MVC) Architecture\n\nPhoenix is heavily influenced by MVC architecture, where an application is broken into several layers using [Model-View-Controller (MVC)](https://en.wikipedia.org/wiki/Model\u2013view\u2013controller) architecture.\n\n* **Model**: Manages the data and business logic of the application.\n* **View**: Represents visual information.\n* **Controller**: Handles requests and manipulates the model/view to respond to the user.\n\nMore recently, Phoenix has been breaking away from strict MVC architecture, but understanding this style of architecture will help us better understand the overall design choices behind Phoenix.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![test](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/300px-MVC-Process.svg.png)\n\n> source: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Plug\n\nUnder the hood, Phoenix uses the [Plug](https://hexdocs.pm/plug/readme.html) specification for composing a web application with functions. Plugs are functions that transform a `conn` (connection) data structure.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph Input\n  CP[conn, params]\nend\nsubgraph Output\n  C[conn]\nend\nOutput[conn]\nP[Plug Function]\nInput --> P --> Output\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nPhoenix sets up a pipeline of plugs and uses the transformed `conn` [Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) struct to return a response to the client.\n\nPlug uses [Cowboy](https://github.com/ninenines/cowboy), a small and fast HTTP web server. Cowboy uses [Ranch](https://github.com/ninenines/ranch) to manage the underlying TCP connections for the web server.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart TB\nP[Phoenix]\nPG[Plug]\nC[Cowboy]\nR[Ranch]\nP --> PG --> C --> R\n\nclick P \"https://hexdocs.pm/phoenix/overview.html\"\nclick PG \"https://hexdocs.pm/plug/readme.html\"\nclick C \"https://github.com/ninenines/cowboy\"\nclick R \"https://github.com/ninenines/ranch\"\n```\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Layered Architecture\n\nPhoenix breaks the complexity of our application into several layers with different responsibilities. Separating an application into layers simplifies reasoning about and collaborating on complex applications.\n\nPhoenix generates the following layers of our architecture by default.\n\n* **Endpoint**: The boundary layer of the application.\n* **Router**: Routes the request to the correct controller.\n* **Controller**: Handles the request\u2014generally, the controller delegates to the Model and View to manipulate business logic and return a response.\n* **Context**: a module that defines functions related to a specific part of your application, such as users or products. It helps to organize and simplify your code by separating concerns and making it easier to maintain.\n* **Schema**: A schema maps the database data into an Elixir struct.\n* **Migration**: Migrations are used to make changes to the database schema over time, such as adding, removing, or altering tables.\n* **Component (Previously the View in 1.6)**: Handles returning the response and may delegate to a template.\n* **Template**: Builds a response, typically using HEEx (HTML + Embedded Elixir) to build an HTML web page.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/Phoenix%201.7%20Architecture%20Diagram.png)\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Project Structure\n\nBy default, Phoenix 1.7 contains the following project folder structure where `app` is the name of your application.\n\n```\n\u251c\u2500\u2500 _build\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 deps\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 app.ex\n\u2502   \u251c\u2500\u2500 app_web\n\u2502   \u2514\u2500\u2500 app_web.ex\n\u251c\u2500\u2500 priv\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 formatter.exs\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 mix.exs\n\u251c\u2500\u2500 mix.lock\n\u2514\u2500\u2500 README.md\n```\n\nPhoenix projects use [Mix](./mix.livemd) so this folder structure should feel somewhat familiar. Here's a breakdown of each file/folder.\n\n* **_build**: Build artifacts, such as compiled .beam code.\n* **assets**: Static assets, such as JavaScript and CSS.\n* **config**: Configuration files for the application, such as the database configuration and environment-specific settings.\n* **deps**: Compiled project dependencies, which Mix manages.\n* **lib**: The application's source code.\n  * **app**: The business logic for the application, organized into contexts.\n  * **app.ex**: The main application module, which starts the web server and configures the application.\n  * **app_web**: The web-specific code for the application, such as controllers, components, and templates.\n  * **app_web.ex**: The main web module, which configures the Phoenix application.\n* **priv**: The \"priv\" directory in Phoenix contains resources needed for production that are not part of the source code, including static files such as images and fonts and generated assets from the \"assets\" directory.\n* **test**: Tests for the application.\n* **formatter.exs**: Formatter configuration.\n* **.gitignore**: Configuration for files that should be ignored in .git.\n* **mix.exs**:  Configures the application's dependencies and other settings for the Mix project.\n* **mix.lock**: The exact versions of the dependencies used in the application, generated by Mix.\n* **README.md**: Contains information about the project, such as installation instructions or documentation.\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Web Project Structure\n\nRequests flow through the Plug Pipeline. The router, controller, component, and template each play an important role in returning a response to the user request.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Router\n\nPhoenix generates a `router.ex` file that configures the URLs that clients can send HTTP requests to. See [Routing](https://hexdocs.pm/phoenix/routing.html) documentation for a full guide.\n\nThe Phoenix router uses the [pipeline/2](https://hexdocs.pm/phoenix/Phoenix.Router.html#pipeline/2) macro to setup a plug pipeline.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\npipeline :browser do\n  plug :accepts, [\"html\"]\n  plug :fetch_session\n  plug :fetch_live_flash\n  plug :put_root_layout, {AppWeb.LayoutView, :root}\n  plug :protect_from_forgery\n  plug :put_secure_browser_headers\nend\n```\n\nThen the [scope/2] macro groups related routes together under a common base URL. Inside of the scope, the [get/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#get/4), [post/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#post/4), [put/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#put/4), [patch/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#patch/4), and [delete/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#delete/4) macros can handle a specific HTTP request and delegate to a controller to return a response.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nscope \"/\", HelloWeb do\n  pipe_through :browser\n\n  get \"/\", PageController, :home\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Controller\n\nControllers in the `app_web/controllers` manage the response to the HTTP request.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.PageController do\n  use AppWeb, :controller\n\n  def home(conn, _params) do\n    render(conn, :home)\n  end\nend\n```\n\nThe controller delegates to a [function component](https://hexdocs.pm/phoenix/components.html) in a corresponding `*HTML` component module to return a HEEx template. The atom `:home` above corresponds to the function `home/1` called in the component module.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Component\n\nThe `*HTML` component returns a HEEx template using sigil `~H`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.PageHTML do\n  use AppWeb, :html\n\n  def home(assigns) do\n    ~H\"\"\"\n    Hello World\n    \"\"\"\n  end\nend\n```\n\nOr embeds template files contained in a folder using the [embed_templates/2](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#embed_templates/2) macro from [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#content).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.PageHTML do\n  use AppWeb, :html\n\n  embed_templates \"page_html/*\"\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Templates\n\nThe template contains the HEEx code used to build an HTML response. For example, the following might be contained in `app_web/page_html/home.html.heex`.\n\n```html\n<p>Hello, World!</p>\n```\n\n## Conn\n\nIn a Phoenix app, \"conn\" stands for \"connection\". It represents the connection between the client and the web server, and contains information about the HTTP request and response.\n\nThe conn struct is a central concept in Phoenix and is used extensively throughout the framework. It is created when a client sends a request to the server and is passed around between the various parts of the application as the request is processed.\n\nThe conn struct contains information such as the HTTP method, the request path, request headers, request body, and response headers. It also includes information about the client's session and any authentication information, among other things.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Assigns\n\nThe [Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) stores an `assigns` map that is injected into the HEEx template. Values in the `assigns` map can be bound by providing a keyword list as the third argument of the [Controller.render/3](https://hexdocs.pm/phoenix/Phoenix.Controller.html#render/3) function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.PageController do\n  use AppWeb, :controller\n\n  def home(conn, _params) do\n    render(conn, :home, message: \"Hello, World!\", injected_class: \"text-2xl\")\n  end\nend\n```\n\nWe can use `<%= %>` syntax to embed Elixir and use the `assigns` provided in the template file. Alternatively, we can use curly brackets `{}` to embed elixir in an HTML attribute.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<p class={\"bg-black text-white #{assigns.injected_class}\"}><%= assigns.message %></p>\n```\n\n`@` is a shorthand for `assigns.`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<p class={\"bg-black text-white #{@injected_class}\"}><%= @message %></p>\n```\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Layouts\n\nThe `:put_root_layout` plug in the `:browser` pipeline in `router.ex` sets up layout HEEx templates that are rendered on every page.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\npipeline :browser do\n  plug :accepts, [\"html\"]\n  plug :fetch_session\n  plug :fetch_live_flash\n  plug :put_root_layout, {AppWeb.LayoutView, :root} # sets up root layout\n  plug :protect_from_forgery\n  plug :put_secure_browser_headers\nend\n```\n\nThe root layout in `components/layouts/root.html.heex` is a template used by LiveView and regular views that contains the basic structure of an HTML document and any global styles or scripts. It ensures consistency across all pages of your application.\n\nThe app layout in `components/layouts/app.html.heex` is the standard layout for regular HTTP requests and LiveViews.\n\nSee [LiveLayouts](https://hexdocs.pm/phoenix_live_view/live-layouts.html) for more information on layouts and their use.\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Phoenix Components\n\nPhoenix 1.7 allows us to use function components in both LiveViews and Controller views.\n\nPhoenix generates some useful function components in the `app_web/components/core_components.ex` file and the [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#components) module defines components such as [link/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1) and [form/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#form/1).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.link navigate={~p\"/\"}>Home</.link>\n```\n\nWe can create our own function components. A function component takes the `assigns` parameter, and returns a HEEx template. We can optionally define attributes with the [attr](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#attr/3) macro.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nattr :name, :string\n\ndef hello(assigns) do\n  ~H\"\"\"\n  <p><%= @name %></p>\n  \"\"\"\nend\n```\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Embedded Elixir\n\nWe can embed Elixir in our template files using the following syntax.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= expression %>\n```\n\nWhere `expression` is our Elixir code, for example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= 1 + 1 %>\n```\n\nWe can write any Elixir expression. So, for example, we could write an `if` statement to render different HTML depending on some condition.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= if DateTime.utc_now().hour > 12 do %>\n  <p>Good afternoon!</p>\n<% else %>\n  <p>Good morning!</p>\n<% end %>\n```\n\nOr a loop using the `for` comprehension. Often we use this to create multiple elements based on a collection.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= for int <- 1..10 do %>\n  <p><%= int %></p>\n<% end %>\n```\n\nNotice that all expressions that output a value use the `=` symbol. Expressions that don't output a value (or continue the current expression) omit the `=` symbol.\n\nHere's a quick tip, we can`IO.inspect/2` values in the page without injecting them into the HTML.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<% IO.inspect(@value) %>\n```\n\nOr, to view them in the HTML as a string, you can use `Kernel.inspect/2`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= inspect(@value) %>\n```\n\n<!-- livebook:{\"branch_parent_index\":2} -->\n\n## Controller Params\n\nControllers actions accept `params` as the second argument. `params` is a combined map of comma-separated query params, the [body](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) of the request, and dynamic values in the URL.\n\nFor example, if we sent a post request to the following URL:\n\nhttp://localhost:4000/1/?param1=some_value,param2=some_value\n\nWith the following data in the POST body:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{body_param: \"value\"}\n```\n\nAssuming we had the following route defined.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\npost \"/:id\", PageController, :home\n```\n\nThen the `params` in the controller would be bound to:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{\n  \"body_param\" => \"value\",\n  \"id\" => \"1\",\n  \"param1\" => \"some_value\",\n  \"param2\" => \"some_value\"\n}\n```\n\n## Further Reading\n\nFor more on Phoenix, consider the following resources.\n\n* [Phoenix HexDocs](https://hexdocs.pm/phoenix/Phoenix.html)\n* [Plug HexDocs](https://hexdocs.pm/plug/readme.html)\n* [Phoenix a Web Framework for the New Web \u2022 Jos\u00e9 Valim \u2022 GOTO 2016](https://www.youtube.com/watch?v=bk3icU8iIto&ab_channel=GOTOConferences)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phoenix 1.7 reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix 1.7\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/sql_drills.livemd\">SQL Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/web_servers.livemd\">Web Servers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task2-reading-strings_and_binaries", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"base2_vs_base10.png\",\"type\":\"attachment\"},{\"name\":\"byte.png\",\"type\":\"attachment\"},{\"name\":\"byte_base2.png\",\"type\":\"attachment\"},{\"name\":\"hex_counting.png\",\"type\":\"attachment\"},{\"name\":\"letter_h_binary.png\",\"type\":\"attachment\"}]} -->\n\n# Strings And Binaries\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Strings And Binaries\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/timeline.livemd\">Timeline</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/regex.livemd\">Regex</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following.\n\n* Explain codepoints, strings, binaries, and charlists.\n* Why do lists in Elixir sometimes print unnexpected values, and how do you get around it?\n\n## Strings And Binaries\n\nStrings are a common data type in most programming languages.\n\nTo check if a value is a string, we use the `is_binary/1` function. That's because\nstrings in Elixir are represented internally as binaries.\n\n```elixir\nis_binary(\"hello\")\n```\n\nA binary is a sequence of bytes. bytes are a grouping of eight bits.\n\nA bit is a single value represented as `0` or `1`. `0` and `1` correspond to on and off for an electrical signal.\n\nHere we see a visual representation of a byte in memory.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/byte.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nBytes can represent integers with a base2 counting system where each bit represents\nthe next placeholder.\n\n![](files/byte_base2.png)\n\nThis means the maximum integer a single byte can represent is `255`.\n\n```elixir\n128 + 64 + 32 + 16 + 8 + 4 + 2 + 1\n```\n\nBy counting the placeholders in each byte we can determine the bytes value. These are binary numbers.\n\nIntegers are represented using a base 10 counting system compared to the base 2 counting system\nfor binary numbers. As the value in the rightmost placeholder grows, it shifts to\nthe left when it reaches `10` in base 10 or `2` in base 2.\n\n![](files/base2_vs_base10.png)\n\nHere's a table of binary numbers and their corresponding integer values.\n\n<!-- livebook:{\"attrs\":{\"source\":\"Enum.map(1..300, fn integer ->\\n  binary = Integer.digits(integer, 2) |> Enum.join() |> String.to_integer()\\n  %{base10: integer, base2: binary}\\nend) |> Kino.DataTable.new()\",\"title\":\"Base2 Conversion Table\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nEnum.map(1..300, fn integer ->\n  binary = Integer.digits(integer, 2) |> Enum.join() |> String.to_integer()\n  %{base10: integer, base2: binary}\nend)\n|> Kino.DataTable.new()\n```\n\nEach byte stores an integer between `1` and `255` in binary. These integers are used to represent characters. For example, the number `65` represents the `\"A\"` character. This number is called the **codepoint**. We can find the codepoint of any character using the `?` symbol.\n\n```elixir\n?A\n```\n\nWe can also see that a string is actually a series of binary bytes representing a codepoint using [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) with the `binaries: :as_binaries` option.\n\n```elixir\nIO.inspect(\"ABCDEFG\", binaries: :as_binaries)\n```\n\n## Unicode Code Points\n\nTo represent strings, each character is given a unique numerical index called a code point.\nThe [Unicode Standard](https://unicode.org/standard/standard.html) contains the complete registry of all possible characters and their numerical index.\n\nWe've already seen we can find the code point of a character using `?` in Elixir. For example the code point of `h` is `104`.\n\n```elixir\n?h\n```\n\nHere we can see a table of alphabetical characters and their code points. Notice that capital letters and\nlowercase letters have different code points.\n\n<!-- livebook:{\"attrs\":{\"source\":\"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\\\"\\n|> String.codepoints()\\n|> Enum.map(fn char ->\\n  <<code_point::utf8>> = char\\n  %{character: char, code_point: code_point}\\nend) |> Kino.DataTable.new()\",\"title\":\"Code Points\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n|> String.codepoints()\n|> Enum.map(fn char ->\n  <<code_point::utf8>> = char\n  %{character: char, code_point: code_point}\nend)\n|> Kino.DataTable.new()\n```\n\nTo represent strings as binaries, each byte in the binary represents a code point.\n\nFor example, the code point for the the character `h` is `104` or `01101000` in a byte.\n\n![](files/letter_h_binary.png)\n\n```elixir\n64 + 32 + 8\n```\n\nUsing `byte_size/1` and `bit_size/1` We can see that (generally) each character in a string is a single byte or eight bits.\n\n```elixir\nbyte_size(\"h\")\n```\n\n```elixir\nbit_size(\"h\")\n```\n\nSo a string with five characters would have five bytes or forty bits.\n\n```elixir\nbit_size(\"hello\")\n```\n\n```elixir\nbyte_size(\"hello\")\n```\n\nWe can use [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) with the `:as_binaries` option to display a value as its binary\nrepresentation.\n\nNotice these are the code points for each character.\n\n```elixir\nIO.inspect(\"hello\", binaries: :as_binaries)\n\n?h = 104\n?e = 101\n?l = 108\n?l = 108\n?o = 111\n```\n\nUsing the codepoints for these characters, we can create a charlist to see the relationship between charlists and binaries.\n\n```elixir\n[104, 101, 108, 108, 111]\n```\n\nWe can also create a binary using `<<>>`. Don't worry about using this syntax. It's uncommon for most real-world applications.\n\n```elixir\n<<104, 101, 108, 108, 111>>\n```\n\n### UTF-8\n\n[Unicode version 14.0](https://www.unicode.org/versions/Unicode14.0.0/) has a total of 144,697 characters with code points. Since a single byte can only store an integer up to `255` some characters must use multiple bytes.\n\nElixir uses UTF-8 to encode it's strings, meaning that each code point is encoded as a series of 8-bit bytes.\n\nUTF-8 uses between one and four bytes to store each code point. For example the `\u00e9` character\nuses two bytes.\n\n```elixir\nbyte_size(\"\u00e9\")\n```\n\nUTF-8 also uses graphemes. Graphemes may consist of multiple characters perceived as one.\n\nWe can see the underlying characters of a grapheme with [String.codepoints/1](https://hexdocs.pm/elixir/String.html#codepoints/1).\n\nFor example, the character can be represented as the \"e with acute\" code point or as the letter \"e\" followed by a \"combining acute accent\".\n\nYou can see below that while both have the same appearance, they have different code points.\n\n```elixir\nString.codepoints(\"e\u0301\")\n```\n\n```elixir\nString.codepoints(\"\u00e9\")\n```\n\nWhen splitting a string into characters for the sake of enumeration, it's important to know if you want to enumerate through the\ngraphemes or the code points.\n\nIf you want to enumerate through each grapheme, rather than the underlying code points, then\nyou can use [String.graphemes/1](https://hexdocs.pm/elixir/String.html#graphemes/1).\n\n```elixir\nString.graphemes(\"e\u0301\")\n```\n\n### Your Turn\n\nUse [String.graphemes/1](https://hexdocs.pm/elixir/String.html#graphemes/1) to convert the [woman fire fighter](https://emojipedia.org/woman-firefighter/) emoji \ud83d\udc69\u200d\ud83d\ude92 to a list of graphemes.\n\n```elixir\n\n```\n\nUse [String.codepoints/1](https://hexdocs.pm/elixir/String.html#codepoints/1) to convert the emoji \ud83d\udc69\u200d\ud83d\ude92 into a list of codepoints. You'll notice it's actually a combination of the \ud83d\udc69 and \ud83d\ude92 emojis.\n\n```elixir\n\n```\n\n## Hexadecimal\n\nSince binary is cumbersome for representing large numbers, we use hexadecimal for a more\nhuman friendly representation of binary values.\n\nHexadecimal is a base 16 counting system.\n\nIf base 10 uses ten symbols (0-9) and base 2 uses two symbols (0, 1), then Hexadecimal uses\nsixteen symbols (0-9 a-f).\n\nHexadecimal uses decimal symbols from `1` to `9`. Then switches to using the letters `a` to `f` as you can see in the following table.\n\n<!-- livebook:{\"attrs\":{\"source\":\"\\\"0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f\\\"\\n|> String.split(\\\",\\\")\\n|> Enum.with_index()\\n|> Enum.map(fn {symbol, index} -> %{integer: \\\"#{index}\\\", hexadecimal: symbol} end)\\n|> Enum.take(-10)\\n|> Kino.DataTable.new()\",\"title\":\"Hexadecimal\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\n\"0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f\"\n|> String.split(\",\")\n|> Enum.with_index()\n|> Enum.map(fn {symbol, index} -> %{integer: \"#{index}\", hexadecimal: symbol} end)\n|> Enum.take(-10)\n|> Kino.DataTable.new()\n```\n\n```elixir\n\n```\n\nAs the rightmost placeholder grows, it shifts to the left when it reaches `16`.\n![](files/hex_counting.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou may already be familiar with hexadecimal for color codes. For example, the color white is `ffffff`.\nThis is actually the hexadecimal code for `16777215`. you can add the placeholder values to find the hexadecimal\nvalue like so:\n\n```elixir\n1_048_576 * 15 + 65536 * 15 + 4096 * 15 + 256 * 15 + 16 * 15 + 15\n```\n\nIn Elixir, we can represent Hexadecimal integers using `0x` syntax. They are\nequivalent to their integer counterpart.\n\n```elixir\n15 = 0xF\n255 = 0xFF\n4090 = 0xFFA\n```\n\nWe can also represent the code point for a string using hexadecimal with `\\u` syntax.\n\nFor example, `\"\\u0065\"` is the character `\"e\"`\n\n```elixir\n\"\\u0065\"\n```\n\nThe codepoint for `e` is `101`\n\n```elixir\n?e\n```\n\nAnd the hexadecimal value `0x65` represents `101`. So, `\\u0065` corresponds to the code point for `\"e\"`.\n\n```elixir\n0x65 = ?e\n```\n\nWhich is why `\"\\u0065\"` is the character `\"e\"`.\n\n```elixir\n\"\\u0065\" = \"e\"\n```\n\n### Your Turn\n\nUse hexadecimal `0x` syntax to represent the number `15`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\n0xf\n```\n\n</details>\n\n```elixir\n\n```\n\n## Bitstrings\n\nThe codepoints for characters are represented with a UTF-8 encoded series of bytes. These\nbytes are stored in a bitstring.\n\nA bitstring is a contiguous sequence of bits in memory. A binary is a bitstring where the number\nof bits is divisible by 8.\n\nThe `<<>>` syntax defines a new bitstring.\n\nStrings in Elixir are actually bitstrings. For example, when we create a bitstring of\ncodepoints matching `\"hello\"` we create the `\"hello\"` string.\n\n```elixir\n# H E L L O\n<<104, 101, 108, 108, 111>>\n```\n\nIt's fairly rare that you'll need to work directly with bitstrings for most applications. If you'd like to learn more, you can reference the [Elixir Documentation](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%3C%3C%3E%3E/1).\n\n## Charlists\n\nYou may have noticed that occasionally lists of integers in Elixir will display unexpected\ncharacters.\n\n```elixir\n[97, 98, 99]\n```\n\nThat's because they are interpreted as a charlist. A charlist is a list of integers that\nare all valid code points. If any integer in a list is not a valid codepoint, the list will\nnot be interpreted as a charlist.\n\n```elixir\n# A B C Invalid\n[97, 98, 99, 1]\n```\n\nYou can define a charlist using single quotes `''`.\n\n```elixir\n'hello'\n```\n\nThis charlist is equivalent to a list of the code points for a string.\n\n```elixir\n[?h, ?e, ?l, ?l, ?o]\n```\n\nCharlists are a list of integers, so they can be enumerated through and will return a new\ncharlist. Here's how we could shift each character up one code point.\n\n```elixir\nEnum.map('abcde', fn each -> each + 1 end)\n```\n\nYou can convert a charlist back into a string with [List.to_string/1](https://hexdocs.pm/elixir/List.html#to_string/1).\n\n```elixir\nList.to_string('hello')\n```\n\nOr convert a string into a charlist with [String.to_charlist/1](https://hexdocs.pm/elixir/String.html#to_charlist/1).\n\n```elixir\nString.to_charlist(\"hello\")\n```\n\nLike bitstrings, you will likely not need to use charlists frequently, however they can be useful for certain string manipulation or when working with certain libraries.\n\nIf we want to inspect a list that contains codepoints, we can use [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) with the `charlists: :as_lists` option.\n\n```elixir\nIO.inspect([65, 66, 67])\n```\n\n```elixir\nIO.inspect([65, 66, 67], charlists: :as_lists)\n```\n\n### Your Turn\n\nConvert the alphabet `\"abcdefghijklmnopqrstuvwxyz\"` to a charlist, then inspect it to see the codepoints for each letter.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\n\"abcdefghijklmnopqrstuvwxyz\"\n|> String.to_charlist()\n|> IO.inspect(charlists: :as_lists)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir-lang: Binaries, strings, and charlists](https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Strings And Binaries reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Strings And Binaries\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/timeline.livemd\">Timeline</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/regex.livemd\">Regex</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task3-reading-tailwind", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"layered-rainbow.png\",\"type\":\"attachment\"},{\"name\":\"rounded-rainbow.png\",\"type\":\"attachment\"},{\"name\":\"tailwind_button_example.png\",\"type\":\"attachment\"},{\"name\":\"tailwind_play_heading_3.png\",\"type\":\"attachment\"},{\"name\":\"tailwind_quick_search.png\",\"type\":\"attachment\"}]} -->\n\n# Tailwind\n\n```elixir\nMix.install(\n  [\n    {:jason, \"~> 1.4\"},\n    {:kino, \"~> 0.9\", override: true},\n    {:youtube, github: \"brooklinjazz/youtube\"},\n    {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n    {:kino_tailwind_playground, github: \"BrooklinJazz/kino_tailwind_playground\"}\n  ],\n  force: true\n)\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tailwind\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_cover_image.livemd\">Blog: Cover Image</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_home_page.livemd\">Blog: Home Page</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* Why use Tailwind vs pure CSS?\n* How do you find Tailwind utility classes?\n\n## Overview\n\n[Tailwind CSS](https://tailwindcss.com/) is a CSS utility framework. It allows us to use utility classes defined by Tailwind to conveniently apply CSS styles.\n\nFor example, we can use the `underline` class to apply an underline to an HTML element.\n\n```html\n<h1 class=\"underline\">\n  Hello world!\n</h1>\n```\n\nThis applies the following CSS to the heading 3 element.\n\n```CSS\ntext-decoration-line: underline;\n```\n\nKeep in mind, there is nothing we can do in Tailwind that we cannot do with pure CSS.\nTailwind is purely for convenience. In general, you'll want to learn CSS styles, then learn the appropriate CSS class on Tailwind. Knowledge of pure CSS will always be more generally applicable than knowledge of Tailwind.\n\nHowever, Tailwind is a very popular and important CSS framework in the Elixir ecosystem. Many projects use Tailwind, and it's become part of the standard PETAL (Phoenix, Elixir Tailwind, AlpineJS and LiveView) stack, which is a set of common tools used to create Elixir web applications.\n\n## Play CDN\n\nTo experiment with Tailwind, we can use the Tailwind CDN (Content Delivery Network) in an HTML file. This CDN provides the JavaScript necessary to run Tailwind.\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body>\n  <h1 class=\"text-3xl font-bold underline\">\n    Hello world!\n  </h1>\n</body>\n</html>\n```\n\nWe've also created a [Livebook Tailwind Playground](https://github.com/BrooklinJazz/kino_tailwind_playground) for the purposes of demonstration. All tailwind examples are editable and render live.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<div class=\\\"flex items-center justify-center h-screen w-full bg-green-200\\\">\\n  <h1 class=\\\"text-3xl font-bold underline text-center\\\">\\n    Go Ahead And Change This Text!\\n  </h1>\\n</div>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n### Your Turn\n\nTailwind provides the [Tailwind Play](https://play.tailwindcss.com/) playground to experiment with Tailwind classes.\n\nGo to [Tailwind Play](https://play.tailwindcss.com/) and enter the following HTML to create an HTML heading 3 element with bold font, an underline, and a triple extra large font size.\n\n```html\n<h1 class=\"font-bold underline text-3xl\">\n  Hello world!\n</h1>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tailwind_play_heading_3.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThis is the same as applying the following CSS styles.\n\n```css\nh1 {\n  // underline\n  text-decoration-line: underline;\n\n  // font-bold\n  font-weight: 700;\n\n  // text-3xl\n  font-size: 1.875rem; /* 30px */\n  line-height: 2.25rem; /* 36px */\n}\n```\n\n## Documentation\n\nWe can find all available Tailwind utility classes from the [Tailwind Documentation](https://tailwindcss.com/docs/installation). They have a handy Quick Search for finding Tailwind classes.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tailwind_quick_search.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn (BONUS)\n\nUse the [Tailwind Documentation](https://tailwindcss.com/docs/installation) to create the following button.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tailwind_button_example.png)\n\n<!-- livebook:{\"attrs\":{\"html\":\"<button class=\\\"\\\">Click Me!</button>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Colors\n\nTailwind comes with a [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette). Each color has a base name such as `red` then a number to indicate the shade of color.\n\nThe default colors are `slate`, `gray`, `zinc`, `neutral`, `stone`, `red`, `orange`, `amber`, `yellow`, `lime`, `green`, `emerald`, `teal`, `cyan`, `sky`, `blue`, `indigo`, `violet`, `purple`, `fuchsia`, `pink`, and `rose`.\n\nThe default shades are `50`, `100`, `200`, `300`, `400`, `500`, `600`, `700`, `800`, and `900`.\n\nThis color pallet works with a variety of utility classes such as [text-color](https://tailwindcss.com/docs/text-color) and [background-color](https://tailwindcss.com/docs/background-color).\n\nSo we can apply a background color and text color to an HTML element like so.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<p class=\\\"text-red-600 bg-blue-200\\\">I have a blue background and red text!</p>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Text\n\n### [Font Size](https://tailwindcss.com/docs/font-size)\n\nWe can change font size using `text-{size}` utilities.\n\n```html\n<p class=\"text-3xl\">\n```\n\nWe have access to the following sizes: `xs`, `sm`, `base`, `lg`, `xl`, `2xl`, `3xl`, `4xl`, `5xl`, `6xl`, `7xl`, `8xl`, and `9xl`.\n\nWith Tailwind, `<p>`, `h1`, `h2`, `h3`, `h4`, `h5`, and `h6` are purely semantic and do not apply any styles by default.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<p>paragraph</p>\\n<h1>h1</h1>\\n<h2>h2</h2>\\n<h3>h3</h3>\\n<h4>h4</h4>\\n<h5>h5</h5>\\n<h6>h6</h6>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n### [Font Weight](https://tailwindcss.com/docs/font-weight)\n\n`font-{weight}` sets the font weight of text. The `weight` can be `thin`, `extralight`, `light`, `normal`, `medium`, `semibold`, `bold`, `extrabold`, and `black`.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<section class=\\\"text-3xl\\\">\\n  <p class=\\\"font-thin\\\">100</p>\\n  <p class=\\\"font-extralight\\\">200</p>\\n  <p class=\\\"font-light\\\">300</p>\\n  <p class=\\\"font-normal\\\">400</p>\\n  <p class=\\\"font-medium\\\">500</p>\\n  <p class=\\\"font-semibold\\\">600</p>\\n  <p class=\\\"font-bold\\\">700</p>\\n  <p class=\\\"font-extrabold\\\">800</p>\\n  <p class=\\\"font-black\\\">900</p>\\n</section>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n### [Text Align](https://tailwindcss.com/docs/text-align)\n\nWe can use `text-left`, `text-center`, and `text-right` as well as other [text-align](https://tailwindcss.com/docs/text-align) classes to align text inside its container.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<p class=\\\"text-center\\\">centered text</p>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Height And Width\n\nWe can set height and width using the `h-{size}` and `w-{size}` classes. Refer to the [Height](https://tailwindcss.com/docs/height) and [Width](https://tailwindcss.com/docs/width) documentation for more.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Fixed\n\nWe can provide a fixed-size for the height and width of `0`, `0.5`, `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `14`, `16`, `20`, `24`, `28`, `32`, `36`, `40`, `44`, `48`, `52`, `56`, `60`, `64`, `72`, `80`, or `96`. These correspond to certain `rem`/`px` values.\n\n```html\n<!-- Height -->\n<h1 class=\"h-64\">The height of this element is 16rem or 256px</h1>\n\n<!-- Width -->\n<h1 class=\"w-64\">The width of this element is 16rem or 256px</h1>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Fractions\n\nThe `size` can also be provided as a fraction of halves, thirds, fourths, fifths, sixths, or twelfths. For example: `1/2`, `2/3`, `3/4`, `2/5`, `4/6`, and `7/12`. This size will be relative to the parent container.\n\n```html\n<!-- Height -->\n<div class=\"h-64\">\n  <h1 class=\"h-1/2\">This height will be 8rem or 128px because it is half the height of `h-64`</h1>\n</div>\n\n<!-- Width -->\n<div class=\"w-64\">\n  <h1 class=\"w-1/2\">This width will be 8rem or 128px because it is half the width of `w-64`</h1>\n</div>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Full/Viewport\n\nWe can use `-screen` to use the full height or width of the screen.\n\n```html\n<h1 class=\"h-screen\">This will be the full height of the screen regardless of parent container</h1>\n<h1 class=\"w-screen\">This will be the full width of the screen regardless of parent container</h1>\n```\n\nWe can use `-full` to set the height or width to the full size of the parent container. This has the same effect as `-screen` if the parent container is already the size of the screen.\n\n```html\n<!-- Height -->\n<div class=\"h-64\">\n  <h1 class=\"h-full\">This height will be 16rem or 256px because it is the full the height of `h-64`</h1>\n</div>\n\n<!-- Width -->\n<div class=\"w-64\">\n  <h1 class=\"w-full\">This width will be 16rem or 256px because it is the full the width of `w-64`</h1>\n</div>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Max Height And Width\n\nWe can set the max/min or height/width using the `max-h-{size}`, `min-h-{size}`, `max-w-{size}`. The acceptable `size` values are specific for each. Refer to the [Max-Height](https://tailwindcss.com/docs/max-height), [Max-Width](https://tailwindcss.com/docs/max-width), [Min-Height](https://tailwindcss.com/docs/min-height), and [Min-Width](https://tailwindcss.com/docs/min-width) documentation for more.\n\n```html\n<p class=\"max-h-12\">The max height of this paragraph will be 2rem or 48px</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Centering Fitted Content\n\nCombining `w-fit`\n\n<!-- livebook:{\"attrs\":{\"html\":\"\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n### Your Turn\n\nCreate a paragraph tag that will wrap text on a new line when wider than 10rem.\n\n<p style=\"width: 10rem; background-color: lightgrey\">\nFor example, this paragraph will wrap words when the text is wider than 10rem.<p>\n</p>\n\n<!-- livebook:{\"attrs\":{},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Display\n\nTailwind has [display](https://tailwindcss.com/docs/display) utility classes for controlling the display type of an element. Here are a few examples:\n\n* `block`\n* `inline-block`\n* `inline`\n* `flex`\n\nSee [basic-usage](https://tailwindcss.com/docs/display#basic-usage) for an explanation of these properties.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nApply the `inline-block` on all of these span tags so that they can have height apply to them, and display on the same line.\n\nThen change `inline-block` to `block` to see each span tag rendered on their own line.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<span class=\\\"h-6 w-6 bg-red-400\\\"></span>\\n<span class=\\\"h-6 w-6 bg-orange-400\\\"></span>\\n<span class=\\\"h-6 w-6 bg-yellow-400\\\"></span>\\n<span class=\\\"h-6 w-6 bg-green-400\\\"></span>\\n<span class=\\\"h-6 w-6 bg-blue-400\\\"></span>\\n<span class=\\\"h-6 w-6 bg-purple-400\\\"></span>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Padding And Margin\n\nWe can use `p-{size}` and `m-{size}` to set padding and margin.\n\nThe acceptable size values are the same integers as height and width: `0`, `0.5`, `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `14`, `16`, `20`, `24`, `28`, `32`, `36`, `40`, `44`, `48`, `52`, `56`, `60`, `64`, `72`, `80`, and `96`.\n\n```html\n<p class=\"p-10\">This paragraph has 2.5 rem or 40px of padding on each side.</p>\n<p class=\"m-12\">This paragraph has 3 rem or 48px of margin on each side.</p>\n```\n\nWe can also set the horizontal padding/margin using `py`, `px`, `my`, and `mx`.\n\n```html\n<p class=\"px-10\">This paragraph has 2.5 rem or 40px of padding on the left and right side.</p>\n<p class=\"my-12\">This paragraph has 3 rem or 48px of margin on the top and bottom side.</p>\n```\n\nWe can set padding/margin on a specific side using `pt`, `pr`, `pb`, `pl`, `mt`, `mr`, `mb`, or `ml`.\n\n```html\n<p class=\"pl-10\">This paragraph has 2.5 rem or 40px of padding on the left side.</p>\n<p class=\"mt-12\">This paragraph has 3 rem or 48px of margin on the top side.</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Auto And Centering Content.\n\nWe're also able to set margin and padding to automatically fill the available space using `-auto`. For example, we can center content using `mx-auto`. Note that the content must have some width. We can sent the width of an element to be the size of its child content using `w-fit`.\n\n```html\n<p class=\"mx-auto w-fit\">centered paragraph</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a series of rainbow boxes in the center of the page. Each box should be `3/4` of the page width.\n\n![](files/layered-rainbow.png)\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```html\n<div class=\"bg-red-400 p-6 w-3/4 mx-auto mt-10\"></div>\n<div class=\"bg-orange-400 p-6 w-3/4 mx-auto mt-10\"></div>\n<div class=\"bg-yellow-400 p-6 w-3/4 mx-auto mt-10\"></div>\n<div class=\"bg-green-400 p-6 w-3/4 mx-auto mt-10\"></div>\n<div class=\"bg-blue-400 p-6 w-3/4 mx-auto mt-10\"></div>\n<div class=\"bg-purple-400 p-6 w-3/4 mx-auto mt-10\"></div>\n```\n\n</details>\n\n<!-- livebook:{\"attrs\":{\"html\":\"\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Border\n\nWe have several Tailwind classes for modifying the border of an HTML element.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Border Width](https://tailwindcss.com/docs/border-width)\n\nWe can set the border-width to `1px` using `border` or provide a size using `border-{size}` where `size` is a valid integer of `0`, `2`, `4`, or `8`.\n\n```html\n<!-- 1px -->\n<p class=\"border\">bordered paragraph</p>\n\n<!-- 2px -->\n<p class=\"border-2\">bordered paragraph</p>\n\n<!-- 4px -->\n<p class=\"border-4\">bordered paragraph</p>\n\n<!-- 8px -->\n<p class=\"border-8\">bordered paragraph</p>\n```\n\nWe can also set the vertical border using `border-y` or the horizontal border using `border-x`.\n\n```html\n<p class=\"border-y-2\">This paragraph has a 2px border on top and bottom side</p>\n<p class=\"border-x-2\">This paragraph has a 2px border on left and right side</p>\n```\n\nFinally, we can set the border width on a specific side using `border-t`, `border-r`, `border-b`, and `border-l`.\n\n```html\n<p class=\"border-t-2\">This paragraph has a 2px border on top side</p>\n<p class=\"border-l-2\">This paragraph has a 2px border on left side</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Border Color](https://tailwindcss.com/docs/border-color)\n\nWe can set the border-color using any colors from the [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette) using `border-{color}` in combination with `border-{size}`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<p class=\"border-2 border-red-500\">bordered paragraph</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Border Radius](https://tailwindcss.com/docs/border-radius)\n\nWe can round the corners of our border using `rounded`.\n\n```html\n<p class=\"rounded\">This paragraph has a border-radius of 0.25rem or 4px </p>\n```\n\nWe can set the border radius size using `rounded-{size}`. The `size` may be `none`, `sm`, `md`, `lg`, `xl`, `2xl`, `3xl`, or `full`.\n\n```html\n<p class=\"rounded-lg\">This paragraph has a border-radius of 0.5 rem or 8px</p>\n```\n\nWe can also set the radius of a specific border corner using `t`, `r`, `b`, `l`, `tl`, `tr`, `br`, and `bl`.\n\n```html\n<p class=\"rounded-r-lg\">This paragraph has a top and bottom right border-radius of 0.5 rem or 8px</p>\n\n<p class=\"rounded-br-lg\">This paragraph has a bottom right border-radius of 0.5 rem or 8px</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a rounded rainbow using `border` styles and `padding`.\n\n![](files/rounded-rainbow.png)\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```html\n<div class=\"border-4 border-red-400 rounded-full p-2 mt-10 m-2\">\n  <div class=\"p-2 border-4 border-orange-400 rounded-full\">\n    <div class=\"p-2 border-4 border-yellow-400 rounded-full\">\n      <div class=\"p-2 border-4 border-green-400 rounded-full\">\n        <div class=\"p-2 border-4 border-blue-400 rounded-full\">\n          <div class=\"p-2 border-4 border-purple-400 rounded-full\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n</details>\n\n<!-- livebook:{\"attrs\":{\"html\":\"\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Position\n\nWe can set the position value of an HTML element using `static` (default), `fixed`, `absolute`, `relative`, and `sticky`. We often use position together with `top-{size}`, `right-{size}`, `left-{size}`, and `bottom-{size}` to adjust their positioning on the web page.\n\n```html\n<!-- positions an element at the bottom of the screen regardless of scroll position -->\n<p class=\"fixed bottom-0\">\n\n<!-- positions an element at the top of their parent container  -->\n<p class=\"absolute top-0\">\n\n<!-- An element will stick to the top of the current scroll position -->\n<p class=\"sticky top-0\">\n\n<!-- positions an element 3rem or 48px downwards of where it would normally be -->\n<p class=\"sticky bottom-12\">\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUse `absolute` positioning to play a paragraph tag on the bottom-right corner of the display.\n\n<!-- livebook:{\"attrs\":{\"html\":\"\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Hover, Focus, And Other States\n\nWe can apply styles based on the state of the element.\n\nFor example, we can use `hover:` with any style to only apply that style on hover.\n\n```html\n<button class=\"hover:bg-red-300 bg-red-500\">hover button</button>\n```\n\nWe can also use `focus:` with any style to apply that style on focusing an element. (`outline-none` removes the default outline on a text input.)\n\n```html\n<input class=\"border-4 focus:border-blue-200 outline-none\"></input>\n```\n\nSee the [Hover, Focus, and Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation for more.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nMake a button that changes styles on hover.\n\n<!-- livebook:{\"attrs\":{},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Responsive Styles\n\nWe can apply styles based on the screen size using `sm:`, `md:`, `lg:`, `xl:`, and `2xl:`.\nOmitting the screen size applies the style on all screens (including those smaller than `sm`.)\n\n```html\n<div class=\"bg-red-400 md:bg-orange-400\">\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nChange the text size of a paragraph tag based on the screen size. Use the `xs`, `sm`, and `md` buttons in the playground to see the styles applied.\n\n<!-- livebook:{\"attrs\":{\"html\":\"<p class=\\\"\\\">Dynamic Text Size</p>\"},\"chunks\":null,\"kind\":\"Elixir.Kino.TailwindPlayground\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.nothing()\n```\n\n## Further Reading\n\nThere's plenty more to learn! Here's a curated list of some optional reading you may find interesting and useful.\n\n* [Utility-First Fundamentals](https://tailwindcss.com/docs/utility-first) Tailwind has written an excellent overview of the benefits of using utility classes rather than an alternative approach.\n* [Tailwind Phoenix Guide](https://tailwindcss.com/docs/guides/phoenix). Tailwind includes an installation guide for using Tailwind in a Phoenix project. We'll learn more about Tailwind with Phoenix in a future lesson.\n* [Dark Mode](https://tailwindcss.com/docs/dark-mode) Tailwind includes a `dark:` class you can use to apply styles only in dark mode.\n* [Reusing Styles](https://tailwindcss.com/docs/reusing-styles) A guide on how to avoid repeating yourself with Tailwind.\n* [Adding Custom Styles](https://tailwindcss.com/docs/adding-custom-styles) how to add custom styles to Tailwind.\n\nRefer to the [Tailwind Documentation](https://tailwindcss.com/docs/installation) for more!\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Tailwind reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tailwind\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_cover_image.livemd\">Blog: Cover Image</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_home_page.livemd\">Blog: Home Page</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task4-reading-phoenix_one_to_one_relationships", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# One-to-One Relationships\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=One-to-One Relationships\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_tags.livemd\">Blog: Tags</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_cover_image.livemd\">Blog: Cover Image</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* Why might you use a one-to-one relationship instead of adding an additional field in a table?\n* How do you add an associated data structure to the form for a resource?\n\n## Overview\n\nThis is a companion reading for the [Blog: Cover Image](../exercises/blog_cover_image.livemd) exercise. This lesson is an overview of how to work with one-to-one associations in a Phoenix application. See the `example_projects/blog` project folder to contextualize the examples found throughout this lesson.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### One-to-one Relationships\n\nA one-to-one relationship is a relationship between two database tables where a single record in one table is related to a single record in the other table.\n\nHere some of the reasons we might choose to use a one-to-one relationship instead of simply storing the data in an additional field in the same table.\n\n* **Performance**: A one-to-one relationship can improve database performance by storing rarely used or expensive to retrieve data in a separate table.\n* **Domain Design**: It may make semantic sense to separate data, like a `PhoneNumber` with separate fields, into its own table. Creating an association can also ensure consistency between tables using a common resource.\n* **Flexibility**: A one-to-one relationship allows for flexibility in changing the structure of related data without affecting the rest of the database. For example, storing user `Profile` data in a separate table allows you to add or remove profile fields without changing the structure of the main `User` table.\n\nOne-to-one relationships may add complexity to your database schema and may not always be the best choice, so consider trade-offs and choose the best design for your specific needs.\n\nWe use the terms **belongs to** and **has one** to describe the nature of a one-to-one relationship. Typically one resource will own another. For example a blog `Post` might have one `CoverImage`, and the `CoverImage` belongs to the `Post`.\n\nIn this case, the resource that **belongs_to** some resource stores the foreign key to the resource.\n\n```mermaid\nerDiagram\n\nPost {\n    string title\n    string subtitle\n    text content\n}\n\nCoverImage {\n    string url\n    id post_id\n}\n\nPost ||--O| CoverImage: \"has one/belongs to\"\n```\n\n## Migration\n\nOne-to-one relationships use a foreign key to associate one resource with another. The resource that **belongs_to** the parent resource in the relationship stores the foreign key.\n\nHere's an example of a migration that creates a`cover_images` with a `post_id` foreign key.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.CreateCoverImages do\n  use Ecto.Migration\n\n  def change do\n    create table(:cover_images) do\n      add :url, :text\n      add :post_id, references(:posts, on_delete: :delete_all), null: false\n\n      timestamps()\n    end\n\n    create index(:cover_images, [:post_id])\n  end\nend\n```\n\n## Schema\n\nThe Schema defines the direction of the one-to-one relationship using [has_one/3](https://hexdocs.pm/ecto/Ecto.Schema.html#has_one/3) and [belongs_to/3](https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3).\n\nThe record that stores the foreign key should [belongs_to/3](https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3) to the associated parent record.\n\nHere's an example of a `Post` schema that [has_one/3](https://hexdocs.pm/ecto/Ecto.Schema.html#has_one/3) `CoverImage` record.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nhas_one :cover_image, Blog.Posts.CoverImage, on_replace: :update\n```\n\nWe set the `on_replace: :update` above to update the associated `cover_image` rather than `:raise` an error (the default behavior) or `:delete` and recreate the cover image.\n\nSee [the on_replace option](https://hexdocs.pm/ecto/Ecto.Changeset.html#module-the-on_replace-option) for a deeper explanation.\n\nHere's an example of a `CoverImage` schema that [belongs_to/3](https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3) a `Post` record.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nbelongs_to :post, Blog.Posts.Post\n```\n\n## Context: Replacing Associations\n\nWhen updating an association, we need to set the `on_replace` behavior. In a one-to-one relationship, we might consider using the `:update` behavior to simply update the associated record rather than deleting it and creating a new one. This necessitates preloading the association before updating it.\n\nHere's an example of preloading the association in the context.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef update_post(%Post{} = post, attrs, tags \\\\ []) do\n  post\n  |> Repo.preload(:cover_image)\n  |> Post.changeset(attrs, tags)\n  |> Repo.update()\nend\n```\n\n## Form Data\n\nWhen creating associated data at the same time as creating the parent data, we can use [inputs_for/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#inputs_for/1) to embed the associated data in the same form.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.inputs_for :let={cover_image} field={f[:cover_image]}>\n  <.input type=\"text\" field={cover_image[:url]} label=\"Cover Image URL\" />\n</.inputs_for>\n```\n\nHere's an example form using a cover image field in a post form.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={@changeset} action={@action}>\n  <.error :if={@changeset.action}>\n    Oops, something went wrong! Please check the errors below.\n  </.error>\n  <.input field={f[:user_id]} type=\"hidden\" value={@current_user.id} />\n  <.input field={f[:title]} type=\"text\" label=\"Title\" />\n  <.input field={f[:content]} type=\"text\" label=\"Content\" />\n  <.inputs_for :let={cover_image} field={f[:cover_image]}>\n    <.input type=\"text\" field={cover_image[:url]} label=\"Cover Image URL\" />\n  </.inputs_for>\n  <.input field={f[:published_on]} type=\"datetime-local\" label=\"Publish On\" value={DateTime.utc_now()} />\n  <.input field={f[:visible]} type=\"checkbox\" label=\"Visible\" />\n  <.input field={f[:tag_ids]} type=\"select\" label=\"Tags\" multiple={true} options={@tag_options} />\n\n  <:actions>\n    <.button>Save Post</.button>\n  </:actions>\n</.simple_form>\n```\n\nSubmitting the form will send the associated data inside of a nested map.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{\n  \"content\" => \"some content\",\n  # nested cover image data\n  \"cover_image\" => %{\"url\" => \"https://www.example.com/image.png\"},\n  \"published_on\" => \"2023-05-23T19:36\",\n  \"title\" => \"some title\",\n  \"user_id\" => \"1\",\n  \"visible\" => \"true\"\n}\n```\n\n## Cast Associated Data\n\nWhen creating both the parent and child record at the same time, we can use the [cast_assoc/3](https://hexdocs.pm/ecto/Ecto.Changeset.html#cast_assoc/3) to cast the associated data (typically from a form) into the structure the `Repo` needs to insert the associated record into the database.\n\nHere's an example changeset in a `Post` schema that casts the associated cover image data.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@doc false\ndef changeset(post, attrs, tags \\\\ []) do\n  post\n  |> cast(attrs, [:title, :content, :visible, :published_on, :user_id])\n  |> cast_assoc(:cover_image)\n  |> validate_required([:title, :content, :visible, :user_id])\n  |> unique_constraint(:title)\n  |> foreign_key_constraint(:user_id)\n  |> put_assoc(:tags, tags)\nend\n```\n\n## Context Tests\n\nGenerally a context should (at minimum) test the create, update, and delete behavior of a resource.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create\n\nHere's an example context test for creating a post with an associated cover image.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"create_post/1 with image\" do\n  valid_attrs = %{\n    content: \"some content\",\n    title: \"some title\",\n    cover_image: %{\n      url: \"https://www.example.com/image.png\"\n    },\n    visible: true,\n    published_on: DateTime.utc_now(),\n    user_id: user_fixture().id\n  }\n\n  assert {:ok, %Post{} = post} = Posts.create_post(valid_attrs)\n  assert %CoverImage{url: \"https://www.example.com/image.png\"} = Repo.preload(post, :cover_image).cover_image\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Update\n\nHere's an example context tests for updating a post image. It's important to test the replacement behavior of associated data to ensure it behaves as expected. For example, the following test above would fail unless you've set the `on_replace` behavior of the association in the schema.\n\nHere's a test for creating a new image when updating. This ensures the `:cover_image` data is preloaded as seen in [Context: Replacing Associations](#context:-replacing-associations).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"update_post/1 add an image\" do\n  user = user_fixture()\n  post = post_fixture(user_id: user.id)\n\n  assert {:ok, %Post{} = post} = Posts.update_post(post, %{cover_image: %{url: \"https://www.example.com/image2.png\"}})\n  assert post.cover_image.url == \"https://www.example.com/image2.png\"\nend\n```\n\nHere's a test that updates an existing image.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"update_post/1 update existing image\" do\n  user = user_fixture()\n  post = post_fixture(user_id: user.id, cover_image: %{url: \"https://www.example.com/image.png\"})\n\n  assert {:ok, %Post{} = post} = Posts.update_post(post, %{cover_image: %{url: \"https://www.example.com/image2.png\"}})\n  assert post.cover_image.url == \"https://www.example.com/image2.png\"\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Delete\n\nHere's an example test for deleting a post with a cover image. Since there's likely no context functions for working with cover images directly, we've used `Repo` to test the cover image.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"delete_post/1 deletes post and cover image\" do\n  user = user_fixture()\n  post = post_fixture(user_id: user.id, cover_image: %{url: \"https://www.example.com/image.png\"})\n  assert {:ok, %Post{}} = Posts.delete_post(post)\n  assert_raise Ecto.NoResultsError, fn -> Posts.get_post!(post.id) end\n  assert_raise Ecto.NoResultsError, fn -> Repo.get!(CoverImage, post.cover_image.id) end\nend\n```\n\n## Controller Tests\n\nHere's an example test of testing a one-to-one relationship in a controller. This example creates a post with a cover image, and tests that the post's cover image is found on the post show page.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"create post with cover image\", %{conn: conn} do\n  user = user_fixture()\n  conn = log_in_user(conn, user)\n\n  create_attrs = %{\n    content: \"some content\",\n    title: \"some title\",\n    visible: true,\n    published_on: DateTime.utc_now(),\n    user_id: user.id,\n    cover_image: %{\n      url: \"https://www.example.com/image.png\"\n    }\n  }\n\n  conn = post(conn, ~p\"/posts\", post: create_attrs)\n\n  assert %{id: id} = redirected_params(conn)\n  assert redirected_to(conn) == ~p\"/posts/#{id}\"\n\n  conn = get(conn, ~p\"/posts/#{id}\")\n  post = Posts.get_post!(id) \n  # post was created with cover image\n  assert %CoverImage{url: \"https://www.example.com/image.png\"} = post.cover_image\n  # post cover image is displayed on show page\n  assert html_response(conn, 200) =~ \"https://www.example.com/image.png\"\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Ecto: One-to-one relationshipos](https://hexdocs.pm/ecto/associations.html#has-one-belongs-to)\n* [Pragmatic Bookshelf: Programming Ecto](https://pragprog.com/titles/wmecto/programming-ecto/)\n* [Elixir Schools: Associations](https://elixirschool.com/en/lessons/ecto/associations)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish One-to-One Relationships reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=One-to-One Relationships\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_tags.livemd\">Blog: Tags</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_cover_image.livemd\">Blog: Cover Image</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task5-reading-mix", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Mix\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Mix\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/pascals_triangle.livemd\">Pascal's Triangle</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games.livemd\">Games Project</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is the purpose of Mix?\n* Where should our application go inside of a mix project?\n* How do we compile a mix project and explore it using the IEx shell?\n\n## Mix\n\n[Mix](https://hexdocs.pm/mix/Mix.html) is a build tool that ships with Elixir that automates tasks for creating, compiling, and testing your application.\n\nWe start a new Mix application by running the following in the command line.\n\n```\nmix new app_name\n```\n\nWhere `app_name` is the name of the project.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a `hello_world` application.\n\nYou should notice that the command generated several files.\n\n```\n$ mix new hello_world\n* creating README.md\n* creating .formatter.exs\n* creating .gitignore\n* creating mix.exs\n* creating lib\n* creating lib/hello_world.ex\n* creating test\n* creating test/test_helper.exs\n* creating test/hello_world_test.exs\n\nYour Mix project was created successfully.\nYou can use \"mix\" to compile it, test it, and more:\n\n    cd hello_world\n    mix test\n\nRun \"mix help\" for more commands.\n```\n\nYour project should have the following file and folder structure.\n\n```\nhello_world/\n  lib/\n    hello_world.ex\n  test/\n    hello_world_test.exs\n    test_helper.exs\n  .formatter.exs\n  .gitignore\n  mix.exs\n  README.md\n```\n\nWe'll walk through the mix project structure and how you can build Elixir applications.\n\n## The `lib` Folder\n\nThe `lib/` folder contains the files for the project. We start with a single module\nnamed after the project. You should have a `HelloWorld` module in the `lib/hello_world.ex` file.\n\nWe use `@moduledoc` and `@doc`  to document our code.\n\n```elixir\ndefmodule HelloWorld do\n  @moduledoc \"\"\"\n  Documentation for `HelloWorld`.\n  \"\"\"\n\n  @doc \"\"\"\n  Hello world.\n\n  ## Examples\n\n      iex> HelloWorld.hello()\n      :world\n\n  \"\"\"\n  def hello do\n    :world\n  end\nend\n```\n\n## Running A Mix Project\n\nTo execute the Elixir code for our Mix project, you can load the project into the IEx Shell\nby running the following command in the project folder.\n\n```\niex -S mix\n```\n\nNow, all of the `.ex` files and modules under the `lib/` folder are available in the [IEx](https://hexdocs.pm/iex/IEx.html) shell environment.\n\n[Mix](https://hexdocs.pm/mix/Mix.html) ignores `.exs` files, so any modules in a `.exs` file will not be available in the [IEx](https://hexdocs.pm/iex/IEx.html) shell.\n\n### Your Turn\n\nLoad your project into the IEx Shell.\n\n```\niex -S mix\n```\n\nCall the `hello/0` function.\n\n```\niex> HelloWorld.hello()\n:world\n```\n\nNotice that the `iex -S mix` command compiles your project into the `_build` folder. This folder contains `.beam` files which are executable files generated by the Erlang compiler.\n\nYou can also compile the project by running `mix compile` in the command line.\n\n## Tests\n\n[ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html) is a built-in testing framework. Test files are under the `test/` folder in `.exs` files.\n\nIn your `hello_world` project, there should be an example test file `test/hello_world_test.exs` with\nthe following content.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule HelloWorldTest do\n  use ExUnit.Case\n  doctest HelloWorld\n\n  test \"greets the world\" do\n    assert HelloWorld.hello() == :world\n  end\nend\n```\n\nTest files generally correspond to another file in the `lib/` folder.\n\nFor example, a `lib/greeting/hola.ex` file might have a corresponding `test/greeting/hola_test.exs` file.\n\nWe will dive deeper into how to test Elixir projects in the [ExUnit](exunit.livemd) section.\n\nFor now, know that you can execute all of your tests by running the following in the command line.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ mix test\n```\n\n### Your Turn\n\nRun `mix test` in your `hello_world` project folder from the command line, and you\nshould see an output similar to the following.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCompiling 1 file (.ex)\nGenerated hello_world app\n..\n\nFinished in 0.02 seconds (0.00s async, 0.02s sync)\n1 doctest, 1 test, 0 failures\n\nRandomized with seed 768874\n```\n\n## File And Module Names\n\nMix compiles all `.ex` files under the `lib/` folder and bundles them together into a project.\n\nGenerally, Elixir projects organize modules under the main project namespace.\n\nSo all of the modules in the `HelloWorld` application would be grouped under the `HelloWorld` namespace.\n\nFor example, a new `Greeting` module would be defined under `HelloWorld.Greeting`.\n\n```elixir\ndefmodule HelloWorld.Greeting do\n  def salutations(name) do\n    \"Salutations, #{name}!\"\n  end\nend\n```\n\nNested modules generally\nrelate to each other, often sub-modules deal with a more specific application of the higher-level module.\n\nFor example, a `Formal` module would be under the `Greeting` module.\n\n```elixir\ndefmodule HelloWorld.Greeting.Formal do\n  def charmed() do\n    \"Charmed, I'm sure.\"\n  end\nend\n```\n\nWhile not enforced, module and file structure often follow a pattern, where the module name matches its folder and file.\n\nFor example, the `HelloWorld.Greeting.Formal` module would be in a `lib/greeting/formal.ex` file,\nand the `HelloWorld.Greeting` will be in the `lib/greeting.ex` file.\n\n```\nlib/\n  greeting.ex\n  hello_world.ex\n  greeting/\n    formal.ex\n```\n\n### Your Turn\n\nModules can call functions from any other modules in `.ex` files under the `lib/` folder,\njust as you have already seen in livebook cells.\n\n```elixir\ndefmodule ModuleA do\n  def run do\n    \"A\"\n  end\nend\n\ndefmodule ModuleB do\n  def run do\n    ModuleA.run() <> \"B\"\n  end\nend\n\nModuleB.run()\n```\n\nIn your `hello_world` application, create a new module, `HelloWorld.Name` in a `lib/name.ex` file, which will return a random name.\n\n```elixir\ndefmodule HelloWorld.Name do\n  def random do\n    Enum.random([\"Peter\", \"Bruce\", \"Tony\"])\n  end\nend\n```\n\nThen, call the `HelloWorld.Name.random/0` function from the `HelloWorld` module in `hello_world.ex`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule HelloWorld do\n  def hello do\n    \"Hello, #{HelloWorld.Name.random()}.\"\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nRun your project in the [IEx](https://hexdocs.pm/iex/IEx.html) shell and ensure the `HelloWorld.hello/0` function works as expected.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ iex -S mix\niex> HelloWorld.hello()\n\"Hello, Peter.\"\n```\n\n## Mix.exs\n\nThe `mix.exs` file's main responsibility is to configure the mix project.\n\nIt defines two public functions, `project/0` and `application/0`.\n\nThe `project/0` function returns project configuration such as the project name, current version, and installed dependencies. The `project/0` function relies on the private `deps/0` function to provide a list of dependencies.\n\nThe `application/0` function returns application configuration used to generate an application manifest file  in the `_build` folder. This file is used under the hood to run the project. For more, you can see the [Application](https://hexdocs.pm/elixir/main/Application.html) module\non HexDocs. Sometimes removing the `_build` folder and recompiling a project can resolve compilation bugs.\n\n## Dependencies\n\nOther developers create open-source Elixir projects hosted on GitHub, which we can add as dependencies to our project.\n\nThere is a massive ecosystem of Elixir projects, which means you don't have to\nreinvent the wheel and solve already solved problems. The [Hex.pm](https://hex.pm/) contains a list of available Elixir projects you may find useful. For a curated list, check out the [awesome-elixir](https://github.com/h4cc/awesome-elixir) project.\n\nTo install a dependency, include the name of the project and desired version in a tuple inside the `deps/0` function\nin `mix.exs`. Notice that `mix.exs` includes comments on installing a dependency using the project version or GitHub URL.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  defp deps do\n    [\n      # {:dep_from_hexpm, \"~> 0.3.0\"},\n      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"}\n    ]\n  end\n```\n\n### Your Turn\n\nAdd the [Faker](https://hex.pm/packages/faker) project to your `hello_world` application.\n[Faker](https://hexdocs.pm/faker/readme.html) provides functions for generating fake data, often useful for randomized test data.\n\nIt's often most reliable to check the [Hex page](https://hex.pm/packages/faker) of a project for the latest version.\n\nEnsure you add `:faker` with the latest version to the `deps/0` function in `mix.exs`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  defp deps do\n    [\n      {:faker, \"~> 0.17.0\"}\n    ]\n  end\n```\n\nThen run `mix deps.get` to update your project dependencies.\n\nOnce installed, you have access to the [Faker](https://hexdocs.pm/faker/readme.html) module.\n\nUse the `Faker.Person.first_name/0` function in your `HelloWorld.hello/0` function.\n\nFor more on how to use [Faker](https://hexdocs.pm/faker/readme.html), you can read the [Faker Documentation](https://hexdocs.pm/faker/readme.html).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef hello do\n  \"Hello, #{Faker.Person.first_name()}.\"\nend\n```\n\nEnsure your `hello/0` function works in the IEx shell.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex -S mix\niex> HelloWorld.hello()\n\"Hello, Salvador.\" # The name will be random each time.\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Versions\n\nProject [Versions](https://hexdocs.pm/elixir/Version.html) are generally represented by\n`Major.Minor.Patch` numbers.\n\nWhen installing dependencies, we specify a [version requirement](https://hexdocs.pm/elixir/Version.html#module-requirements).\nWe can even specify a version between two numbers using comparison operators. i.e. `>= 2.0.0 and < 2.1.0`,\n\nThe locally installed dependency may not exactly match the version requirement, but must belong in the range specified.\n\nThe `~>` symbol you see in dependencies means it will never go above its upper bound.\n\n* `~> 2.1` would allow any version below `3.0.0` and above or equal to `2.1.0`.\n* `~> 2.1.2` would allow any version below `2.2.0` and above or equal to `2.1.2`.\n\nThe [Version documentation](https://hexdocs.pm/elixir/Version.html) goes into further depth.\n\nYou can automatically update project versions by running the following in your command line.\n\n```\nmix deps.update example_dep\n```\n\nOr with the `--all` option to update all deps.\n\n```\nmix deps.update --all\n```\n\n## Formatting\n\nThe `.formatter.exs` file contains project configuration for how to format Elixir source code files automatically.\n\nYou can run `mix format` from the command line in the project folder to format elixir code.\n\n### Your Turn\n\nIndent the code in `hello_world.ex`. Then, run `mix format` and notice the code automatically\nformats. If it does not, ensure that you do not have syntax errors that prevent code formatting.\n\n## README.md\n\nMost projects include a README.md file which contains basic information about the project written in markdown.\n\nThere is no universal README structure however it's common to include:\n\n* The repository name.\n* The project purpose.\n* Setup instructions.\n* Collaborators on the project.\n\nGitHub pages display the README on the front of the repository page for the project.\n\nWhen building your own projects,\nyou'll want to make sure you update the default README to include relevant information.\n\nView the [Markdown cheat-sheet](https://www.markdownguide.org/cheat-sheet/) for a quick guide on markdown syntax.\n\n## Mix Environments\n\nMix projects can run in different environments. The default environment is your development `:dev` environment.\n\nRun your `hello_world` project in the IEx shell and call `Mix.env()` to see that `:dev` is the current environment.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ iex -S mix\niex> Mix.env()\n:dev\n```\n\nThe project will use the `:test` environment when running tests and `:prod` when deployed to production.\n\nWe can change project behavior or configuration based on the current environment. For example,\nif you had SMS (text) notifications in your project, you might want to disable them in the `:dev` and `:test`\nenvironment to ensure that developers don't accidentally send out text messages to users.\n\n## Further Reading\n\nFor more on [Mix](https://hexdocs.pm/mix/Mix.html), consider reading the following.\n\n* [elixir-lang: Intro to Mix](https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html)\n* [HexDocs: Mix](https://hexdocs.pm/mix/Mix.html#content)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Mix reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Mix\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/pascals_triangle.livemd\">Pascal's Triangle</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games.livemd\">Games Project</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task6-reading-html_css", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"box-model-example.png\",\"type\":\"attachment\"},{\"name\":\"box-model-inline-block-example.png\",\"type\":\"attachment\"},{\"name\":\"box-model-inline-example.png\",\"type\":\"attachment\"},{\"name\":\"css_breakdown.png\",\"type\":\"attachment\"},{\"name\":\"hello_world_html.png\",\"type\":\"attachment\"},{\"name\":\"hello_world_html_green_text.png\",\"type\":\"attachment\"},{\"name\":\"html_element_diagram_breakdown.png\",\"type\":\"attachment\"},{\"name\":\"inspector-elements-example.png\",\"type\":\"attachment\"},{\"name\":\"inspector-right-click.png\",\"type\":\"attachment\"}]} -->\n\n# HTML & CSS\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=HTML & CSS\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/concurrent_word_count.livemd\">Concurrent Word Count</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/common_components.livemd\">Common Components</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are the parts of an HTML element?\n* What are the parts of a CSS rule?\n* How do we select elements to apply a CSS rule to?\n\n## Overview\n\n### HTML\n\nHyper Text Markup Language (HTML) is used to structure a web page and its content.\n\nHTML defines many HTML elements. For example, the following is an [HTML paragraph element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p).\n\n```html\n<p>hello world</p>\n```\n\nAn HTML element generally includes an opening tag, content, and closing tag.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/html_element_diagram_breakdown.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere is a brief overview of HTML by Fireship.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=ok-plXXHlWw\\\")\",\"title\":\"Hidden Cell\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=ok-plXXHlWw\")\n```\n\n### CSS\n\nCascading Style Sheets (CSS) is the language used to style HTML web pages.\n\nCSS rules apply in the order they are defined (hence, cascading). Each CSS rule has a **selector** to target HTML elements and semi-colon separated **declarations** of styles to apply.\n\nFor example, the following is a CSS rule that would apply to all paragraph tags to make them green and bold.\n\n```css\np {\n  color: green;\n  font-weight: bold;\n}\n```\n\nThe CSS above would style the paragraph tag like so.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<hr />\n\n<p style=\"color: green; font-weight: bold;\">\nHello, world!\n</p>\n\n<hr />\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere's a breakdown of our CSS rule.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/css_breakdown.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere's another great overview video by Fireship.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=OEV8gMkCHXQ\")\n```\n\n## HTML Files\n\nWe can create `.html` files and open them in the browser. For example, create a file `hello.html` with the following content.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>\n```\n\nOpen this file in the browser and see the following web page.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/hello_world_html.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHTML documents are a nested series of HTML elements. See the [Anatomy of an HTML document](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics#anatomy_of_an_html_document) for a complete breakdown.\n\nThe `<head>` element contains metadata about the document, such as the CSS styles. We can add a `<style>` element inside of the `<head>` element to write our CSS for the document. The `<body>` element contains the web page's content.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nReplace the `hello.html` file with the following content.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n    <style>\n      p {\n        color: green;\n        font-weight: bold;\n      }\n    </style>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>\n```\n\nNow when we reload the browser, we should see the same web page but with bold green text.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/hello_world_html_green_text.png)\n\n## CSS Files\n\nRather than defining our styles in a `<style>` tag, we can use external `.css` stylesheet files using the `<link>` tag.\n\n```html\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>\n```\n\nA `styles.css` file in the same folder as `hello.html` contains the CSS.\n\n```css\np {\n  color: green;\n  font-weight: bold;\n}\n```\n\nA `.css` file can include another `.css` file using `@import`. Importing files helps organize CSS files on larger projects.\n\n```css\n/* in styles.css */\n@import 'otherstyles.css';\n```\n\n`otherstyles.css` would be another stylesheet in the same folder as `styles.css`.\n\n## CSS Selectors\n\nCSS selectors describe which HTML elements to apply the CSS rule to.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Type\n\nWe've already seen we can select all matching elements using the element tag name.\n\n```css\np {\n  color: green;\n}\n```\n\nThe type selector applies styles to all elements with a matching node name, so `p` matches all `<p>` tags.\n\n```html\n<p>all paragraph tags will be green</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Class\n\nBy far, the most commonly used selector is a class. We define a CSS class selecting using a `.` followed by the class name.\n\n```css\n.green-text {\n  color: green;\n}\n```\n\nThe `.green-text` class will apply to all elements with the `green-text` class attribute. Attributes are key-value pairs that contain additional information about the element.\n\n```html\n<p class=\"green-text\">This text will be green.</p>\n<p class=\"green-text\">This text will also be green.</p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### ID\n\nIDs work similarly to class, however, the `id` attribute should be unique for each element.\nWe define a CSS id using a `#` followed by the id name.\n\n```css\n#first-paragraph {\n  color: green\n}\n```\n\nThe `#first-paragraph` id will then apply to the element with the `first-paragraph` id attribute.\n\n```html\n<p id=\"first-paragraph\">This text will be green and bold.</p>\n```\n\nKeep in mind that browsers do not enforce unique IDs. However, it is conventional and strongly encouraged.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Children\n\nWe select all direct children of an element using a `>` symbol between selectors.\n\n```css\n.parent > .child {\n  color: green;\n}\n```\n\nThe `>` selects all elements with the `.child` class that are direct children of the `.parent` class.\n\n```html\n<div class=\"parent\">\n  <p class=\"child\">This text will be green.</p>\n  <p>This text will NOT be green.</p>\n</div>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Descendents\n\nWe select can all descendants of an element using a space between selectors.\n\n```css\n.parent .descendant {\n  color: green;\n}\n```\n\nThe space selects all elements with the `.child` class inside the`.parent` class element.\n\n```html\n<div class=\"parent\">\n  <section>\n    <p class=\"descendant\"> This text will be green. </p>\n  <section>\n</div>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Universal\n\nThe `*` symbol allows us to select all elements.\n\n```css\n\n* {\n  color: green\n}\n```\n\nAll elements, regardless of type, will be selected.\n\n```html\n<p>This text will be green.</p>\n<h1>This text will also be green.</h1>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Further Selectors\n\nSee the [MDN CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors) documentation for a complete guide on CSS selectors.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nThere is a fun website [CSS Diner](https://flukeout.github.io/) where you can practice using CSS selectors.\n\nPlay the CSS Diner game to familiarize yourself with selectors until you feel satisfied with your ability. We recommend you play up to the first eleven levels.\n\n## HTML Elements\n\nThere are a massive number of HTML elements. We recommend the [MDN HTML Element reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) for a complete list.\n\nHTML and CSS are deep topics, and as an Elixir-focused course, we aim to cover the most commonly used HTML elements and CSS rules.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Headings And Paragraphs\n\nHeading elements represent six levels of section headings. Often, you will use headings\nin descending order to create headings and subheadings.\n\n```html\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n```\n\nWe've already seen the `<p>` tag for paragraph content. Each paragraph tag is automatically on a new line.\n\n```html\n<p>Paragraph</p>\n```\n\nWe can also use the `<span>` tag to group inner text content (perhaps for styling) without creating a new line of text.\n\n```html\n\n<p>Outer content. <span>Inner content</span></p>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Lists\n\nThe ordered list `<ol>` and list item `<li>` tags create numbered lists.\n\n```html\n<ol>\n  <li>a</li>\n  <li>b</li>\n  <li>c</li>\n</ol>\n```\n\nThe above HTML displays the following.\n\n<ol>\n  <li>a</li>\n  <li>b</li>\n  <li>c</li>\n</ol>\n\nIf we want to use non-numbered lists with dashes, we can use the unordered list `<ul>` tag instead.\n\n```html\n<ul>\n  <li>a</li>\n  <li>b</li>\n  <li>c</li>\n</ul>\n```\n\nThe above HTML displays the following.\n\n<ul>\n  <li>a</li>\n  <li>b</li>\n  <li>c</li>\n</ul>\n\nTo create nested lists, we can nest ordered and unordered lists inside one another.\n\n```html\n<ul>\n  <li>a</li>\n  <ol>\n    <li>b</li>\n    <ul>\n      <li>c</li>\n    </ul>\n  </ol>\n</ul>\n```\n\nThe above HTML displays the following.\n\n<ul>\n  <li>1</li>\n  <ol>\n    <li>1.1</li>\n    <ul>\n      <li>1.1.1</li>\n    </ul>\n  </ol>\n</ul>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Images\n\nThe `<img>` tag embeds image content into a web page.\n\nImages must include a `src` attribute for the local file or URL of the image to embed.\n\nImages may include an `alt` attribute. The `alt` attribute is a text description of the image used as a fallback if the image does not load and for screen readers.\n\nHere are two `<img>` tag examples.\n\n```html\n<img src=\"https://picsum.photos/200\" alt=\"a random lorem ipsum image\"></img>\n<img src=\"broken url\" alt=\"image purposefully not loaded\"></img>\n```\n\nThe first `<img>` tag above loads an image from https://picsum.photos/200.\n\n<img src=\"https://picsum.photos/200\" alt=\"a random lorem ipsum image\" />\n\nThe second displays the `alt` text when it fails to load.\n\n<img src=\"broken url\" alt=\"image purposefully not loaded\" />\n\nImages can use a self-closing tag `<img/>`, so they do not require an opening and closing tag. `<img></img>`.\n\n```html\n<img src=\"https://picsum.photos/200\" alt=\"a random lorem ipsum image\" />\n<img src=\"broken url\" alt=\"image purposefully not loaded\" />\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Anchors\n\nThe `<a>` anchor tag creates a link to another resource using the `href` attribute as the URL for the resource.\n\n```html\n<a href=\"https://www.google.com/search?q=cat+pictures\">Cat Pictures Link</a>\n```\n\nThe anchor tag above displays the following.\n\n<a href=\"https://www.google.com/search?q=cat+pictures\">\nCat Pictures Link\n</a>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Tables\n\nWe can organize information into rows and columns using tables. Each table starts with a table tag `<table>`. The table row `<tr>` and table data `<td>` tags can then create each row of data in the table.\n\n```html\n<table>\n  <tr>\n    <td>Column 1</td>\n    <td>Column 2</td>\n    <td>Column 3</td>\n  </tr>\n    <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n  </tr>\n</table>\n```\n\nWe can use the table head `<thead>`, table body `<tbody>`, and table footer `<tfooter>` components to define the header, body, and footer sections of the table. The table header `<th>` element defines a styled header cell rather than the default table data `<td>` cell.\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th>Header 1</th>\n      <th>Header 2</th>\n      <th>Header 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Cell 1</td>\n      <td>Cell 2</td>\n      <td>Cell 3</td>\n    </tr>\n  </tbody>\n  <tfooter>\n    <tr>\n      <td>Footer 1</td>\n      <td>Footer 2</td>\n      <td>Footer 3</td>\n    </tr>\n  </tfooter>\n</table>\n```\n\nThe `colspan` attribute allows each cell take up a specified number of columns.\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th colspan=\"3\">Full Header</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Cell 1</td>\n      <td>Cell 2</td>\n      <td>Cell 3</td>\n   </tr>\n  </tbody>\n</table>\n```\n\nFor a full guide to HTML tables, see the [MDN Table](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) documentation.\n\n## Division\n\nWe can use the `<div>` tag when we need to group content.\n\n```html\n<div>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</div>\n```\n\nThe division tag is very generic and minimal. It does not convey any meaning about the content and is typically used to group content together for styling.\n\nIt's a common issue to overused div tags. Instead, ideally, we should use semantic tags instead of divs where possible.\n\n## Semantic Tags\n\nHTML includes several semantic tags that group content and describe their meaning.\n\nWe recommend this tutorial by The Net Ninja for an overview of semantic tags.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=kGW8Al_cga4\")\n```\n\n## CSS Cascading\n\n**Cascading** Style Sheets apply rules in the order they are defined. Therefore, multiple CSS rules can apply to the same element, and declarations in one rule can override another.\n\nIn the example below, the second rule overrides the first.\n\n```css\np {\n  color: red;\n}\n\np {\n  color: blue;\n}\n```\n\nSo all paragraph tags will be blue, not red.\n\n```html\n<p>This text will be blue, not red.</p>\n```\n\nMultiple non-conflicting rules can still apply to the same element. In the example below, the paragraph tag would be bold and green.\n\n```css\np {\n  color: green;\n}\n\np {\n  font-weight: bold;\n}\n```\n\n## CSS Specificity\n\nCSS prioritizes different selectors over one another. We refer to this prioritization as specificity. The greater the specificity, the higher the priority of the rule.\n\nFor example, a class selector will always override a type selector and ignore cascading order.\n\n```css\n.my-class {\n  color: blue\n}\n\n<!-- this rule will not apply -->\np {\n  color: red;\n}\n```\n\nSo the following paragraph tag would be blue, not red.\n\n```html\n<p class=\"my-class\">This text will be blue.</p>\n```\n\nSee the [Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) documentation for more on how to determine specificity.\n\nFor a more hands-on guide, we recommend this video by whatsdev.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=ndM8b-hnSwM\")\n```\n\nWe can also use the `!important` flag to prioritize a CSS declaration. We should be careful when using this flag, as it can make our CSS difficult to reason about.\n\n```css\n.my-class {\n  color: red\n}\n\np {\n  color: blue !important;\n}\n```\n\n## Inspector\n\nMany browsers allow you to inspect the HTML and CSS in a web page. The inspector is incredibly useful for understanding how projects work under the hood.\n\nWe will use Google Chrome for our examples, but similar functionality is available in Firefox and other browsers.\n\nConsider [downloading Google Chrome](https://www.google.com/intl/en_ca/chrome/) to follow along with inspector examples.\n\nWe can open the inspector by right-clicking on any element in a web page and selecting **Inspect**. We can view the **Elements** that make up the web page and the **Styles** for those elements.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nReplace `hello.html` with following content.\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Hello!</title>\n        <style>\n            p {\n                color: green;\n                font-weight: bold;\n            }\n        </style>\n    </head>\n    <body>\n        <p>Hello World!</p>\n    </body>\n</html>\n```\n\nOpen `hello.html` in your browser, right-click and select **inspect** on the paragraph tag.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/inspector-right-click.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe **Elements** tab contains the HTML of the web page. Click the arrow to expand the `<body>` tag if it is not already open.\n\nSelect the paragraph tag and view the **Styles** tab. From here, you can see the styles applied to the element.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/inspector-elements-example.png)\n\n## CSS Box Model\n\nThe CSS box model is a box that wraps every HTML Element which we use for positioning and layout.\n\nEvery HTML Element has **content** containing text or child elements, internal **padding**, a **border**, and external **margin**.\n\n```mermaid\nflowchart\nsubgraph Margin\n  subgraph Border\n    subgraph Padding\n      Content\n    end\n  end\nend\n```\n\nWe generally use `px` (pixels) or percent `%` for CSS measurements. For a full list of CSS units see the [MDN CSS Values and Units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths) documentation.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Padding And Margin\n\nWe can set the size of the padding and margin properties. A single unit sets the top, right, bottom, and left margin values.\n\n```css\np {\n  padding: 10px;\n  margin: 10px;\n}\n```\n\nAlternatively, we can add up to four units in the order of top, right, bottom, and left.\n\n```css\np {\n  /*top right bottom left*/\n  padding: 10px 20px 30px 40px;\n}\n```\n\nMissing units will mirror the opposite value. Below, the top and bottom padding are `10px`, and the right and left padding are `5px`.\n\n```css\np {\n  padding: 10px 5px;\n}\n```\n\nWe can also individually set the top, right, bottom, and left margin or padding.\n\n```css\np {\n  padding-top: 10px;\n  padding-right: 20px;\n  padding-bottom: 30px;\n  padding-left: 40px;\n\n  margin-top: 10px;\n  margin-right: 20px;\n  margin-bottom: 30px;\n  margin-left: 40px;\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Border\n\nA border has `border-width`, `border-color`, and `border-style` values.\n\n```css\np {\n  border-style: solid;\n  border-width: 5px;\n  border-color: black;\n}\n```\n\nOr we can use the `border` property to set all three at once.\n\n```css\np {\n  border: 5px solid black;\n}\n```\n\nSee the [MDN Border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) documentation for further customization.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Height And Width\n\nWe can set the content `height` and `width` properties.\n\n```css\np {\n  height: 100px;\n  width: 100px;\n}\n```\n\nThe total height and width of an element will be an addition of the margin, padding, border, and content. For example, the following class would be `140px` in height and width because `(10 * 2) + (10 * 2) + 100 = 140`.\n\n```css\n.class {\n  height: 100px;\n  width: 100px;\n  padding: 10px;\n  border: 10px solid black;\n}\n```\n\nAlternatively, we can set the `box-sizing` property to `border-box` to include the border and padding in the element's total height and width. The content height and width are then automatically computed.\n\nNow the element's total height and width, including padding and border, will be `100px`.\n\n```css\n.class {\n  box-sizing: border-box;\n  height: 100px;\n  width: 100px;\n  padding: 10px;\n  border: 10px solid black;\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nReplace `hello.html` with the following content.\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n    <style>\n        .box-model-example {\n            width: 100px;\n            height: 100px;\n            padding: 10px;\n            margin: 10px;\n            border: solid black 10px;\n        }\n    </style>\n</head>\n\n<body>\n    <p class=\"box-model-example\">Content</p>\n</body>\n\n</html>\n```\n\nWe can view the box model of any HTML elements using the inspector. For example, inspect the `<p>` and go to the **Computed** section to see the computed box model.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/box-model-example.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHover your cursor over the `<p>` tag in the **Elements** section to see the box model highlighted on the page.\n\nYou can also hover your cursor over the box model in the **Computed** section to highlight the content, padding, border, and margin individually.\n\nNotice that while we set the margin to be `10px` on all sides, the horizontal margin takes up the entire page. That's because, by default, the `<div>` element is a block element, which we will cover in the next section.\n\n## CSS Display\n\nThe **display** property determines how to display elements on the page. Elements have different default display properties.\n\nFor example, `<div>` is a **block** element. Block elements start on a new line and take up the whole width of the line.\n\nAlternatively,`<span>` is an **inline** element. Inline elements exist on the same line as the previous element.\n\n**Inline** elements ignore height and width values. Instead of inline, we can use **inline-block** values to display an element on the same line, but apply width and height values.\n\nGenerally, you can accomplish the most common CSS behaviors with block, inline, and inline-block elements. However, there is a massive list of alternative display properties. See the [MDN Display](https://developer.mozilla.org/en-US/docs/Web/CSS/display) documentation for a full list of display values.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nAlter the `.box-model-example` class to use an inline div element instead of a block div element.\n\nThe `...` represents the rest of the CSS styles in `.box-model-example`.\n\n```css\n.box-model-example {\n  display: inline;\n  ...\n}\n```\n\nUse the inspector to view the computed box model. Notice the height and width do not apply to inline elements.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/box-model-inline-example.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nAlter the display property again to use the inline-block value.\n\n```css\n.box-model-example {\n  display: inline-block;\n  ...\n}\n```\n\nUse the inspector to view the computed box model. Notice the margin no longer takes up the entire line width.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/box-model-inline-block-example.png)\n\n## CSS Position\n\nThe **position** property defines how an element positions itself on the page.\n\nBy default, HTML elements have a **static** position property where they flow normally on the page.\n\n```css\np {\n  position: static;\n}\n```\n\nThere are other useful positioning properties such as **relative**, **absolute**, **fixed** and **sticky**. We recommend the [MDN Position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) documentation for a full guide.\n\nWe also recommend this video by Web Dev Simplified.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=jx5jmI0UlXU\")\n```\n\n## CSS Layout\n\nCSS provides many tools for the layout of elements.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Center Align Element\n\nWe can use `margin: auto;` to center a block element horizontally inside its container. The element must have a smaller width than its parent container as this automatically adds left and right margin based on the remaining space in the parent container.\n\n```css\n.center {\n  margin: auto;\n  width: 100px;\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Right And Left Align Element\n\nWe can use `position: absolute;` to right align or left align an element to its parent container.\n\n```css\n.right {\n  position: absolute;\n  right: 0;\n}\n\n.left {\n  position: absolute;\n  left: 0;\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Align Text\n\nWe can left, right, and center align text using the `text-align` property.\n\n```css\n.right {\n  text-align: right;\n}\n\n.center {\n  text-align: center;\n}\n\n.left {\n  text-align: left;\n}\n```\n\n## CSS Colors\n\nCertain CSS declarations accept a color name as a value. For example, we've used to `color` property to set the color of some text content.\n\n```css\np {\n  color: red;\n}\n```\n\nWe're also able to set the background color of an element.\n\n```css\np {\n  background-color: red;\n}\n```\n\nFor a full list of valid color names, see the [MDN Color Keywords](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) documentation.\n\nWe can also use the RGB (red, green, blue), RGBA (red, green, blue, alpha), HEX (hexadecimal value), or HSL (hue, light, saturation) representations for colors.\n\nHere's the color yellow in a variety of formats.\n\n```css\n<!-- color keyword -->\np {\n  color: yellow;\n}\n\n<!-- RGB -->\np {\n  color: rgb(255, 255, 0);\n}\n\n<!-- RGBA -->\np {\n  color: rgba(255, 255, 0, 1);\n}\n\n<!-- HEX code -->\np {\n  color: #FFFF00;\n}\n\n<!-- HSL -->\np {\n  color: hsl(60, 100%, 50%);\n}\n```\n\nWe recommend using a browser extension that finds the color code for a color on a web page, such as [Color Zilla](https://www.colorzilla.com/).\n\nIt's also handy to use a color selector such as the [Chrome Color Selector](https://www.google.com/search?q=google+chrome+color+selector) for picking colors and getting their code representation.\n\n## Fonts\n\n### Font Weight\n\nWe've already used the `font-weight` property, which can set the font-weight using a number or named weight.\n\n```css\n/* Keyword values */\nfont-weight: normal;\nfont-weight: bold;\n\n/* Keyword values relative to the parent */\nfont-weight: lighter;\nfont-weight: bolder;\n\n/* Numeric keyword values */\nfont-weight: 100;\nfont-weight: 200;\nfont-weight: 300;\nfont-weight: 400;// normal\nfont-weight: 500;\nfont-weight: 600;\nfont-weight: 700;// bold\nfont-weight: 800;\nfont-weight: 900;\n\n/* https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#syntax */\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Font-Size\n\nWe can also set the `font-size`. We can set the font size using `px`. However, pixels are a static value, which can cause issues depending on the screen size.\n\n```css\np {\n  font-size: 20px;\n}\n```\n\nInstead, we recommend using a relative unit such as `em`. `1em` is equal to the current font size.  The default font size on browsers is `16px`, and users can change their font size if desired.\n\n```css\np {\n  font-size: 1.875em;\n}\n\nh1 {\n  font-size: 3em;\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Font-Family\n\nWe can change the font family of an element.\n\nThere are many generic font families such as `serif`, `sans-serif`, `monospace`, and `cursive`.\n\n```css\np {\n  font-family: serif\n}\n```\n\nWe can also use any fonts installed on the user's computer. If the font doesn't exist, it will use any comma-separated fallback fonts.\n\n```css\np {\n  font-family: Verdana, Arial, sans-serif;\n}\n```\n\nSome fonts, such as Arial and Verdana, are web-safe because most users should have them installed. However, we often want to use custom fonts.\n\nWe can install custom fonts using [Google Fonts](https://fonts.google.com/) or other similar services.\n\nFor example, we could use the [League Gothic](https://fonts.google.com/specimen/League+Gothic) font from Google Fonts. Google Fonts contains the `<link>` tag instructions for installing the font in an HTML document.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n    <!-- The following installs the league gothic font -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=League+Gothic&display=swap\" rel=\"stylesheet\">\n    <style>\n        p {\n            font-family: 'League Gothic', sans-serif;\n        }\n    </style>\n</head>\n\n<body>\n    <p>Hello World!</p>\n</body>\n\n</html>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nInstall and use a custom font from [Google Fonts](https://fonts.google.com/) in your `hello.html` file. You may choose any freely available font you wish.\n\n## Flex And Grid\n\nFlex and Grid are two very powerful ways to create responsive layouts with CSS. As we are focused on Elixir development they are beyond the scope of this course. However, they will be very important if you want to create layouts that work on multiple device sizes.\n\nTo learn more about Flexbox, we recommend you start with these two quick primers by Fireship.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=K74l26pE4YA&ab_channel=Fireship\\\")\",\"title\":\"Flexbox\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=K74l26pE4YA&ab_channel=Fireship\")\n```\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=uuOXPWCh-6o&ab_channel=Fireship\\\")\",\"title\":\"Grid\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=uuOXPWCh-6o&ab_channel=Fireship\")\n```\n\n## Further Reading\n\nArmed with the fundamentals of HTML and CSS, we're ready to build functional and great-looking websites. However, HTML and CSS are both massive topics, and there is still much more to learn.\n\nConsider the following resources as you continue your HTML and CSS learning journey.\n\n* [MDN CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)\n* [MDN HTML](https://developer.mozilla.org/en-US/docs/Web/HTML)\n\nFor experimenting with HTML and CSS, we recommend sites such as [CodePen](https://codepen.io/) that make it easy to prototype HTML and CSS designs rapidly.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish HTML & CSS reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=HTML & CSS\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/concurrent_word_count.livemd\">Concurrent Word Count</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/common_components.livemd\">Common Components</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task7-reading-pic_chat_authentication", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# PicChat: Authentication\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Authentication\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_messages.livemd\">PicChat: Messages</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_image_upload.livemd\">PicChat: Image Upload</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we get the current user in a LiveView?\n* How do we protect a collection of live routes using [live_session/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Router.html#live_session/3)?\n\n## PicChat: Messages\n\nOver the next several lessons, we're going to build a `PicChat` application where users can create messages with uploaded pictures. This lesson will focus on adding authentication and authorization for messages.\n\nUse the [mix phx.gen.auth](https://hexdocs.pm/phoenix/1.6.15/Mix.Tasks.Phx.Gen.Auth.html) to generate all of the LiveView boilerplate needed to manage a `Messages` resource.\nEnsure you select the LiveView option for authentication\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ mix phx.gen.auth Accounts User users\nAn authentication system can be created in two different ways:\n- Using Phoenix.LiveView (default)\n- Using Phoenix.Controller only\nDo you want to create a LiveView based authentication system? [Yn] Y\n```\n\nMigrate the database and install deps.\n\n```\n$ mix deps.get\n$ mix ecto.migrate\n```\n\n## Associate Messages And Users\n\nCreate a new migration to add a `user_id` foreign key to messages. Make it required.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmix ecto.gen.migration add_user_id_to_messages\n```\n\nAdd the following content to the migration.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.Repo.Migrations.AddUserIdToMessages do\n  use Ecto.Migration\n\n  def change do\n    alter table(:messages) do\n      add :user_id, references(:users, on_delete: :delete_all), null: false\n    end\n  end\nend\n```\n\nReset the database.\n\n```\n$ mix ecto.reset\n```\n\nAdd the association in the `Message` schema.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.Chat.Message do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"messages\" do\n    field :content, :string\n    belongs_to :user, PicChat.Accounts.User\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(message, attrs) do\n    message\n    |> cast(attrs, [:content, :user_id])\n    |> validate_required([:content])\n  end\nend\n```\n\nSend the `user_id` when using the message form to create a message. You'll need to provide the current user to the `form_component`. `@current_user` is already assigned by the `fetch_current_user/2` plug.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.html.heex\n<.live_component\n  module={PicChatWeb.MessageLive.FormComponent}\n  id={@message.id || :new}\n  title={@page_title}\n  action={@live_action}\n  message={@message}\n  patch={~p\"/messages\"}\n  current_user={@current_user}\n/>\n```\n\nDo the same for updating the message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Show.html.heex\n<.live_component\n  module={PicChatWeb.MessageLive.FormComponent}\n  id={@message.id}\n  title={@page_title}\n  action={@live_action}\n  message={@message}\n  patch={~p\"/messages/#{@message}\"}\n  current_user={@current_user}\n/>\n```\n\nThen provide `user_id` as a hidden input in the form.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Form_component.ex\n<.simple_form\n  for={@form}\n  id=\"message-form\"\n  phx-target={@myself}\n  phx-change=\"validate\"\n  phx-submit=\"save\"\n>\n  <.input field={@form[:content]} type=\"text\" label=\"Content\" />\n  <!-- Add the hidden user_id field -->\n  <.input field={@form[:user_id]} type=\"hidden\" value={@current_user.id} />\n  <:actions>\n    <.button phx-disable-with=\"Saving...\">Save Message</.button>\n  </:actions>\n</.simple_form>\n```\n\n## Protect Routes\n\n### Authentication\n\nLiveViews cannot be protected using the usual `pipe_through [:browser, :require_authenticated_user]` macro because If we use a WebSocket connection, we won't send a new HTTP request, and we won't go through the defined `require_authenticated_user` plug in our router.\n\nInstead, we can protect routes using [live_session/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Router.html#live_session/3) to group routes together and run a common `on_mount/4` callback function whenever a LiveView mounts.\n\nThe generated `UserAuth` module already defines a few useful `on_mount/4` callbacks:\n\n* `:ensure_authenticated`.\n* `:mount_current_user`.\n* `:redirect_if_user_is_authenticated`\n\nWe're also going to create our own: `:require_user_owns_message`.\n\nReplace your `messages` routes with the following:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  scope \"/\", PicChatWeb do\n    pipe_through [:browser, :require_authenticated_user]\n\n    live_session :protected_messages,\n      on_mount: [\n        {PicChatWeb.UserAuth, :ensure_authenticated},\n        {PicChatWeb.UserAuth, :require_user_owns_message}\n      ] do\n      live \"/messages/new\", MessageLive.Index, :new\n      live \"/messages/:id/edit\", MessageLive.Index, :edit\n      live \"/messages/:id/show/edit\", MessageLive.Show, :edit\n    end\n  end\n\n  scope \"/\", PicChatWeb do\n    pipe_through :browser\n\n    get \"/\", PageController, :home\n\n    # We mount the current user as we'll need it to conditionally display elements later.\n    live_session :messages, on_mount: [{PicChatWeb.UserAuth, :mount_current_user}] do\n      live \"/messages\", MessageLive.Index, :index\n      live \"/messages/:id\", MessageLive.Show, :show\n    end\n  end\n```\n\nThis introduces a security risk if we trigger a `patch` navigation event because it bypasses mounting a LiveView, so we need to ensure we use `navigate` instead.\n\nChange **all** of the `patch` events to `navigate` for pages that require an authenticated user.\n\nFor example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.link navigate={~p\"/messages/new\"}>\n  <.button>New Message</.button>\n</.link>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Authorization\n\nCurrently any user can access any user's messages and delete or update them. To resolve this problem, we can create a custom `on_mount` callback function to restrict certain pages to only the user that owns them.\n\nFirst, define a `:require_user_owns_message` function clause for `on_mount/4` in `UserAuth`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef on_mount(:require_user_owns_message, %{\"id\" => message_id}, _session, socket) do\n  message = PicChat.Chat.get_message!(message_id)\n  if socket.assigns.current_user.id == message.user_id do\n    {:cont, socket}\n  else\n    socket =\n      socket\n      |> Phoenix.LiveView.put_flash(:error, \"You must own this resource to access this page.\")\n      |> Phoenix.LiveView.redirect(to: ~p\"/users/log_in\")\n\n    {:halt, socket}\n  end\nend\n\n# Automatically Continues For Routes That Are Not For A Specific Message.\ndef on_mount(:require_user_owns_message, _params, _session, socket), do: {:cont, socket}\n```\n\nThen protect the routes in the existing `live_session/3` for `:messages`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nscope \"/\", PicChatWeb do\n  pipe_through [:browser, :require_authenticated_user]\n\n  live_session :messages,\n    on_mount: [\n      {PicChatWeb.UserAuth, :ensure_authenticated},\n      # added :require_user_owns_message to the `on_mount` callbacks in `router.ex\n      {PicChatWeb.UserAuth, :require_user_owns_message}\n    ] do\n    live \"/messages/new\", MessageLive.Index, :new\n    live \"/messages/:id/edit\", MessageLive.Index, :edit\n    live \"/messages/:id/show/edit\", MessageLive.Show, :edit\n  end\nend\n```\n\n## Protected Event Handlers And Elements\n\nLiveView event handlers are also a security concern, as a user who has mounted the LiveView might be able to trigger event handlers they aren't authorized to use.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Delete Button\n\nFor example, we currently have a problem. Users can delete any other user's message by triggering the `\"delete\"` event in the `MessageLive.Index` LiveView.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef handle_event(\"delete\", %{\"id\" => id}, socket) do\n  message = Chat.get_message!(id)\n  {:ok, _} = Chat.delete_message(message)\n\n  {:noreply, stream_delete(socket, :messages, message)}\nend\n```\n\nFor now, we'll implement a very simple solution. Hide the delete button if the message doesn't belong to the user.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.html.heex\n<%= if assigns[:current_user] && @current_user.id == message.user_id do %>\n  <.link\n    phx-click={JS.push(\"delete\", value: %{id: message.id}) |> hide(\"##{id}\")}\n    data-confirm=\"Are you sure?\"\n  >\n    Delete\n  </.link>\n<% end %>\n```\n\nThis is not an ideal solution, as the event handler is still exposed and unprotected if a user found a way to send an event to the server.\n\nHere's a very lightweight solution for protecting the event handler to give you an idea of how to implement authorization.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\n@impl true\ndef handle_event(\"delete\", %{\"id\" => id}, socket) do\n  message = Chat.get_message!(id)\n\n  if message.user_id == socket.assigns.current_user.id do\n    {:ok, _} = Chat.delete_message(message)\n    {:noreply, stream_delete(socket, :messages, message)}\n  else\n    {:noreply, Phoenix.LiveView.put_flash(socket, :error, \"You are not authorized to delete this message.\")}\n  end\nend\n```\n\nSome systems will implement a separate authorization system for determining if an action is valid.\n\nSee the DockYard blog post [Authorization For Phoenix Contexts](https://dockyard.com/blog/2017/08/01/authorization-for-phoenix-contexts) by Chris McChord for more information. He talks about authorization using controllers, but the same concepts can be applied in LiveView.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Edit Button\n\nWe also have an exposed Edit button. Fortunately, we've protected the edit route so it's not a security concern, but it might be a UI issue to have a button that the user can't interact with.\n\nHere's how we can hide that button by checking if the user owns the message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.html.heex\n<%= if assigns[:current_user] && @current_user.id == message.user_id do %>\n  <.link navigate={~p\"/messages/#{message}/edit\"}>Edit</.link>\n<% end %>\n```\n\nWe have the same problem on the `MessageLive.Show` page. We can fix it the same way.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= if assigns[:current_user] && @current_user.id == @message.user_id do %>\n  <.link navigate={~p\"/messages/#{@message}/show/edit\"} phx-click={JS.push_focus()}>\n    <.button>Edit message</.button>\n  </.link>\n<% end %>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### New Button\n\nHide the new button for users that aren't logged in.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.heex.html\n<%= if assigns[:current_user] do %>\n  <.link navigate={~p\"/messages/new\"}>\n    <.button>New Message</.button>\n  </.link>\n<% end %>\n```\n\n## Fix Tests\n\n### Context Tests\n\nFix the context tests in `chat_test.ex` by adding the `user_id` field whenever creating a message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.ChatTest do\n  use PicChat.DataCase\n\n  alias PicChat.Chat\n\n  describe \"messages\" do\n    alias PicChat.Chat.Message\n\n    import PicChat.ChatFixtures\n    import PicChat.AccountsFixtures\n\n    @invalid_attrs %{content: nil}\n\n    test \"list_messages/0 returns all messages\" do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      assert Chat.list_messages() == [message]\n    end\n\n    test \"get_message!/1 returns the message with given id\" do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      assert Chat.get_message!(message.id) == message\n    end\n\n    test \"create_message/1 with valid data creates a message\" do\n      user = user_fixture()\n      valid_attrs = %{content: \"some content\", user_id: user.id}\n\n      assert {:ok, %Message{} = message} = Chat.create_message(valid_attrs)\n      assert message.content == \"some content\"\n      assert message.user_id == user.id\n    end\n\n    test \"create_message/1 with invalid data returns error changeset\" do\n      assert {:error, %Ecto.Changeset{}} = Chat.create_message(@invalid_attrs)\n    end\n\n    test \"update_message/2 with valid data updates the message\" do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      update_attrs = %{content: \"some updated content\"}\n\n      assert {:ok, %Message{} = message} = Chat.update_message(message, update_attrs)\n      assert message.content == \"some updated content\"\n    end\n\n    test \"update_message/2 with invalid data returns error changeset\" do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      assert {:error, %Ecto.Changeset{}} = Chat.update_message(message, @invalid_attrs)\n      assert message == Chat.get_message!(message.id)\n    end\n\n    test \"delete_message/1 deletes the message\" do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      assert {:ok, %Message{}} = Chat.delete_message(message)\n      assert_raise Ecto.NoResultsError, fn -> Chat.get_message!(message.id) end\n    end\n\n    test \"change_message/1 returns a message changeset\" do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      assert %Ecto.Changeset{} = Chat.change_message(message)\n    end\n  end\nend\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Controller Tests\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nOur controller tests need to be modified in a few ways:\n\n* `UserAuth.log_in_user/3` when necessary to log in a user before mounting the LiveView.\n* Replace [assert_patch/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#assert_patch/3) for links we changed from `patch` to `navigate`.\n* Add the `user_id` field when creating a message.\n\nHere's a full suite of fixed tests.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChatWeb.MessageLiveTest do\n  use PicChatWeb.ConnCase\n\n  import Phoenix.LiveViewTest\n  import PicChat.ChatFixtures\n  import PicChat.AccountsFixtures\n\n  @create_attrs %{content: \"some content\"}\n  @update_attrs %{content: \"some updated content\"}\n  @invalid_attrs %{content: nil}\n\n  describe \"Index\" do\n    test \"lists all messages\", %{conn: conn} do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      {:ok, _index_live, html} = live(conn, ~p\"/messages\")\n\n      assert html =~ \"Listing Messages\"\n      assert html =~ message.content\n    end\n\n    test \"saves new message\", %{conn: conn} do\n      user = user_fixture()\n       conn = conn |> log_in_user(user)\n      {:ok, index_live, _html} = live(conn, ~p\"/messages\")\n\n      {:ok, new_live, html} = index_live |> element(\"a\", \"New Message\") |> render_click() |> follow_redirect(conn)\n\n      assert_redirected(index_live, ~p\"/messages/new\")\n      assert html =~ \"New Message\"\n\n      assert new_live\n             |> form(\"#message-form\", message: @invalid_attrs)\n             |> render_change() =~ \"can&#39;t be blank\"\n\n      assert new_live\n             |> form(\"#message-form\", message: @create_attrs)\n             |> render_submit()\n\n      assert_patch(new_live, ~p\"/messages\")\n\n      html = render(new_live)\n      assert html =~ \"Message created successfully\"\n      assert html =~ \"some content\"\n    end\n\n    test \"updates message in listing\", %{conn: conn} do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      conn = log_in_user(conn, user)\n      {:ok, index_live, _html} = live(conn, ~p\"/messages\")\n\n      {:ok, edit_live, html} = index_live |> element(\"#messages-#{message.id} a\", \"Edit\") |> render_click() |> follow_redirect(conn)\n      assert html =~ \"Edit Message\"\n      assert_redirect(index_live, ~p\"/messages/#{message}/edit\")\n\n      assert edit_live\n             |> form(\"#message-form\", message: @invalid_attrs)\n             |> render_change() =~ \"can&#39;t be blank\"\n\n      assert edit_live\n             |> form(\"#message-form\", message: @update_attrs)\n             |> render_submit()\n\n      assert_patch(edit_live, ~p\"/messages\")\n\n      html = render(edit_live)\n      assert html =~ \"Message updated successfully\"\n      assert html =~ \"some updated content\"\n    end\n\n    test \"deletes message in listing\", %{conn: conn} do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      conn = log_in_user(conn, user)\n      {:ok, index_live, _html} = live(conn, ~p\"/messages\")\n\n      assert index_live |> element(\"#messages-#{message.id} a\", \"Delete\") |> render_click()\n      refute has_element?(index_live, \"#messages-#{message.id}\")\n    end\n  end\n\n  describe \"Show\" do\n    test \"displays message\", %{conn: conn} do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n\n      {:ok, _show_live, html} = live(conn, ~p\"/messages/#{message}\")\n\n      assert html =~ \"Show Message\"\n      assert html =~ message.content\n    end\n\n    test \"updates message within modal\", %{conn: conn} do\n      user = user_fixture()\n      message = message_fixture(user_id: user.id)\n      conn = log_in_user(conn, user)\n\n      {:ok, show_live, _html} = live(conn, ~p\"/messages/#{message}\")\n\n      {:ok, edit_live, html} = show_live |> element(\"a\", \"Edit\") |> render_click() |> follow_redirect(conn)\n\n      assert html =~ \"Edit Message\"\n      assert_redirected(show_live, ~p\"/messages/#{message}/show/edit\")\n\n      assert edit_live\n             |> form(\"#message-form\", message: @invalid_attrs)\n             |> render_change() =~ \"can&#39;t be blank\"\n\n      assert edit_live\n             |> form(\"#message-form\", message: @update_attrs)\n             |> render_submit()\n\n      assert_patch(edit_live, ~p\"/messages/#{message}\")\n\n      html = render(edit_live)\n      assert html =~ \"Message updated successfully\"\n      assert html =~ \"some updated content\"\n    end\n  end\nend\n```\n\n## Your Turn: Username\n\nAdd a `username` string field to the `users` table. Display the username in each chat message.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Chris McChord: Authorization For Phoenix Contexts](https://dockyard.com/blog/2017/08/01/authorization-for-phoenix-contexts)\n* [Sophie DeBenedetto: Securing Your Phoenix LiveView Apps](https://blog.appsignal.com/2022/01/25/securing-your-phoenix-liveview-apps.html)\n* [HexDocs: LiveView Security Model](https://hexdocs.pm/phoenix_live_view/security-model.html)\n* [HexDocs: mix phx.gen.auth](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Auth.html)\n* [HexDocs: LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish PicChat: Authentication reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Authentication\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_messages.livemd\">PicChat: Messages</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_image_upload.livemd\">PicChat: Image Upload</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task8-reading-lists_vs_tuples", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"abc_tuple_garbage_collection.png\",\"type\":\"attachment\"},{\"name\":\"concatinate_list.png\",\"type\":\"attachment\"},{\"name\":\"copying_abc_tuple.png\",\"type\":\"attachment\"},{\"name\":\"delete_list_memory.png\",\"type\":\"attachment\"},{\"name\":\"delete_tuple_memory_diagram.png\",\"type\":\"attachment\"},{\"name\":\"insert_linked_list_memory.png\",\"type\":\"attachment\"},{\"name\":\"inserting_tuples_memory.png\",\"type\":\"attachment\"},{\"name\":\"linked_list_cons_cells.png\",\"type\":\"attachment\"},{\"name\":\"prepend_linked_list_memory.png\",\"type\":\"attachment\"},{\"name\":\"prepending_tuples.png\",\"type\":\"attachment\"},{\"name\":\"tuple_concatination.png\",\"type\":\"attachment\"},{\"name\":\"tuple_storage_contiguously.png\",\"type\":\"attachment\"},{\"name\":\"update_linked_list.png\",\"type\":\"attachment\"},{\"name\":\"update_tuples.png\",\"type\":\"attachment\"}]} -->\n\n# Lists Vs Tuples\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists Vs Tuples\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/picchat_emails.livemd\">PicChat: Emails</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/maps_mapsets_keyword_lists.livemd\">Maps, Mapsets, And Keyword Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How are lists stored under the hood, and how does this impact their performance for reading vs updating?\n* How are tuples stored under the hood and how does this impact their performance for reading vs writing?\n* When should you use a list vs a tuple?\n\n## Overview\n\nLists and Tuples are intended for fundamentally different use cases.\n\nLists are dynamic-sized containers meant to be optimized for updating elements within the list, while Tuples\nare fixed-sized containers optimized for reading values.\n\nIn this lesson, we'll go over how Lists and Tuples are implemented in Elixir so that you can\nunderstand their strengths and weaknesses in order to use them more effectively.\n\nWe will use the following large list and large tuple to perform several benchmarks.\n\n```elixir\nlarge_list = Enum.to_list(1..10_000_000)\nlarge_tuple = List.to_tuple(large_list)\n```\n\n## Lists\n\nLists are stored in memory as **linked lists**. That means that each element in the list\nis actually stored in pairs of two. The first element of the pair is the value, the second\nelement of the pair is the location of the next element.\n\nFor example, let's take the list `[2, 3]`.\n\nNotice below, that each element in the list is stored as a pair in the **heap**. The first\nelement of the pair is the value, and the second element of the pair is the location of the next\nelement.\n\n![](files/linked_list_cons_cells.png)\n\nIn fact, `[2, 3]` can also be written as pairs like so `[2 | [3 | []]]`, where each cell is written\nas `[head | tail]`. The head is the value, and the tail is the reference to the rest of the list.\nYou may sometimes hear these called [`cons` cells](https://en.wikipedia.org/wiki/Cons).\n\n## Tuples\n\nTuples are stored contiguously in memory. Contiguously means that each element in the tuple\nshares a common border.\n\nFor example, the tuple `{1, 2, 3}` could be stored like so.\n![](files/tuple_storage_contiguously.png)\n\n## Lists Vs Tuples\n\nLists and tuples serve different purposes. Due to their structure they are more or less performant\nfor certain operations.\n\nWe'll use the built-in Erlang library's `:timer.tc/1` function to compare the amount of time in microseconds\nthat it takes to perform common operations on a large set of data.\n\n```elixir\n:timer.tc(fn ->\n  _expensive_computation = 10000 ** 10000\n  \"return value of the function\"\nend)\n```\n\nSimultaneous operations in your computer compete for resources, and our measurement tools are not\nperfect, so you may notice that execution time is not always consistent.\n\n## Length\n\nTuples are fixed-size containers, so their length is known upfront. It's a constant $O(1)$\ntime to determine the size of a tuple no matter how large.\n\nFor lists, we only know the location of the first element. So, we need to traverse the entire\nlist to find its length.\nThat means it takes $O(n)$ time where $n$ is the number of elements in the list.\n\nLet's compare the time it takes to determine the length of an equal-sized list and tuple.\nWe can use `tuple_size` to count the length of a tuple, and `length` to determine the length of a list.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> tuple_size(large_tuple) end)\n{list_time, _result} = :timer.tc(fn -> length(large_list) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\nThe exact result will be different each time, however as expected, the tuple is nearly instant and the\nlist takes far longer.\n\n## Prepending\n\nPrepending in a list is fast, because we only need to create a new pair of elements in memory\nand point it to the head of the existing list. Let's prepend `1` to `[2, 3]` as an example.\n\n```elixir\n[1 | [2, 3]]\n```\n\n![](files/prepend_linked_list_memory.png)\n\nTherefore, prepending an element to a list is $O(1)$ complexity.\nThis holds true no matter the size of the list, because the work done remains the same.\n\nTuples however, are stored contiguously in memory, so in order to make any change the entire tuple must\nbe copied. Since we need to enumerate through the tuple and copy each value, prepending\nand element to a tuple is $O(n)$ complexity.\n\nLet's prepend `0` to `{1, 2, 3}` as an example. To prepend a value we can use either [Tuple.insert_at/3](https://hexdocs.pm/elixir/Tuple.html#insert_at/3).\n\n```elixir\nTuple.insert_at({1, 2, 3}, 0, 0)\n```\n\n![](files/prepending_tuples.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nLet's compare the time it takes to prepend an element to an equal sized list and tuple.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> Tuple.insert_at(large_tuple, 0, 0) end)\n{list_time, _result} = :timer.tc(fn -> List.insert_at(large_list, 0, 0) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\nOnce again, as expected prepending the list is nearly instant, where as prepending a tuple takes some time.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, use the `:timer.tc/1` function to time how long it takes to prepend a value to a **list** with `50000` elements.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nWe can prepend a list using `[head | tail]` syntax\n\n```elixir\nlist = Enum.to_list(1..50000)\n:timer.tc(fn -> [\"my value\" | list] end)\n```\n\nAlternatively we can use [List.insert_at/3](https://hexdocs.pm/elixir/List.html#insert_at/3).\n\n```elixir\nlist = Enum.to_list(1..50000)\n:timer.tc(fn -> List.insert_at(list, 0, \"my value\") end)\n```\n\nGenerally, `[head | tail]` is more idiomatic.\n\n</details>\n\n```elixir\n\n```\n\nIn the Elixir cell below, use the `:timer.tc/1` function to time how long it takes to prepend a value to a **tuple** with `50000` elements.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntuple = Enum.to_list(1..50000) |> List.to_tuple()\n:timer.tc(fn -> Tuple.insert_at(tuple, 0, 0) end)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Accessing\n\nAccessing an element in a tuple is constant $O(1)$ complexity because the size of the tuple\nis already known. Accessing an element in a list is $O(n)$ complexity where n is the index of\nthe element we need to access.\n\n```mermaid\nflowchart TB\nsubgraph Accessing Memory\nlu[\"Lower Bound: O(1), Upper Bound: O(n)\"]\ndirection LR\n  subgraph Memory\n    L -- location to --> I -- location to --> S -- location to --> T -- location to --> E[...]\n  end\n  subgraph Time Complexity\n  0[\"O(1)\"] --> L\n  1[\"O(2)\"] --> I\n  2[\"O(3)\"] --> S\n  3[\"O(4)\"] --> T\n  4[\"O(n)\"] --> E\n  end\nend\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThat means retrieving the head of any list regardless of its size is constant $O(1)$ complexity, and retrieving\nthe last element of the list is $O(n)$ complexity.\n\nLet's compare accessing the first element of a tuple and list of equal size.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> elem(large_tuple, 0) end)\n\n{list_time, _result} =\n  :timer.tc(fn ->\n    [head | _tail] = large_list\n    head\n  end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\nAs expected, both are very fast. In fact the list is even faster than the tuple. However, this\nchanges drastically when we try to access the last element in the list and tuple.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> elem(large_tuple, 9_999_999) end)\n\n{list_time, _result} = :timer.tc(fn -> Enum.at(large_list, 9_999_999) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\n### Your Turn\n\nIn the Elixir cell below, use the `:timer.tc/1` function to time how long it takes\nto access the first element, and last element of a list with `5000` elements.\n\nThen do the same for tuples.\n\n```elixir\n\n```\n\n## Concatenation\n\nConcatenating a tuple requires copying both tuples in memory, therefore it's performance cost is\n$O(n1 + n2)$ where $n1$ is the number of elements in the first tuple and $n2$ is the number of elements\nin the second tuple.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tuple_concatination.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHowever $O(n1 + n2)$ is only the theoretical performance cost. In reality it's higher because tuples do\nnot support concatenation, and you would first need to convert them into a list.\n\nWhy don't tuples support concatenation? Because they should be used for **fixed-sized containers**. [Jose Valim](https://stackoverflow.com/a/28355536/9021210) explains.\n\n> You can't concatenate tuples.\n> The only reason is that you are not supposed to use them as such. Most of tuple usage requires knowing their size and things get blurrier if you can concatenate them. Furthermore, concatenating tuples requires copying both tuples in memory, which is not efficient.\n> In other words, if you want to concatenate tuples, you may have the wrong data structure. You have two options:\n> \n> * Use lists\n> * Compose the tuples: instead of a ++ b, just write {a, b}\n\nHowever for a list, only the first list must be copied, so it has $O(n1)$ cost where $n1$ is the\nnumber of elements in the first list. The first copied list can now simply point to the head of\nthe second list in memory.\n\nFor example,\n\n```elixir\n[1, 2, 3] ++ [4, 5]\n```\n\n![](files/concatinate_list.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThat means that so long as your first list is small, it's a fairly performant operation, even if the second list is massive.\nHowever, it will be expensive if the first list is large.\n\n```elixir\n{small_first_list, _result} = :timer.tc(fn -> [1] ++ large_list end)\n{large_first_list, _result} = :timer.tc(fn -> large_list ++ [1] end)\n\n%{small_first_list: small_first_list, large_first_list: large_first_list}\n```\n\n### Your Turn\n\nIn the Elixir cell below, use the `:timer.tc/1` function to time how long it takes\nto concatenate a list with one element and a list with 5000 elements.\n\nThen try to concatenate a list with 5000 elements to a list with 1 element. Notice how it takes longer.\n\n```elixir\n\n```\n\n## Updating (Replacing)\n\nIn a functional programming language, we do not mutate values in a list or tuple. Instead, we\ncopy values where necessary.\n\nWhen updating a list, we copy the elements before the updated element, then reuse the ones after it.\n\n```elixir\nlist = [1, 2, 3, 4, 5]\nList.replace_at(list, 2, 7)\n```\n\n![](files/update_linked_list.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nSimilarly to accessing an element,\nthat means it's constant time complexity $O(1)$ to update an element at the start,\nand $O(n)$ complexity to access an element at the end.\n\nTuples however, must be copied over completely when updated. We can use `put_elem/3` to update\nan element in a tuple.\n\n```elixir\ntuple = {1, 2, 3, 4, 5}\nput_elem(tuple, 2, 7)\n```\n\n![](files/update_tuples.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nLet's compare the time it takes to update the first element of a list and tuple of equal size.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> put_elem(large_tuple, 0, 7) end)\n{list_time, _result} = :timer.tc(fn -> List.replace_at(large_list, 0, 7) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\nAs expected, the list is fast and the tuple is slow. Now let's compare the time it takes to update\nthe last element of a list and tuple of equal size.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> put_elem(large_tuple, 9_999_999, 7) end)\n{list_time, _result} = :timer.tc(fn -> List.replace_at(large_list, 9_999_999, 7) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\nThe list is far slower now that it needs to look through the entire list, while the tuple is approximately\nthe same speed as updating the first element.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, use `:timer.tc/1` to compare updating the **first** element of a list\nand tuple with `5000` elements.\n\n```elixir\n\n```\n\nIn the Elixir cell below, use `:timer.tc/1` to compare updating the **last** element of a list and tuple\nwith `5000` elements.\n\n```elixir\n\n```\n\n## Inserting\n\nInserting in a list follows the same pattern as updating a list. We can reuse elements\nafter the insertion, but must copy elements before the insertion.\n\n```elixir\nlist = [1, 2, 3, 4, 5]\nList.insert_at(list, 3, 7)\n```\n\n![](files/insert_linked_list_memory.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nInserting an element in a tuple requires copying the entire tuple.\n\n```elixir\ntuple = {1, 2, 3, 4, 5}\nTuple.insert_at(tuple, 3, 7)\n```\n\n![](files/inserting_tuples_memory.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nBased on this knowledge, we expect that inserting in a tuple is always $O(n)$ complexity,\nwhere as inserting in a list will be faster the earlier in the list you insert.\n\nWe've already proven earlier that prepending a list has $O(1)$ time complexity, now let's\nprove that inserting at the end of both a list and a tuple has $O(n)$ time complexity.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> Tuple.insert_at(large_tuple, 10_000_000, 7) end)\n{list_time, _result} = :timer.tc(fn -> List.insert_at(large_list, 10_000_000, 7) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\n### Your Turn\n\nIn the Elixir cell below, use `:timer.tc` to insert to the end of a large `50000` element list and tuple.\n\n```elixir\n\n```\n\n## Deleting\n\nDeleting an element in a list requires copying elements prior to the deletion, and reusing\nelements after the deletion.\n\n```elixir\nlist = [1, 2, 3, 4, 5]\nList.delete_at(list, 3)\n```\n\n![](files/delete_list_memory.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nDeleting a tuple requires copying over every non-deleted element.\n\n![](files/delete_tuple_memory_diagram.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nLet's prove that deleting any element in the tuple has a similar performance cost, and that deleting the\nfirst element in a list is less expensive than deleting the last.\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> Tuple.delete_at(large_tuple, 0) end)\n{list_time, _result} = :timer.tc(fn -> List.delete_at(large_list, 0) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\n```elixir\n{tuple_time, _result} = :timer.tc(fn -> Tuple.delete_at(large_tuple, 9_999_999) end)\n{list_time, _result} = :timer.tc(fn -> List.delete_at(large_list, 9_999_999) end)\n\n%{tuple: tuple_time, list: list_time}\n```\n\n## Copying\n\nWhen we modify a tuple, the new version of the tuple will contain an entire copy of the tuple differing only in the modified element.\n\nWhen you modify the $nth$ element in a list, the new list will contain a copy of the first\n$n - 1$ elements, then a modified element, then the tail of the previous list.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nsubgraph Operation on nth element in a list\nn[copied elements] --> m[modified element] --> t[tail of previous list]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Shallow Copying\n\nWhen we use the term **copy**, it's important to be clear that we mean **shallow copy**.\n\nYou likely won't need to concern yourself with this often, but it's useful to be aware of the difference\nbetween **deep copying** and **shallow copy** and the performance implications.\n\nWhen we shallow copy, we copy the reference to the data, rather than the data itself.\n\nA deep copy, copies the actual underlying data.\n\nIn a shallow copy, primitive values such as `1` will simply be copied as `1`. However data types which contain\nreferences will be copied as references.\n\n### Shallow Copying Tuples\n\nLet's take an example with tuples.\n\n```elixir\na = {1, 2, 3}\nb = {4, 5, 6}\nc = {7, 8, 9}\n```\n\nIn the code above, `a`, `b`, and `c` exist on the stack and all contain **pointers** to actual memory on the **heap**\n\n```mermaid\nflowchart LR\nsubgraph Stack\na\nb\nc\nend\nsubgraph Heap\na --pointer--> a1[\"{1, 2, 3}\"]\nb --pointer--> b1[\"{4, 5, 6}\"]\nc --pointer--> c1[\"{7, 8, 9}\"]\nend\n\n```\n\n```elixir\nb2 = {11, 12, 13}\n\na_tuple = {a, b, c}\nnew_tuple = put_elem(a_tuple, 1, b2)\n\nnew_tuple\n```\n\nUnder the hood, when the computer copies `a_tuple` to create `new_tuple`, it creates a reference\nto the original variable on the stack, so they share memory on the heap.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph Stack\n  subgraph a_tuple\n    a1[a]\n    b1[b]\n    c1[c]\n  end\n  subgraph new_tuple\n    a2[a] --reference--> a1\n    c2[c] --reference--> c1\n    b2\n  end\nend\nsubgraph Heap\n  a1 --pointer --> a3[\"{1, 2, 3}\"]\n  b1 --pointer--> b3[\"{4, 5, 6}\"]\n  c1 --pointer--> c4[\"{7, 8, 9}\"]\n  b2 --pointer--> c5[\"{10, 11, 12}\"]\nend\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIn memory, that might look like the following.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/copying_abc_tuple.png)\n\n## Garbage Collection\n\nElixir handles garbage collection for us, so we often don't need to concern ourselves with this implementation detail.\n\nWhenever a variable is no longer referenced, it is free to be garbage collected.\nFor example, if we have the variables `a`, `b`, and `c`, if we rebind `b`, we no longer have to store the underlying data and it will be garbage collected.\n\n```elixir\na = {1, 2, 3}\nb = {4, 5, 6}\nc = {7, 8, 9}\n\n# {4, 5, 6} Is Now Free To Be Garbage Collected Because It Is No Longer Referenced By Any Variable.\nb = {10, 11, 12}\n```\n\nThis frees up the tuple `{4, 5, 6}` for garbage collection, because it is no longer accessible.\nBelow we use `b` and `b2` to represent rebinding the `b` variable.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/abc_tuple_garbage_collection.png)\n\n## Conclusion\n\nOperations with tuples and lists will have the following Big $O$ notation.\n\n<!-- livebook:{\"attrs\":{\"source\":\"[\\n  [operation: \\\"length\\\", tuple: \\\"O(1)\\\", list: \\\"O(n)\\\"],\\n  [operation: \\\"prepend\\\", tuple: \\\"O(n)\\\", list: \\\"O(1)\\\"],\\n  [operation: \\\"insert\\\", tuple: \\\"O(n)\\\", list: \\\"O(n*)\\\"],\\n  [operation: \\\"access\\\", tuple: \\\"O(1)\\\", list: \\\"O(n*)\\\"],\\n  [operation: \\\"update/replace\\\", tuple: \\\"O(n)\\\", list: \\\"O(n*)\\\"],\\n  [operation: \\\"delete\\\", tuple: \\\"O(n)\\\", list: \\\"O(n*)\\\"],\\n  [operation: \\\"concatenation\\\", tuple: \\\"O(n1 + n2)\\\", list: \\\"O(n1)\\\"]\\n]\\n|> Kino.DataTable.new()\",\"title\":\"Lists and Tuples\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\n[\n  [operation: \"length\", tuple: \"O(1)\", list: \"O(n)\"],\n  [operation: \"prepend\", tuple: \"O(n)\", list: \"O(1)\"],\n  [operation: \"insert\", tuple: \"O(n)\", list: \"O(n*)\"],\n  [operation: \"access\", tuple: \"O(1)\", list: \"O(n*)\"],\n  [operation: \"update/replace\", tuple: \"O(n)\", list: \"O(n*)\"],\n  [operation: \"delete\", tuple: \"O(n)\", list: \"O(n*)\"],\n  [operation: \"concatenation\", tuple: \"O(n1 + n2)\", list: \"O(n1)\"]\n]\n|> Kino.DataTable.new()\n```\n\n> n* will be the index of the operation, instead of the number of elements in the list.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Key Takeaways\n\n* Tuples are $O(1)$ for reading a value and the length, but require $O(n)$ for all other operations.\n* List operations are generally $O(n)$ complexity where $n$ is the index of the operation, meaning operations\n  early in a list can be very performant and are preferred when possible.\n* Tuples should be used for **fixed-size containers**.\n* Lists should be used for **dynamic-size containers**.\n* Functional languages do not allow mutation, they instead rely on **shallow-copying** elements\n  to avoid unnecessary memory consumption.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixirlang: Tuples or Lists?](https://elixir-lang.org/getting-started/basic-types.html#lists-or-tuples)\n* [Exercism: Tuples](https://exercism.org/tracks/elixir/concepts/tuples)\n* [Exercism: Lists](https://exercism.org/tracks/elixir/concepts/lists)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Lists Vs Tuples reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists Vs Tuples\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/picchat_emails.livemd\">PicChat: Emails</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/maps_mapsets_keyword_lists.livemd\">Maps, Mapsets, And Keyword Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task9-reading-strings", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Strings\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Strings\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/arithmetic.livemd\">Arithmetic</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/io.livemd\">IO</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are strings, and what kind of information are they useful for storing?\n* How do we add two strings together using string concatenation?\n* How do we interpret Elixir code inside of a string using string interpolation?\n\n## Strings\n\nA string is any sequence of characters contained within two double quotes `\"\"`.\nA character is any single number, letter, or symbol.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"T\" # letters\n\"t\" # letters\n\"1\" # numbers\n\"1.2\" # numbers\n\"&\" # symbols\n\"_\" # symbols\n```\n\nYou can visualize a string as characters joined together by strings.\nStrings can be a single character, no characters, or many characters!\n\n```mermaid\nflowchart LR\n  S --- T --- R --- I --- N --- G\n```\n\nStrings can contain single quotes and other symbols such as `!@#$%^&*()_+-=';:` and more.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"!@#$%^&*()_+-=';:\"\n```\n\nThey are useful for representing all kinds of information as text.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, create a string `\"Hello, world!\"`. This is a rite of passage for every\nprogrammer.\n\n```elixir\n\n```\n\n## Multiline Strings\n\nSometimes we want to represent a string with multiple lines. The newline `\\n` character represents a new line in a string.\n\n```elixir\nstring = \"line 1\\nline 2\\nline 3\"\n\nIO.puts(string)\n```\n\nTo make defining multiline strings easier, Elixir allows us to use three quotes `\"\"\"` to define a multiline string.\n\n```elixir\nstring = \"\"\"\nline 1\nline 1\nline 1\n\"\"\"\n\nIO.puts(string)\n```\n\n## String Operators\n\nString operators allow us to manipulate strings.\n\nThe `<>` operator joins two strings together. Joining strings together is called **string concatenation**.\n\n```elixir\n\"hello, \" <> \"world.\"\n```\n\nOnly strings can be concatenated together using the `<>` operator. You'll notice concatenating `1` causes an error `expected binary argument in <> operator but got 1`\nThis error occurs because we're asking the computer to concatenate a string with an integer.\n\n```elixir\n\"hello\" <> 1\n```\n\n### Your Turn\n\nIn the Elixir cell below, use string concatenation to join `\"Hi \"` and the name of one\nof your classmates.\n\nSo `\"Peter\"` would be come `\"Hi Peter.\"`.\n\nReplace `nil` with your answer.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n\"Hi \" <> \"Peter.\"\n```\n\n</details>\n\n```elixir\n\n```\n\n### String Interpolation\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUsing `#{}`, We can also **interpolate** values in strings. Essentially, this means we can evaluate code inside of\na string. The code you want to interpolate inside of the string\ngoes between the curly braces `{}`.\n\nSo we can evaluate `4 + 4`, which equals `8` inside a string.\n\n```elixir\n\"I have #{4 + 4} apples.\"\n```\n\nString interpolation is often useful when your string has many computed values or tricky punctuation.\nOtherwise, it's easy to make mistakes.\n\nNotice that there's a grammar mistake below that could easily be missed when using string concatenation.\n\n```elixir\n\"I have\" <> \"8\" <> \"apples\"\n```\n\n### Your Turn\n\nIn the Elixir cell below, use **string interpolation** to say `I have #{X - 1} classmates.`. Where X is the number of people in your cohort including yourself.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n\"I have #{1 - 1} classmates.\"\n```\n\n</details>\n\n```elixir\nanswer = nil\n```\n\n## Escaping Characters\n\nElixir allows you to use [Escape Characters](https://hexdocs.pm/elixir/main/String.html#module-escape-characters) to represent special values in a string. We've already seen the `\\n` escape character for a newline.\n\nFor example, we can use the `\\` symbol to escape special characters in a string. This is handy when you want to include characters that would have alternative meaning in the string. For example, if you wanted to include double quotes in a string, you can escape the double quote `\\\"`.\n\n```elixir\nstring = \"They said \\\"so this is how you include double quotes in a string!\\\"\"\n\nIO.puts(string)\n```\n\nThere are other special characters such as backslashes `\\`, or interpolation syntax that you might want to escape.\n\n```elixir\nstring = \"Use \\#{} to interpolate a value in a string\"\n\nIO.puts(string)\n```\n\n```elixir\nstring = \"If you don't escape using backslash \\\\, then #{} doesn't appear\"\n\nIO.puts(string)\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepend your understanding of the topic.\n\n* [Joy of Elixir: Strings](https://joyofelixir.com/book#chapter-8)\n* [Elixir-lang: binaries, strings, and charlists](https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Strings reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Strings\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/arithmetic.livemd\">Arithmetic</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/io.livemd\">IO</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task10-reading-comprehensions", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Comprehensions\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comprehensions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/non_enumerables.livemd\">Non-Enumerables</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/palindrome.livemd\">Palindrome</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* When should we use comprehensions vs [Enum](https://hexdocs.pm/elixir/Enum.html)?\n* How do we create a comprehension using generators, filters, and collectables?\n\n## Overview\n\n### Comprehensions\n\nComprehensions are a convenient way to create new lists, maps, or sets by iterating over an existing collection and applying a set of transformations. They are similar to the [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2), [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2), and [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) functions but with a more concise syntax.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Generators\n\nA generator is an enumerable the comprehension will enumerate over to produce some output.\n\n```elixir\ngenerator = 1..3\n\nfor element <- generator do\n  element * 2\nend\n```\n\n### Filters\n\nA filter is a true/false condition the generator uses to determine which elements should remain.\n\n```elixir\nfor element <- 1..3, element >= 2 do\n  element\nend\n```\n\n### Collectable\n\nBy default, a comprehension collects the result into a list. However, we can specify the data structure to collect the result into using the `:into` collector.\n\n```elixir\nfor element <- 1..3, into: \"\" do\n  \"#{element}\"\nend\n```\n\n## Comprehensions\n\nLet's try to comprehend comprehensions..sorry \ud83e\udd26\u200d\u2642\ufe0f.\n\nBut in all seriousness, you might mistake a comprehension for a **for loop** if you're coming from another programming language. This is not the case! Notice below that the comprehension returns a list.\n\n```elixir\nfor each <- 1..100 do\n  each * 2\nend\n```\n\nSince the comprehension has a return value, it can be bound to a variable and used elsewhere.\n\n```elixir\nmy_comprehension =\n  for each <- 1..10 do\n    each * 2\n  end\n\nList.to_tuple(my_comprehension)\n```\n\nA comprehension can even be piped into another function. This isn't usually idomatic, but it's possible.\n\n```elixir\nfor each <- 1..10 do\n  each * 2\nend\n|> List.to_tuple()\n```\n\nIn an OOP language without immutability, it's common to use\nfor loops to mutate some variable. We don't do that in Elixir! Notice below that `sum` is still 0.\n\n```elixir\nsum = 0\n\nfor each <- 1..100 do\n  sum = sum + each\nend\n\nsum\n```\n\nSo what are comprehensions for? Currently, we can accomplish the same behavior with the [Enum](https://hexdocs.pm/elixir/Enum.html) module.\n\n```elixir\nEnum.map(1..100, fn each -> each * 2 end)\n```\n\nA comprehension is syntax sugar. That means that while it may look cleaner, it does not\nprovide any additional behavior. The [Enum](https://hexdocs.pm/elixir/Enum.html) module and comprehensions can accomplish the same behavior.\n\nA comprehension is broken down into three parts: **generators**, **filters**, and **collectables**.\n\n## Generators\n\nIn the following example, the generator is `n <- 1..100` which defines the collection to enumerate over.\n\n```elixir\nfor n <- 1..100 do\n  n\nend\n```\n\nWe can also use pattern matching in the generator to ignore non-matching values.\n\n```elixir\nfor {:keep, value} <- [keep: 1, keep: 2, filter: 1, filter: 3] do\n  value\nend\n```\n\nHere's where comprehensions get cool and stop looking like loops. You can use multiple comma-separated\ngenerators in a single comprehension.\n\nThe comprehension treats each additional generator like a nested loop. For each element in the first loop, it will enumerate through every element in the second loop.\n\n```elixir\nfor a <- 1..3, b <- 4..6 do\n  {a, b}\nend\n```\n\n```mermaid\nflowchart\n  subgraph D[generator 2]\n    4a[4]\n    5a[5]\n    6a[6]\n  end\n  subgraph C[generator 2]\n    4b[4]\n    5b[5]\n    6b[6]\n  end\n  subgraph B[generator 2]\n    4c[4]\n    5c[5]\n    6c[6]\n  end\n  subgraph A[generator 1]\n    1 --> B\n    2 --> C\n    3 --> D\n  end\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can even use elements from one generator in the next generator.\n\n```elixir\nfor a <- 1..3, b <- a..0 do\n  {a, b}\nend\n```\n\n```mermaid\nflowchart\n  subgraph D[generator 2]\n    1a[1]\n    0a[0]\n  end\n  subgraph C[generator 2]\n    2b[2]\n    1b[1]\n    0b[0]\n  end\n  subgraph B[generator 2]\n    3c[3]\n    2c[2]\n    1c[1]\n    0c[0]\n  end\n  subgraph A[generator 1]\n    1 --> D\n    2 --> C\n    3 --> B\n  end\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThere's no real limit to the number of generators that you can use, but\neach generator creates another nested loop and therefore has a significant performance impact.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, use a comprehension with a generator of `1..50` to create a list of even integers from `2` to `100`.\n\n```elixir\n\n```\n\n## Filters\n\nWe can use **filters** in a comprehension to filter out elements from the generator.\nFor example, we could omit all values not divisible by 3.\n\nThe comprehension will filter out all values that do not return `true` for the filter function.\n\n```elixir\n# Finds All Values In 1..100 Divisible By 3\nfor n <- 1..100, rem(n, 3) === 0 do\n  n\nend\n```\n\nWe can use multiple comma-separated filters.\n\n```elixir\nfor a <- 1..100, rem(a, 3) === 0, rem(a, 5) === 0 do\n  a\nend\n```\n\nWe can also use multiple comma-separated filters and generators. Filters and generators can go in any order.\nHowever, it's likely more clear to group filters together after the generators.\n\n```elixir\nfor a <- 1..45, b <- 1..5, rem(a, 5) === 0, rem(b, 5) === 0 do\n  [a, b]\nend\n```\n\nThat said, you can put the generators and filters in alternating order.\n\n```elixir\nfor a <- 1..45, rem(a, 5) === 0, b <- 1..5, rem(b, 5) === 0 do\n  [a, b]\nend\n```\n\nThe generators must go in the order you want to nest them, otherwise, you change the behavior. The filters\nmust also go after any generator whose variable they rely on. For example, `b` has not yet been\ndefined here.\n\n```elixir\nfor a <- 1..45, rem(a, 5) === 0, rem(b, 5) === 0, b <- 1..5 do\n  [a, b]\nend\n```\n\n### Your Turn\n\nYou are given three generators that are ranges of numbers from `1..7`.\n\nFind every trio of numbers in each range that when added together equals seven.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Expected Output\n[\n  {1, 1, 5},\n  {1, 2, 4},\n  {1, 3, 3},\n  {1, 4, 2},\n  {1, 5, 1},\n  {2, 1, 4},\n  {2, 2, 3},\n  {2, 3, 2},\n  {2, 4, 1},\n  {3, 1, 3},\n  {3, 2, 2},\n  {3, 3, 1},\n  {4, 1, 2},\n  {4, 2, 1},\n  {5, 1, 1}\n]\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nfor a <- 1..7, b <- 1..7, c <- 1..7, a + b + c == 7 do\n  {a, b, c}\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Collectables\n\nBy default, the comprehension returns a list. However, we can accumulate the elements into any value\nwith the `:into` option. Into works with any collection that you're used to using with the [Enum](https://hexdocs.pm/elixir/Enum.html)\nmodule.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nEven without the `:into` option, we can create a comprehension that returns a keyword list by\nusing tuples with an atom as the first element and any value as the second element.\n\n```elixir\nfor n <- 1..5 do\n  {:\"key_#{n}\", n}\nend\n```\n\nNow, since both maps and keyword lists are key-value tuples underneath, we can specify the `:into`\noption to instead return a map.\n\n```elixir\nfor n <- 1..5, into: %{} do\n  {:\"key_#{n}\", n}\nend\n```\n\nThis map could have default values.\n\n```elixir\nfor n <- 1..5, into: %{default: \"hello!\"} do\n  {:\"key_#{n}\", n}\nend\n```\n\nAnd instead of a map, it can be any data type that implements the [Collectable](https://hexdocs.pm/elixir/Collectable.html)\nprotocol.\n\nThis includes strings!\n\n```elixir\nfor n <- 1..10, do: \"#{n}\", into: \"\"\n```\n\nUsing a collector can be useful when we're using a comprehension with a non-list enumerable data type, for example when transforming maps.\n\n```elixir\nfor {key, value} <- %{a: 1, b: 2}, into: %{} do\n  {key, value * 2}\nend\n```\n\n### Your Turn\n\nGiven the generator `%{a: 1, b: 2}`, use a comprehension with a collector to convert an atom-key map into a string key map.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Input\n%{a: 1, b: 2}\n# Output\n%{\"a\" => 1, \"b\" => 2}\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nfor {key, value} <- %{a: 1, b: 2}, into: %{} do\n  {\"#{key}\", value}\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Why Use A Comprehension?\n\n[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2), [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2), and [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) can accomplish all of the same functionality as a comprehension. In general, the [Enum](https://hexdocs.pm/elixir/Enum.html) is more broadly used than comprehensions.\n\nConsider using comprehensions as a refactoring tool to improve the clarity of your code. They are particularely useful for building and generating collections of data. It's typically non-idiomatic to use a comprehension when the [Enum](https://hexdocs.pm/elixir/Enum.html) module would work instead.\n\nAvoid over relying on comprehensions, especially if you're from an Object Oriented Programming background and feel tempted to use comprehensions because they feel like for loops. Comprehensions are not for loops! Instead, consider using comprehensions to refactor and improve your code after you've already written it.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, convert the following `Enum.map` into a comprehension.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEnum.map(1..5, fn each -> each * 2 end)\n```\n\n```elixir\n\n```\n\nIn the Elixir cell below, convert the following `Enum.reduce` into a comprehension.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEnum.reduce([\"a\", \"b\", \"c\"], fn each, acc -> acc <> each end)\n```\n\n```elixir\n\n```\n\nIn the Elixir cell below, convert the following nested `Enum.map` into a comprehension.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEnum.map(1..3, fn a -> Enum.map(1..3, fn b -> {a, b} end) end)\n```\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Comprehensions reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comprehensions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/non_enumerables.livemd\">Non-Enumerables</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/palindrome.livemd\">Palindrome</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task11-reading-queues", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"FIFO%20Double%20Ended%20Queue.drawio.png\",\"type\":\"attachment\"},{\"name\":\"FIFO%20Queue.drawio.png\",\"type\":\"attachment\"},{\"name\":\"Priority_Queue.png\",\"type\":\"attachment\"},{\"name\":\"Stack.drawio.png\",\"type\":\"attachment\"}]} -->\n\n# Queues\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:benchee, \"~> 1.1\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Queues\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/custom_assertions.livemd\">Custom Assertions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/worker_pools.livemd\">Worker Pools</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* What are the **front** and **back** of a queue?\n* What is $O(1)$ performance vs $O(n)$ performance?\n* What is the ideal vs worst-case performance of an amortized queue? When does the worst-case condition occur?\n* How do queues vs double-ended queues (DEQs) differ in how they rebalance a queue?\n\n## Overview\n\n### FIFO Queues\n\nA FIFO (First-In-First-Out) queue is a type of data structure that stores elements in the order they were added and retrieves them in the same order. In a FIFO queue, the first element added to the queue is the first element to be removed. It works like a line of people in a store, where the first person to arrive is the first person to be served.\n\nElements in a queue are inserted (enqueued) to the **back** (also called the rear) and elements are removed (dequeued) from the **front**.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/FIFO%20Queue.drawio.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### LIFO Queues\n\nA LIFO Queue (Last-In-First-Out) is a type of data structure that stores elements and retrieves the most recently stored element. It is also known as a **Stack**.\n\nWe **push** elements onto the top of the stack and **pop** them off of the top of the stack.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/Stack.drawio.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Double Ended Queues\n\nA Double-Ended Queue (Deque) is a type of data structure that allows the performant insertion and removal of elements from both ends of the queue.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/FIFO%20Double%20Ended%20Queue.drawio.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Priority Queue\n\nA Priority queue stores elements with an associated priority level. Elements are removed in order of priority.\n\nA minimum priority queue retrieves elements with the lowest priority level, and a maximum priority queue retrieves elements with the highest priority level.\n\nFor example, a doctors office might be considered a priority queue, as patients with more severe issues are treated first.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/Priority_Queue.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Amortized $O(1)$\n\nWe use Big O Notation to describe how the performance of an algorithm changes as the data set grows. $O(1)$ means the algorithm's execution time remains constant, regardless of the size of the data set. $O(n)$ means the algorithm's execution time grows proportionally to the size of the data set.\n\nBoth our Queue and Double-Ended Queue have an amortized $O(1)$ performance. On average, their performance is constant, but they may have a $O(n)$ performance in the worst-case scenario.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Naive Implementation\n\nImplementing a naive algorithm involves developing a straightforward solution to a problem, which may not necessarily be the most efficient or optimal solution. A naive algorithm is usually the first algorithm that comes to mind when thinking about a problem, and it is often easy to comprehend and execute. Nevertheless, it may not be the most effective solution for larger or more complex input sizes, especially when compared to other more sophisticated algorithms. Naive solutions are also sometimes referred to as a brute-force algorithm.\n\n## Stack\n\nA stack is a fairly simple data structure to implement, as we can implement a highly performance version of a stack using only a list.\n\n```elixir\ndefmodule Stack do\n  def new do\n    []\n  end\n\n  def push(stack, element) do\n    [element | stack]\n  end\n\n  def pop(stack) do\n    {hd(stack), tl(stack)}\n  end\nend\n```\n\nThe head of the list is the top of the stack.\n\nElements are pushed onto the top of the stack and removed from the top of the stack.\n\n```elixir\nstack =\n  Stack.new()\n  |> Stack.push(1)\n  |> Stack.push(2)\n  |> Stack.push(3)\n```\n\n```elixir\nStack.pop(stack)\n```\n\n## Naive Queue\n\nFor our naive solution, we can represent our queue as a list.\n\n```elixir\nqueue = []\n```\n\nWe can simply prepend elements into the list when we want to insert elements. This has $O(1)$ performance.\n\n```elixir\nqueue = [1 | queue]\n```\n\n```elixir\nqueue = [2 | queue]\n```\n\n```elixir\nqueue = [3 | queue]\n```\n\nHowever, we must reverse the list to remove the first element in our queue. Then, we also need to re-reverse the remaining elements to put the queue back in order. Reversing a list has $O(n)$ performance, which isn't ideal.\n\n```elixir\n[value | reversed_queue] = Enum.reverse(queue)\n{value, Enum.reverse(reversed_queue)}\n```\n\nHere's that made into a `NaiveQueue` module.\n\n```elixir\ndefmodule NaiveQueue do\n  def new, do: []\n\n  def enqueue(queue, el) do\n    [el | queue]\n  end\n\n  def dequeue([]), do: {nil, []}\n\n  def dequeue(queue) do\n    [value | reversed_queue] = Enum.reverse(queue)\n    {value, Enum.reverse(reversed_queue)}\n  end\nend\n```\n\nWe can performantly insert (enqueue) items into our queue.\n\n```elixir\nqueue =\n  NaiveQueue.new()\n  |> NaiveQueue.enqueue(1)\n  |> NaiveQueue.enqueue(2)\n  |> NaiveQueue.enqueue(3)\n```\n\nWe can also remove (dequeue) elements from our queue, but this has $O(n)$ performance.\n\n```elixir\n{value, queue} = NaiveQueue.dequeue(queue)\n```\n\n```elixir\n{value, queue} = NaiveQueue.dequeue(queue)\n```\n\n```elixir\n{value, queue} = NaiveQueue.dequeue(queue)\n```\n\nWe've handled having an empty queue by returning `nil`.\n\n```elixir\n{value, queue} = NaiveQueue.dequeue(queue)\n```\n\n## Amortized Queue\n\nWe can model our queue as a list with the **front** elements and the **back** elements, allowing us to optimize our queue by having two separate list heads.\n\nElements are prepended to the **back** list, and removed from the **front** list.\n\n```mermaid\nflowchart\nsubgraph back\n  6 --> 5 --> 4 --> 3 --> 2 --> 1\nend\n```\n\nWhen we remove (dequeue) an element, we can reverse the elements in the **back** list and store them in the **front** list. Reversing the list causes our worst-case performance of $O(n)$. However, future removals will have $O(1)$ performance.\n\n```mermaid\nflowchart\n  subgraph front\n    direction LR\n    1 --> 2 --> 3 --> 4 --> 5 --> 6\n  end\n```\n\n### Implementation\n\nWe can store each list in a tuple to implement our **front** and **back** lists.\n\n```elixir\n# {back, Front}\n{[], []}\n```\n\nWhen we insert elements, we prepend them to the **back** list.\n\n```elixir\n# Enqueue 1, 2, 3\n{[3, 2, 1], []}\n```\n\nWhen we remove elements, we grab the head of the **front** list. When the **front** list is empty, we'll reverse our **back** list to make the **front** list. This is our worst-case $O(n)$ performance scenario.\n\n```elixir\n# Dequeue\n{[], [1, 2, 3]}\n```\n\nAfter reversing the **back** list, it's an $O(1)$ operation to grab elements from the **front** of our queue.\n\n```elixir\n{back, front} = {[], [1, 2, 3]}\n\n[removed | front] = front\n\n{removed, front}\n```\n\nHere's that put into a module. We've handled the best and worst-case scenarios. We've also handled returning `nil` when the queue is empty.\n\n```elixir\ndefmodule AmortizedQueue do\n  def new, do: {[], []}\n\n  def enqueue({back, front}, el) do\n    {[el | back], front}\n  end\n\n  def dequeue({[], []} = queue), do: {nil, queue}\n  # best-case scenario O(1)\n  def dequeue({back, [el | front]}), do: {el, {back, front}}\n\n  # worst-case scenario O(n)\n  def dequeue({back, []}) do\n    [removed | front] = Enum.reverse(back)\n    {removed, {[], front}}\n  end\nend\n```\n\nWe enqueue items on the **back** list.\n\n```elixir\nqueue =\n  AmortizedQueue.new()\n  |> AmortizedQueue.enqueue(1)\n  |> AmortizedQueue.enqueue(2)\n  |> AmortizedQueue.enqueue(3)\n```\n\nThen if there are no elements in the **front** list we reverse the back list. While this has $O(n)$ performance, we only have to do it when the **front** list is empty.\n\n```elixir\n{value, queue} = AmortizedQueue.dequeue(queue)\n```\n\nSubsequent operations will be $O(1)$.\n\n```elixir\n{value, queue} = AmortizedQueue.dequeue(queue)\n```\n\n```elixir\n{value, queue} = AmortizedQueue.dequeue(queue)\n```\n\nIf the entire queue is empty, we simply return `nil`.\n\n```elixir\n{value, queue} = AmortizedQueue.dequeue(queue)\n```\n\n## Double Ended Queue\n\nSimilar to our amortized queue, we can represent a double-ended queue with both a **back** list and a **front** list.\n\nSince we can perform operations on either end, we need to optimize for removing/inserting from both the **back** and the **front** of our DEQ. Therefore, it would be unwise to reverse the entirety of either list as we did with our amortized queue.\n\nInstead, a performant approach when either the **back** or the **front** list is empty is to balance our queue into two halves.\n\nFor example, if we insert six elements to our **back** list:\n\n```mermaid\nflowchart\nsubgraph back\n  direction RL\n  1 --> 2 --> 3 --> 4 --> 5 --> 6\nend\n```\n\nWe would split the list in half to make the **back** `[6, 5, 4]` and our **front** `[1, 2, 3]`.\n\n```mermaid\nflowchart\n  subgraph front\n    direction LR\n    1 --> 2 --> 3\n  end\n\n  subgraph back\n    direction LR\n    6 --> 5 --> 4\n  end\n```\n\nBy splitting our queue, we'll have access to the head of our **back** and our **front** list, so inserting/removing operations will have $O(1)$ on either side of the queue.\n\nHere's that put into a module.\n\n```elixir\ndefmodule DoubleEndedQueue do\n  def new, do: {[], []}\n\n  def insert_back({back, front}, el), do: {[el | back], front}\n\n  def insert_front({back, front}, el), do: {back, [el | front]}\n\n  def remove_back({[], []} = queue), do: {nil, queue}\n\n  # best-case scenario O(1)\n  def remove_back({[removed | back], front}), do: {removed, {back, front}}\n\n  # worse-case scenario O(n)\n  def remove_back({[], front}) do\n    middle_index = div(length(front), 2)\n    {half_front, reversed_back} = Enum.split(front, middle_index)\n    [removed | back] = Enum.reverse(reversed_back)\n    {removed, {back, half_front}}\n  end\n\n  def remove_front({[], []} = queue), do: {nil, queue}\n\n  # best-case scenario O(1)\n  def remove_front({back, [removed | front]}), do: {removed, {back, front}}\n\n  # worst-case scenario O(n)\n  def remove_front({back, []}) do\n    middle_index = div(length(back), 2)\n    {half_back, reversed_front} = Enum.split(back, middle_index)\n    [removed | front] = Enum.reverse(reversed_front)\n    {removed, {half_back, front}}\n  end\nend\n```\n\nNow we can performantly insert/remove elements to the **back** or the **front**.\n\n```elixir\ndeq =\n  DoubleEndedQueue.new()\n  |> DoubleEndedQueue.insert_back(1)\n  |> DoubleEndedQueue.insert_back(2)\n  |> DoubleEndedQueue.insert_back(3)\n  |> IO.inspect()\n\n{value, deq} = DoubleEndedQueue.remove_back(deq) |> IO.inspect()\n{value, deq} = DoubleEndedQueue.remove_back(deq) |> IO.inspect()\n{value, deq} = DoubleEndedQueue.remove_back(deq) |> IO.inspect()\n{value, deq} = DoubleEndedQueue.remove_back(deq)\n```\n\n```elixir\ndeq =\n  DoubleEndedQueue.new()\n  |> DoubleEndedQueue.insert_front(1)\n  |> DoubleEndedQueue.insert_front(2)\n  |> DoubleEndedQueue.insert_front(3)\n  |> IO.inspect()\n\n{value, deq} = DoubleEndedQueue.remove_front(deq) |> IO.inspect()\n{value, deq} = DoubleEndedQueue.remove_front(deq) |> IO.inspect()\n{value, deq} = DoubleEndedQueue.remove_front(deq) |> IO.inspect()\n{value, deq} = DoubleEndedQueue.remove_front(deq)\n```\n\nWe rebalance the queue when we remove an element from an empty **front** list.\n\n```elixir\ndeq =\n  DoubleEndedQueue.new()\n  |> DoubleEndedQueue.insert_back(1)\n  |> DoubleEndedQueue.insert_back(2)\n  |> DoubleEndedQueue.insert_back(3)\n  |> DoubleEndedQueue.insert_back(4)\n  |> DoubleEndedQueue.insert_back(5)\n  |> DoubleEndedQueue.insert_back(6)\n  |> IO.inspect()\n\nDoubleEndedQueue.remove_front(deq)\n```\n\nThe same applies when we remove elements from an empty **back** list. We split the **front** to rebalance our queue.\n\n```elixir\ndeq =\n  DoubleEndedQueue.new()\n  |> DoubleEndedQueue.insert_front(6)\n  |> DoubleEndedQueue.insert_front(5)\n  |> DoubleEndedQueue.insert_front(4)\n  |> DoubleEndedQueue.insert_front(3)\n  |> DoubleEndedQueue.insert_front(2)\n  |> DoubleEndedQueue.insert_front(1)\n  |> IO.inspect()\n\nDoubleEndedQueue.remove_back(deq)\n```\n\nWe've also handled removing elements from either end when both the **back** and the **front** are empty by returning `nil` and an empty DEQ.\n\n```elixir\nDoubleEndedQueue.new()\n|> DoubleEndedQueue.remove_back()\n```\n\n```elixir\nDoubleEndedQueue.new()\n|> DoubleEndedQueue.remove_front()\n```\n\n## Double Ended Queue (Tracking Size)\n\nTo split our DEQ, we need to calculate the queue size. Unfortunately, calculating the length of a list is an expensive operation $O(n)$.\n\nTo avoid this operation, instead of computing the size of the queue, we can keep track of it whenever we add or remove an element.\n\nHere's an alternative DEQ implementation using a struct that tracks the **right** list, the **left** list, and the total **size** of the DEQ.\n\nThe worst-case scenario is still $O(n)$. However, it's overall more performant because it requires fewer traversals through the list.\n\n```elixir\ndefmodule DoubleEndedQueueStruct do\n  defstruct back: [], front: [], size: 0\n  def new, do: %__MODULE__{}\n\n  def insert_back(queue, el) do\n    %{queue | back: [el | queue.back], size: queue.size + 1}\n  end\n\n  def insert_front(queue, el) do\n    %{queue | front: [el | queue.front], size: queue.size + 1}\n  end\n\n  def remove_back(%__MODULE__{back: [], front: []} = queue) do\n    {nil, queue}\n  end\n\n  def remove_back(%__MODULE__{back: [], front: front} = queue) do\n    mid = div(queue.size, 2)\n    {half_front, reversed_back} = Enum.split(front, mid)\n    [removed | back] = Enum.reverse(reversed_back)\n    {removed, %{queue | back: back, front: half_front, size: queue.size - 1}}\n  end\n\n  def remove_back(%__MODULE__{back: [removed | back]} = queue) do\n    {removed, %{queue | back: back, size: queue.size - 1}}\n  end\n\n  def remove_front(%__MODULE__{front: [], back: []} = queue) do\n    {nil, queue}\n  end\n\n  def remove_front(%__MODULE__{front: []} = queue) do\n    mid = div(queue.size, 2)\n    {back_half, reversed_front} = Enum.split(queue.back, mid)\n    [removed | front] = Enum.reverse(reversed_front)\n    {removed, %{queue | front: front, back: back_half, size: queue.size - 1}}\n  end\n\n  def remove_front(%__MODULE__{front: [removed | front]} = queue) do\n    {removed, %{queue | front: front, size: queue.size - 1}}\n  end\nend\n```\n\nWhile the structure representing the queue has changed to optimize performance, the behavior remains the same.\n\n```elixir\ndeq =\n  DoubleEndedQueueStruct.new()\n  |> DoubleEndedQueueStruct.insert_front(6)\n  |> DoubleEndedQueueStruct.insert_front(5)\n  |> DoubleEndedQueueStruct.insert_front(4)\n  |> DoubleEndedQueueStruct.insert_front(3)\n  |> DoubleEndedQueueStruct.insert_front(2)\n  |> DoubleEndedQueueStruct.insert_front(1)\n  |> IO.inspect()\n\nDoubleEndedQueueStruct.remove_back(deq)\n```\n\n## Erlang Queue\n\nErlang provides a [:queue](https://www.erlang.org/doc/man/queue.html) module with further performance optimizations for a DEQ.\n\nIt provides the following functions for inserting and removing elements.\n\n* [in/2](https://www.erlang.org/doc/man/queue.html#in-2) insert an element to the **back** of the queue.\n* [out/2](https://www.erlang.org/doc/man/queue.html#out-2) removes an element from the **front** of the queue.\n\nThen there are \"reversed\" versions which perform the opposite operations of a normal queue.\n\n* [in_r/2](https://www.erlang.org/doc/man/queue.html#in_r-2) insert an element to the **front** of the queue.\n* [out_r/1](https://www.erlang.org/doc/man/queue.html#out_r-1) remove an element from the **back** of the queue.\n\n```elixir\nq = :queue.new()\n```\n\nThe erlang `:queue` module inserts an element to the **front** when it's empty. This is a small optimization, so we don't have to reverse the **front** list the first time we remove elements from it.\n\n```elixir\nq = :queue.in(1, q) |> IO.inspect()\n# Notice 1 Is Moved To The Front Of The Queue.\nq = :queue.in(2, q) |> IO.inspect()\nq = :queue.in(3, q) |> IO.inspect()\nq = :queue.in(4, q) |> IO.inspect()\nq = :queue.in(5, q) |> IO.inspect()\nq = :queue.in(6, q) |> IO.inspect()\n```\n\nIt similarly rebalances the lists when either is empty.\n\n```elixir\n{value, q} = :queue.out(q)\n```\n\nAfter rebalancing, elements are removed from the front, which has $O(1)$ performance.\n\n```elixir\n{value, q} = :queue.out(q)\n```\n\n```elixir\n{value, q} = :queue.out(q)\n```\n\n## Concurrent Queues\n\nThe `:queue` erlang module is notorious for having a difficult-to-read interface. This quote is taken directly from the `:queue` documentation.\n\n> The \"Okasaki API\" is inspired by \"Purely Functional Data Structures\" by Chris Okasaki. It regards queues as lists. This API is by many regarded as strange and avoidable. For example, many reverse operations have lexically reversed names, some with more readable but perhaps less understandable aliases.\n\nSo folks have created libraries for queues and DEQs that improve the interface and leverage the power of concurrency.\n\nFor example, the [OPQ](https://github.com/fredwu/opq) library by fredwu leverages both the `:queue` module and [GenStage](https://github.com/elixir-lang/gen_stage) to enable worker pools to handle work in a queue concurrently.\n\nThis is like a shared lineup, where multiple workers handle a single line of customers.\n\nThe number of workers determines the number of jobs in the queue that can be handled concurrently.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph Queue\n  1\n  2\n  3\n  4[4]\nend\nsubgraph Worker Pool\n1 -->  W1[Worker1] \n2 --> Worker2\n3 --> Worker3\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWhen the worker finishes, it becomes available for the next job in the queue.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph Queue\n  4\nend\n\nsubgraph Worker Pool\n4 --> W1[Worker1] \nWorker2\nWorker3\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nDiving into this library is beyond the scope of this material. Still, knowing how to scale queues to handle thousands (if not millions) of concurrent actions is useful. For example, many applications such as ticket-purchasing or streaming sites experience the **thundering herd** problem, where many interactions occur simultaneously.\n\nThe thundering herd problem happens when a lot of computer processes or threads are waiting for the same thing causing a big surge of activity that can slow down or even crash the system.\n\nIt's called the thundering herd problem because it's like a stampede of animals reacting to a sudden disturbance. Avoiding this problem requires techniques like load balancing, caching, and queuing to manage the flow of requests and prevent the system from becoming overwhelmed.\n\n## Naive Priority Queue\n\nTypically priority queues are implemented using a tree structure. However, for our naive solution we'll use a list.\n\nElements in our priority queue will be a tuple with the associated priority.\n\n```elixir\npriority_queue = [{\"critical injury\", 1}, {\"moderate injury\", 2}, {\"minor illness\", 3}]\n```\n\nThere are two main ways to implement a priority queue using a single list.\n\n1. Store the elements in an unsorted order and retrieve the priority element.\n2. Store the elements in a sorted order and retrieve the first element.\n\nSolution 1 optimizes for storing elements, because we can insert elements at the head of the list and retrieving them is more difficult.\n\nSolution 2 optimizes for retrieving elements because we can remove elements at the head of the list and storing them is more difficult.\n\nWe'll choose solution 2, because we want to opimize for retrieving elements, rather than storing them.\n\nWe've also chosen to implement this as a minimum priority queue, where lower values are prioritized.\n\n```elixir\ndefmodule PriorityQueue do\n  def new do\n    []\n  end\n\n  def add([], new_element), do: [new_element]\n\n  def add(queue, new_element) do\n    # find the index of the first element with a greater priority value.\n    index =\n      Enum.find_index(queue, fn current_element ->\n        priority_of(new_element) < priority_of(current_element)\n      end)\n\n    # insert at the back of the list if there is no index.\n    List.insert_at(queue, index || -1, new_element)\n  end\n\n  def next(queue) do\n    hd(queue)\n  end\n\n  def remove(queue) do\n    tl(queue)\n  end\n\n  defp priority_of(element) do\n    elem(element, 1)\n  end\nend\n```\n\nElements will be added in order of priority (low -> high).\n\n```elixir\n# 4231 -> 1234\n\npriority_queue =\n  PriorityQueue.new()\n  |> PriorityQueue.add({\"minor illness\", 4})\n  |> PriorityQueue.add({\"moderate sprain\", 2})\n  |> PriorityQueue.add({\"severe injury\", 3})\n  |> PriorityQueue.add({\"critical injury\", 1})\n```\n\nWe can view the next element to be removed.\n\n```elixir\nPriorityQueue.next(priority_queue)\n```\n\nThen remove that element to return the rest of the priority queue.\n\n```elixir\nPriorityQueue.remove(priority_queue)\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Chris Okasaki's Purely Functional Data Structures](https://www.cs.cmu.edu/~rwh/students/okasaki.pdf)\n* [Thundering Herd Problem](https://en.wikipedia.org/wiki/Thundering_herd_problem)\n* [erlang: queue](https://www.erlang.org/doc/man/queue.html)\n* [OPQ](https://github.com/fredwu/opq)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Queues reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Queues\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/custom_assertions.livemd\">Custom Assertions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/worker_pools.livemd\">Worker Pools</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task12-reading-testing_genservers", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Testing GenServers\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Testing GenServers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/timer.livemd\">Timer</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/stack.livemd\">Tested Stack</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How can we test the behavior rather than the implementation of a [GenServer](https://hexdocs.pm/elixir/GenServer.html)?\n\n## Testing GenServers\n\nWe've seen how to perform tests on a module and function, but how do you test something stateful like a process? Let's consider how we could test a simple `CounterServer` process that should store an integer in it's state and increment the value.\n\n```elixir\ndefmodule CounterServer do\n  use GenServer\n\n  @impl true\n  def init(state) do\n    {:ok, state}\n  end\n\n  @impl true\n  def handle_call(:increment, _from, state) do\n    {:reply, state + 1, state + 1}\n  end\n\n  @impl true\n  def handle_call(:get_count, _from, state) do\n    {:reply, state, state}\n  end\nend\n```\n\nGenerally, we don't want to test the implementation of the counter, so we don't\nwant to specifically send it messages using the [GenServer](https://hexdocs.pm/elixir/GenServer.html) module, nor do we want\nto test on the state of the process.\n\nFor example, the following test is coupled to implementation.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule CounterServerTest do\n  use ExUnit.Case\n\n  test \"Counter receives :increment call\" do\n    {:ok, pid} = GenServer.start_link(CounterServer, 0)\n    GenServer.call(pid, :increment)\n    assert :sys.get_state(pid) == 1\n  end\nend\n\nExUnit.run()\n```\n\nSo if any of the internals change, these tests could break, even though the behavior of the counter module doesn't. Instead, we generally want to test on the [client interface](https://hexdocs.pm/elixir/GenServer.html#module-client-server-apis) of the [GenServer](https://hexdocs.pm/elixir/GenServer.html).\n\nHere's a `CounterClient` module which contains the client interface for the `CounterServer` module.\n\n```elixir\ndefmodule CounterClient do\n  def start_link(_opts) do\n    GenServer.start_link(CounterServer, 0)\n  end\n\n  def increment(pid) do\n    GenServer.call(pid, :increment)\n  end\n\n  def get_count(pid) do\n    GenServer.call(pid, :get_count)\n  end\nend\n```\n\nNow we can use these functions in our test.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule CounterClientTest do\n  use ExUnit.Case\n\n  test \"increment/1\" do\n    {:ok, pid} = CounterClient.start_link([])\n    CounterClient.increment(pid)\n    assert CounterClient.get_count(pid) == 1\n  end\nend\n\nExUnit.run()\n```\n\nThis makes our tests more robust to implementation changes of the `CounterServer`. So long as the client interface remains the same, then tests will not break.\n\nFor example, let's say we decide to change how we store state in the counter. Instead of an integer, we'll use a `%{count: value}` map. We've co-located the Client and the Server functions for the sake of example.\n\n```elixir\ndefmodule CounterMapExample do\n  use GenServer\n\n  # Client\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, %{count: 0})\n  end\n\n  def increment(pid) do\n    GenServer.call(pid, :increment)\n  end\n\n  def get_count(pid) do\n    GenServer.call(pid, :get_count)\n  end\n\n  # Server\n\n  @impl true\n  def init(state) do\n    {:ok, state}\n  end\n\n  @impl true\n  def handle_call(:get_count, _from, state) do\n    {:reply, state.count, state}\n  end\n\n  @impl true\n  def handle_call(:increment, _from, state) do\n    {:reply, state.count + 1, %{state | count: state.count + 1}}\n  end\nend\n```\n\nOur tests still pass, because the behavior and interface has not changed.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule CounterMapTest do\n  use ExUnit.Case\n\n  test \"increment/1\" do\n    {:ok, pid} = CounterMapExample.start_link([])\n    CounterMapExample.increment(pid)\n    assert CounterMapExample.get_count(pid) == 1\n  end\nend\n\nExUnit.run()\n```\n\nHowever, the old test suite breaks, because it was coupled to the underlying implementation.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule CounterMapExampleTest do\n  use ExUnit.Case\n\n  test \"handle_call :increment\" do\n    {:ok, pid} = GenServer.start_link(CounterMapExample, 0)\n    GenServer.call(pid, :increment)\n    assert :sys.get_state(pid) == 1\n  end\nend\n\nExUnit.run()\n```\n\nFor more on testing [GenServer](https://hexdocs.pm/elixir/GenServer.html)s, there is an excellent talk by Tyler Young.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=EZFLPG7V7RM\\\")\",\"title\":\"Testing GenServers\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=EZFLPG7V7RM\")\n```\n\n### Your Turn\n\nImplement and test a `decrement/1` function on the `CountDown` module.\n\n```elixir\ndefmodule CountDown do\n  use GenServer\n\n  # Client\n\n  def start_link(_opts) do\n    # Implementation\n  end\n\n  def decrement(pid) do\n    # Implementation\n  end\n\n  # Server\n\n  @impl true\n  def init(state) do\n    {:ok, state}\n  end\n\n  @impl true\n  def handle_call(:get_count, _from, state) do\n    # Implementation\n  end\n\n  @impl true\n  def handle_call(:decrement, _from, state) do\n    # Implementation\n  end\nend\n\nExUnit.start(auto_run: false)\n\ndefmodule CounterTest do\n  use ExUnit.Case\n\n  # implement your test\n  test \"decrement/1\"\nend\n\nExUnit.run()\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Testing GenServers reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Testing GenServers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/timer.livemd\">Timer</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/stack.livemd\">Tested Stack</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task13-reading-iex", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# IEx\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=IEx\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/code_editors.livemd\">Code Editors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/command_line_family_tree.livemd\">Command Line Family Tree</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## IEx\n\n[IEx](https://hexdocs.pm/iex/IEx.html) is Elixir's interactive shell. If you [install Elixir](https://elixir-lang.org/install.html) on your computer, you can run `iex` in your command\nline to start the interactive shell. It will print information about your [IEx](https://hexdocs.pm/iex/IEx.html) environment, such as what Elixir and Erlang/OTP version\nyou have installed.\n\n```\n$ iex\nErlang/OTP 24 [erts-12.3] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit]\n\nInteractive Elixir (1.13.3) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)>\n```\n\nWe can evaluate Elixir code inside of the [IEx](https://hexdocs.pm/iex/IEx.html) shell. [IEx](https://hexdocs.pm/iex/IEx.html) is often useful for small experiments,\nrunning Elixir scripts, and even as a playground environment building/running Elixir applications.\n\n### Your Turn\n\nExecute some simple arithmetic in the `iex` shell, like so.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex > 4 + 4\n8\n```\n\n## IO\n\nWe can use the [IO](https://hexdocs.pm/elixir/IO.html) module for retrieving user input and displaying output. We'll learn more about modules in later lessons.\n\nWrap any value in `IO.inspect()` to print it.\n\n```elixir\nIO.inspect(2 + 2)\n```\n\nWe can also use [IO.gets/2](https://hexdocs.pm/elixir/IO.html#gets/2) to retrieve input from the user.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> input = IO.gets(\"Give me some input: \")\nGive me some input: sure!\n\"sure!\\n\"\niex> input\n\"sure!\\n\"\n```\n\nKeep in mind, this will work when running an Elixir project or in the [IEx](https://hexdocs.pm/iex/IEx.html) shell, but will fail with an `:enotsup` (error not supported) error when we run it from Livebook.\n\n```elixir\nIO.gets(\"I will fail!\")\n```\n\nThat's because in Livebook there is no command line or other device to retrieve the user input from.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nRun [IO.gets/2](https://hexdocs.pm/elixir/IO.html#gets/2) in the command line from the [IEx](https://hexdocs.pm/iex/IEx.html) shell and bind the return value to an `input` variable.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> input = IO.gets(\"Give me some input: \")\n```\n\n## Multiline Expressions\n\nYou can break your Elixir code into multiple lines in the [IEx](https://hexdocs.pm/iex/IEx.html) shell, which only evaluates when the expression is complete.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nWrite `4 +` in the [IEx](https://hexdocs.pm/iex/IEx.html) shell, then press enter to break the expression into multiple lines. Then finish of the expression by writing another integer such as `5`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex >\n  4 +\n    ... > 5\n\n9\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a module `Greeting` in the [IEx](https://hexdocs.pm/iex/IEx.html) shell, then call the `hello/0` function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> defmodule Greeting do\niex>  def hello do\niex>   \"Hello, world!\"\niex>  end\niex> end\n{:module, Greeting,\n <<70, 79, 82, 49, 0, 0, 4, 204, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 140,\n   0, 0, 0, 14, 15, 69, 108, 105, 120, 105, 114, 46, 71, 114, 101, 101, 116,\n   105, 110, 103, 8, 95, 95, 105, 110, 102, 111, ...>>, {:hello, 0}}\niex> Greeting.hello()\n\"Hello, world!\"\n```\n\nWe'll learn more about modules in future lessons.\n\n## Closing The IEx Shell\n\nOnce we've started the [IEx](https://hexdocs.pm/iex/IEx.html) shell, you can close it by pressing <kbd>CTRL</kbd>+<kbd>\\\\</kbd>.\n\n### Your Turn\n\nFirst, define a variable in your current [IEx](https://hexdocs.pm/iex/IEx.html) shell.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> hello = \"world\"\n```\n\nClose the current [IEx](https://hexdocs.pm/iex/IEx.html) shell, then reopen it with `iex` command.\nNotice that previously defined variables from the previous [IEx](https://hexdocs.pm/iex/IEx.html) shell do not exist.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex(1)> hello\n** (CompileError) iex:1: undefined function hello/0 (there is no such import)\n```\n\n## Autocomplete\n\nMuch like in livebook, you can autocomplete Elixir expressions by pressing <kbd>Tab</kbd>.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> Enum.a\nall?/1    all?/2    any?/1    any?/2    at/2      at/3\n```\n\n## IEx Helpers\n\nThe built-in [IEx.Helpers](https://hexdocs.pm/iex/IEx.Helpers.html) module provides helpers to make it\neasier to work with the IEx shell.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Help (h)\n\nThe `h` helper prints the documentation for any code.\n\nFor example, execute the following in your [IEx](https://hexdocs.pm/iex/IEx.html) shell to view the [Enum](https://hexdocs.pm/elixir/Enum.html) documentation.\n\n```\niex> h Enum\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Information (i)\n\nThe `i` helper provides information about any Elixir term (data type).\n\nFor example, execute the following in your [IEx](https://hexdocs.pm/iex/IEx.html) shell to view more information about the [Integer](https://hexdocs.pm/elixir/Integer.html) data type.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> i 2\nTerm\n  2\nData type\n  Integer\nReference modules\n  Integer\nImplemented protocols\n  IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Compile (c)\n\nThe [c](https://hexdocs.pm/iex/IEx.Helpers.html#c/2) helper can load an Elixir file into your [IEx](https://hexdocs.pm/iex/IEx.html) shell.\n\nFor example, create a `hello.exs` file with your command line. Add the following contents to\nthe file with your code editor.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Greeting do\n  def hello do\n    \"Hello, world!\"\n  end\nend\n\nIO.puts(\"Executing hello.exs\")\n```\n\nThen start an [IEx](https://hexdocs.pm/iex/IEx.html) session and load the file.\nNotice that `IO.puts(\"Executing hello.exs\")` runs immediately.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> c \"hello.exs\"\nExecuting hello.exs\n[Greeting]\n```\n\nThe `Greeting` module is now available in the current [IEx](https://hexdocs.pm/iex/IEx.html) session.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> Greeting.hello()\n\"Hello, world!\"\n```\n\nThe `iex` command also accepts a filename as an argument to load a file into the IEx shell.\n\n```\n$ iex hello.exs\niex> Greeting.hello()\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Recompile (r)\n\nThe [r](https://hexdocs.pm/iex/IEx.Helpers.html#r/1) helper recompiles a module in the current IEx shell.\n\nFor example, change the `Greeting` module in `hello.exs` to return a different value.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Greeting do\n  def hello do\n    \"Hello!\" # changed value\n  end\nend\n\nIO.puts(\"Executing hello.exs\")\n```\n\nNow, recompile the module and execute the `hello/0` function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> r Greeting\niex> Greeting.hello()\n\"Hello!\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Value (v)\n\nThe [v](https://hexdocs.pm/iex/IEx.Helpers.html#v/1) helper returns the value on a given line.\n\nWe've omitted the line numbers in the [IEx](https://hexdocs.pm/iex/IEx.html) shell in previous examples, but you'll notice each line has a corresponding number.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex(1)> 1 + 1\n2\n```\n\nTo use the return value from a previous expression, use `v/1` with the desired line number.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex(2)> v(1) + 2\n4\n```\n\nAlternatively, we can pipe `(|>)` the previous return value into the current expression.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex(1)> %{}\niex(2)> |> Map.put(:key, \"value\")\n%{key: \"value\"}\n```\n\n### `clear`\n\nif the IEx shell is getting messy, we can use the [clear](https://hexdocs.pm/iex/IEx.Helpers.html#clear/0)\nhelper to clear the console screen.\n\n```\niex> clear\n```\n\n## Further Reading\n\nIEx is generally helpful for experimenting with Elixir code and exploring an existing project or script. For more, consider reading the following:\n\n* [HexDocs: IEx.Helpers](https://hexdocs.pm/iex/IEx.Helpers.html#functions) includes a full list of helper functions and their usage beyond those covered above.\n* [Elixir Schools: IEx.Helpers](https://elixirschool.com/en/lessons/basics/iex_helpers) an Elixir schools lesson on `IEx.Helpers`.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish IEx reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=IEx\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/code_editors.livemd\">Code Editors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/command_line_family_tree.livemd\">Command Line Family Tree</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task14-reading-atoms", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Atoms\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Atoms\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/guessing_games.livemd\">Guessing Games</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/tuples.livemd\">Tuples</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is an atom and how might we use them in our programs?\n* Why might we use atoms for the sake of comparing constant values rather than strings?\n\n## Atoms\n\nAtoms are named constants. In other words, their name is their value.\n\nAtoms are often used to represent common constants in your program.\nFor example, they often represent the :success or :error of a program.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:success\n:error\n```\n\nThey might also be used to represent the state of some action. For example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:completed\n:in_progress\n:starting\n```\n\nYou might wonder why we have both strings and atoms because they seem to do the same thing.\nOne primary reason is performance. Atoms are stored in an **atom table** and can be referenced by a key. This makes it way faster to check if two atoms are equal.\n\nWhat is an **atom table**? Imagine it like an excel spreadsheet.\nEach value has a key. For the computer, comparing these keys in the table is much more performance that checking if every character in a string is equal.\n\nIt's kind of like checking if `1 == 2` instead of checking if`\"HeLloWorld\" == \"HeLloWorLd\"`.\n\nAtoms are defined using a colon `:` and a series of letters, digits, and certain valid symbols.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Rules For Naming Atoms\n\nThere are specific rules for naming atoms, but fortunately you don't need\nto memorize them! Instead, pay attention to the colors in your code.\nIf you define an atom incorrectly, you'll notice that it's no longer blue.\n\nHere are some valid atoms:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:hello\n:my_atom1\n```\n\nHere are some invalid atoms, notice they are mostly white:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:$this_is_invalid\n:!this_is_invalid\n:2\n:@\n:$\n:?\n:invalid # spaces are not valid\n```\n\nSometimes languages establish conventions. Conventions are common patterns of doing things which\nthe community agrees upon.\nFor example, In Elixir it's conventional for atoms to have lowercase names separated by underscores.\n\nWhile the following will work:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:MY_ATOM!\n```\n\nIt's usually unconventional to name an atom with capital letters except in specific circumstances.\n\nYou can use quotes with atoms to avoid name rules.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:\"$Now we don't have to follow any rules. This is a valid atom (though unconventional)\"\n```\n\n## Secret Atoms\n\n`nil`, `false`, and `true` are all actually atoms.\n\nWe can use `===` to verify that `:nil` and `nil` are equivalent.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nnil === :nil\n```\n\nThe same goes for `true`, and `false`. They are\nall atoms but omit the colon `:`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntrue === :true\nfalse === :false\n```\n\n### Your Turn\n\nIn the Elixir cell below, use `===` to check if `nil` is equal to `:nil`.\n\n```elixir\n\n```\n\nCheck if `true` is equal to `:true`.\n\n```elixir\n\n```\n\nCheck if `false` is equal to `:false`.\n\n```elixir\n\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n* [Elixir School: Atoms](https://elixirschool.com/en/lessons/basics/basics/#atoms-7)\n* [HexDocs: Atoms](https://hexdocs.pm/elixir/Atom.html#content)\n* [Exercism: Atoms](https://exercism.org/tracks/elixir/concepts/atoms)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Atoms reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Atoms\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/guessing_games.livemd\">Guessing Games</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/tuples.livemd\">Tuples</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task15-reading-metaprogramming", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Metaprogramming\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Metaprogramming\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/advanced_score_tracker.livemd\">Advanced Score Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/meta_math.livemd\">MetaMath</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What does the `use` keyword do?\n* What are the differences between a macro and a function?\n\n## Overview\n\n### Compile-time Vs Runtime\n\nIn programming, compile-time refers to the period of time during which a program is being compiled from source code into executable machine code, and runtime refers to the period of time during which a program is executing.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [OTP](https://en.wikipedia.org/wiki/Open_Telecom_Platform)\n\nThe Open Telecom Platform (OTP) is a collection of Erlang libraries and tools for building concurrent, fault-tolerant, and distributed systems in the Erlang programming language.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [The BEAM (Erlang Virtual Machine)](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))\n\nThe BEAM is the runtime environment for the Erlang and Elixir. It is a virtual machine that runs on a wide variety of platforms, including Unix-like operating systems, Windows, and MacOS. We often use the terms **Erlang Virtual Machine** and **BEAM** interchangeably.\n\nThe Elixir compiler compiles Elixir source code into [bytecode](https://en.wikipedia.org/wiki/Bytecode) `.beam` files that are executed on the BEAM.\n\nThe BEAM is part of the Erlang Run-Time System (ERTS).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Erlang Run-time System](https://www.erlang.org/doc/apps/erts/erts.pdf)\n\nThe Erlang Run-Time System (ERTS) is a component of the Open Telecom Platform (OTP) and is responsible for executing Erlang and Elixir programs on the Erlang Virtual Machine (VM). The BEAM virtual machine is part of the Erlang Run-Time System.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Abstract Syntax Tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\n\nThe Abstract Syntax Tree (AST) is a representation of the structure of a program's source code as a tree-like data structure. The Elixir AST is used by the Elixir compiler to transform Elixir code into bytecode that can be executed by the BEAM virtual machine. The Elixir compiler converts the Elixir code into the AST, and then uses the AST to generate the bytecode.\n\nThe AST provides a convenient intermediate representation of the source code that can be used to perform various optimizations and transformations on the code before it is translated into bytecode.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Metaprogramming\n\nMetaprogramming is the process of writing code that generates code.\n\nIn Elixir, we use macros for code generation. Macros are a powerful tool for generating code. However, they can lead to additional complexity and should be used with care.\n\n> Even though Elixir attempts its best to provide a safe environment for macros, the major responsibility of writing clean code with macros falls on developers. Macros are harder to write than ordinary Elixir functions and it\u2019s considered to be bad style to use them when they\u2019re not necessary. So write macros responsibly.\n> \n> * [elixir-lang.org](https://elixir-lang.org/getting-started/meta/macros.html)\n\nWe're going to learn how to leverage metaprogramming to extend the Elixir language and minimize boilerplate code.\n\nWhile we're not likely to use metaprogramming in our day-to-day programming (depending on what you're building), we're going to use metaprogramming to gain a better understanding of the inner-workings of Elixir.\n\n## Quote\n\nUnder the hood, Elixir represents expressions as three-element tuples.\nWe call this representation the [AST (abstract syntax tree)](https://en.wikipedia.org/wiki/Abstract_syntax_tree). Elixir lets us inspect the AST representation of expressions using the `quote` macro.\n\n```elixir\nquote do\n  2 + 2\nend\n```\n\nThe three-element tuple above is often called a **quoted expression**.\n\nThe first element in the tuple is the function name.\nThe second element is a keyword list containing metadata, and the third element is a list of arguments.\n\n`{function, metadata, arguments}`\n\nSo `2 + 2` as a quoted expression is\n\n* function: `:+`\n* metadata: `[context: Elixir, import: Kernel]`\n* arguments: `[2, 2]`\n\nThe function name is `:+`, which refers to the `Kernel.+/2` function. `+` is simply a convenient syntax for calling this function.\n\n```elixir\nKernel.+(2, 2) == 2 + 2\n```\n\nThe metadata includes information about the environment. By default, the `:context` is `Elixir`\nbecause we are in the top-level scope.\n\nThe context changes if we use `quote` in a module. Now the context will be the name of the module.\n\n```elixir\ndefmodule MyModule do\n  def example do\n    quote do\n      2 + 2\n    end\n  end\nend\n\nMyModule.example()\n```\n\nWe can also call `quote` on a single line.\n\n```elixir\nquote do: 1 - 1\n```\n\nThe AST represents primitive data types as themselves rather than three-element tuples.\n\n```elixir\nquote do: 2\n```\n\nAll other expressions will be three-element tuples\u2014even non-primitive data types such as maps.\n\n```elixir\nquote do: %{key: \"value\"}\n```\n\nHere's an anonymous function as a quoted expression.\n\n```elixir\nsum = fn int1, int2, int3 -> int1 + int2 + int3 end\n\nquote do: sum(1, 2, 3)\n```\n\nHere's a named function as a quoted expression.\n\n```elixir\ndefmodule Math do\n  def sum(int1, int2, int3) do\n    int1 + int2 + int3\n  end\nend\n\nquote do: Math.sum(1, 2, 3)\n```\n\nArguments in the three-element tuple can themselves be three-element tuples.\n\n```elixir\nquote do: sum(1, 2, sum(1, 2, 3))\n```\n\n### Your Turn\n\nUse the `quote` macro to discover the AST representation of the following expression. You may also choose to experiment with `quote` with other Elixir expressions to see their quoted expression representation.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n2 + 2 + 2\n```\n\n```elixir\n\n```\n\n## Unquote\n\n`unquote` injects code into the `quote` macro.\n\nWe can use `unquote` to inject some computed value into a `quote` block.\n\nFor example, the following `unquote(1 + 1)` evaluates to `2` inside of the `quote` block.\n\n```elixir\nquote do\n  2 + unquote(1 + 1)\nend\n```\n\nThe above `quote` expression is equivalent to `2 + 2`, because we injected the result of `1 + 1` into the `quote` expression using `unquote`.\n\n```elixir\nquote do\n  2 + 2\nend\n```\n\nNotice this is not the same AST as `2 + 1 + 1`, which breaks down into multiple three-element tuples, because it is actually two separate addition expressions.\n\n```elixir\nquote do\n  2 + 1 + 1\nend\n```\n\nVariables outside the quote block will not be available within the quote block. So we can use `unquote` to inject their evaluated value.\n\n```elixir\nmy_variable = 5\n\nquote do\n  2 + unquote(my_variable)\nend\n```\n\nThis creates the same quoted expression as `2 + 5`.\n\n```elixir\nquote do\n  2 + 5\nend\n```\n\n## Macro And Code Modules\n\nThe Elixir [Code](https://hexdocs.pm/elixir/Code.html) module is a module in the Elixir standard library that provides functions for working with code at runtime. The [Code](https://hexdocs.pm/elixir/Code.html) module provides several functions for evaluating code, such as [Code.eval_string/2](https://hexdocs.pm/elixir/Code.html#eval_string/2) and [Code.eval_quoted/2](https://hexdocs.pm/elixir/Code.html#eval_quoted/2), which allow you to dynamically generate and execute code based on runtime conditions.\n\nThe Code module also provides functions for working with the Abstract Syntax Tree (AST) of Elixir code, such as [Code.string_to_quoted/1](https://hexdocs.pm/elixir/Code.html#string_to_quoted/1) which allow you to convert between Elixir code as a string and the AST representation of the code.\n\nThe [Macro](https://hexdocs.pm/elixir/Macro.html) modules contains functions for manipulating the AST and implementing macros. The [Macro](https://hexdocs.pm/elixir/Macro.html) module provides the [Macro.to_string/1](https://hexdocs.pm/elixir/Macro.html#to_string/1) function.\n\nThe Code module is often used in conjunction with metaprogramming techniques in Elixir, as it allows you to manipulate and execute code at runtime. However, it is important to use these functions carefully, as dynamically generating and executing code can be complex and difficult to understand, and can have unintended consequences if not used correctly.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Reading AST\n\nWe can use [Macro.to_string/1](https://hexdocs.pm/elixir/Macro.html#to_string/1) to convert a quoted expression into an Elixir expression (in a string).\n\n```elixir\nquoted = quote do: 2 + 2\n\nMacro.to_string(quoted)\n```\n\nWe can provide the AST directly as a three-element tuple.\n\n```elixir\nast = {:+, [context: Elixir, imports: [{1, Kernel}, {2, Kernel}]], [2, 5]}\n\nMacro.to_string(ast)\n```\n\n### Evaluating Strings As Source Code\n\nWe can evaluate a string as Elixir code using the [Code.eval_string/3](https://hexdocs.pm/elixir/Code.html#eval_string/3) function.\n\n```elixir\nCode.eval_string(\"2 + 5\")\n```\n\nVariables in the string can be provided by providing a keyword list of bindings as the second argument to the function.\n\n```elixir\nCode.eval_string(\"2 + a\", a: 2)\n```\n\n### Evaluating AST\n\nWe can use the [Code.eval_quoted/2](https://hexdocs.pm/elixir/Code.html#eval_quoted/2) function to evaluate the AST. Here, we take a quoted expression and evaluate it to find the result.\n\n```elixir\nquoted =\n  quote do\n    2 + 2\n  end\n\nCode.eval_quoted(quoted)\n```\n\nQuoted expressions to not have access to bound variables. Below we'll see that `a` is not defined in the quoted expression.\n\n```elixir\na = 2\n\nquoted =\n  quote do\n    a + 2\n  end\n\nCode.eval_quoted(quoted)\n```\n\nTo gain access to the variable, we can use `unquote` to evalate it into the quoted expression.\n\n```elixir\na = 2\n\nquoted =\n  quote do\n    unquote(a) + 2\n  end\n\nCode.eval_quoted(quoted)\n```\n\nAlternatively, we can provide the variable bindings in a keyword list as the second argument to the [Code.eval_quoted/2](https://hexdocs.pm/elixir/Code.html#eval_quoted/2) function.\n\n```elixir\nquoted =\n  quote do\n    unquote(a) + 2\n  end\n\nCode.eval_quoted(quoted, a: 2)\n```\n\n## Macros\n\nWe can use macros to extend the Elixir language or create [DSLs (Domain-specific Languages)](https://en.wikipedia.org/wiki/Domain-specific_language). For example, every time you use `test` and `assert` in ExUnit, you use ExUnit macros.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule Test do\n  use ExUnit.Case\n\n  test \"example\" do\n    assert 1 == 2\n  end\nend\n\nExUnit.run()\n```\n\nIt's often idiomatic to use macros without round brackets. However, there's nothing preventing you from using brackets with macros. `do end` blocks are actually just an alternative syntax for writing a keyword list as an argument.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule BracketExample do\n  use ExUnit.Case\n\n  test(\"example\", do: assert(1 == 1))\nend\n\nExUnit.run()\n```\n\nMuch of Elixir syntax is implemented using macros. Keywords such as `def` are actually just macros on the [Kernel](https://hexdocs.pm/elixir/Kernel.html) module, and `do end` blocks are actually just keyword lists being provided as an argument to the macro. \ud83e\udd2f\n\n```elixir\nKernel.defmodule(Mind, do: Kernel.def(blown, do: \"\ud83e\udd2f\"))\n\nMind.blown()\n```\n\n## Writing Our Own Macro\n\nUnlike functions, macros are expanded at compile-time, so they retain knowledge of the values they are called with.\n\nNotice that ExUnit can determine the operator and values used in the assertion `assert 1 == 2` to provide test feedback.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"\"\"\nAssertion with `==` failed.\n\nleft: 1\nright: 2\n\"\"\"\n```\n\nTo understand how ExUnit leverages the power of macros to provide better test feedback, we're going to create our own `assert` macro.\n\nThe `assert` macro will accept a truthy expression and print a message with feedback. Notice that we cannot accomplish this with a function. Functions accept the evaluated result of an expressions an argument. We lose the context about the operator and values.\n\n```elixir\ninspect_argument = fn expression ->\n  IO.inspect(expression, label: \"Evaluated Result Of Expression\")\nend\n\ninspect_argument.(1 == 2)\n```\n\nWe use `defmacro` to define a macro.\n\nThe AST representation of an expression knows the function and the arguments the macro was called with.\n\n```elixir\ndefmodule ASTInspector do\n  defmacro inspect(ast) do\n    IO.inspect(ast, label: \"ast\")\n  end\nend\n```\n\nTo use a macro, we need to `require` it.\n\n```elixir\nrequire ASTInspector\n\nASTInspector.inspect(2 == 1)\n```\n\nWe have everything we need in this AST tuple to get the `operator`, the `left` side of the expression, and the `right` side of the expression.\n\n```elixir\ndefmodule ExpressionInspector do\n  defmacro inspect({operator, _meta, [left, right]}) do\n    IO.inspect(operator, label: \"operator\")\n    IO.inspect(left, label: \"left\")\n    IO.inspect(right, label: \"right\")\n  end\nend\n```\n\n```elixir\nrequire ExpressionInspector\n\nExpressionInspector.inspect(2 == 2)\n```\n\nWe want to verify if the `left` and `right` values are equal. We'll make an `Assertion.Test` module that uses pattern matching to return a success message, or failed assertion message depending on if the `left` and `right` sides are equal.\n\n```elixir\ndefmodule Assertion.Test do\n  def assert(:==, left, right) when left == right do\n    \"Success!\"\n  end\n\n  def assert(:==, left, right) do\n    \"\"\"\n    Assertion with == failed.\n    left: #{left}\n    right: #{right}\n    \"\"\"\n  end\nend\n\nAssertion.Test.assert(:==, 1, 2) |> IO.puts()\n```\n\nThen we can use a Macro to get the `operator`, `left`, and `right` values to use with our `Assertion.Test` module.\n\nA macro generates code, so generally it should return an AST expression, not a return value. We use `quote` to create the AST representation of our function call. We'll use the `Assertion.Test.assert` function inside our quoted expression. We also need to use `unquote` to use bound variables inside the quote block. The same is true for parameters. So we need to use `unquote` to inject their evaluated value into the `quote` block.\n\n```elixir\ndefmodule Assertion do\n  defmacro assert({operator, _meta, [left, right]}) do\n    quote do\n      Assertion.Test.assert(unquote(operator), unquote(left), unquote(right))\n    end\n  end\nend\n```\n\nWhen we call the `assert` macro below it compiles into `Assertion.Test.assert(:==, 1, 2)` which then evaluates during runtime.\n\n```elixir\nrequire Assertion\n\nAssertion.assert(1 == 2) |> IO.puts()\n```\n\nAlternatively, we can use `bind_quoted` to bind multiple values to the quoted expression without `unquote`. This is just a syntax sugar to avoid using `unquoted` multiple times.\n\n```elixir\ndefmodule AssertionWithBindQuoted do\n  defmacro assert({operator, _meta, [left, right]}) do\n    quote bind_quoted: [operator: operator, left: left, right: right] do\n      Assertion.Test.assert(operator, left, right)\n    end\n  end\nend\n```\n\nThe macro continues to work as expected.\n\n```elixir\nrequire AssertionWithBindQuoted\n\nAssertionWithBindQuoted.assert(1 == 2) |> IO.puts()\n```\n\n## Use And __using__\n\nWhile you may not write macros often, you are likely to use them daily.\nFor example, we have already relied on macros with the `use` keyword.\n\nWhen we `use GenServer`, a macro generates the necessary boilerplate code to make a [GenServer](https://hexdocs.pm/elixir/GenServer.html).\n\n```elixir\ndefmodule Server do\n  use GenServer\n\n  def init(state) do\n    {:ok, state}\n  end\nend\n```\n\nWe can use the `__info__/2` function on the `Server` module to gain insight into code generated under the hood. Here we see it defines several functions.\n\n```elixir\nServer.__info__(:functions)\n```\n\nThe `use` keyword provides a clean and controlled interface for working with macros. Under the hood, the `use` keyword calls a `__using__` macro in the specified module.\n\n```elixir\ndefmodule Template do\n  defmacro __using__(_opts) do\n    quote do\n      def template_function do\n        \"hello\"\n      end\n    end\n  end\nend\n```\n\nConceptually, it may help think of modules that define macros as templates or common patterns that we can reuse throughout a program. For example, [GenServer](https://hexdocs.pm/elixir/GenServer.html) is a common pattern we want to extend and reuse.\n\n```elixir\ndefmodule ExtendedTemplate do\n  use Template\n\n  def extended_function() do\n    template_function() <> \" world\"\n  end\nend\n```\n\nOnce we define our pattern, we can reuse it throughout our program and extend its functionality.\n\n```elixir\nExtendedTemplate.template_function()\n```\n\n```elixir\nExtendedTemplate.extended_function()\n```\n\nFor a real-world example, it's common to create custom ExUnit cases for common test scenarios. The example below is only a small example of what's possible. Here we create an `IOCase` module which automatically imports the `ExUnit.CaptureIO` module that provides the [capture_io/1](https://hexdocs.pm/ex_unit/ExUnit.CaptureIO.html#capture_io/1) for testing if we print a message using [IO](https://hexdocs.pm/elixir/IO.html).\n\n```elixir\ndefmodule IOCase do\n  # Use the module\n  defmacro __using__(_opts) do\n    quote do\n      use ExUnit.Case\n      import ExUnit.CaptureIO\n    end\n  end\nend\n\nExUnit.start(auto_run: false)\n\ndefmodule IOTest do\n  use IOCase\n\n  test \"capure io\" do\n    capture_io(fn -> IO.puts(\"hello\") end) =~ \"hello\"\n  end\nend\n\nExUnit.run()\n```\n\n### Your Turn\n\nCreate a `Greetings` module with a `__using__` macro. define a `hello/0` function inside of the `__using__` macro. You may choose to experiment with defining other functions or module attributes.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef hello do\n  \"hello\"\nend\n```\n\nCreate a `Usage` module that uses the `use` keyword to call the `__using__` macro in the `Greetings` module.\n\n```elixir\ndefmodule Greetings do\nend\n\ndefmodule Usage do\nend\n```\n\nCall `Usage.hello()` to ensure your solution works correctly.\n\n```elixir\nUsage.hello()\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Schools: Metaprogramming](https://elixirschool.com/en/lessons/advanced/metaprogramming/)\n* [PragProg: Metaprogramming Elixir](https://pragprog.com/titles/cmelixir/metaprogramming-elixir/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Metaprogramming reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Metaprogramming\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/advanced_score_tracker.livemd\">Advanced Score Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/meta_math.livemd\">MetaMath</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task16-reading-genservers", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# GenServers\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=GenServers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/process_mailbox.livemd\">Process Mailbox</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/genserver_drills.livemd\">GenServer Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* What is the purpose of a [GenServer](https://hexdocs.pm/elixir/GenServer.html)?\n* Explain the lifecycle of sending a message to a [GenServer](https://hexdocs.pm/elixir/GenServer.html) and receiving a response.\n* Why might we use asynchronous vs synchronous messages?\n* What happens when we send a [GenServer](https://hexdocs.pm/elixir/GenServer.html) too many messages? What might happen to the [GenServer](https://hexdocs.pm/elixir/GenServer.html) mailbox?\n\n## Generic Server\n\nIn Elixir, a Generic Server refers to a programming pattern and behavior implemented using the [GenServer](https://hexdocs.pm/elixir/GenServer.html) module from the OTP (Open Telecom Platform) library. The Generic Server pattern is a way to structure concurrent and fault-tolerant processes that receive and handle messages.\n\nA Generic Server, implemented as a [GenServer](https://hexdocs.pm/elixir/GenServer.html), is a long-running Elixir process that encapsulates state and behavior. It allows for message-based communication between processes and provides a structured way to handle those messages.\n\nKey characteristics of a Generic Server implemented with [GenServer](https://hexdocs.pm/elixir/GenServer.html) include:\n\n1. **State Management**: The [GenServer](https://hexdocs.pm/elixir/GenServer.html) process holds and manages its own internal state. This state can be modified by handling specific messages and updating the state accordingly.\n\n2. **Message Handling**: [GenServer](https://hexdocs.pm/elixir/GenServer.html) processes receive messages asynchronously and handle them using pattern matching on the message content. The behavior of the server can be defined based on the message received.\n\n3. **Synchronous and Asynchronous Communication**: [GenServer](https://hexdocs.pm/elixir/GenServer.html) processes can communicate synchronously by sending a message and waiting for a response, or asynchronously by sending a message without expecting an immediate reply.\n\n4. **Supervision and Fault Tolerance**: [GenServer](https://hexdocs.pm/elixir/GenServer.html) processes are often used within supervision trees, allowing them to be monitored and restarted in the event of failures or crashes. This contributes to the fault-tolerant nature of OTP applications.\n\n5. **Callback Functions**: [GenServer](https://hexdocs.pm/elixir/GenServer.html) requires implementing specific callback functions such as [handle_call/3](https://hexdocs.pm/elixir/GenServer.html#c:handle_call/3), [handle_cast/2](https://hexdocs.pm/elixir/GenServer.html#c:handle_cast/2), and [handle_info/2](https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2) to define the behavior of the server for different types of messages.\n\nThe Generic Server pattern implemented with [GenServer](https://hexdocs.pm/elixir/GenServer.html) is a fundamental building block in Elixir/OTP applications. It provides a structured approach to building concurrent and fault-tolerant systems by encapsulating state, managing message-based communication, and defining behavior through callback functions.\n\n## Generic Server Life-Cycle\n\nGeneric Servers are a generic wrapper around state and message handling. They are given a callback module that defines callback functions for customizing the behavior of the Generic Server.\n\nThe callback module contains the specific message handler callbacks and the callback for initializing state.\n\nHere's a diagram showing a broad overview of how GenServer's work with a callback module.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\nProcess ->> Generic Server: start_link/0\nGeneric Server ->> Callback Module: init/1 \nCallback Module ->> Generic Server: initial state\nloop send/receive loop\n  Generic Server --> Generic Server: receive\n  Process ->> Generic Server: send message (e.g.  call/3)\n  Generic Server ->> Callback Module: handle message (e.g. handle_call/3)\n  Callback Module ->> Generic Server: sends response and new state\n  Generic Server --> Generic Server: updates state\n  Generic Server ->> Process: sends response\nend\n```\n\n## GenServer\n\n### Message Handler Callbacks\n\nThe [GenServer](https://hexdocs.pm/elixir/GenServer.html) module defines all of the boilerplate under the hood, and allows us to conveniently provide callback functions\n including:\n\n* [init/1](https://hexdocs.pm/elixir/GenServer.html#c:init/1) defines the initial state in an `{:ok, state}` tuple.\n* [handle_call/3](https://hexdocs.pm/elixir/GenServer.html#c:handle_call/3) handle a synchronous message meant for a GenServer process.\n* [handle_cast/2](https://hexdocs.pm/elixir/GenServer.html#c:handle_cast/2) handle an asynchronous message meant for a GenServer process.\n* [handle_info/2](https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2) handle a generic asynchronous message.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Starting A GenServer\n\nWe commonly use one of the following functions to start a GenServer process.\n\n* [GenServer.start_link/3](https://hexdocs.pm/elixir/GenServer.html#start_link/3) start a GenServer as a linked process.\n* [GenServer.start/3](https://hexdocs.pm/elixir/GenServer.html#start/3) start a GenServer without linking the process.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Sending A GenServer A Message\n\nWe can send the [GenServer](https://hexdocs.pm/elixir/GenServer.html) messages with functions such as:\n\n* [GenServer.call/3](https://hexdocs.pm/elixir/GenServer.html#call/3) send a synchronous message for a GenServer handled by `handle_call/3`.\n* [GenServer.cast/2](https://hexdocs.pm/elixir/GenServer.html#cast/2) send an asynchronous message for a GenServer handled by `handle_cast/2`.\n* [Kernel.send/2](https://hexdocs.pm/elixir/Kernel.html#send/2) send a generic asynchronous message handled by `handle_info/2`\n* [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) send a generic asynchronous message with some additional options handled by `handle_info/2`.\n* [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4) send a generic asynchronous message handled by `handle_info/2`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Counter Example\n\nHere's a simple `CounterServer` [GenServer](https://hexdocs.pm/elixir/GenServer.html). It stores a count in state, and we can send it a message to increment the count.\n\n* `GenServer.handle_call/3` returns a synchronous response in a `{:reply, response, state}` tuple.\n* `GenServer.handle_cast/2` asynchronously updates the state in a `{:noreply, new_state}` tuple.\n* `GenServer.init/2` initializes the initial state (`0`) in an `{:ok, state}` tuple.\n\n```elixir\ndefmodule CounterServer do\n  use GenServer\n\n  @impl true\n  def init(_init_arg) do\n    {:ok, 0}\n  end\n\n  @impl true\n  def handle_cast(:increment, state) do\n    {:noreply, state + 1}\n  end\n\n  @impl true\n  def handle_call(:get_count, _from, state) do\n    # `response` bound for sake of clarity.\n    response = state\n    {:reply, response, state}\n  end\nend\n```\n\nUsing the GenServer above, here's an example of sending an asynchronous message with `GenServer.cast/2` and a synchronous message with `GenServer.call/3`.\n\n```elixir\n{:ok, pid} = GenServer.start_link(CounterServer, [])\nGenServer.cast(pid, :increment)\nGenServer.call(pid, :get_count)\n```\n\nIn Livebook, we can use [Kino.Process.render_seq_trace/2](https://hexdocs.pm/kino/Kino.Process.html#render_seq_trace/2) to visualize the **CAST** and **CALL** messages sent to the GenServer.\n\n```elixir\nKino.Process.render_seq_trace(fn ->\n  {:ok, pid} = GenServer.start_link(CounterServer, [])\n  GenServer.cast(pid, :increment)\n  GenServer.call(pid, :get_count)\nend)\n```\n\nThe **INFO: ack** message is an acknowledgement message sent back to the parent process and received under the hood by `GenServer.start_link/3`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Messages With Params\n\nWe send messages as a collection (typically a tuple) to add additional data.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef handle_cast({:increment_by, increment_by}, state)\n  {:noreply, state + increment_by}\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the `CounterServer` above, add a handler for a `:decrement` message.\n\n## Client API\n\nTypically we don't use [GenServer](https://hexdocs.pm/elixir/GenServer.html) functions directly, and instead create a [Client API](https://hexdocs.pm/elixir/GenServer.html#module-client-server-apis). The Client API makes our code more reusable, readable, and easy to change. This is purely for code organization.\n\nClient API functions typically use `__MODULE__` when referencing the current module to make it easier to rename the module in the future.\n\nCallback functions are often referred to as the **Server API**.\n\n```elixir\ndefmodule ClientServerExample do\n  use GenServer\n  # Client API\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def increment(pid) do\n    GenServer.cast(pid, :increment)\n  end\n\n  def get_count(pid) do\n    GenServer.call(pid, :get_count)\n  end\n\n  # Server API\n\n  def init(_init_arg) do\n    {:ok, 0}\n  end\n\n  def handle_cast(:increment, state) do\n    {:noreply, state + 1}\n  end\n\n  def handle_call(:get_count, _from, state) do\n    response = state\n    {:reply, response, state}\n  end\nend\n```\n\nSome projects will split the client and the server module when they get large enough. If we split the modules then we can't use `__MODULE__` to refer to the server module from the client module.\n\n```elixir\ndefmodule ClientExample do\n  def start_link(_opts) do\n    GenServer.start_link(ServerExample, [])\n  end\n\n  def increment(pid) do\n    GenServer.cast(pid, :increment)\n  end\n\n  def get_count(pid) do\n    GenServer.call(pid, :get_count)\n  end\nend\n\ndefmodule ServerExample do\n  use GenServer\n\n  def init(_init_arg) do\n    {:ok, 0}\n  end\n\n  def handle_cast(:increment, state) do\n    {:noreply, state + 1}\n  end\n\n  def handle_call(:get_count, _from, state) do\n    response = state\n    {:reply, response, state}\n  end\nend\n```\n\n## Synchronous Vs Asynchronous\n\nHere are some key characteristics of synchronous messages vs asynchronous messages.\n\n* Synchronous messages:\n\n  * Block the calling process until a response is received.\n  * Offer reliability and predictability.\n  * Provide a straightforward and ordered flow of communication.\n  * Can be slower in terms of performance.\n\n* Asynchronous messages:\n\n  * Do not block the calling process.\n  * Are faster in terms of performance.\n  * May introduce unexpected behavior and timing issues.\n  * Can result in a less predictable flow of communication.\n  * Often referred to as **fire-and-forget** as they do not care about a response.\n\n  Here's an example `SlowCounter` server that takes a second to increment the count. We're going to use it to demonstrate the difference between synchronous and asynchronous code.\n\n```elixir\ndefmodule SlowCounter do\n  use GenServer\n\n  def init(_init_arg) do\n    {:ok, 0}\n  end\n\n  def handle_call(:slow_increment, _from, state) do\n    Process.sleep(2000)\n    IO.puts(\"Finished Synch Increment\")\n    {:reply, state + 1, state + 1}\n  end\n\n  def handle_cast(:slow_increment, state) do\n    Process.sleep(2000)\n    IO.puts(\"Finished Asynch Increment\")\n    {:noreply, state + 1}\n  end\nend\n```\n\nSynchronous messages block the caller process. Evaluate the cell below and notice it takes 2 seconds to finish.\n\n```elixir\n{:ok, pid} = GenServer.start_link(SlowCounter, [])\nGenServer.call(pid, :slow_increment)\nIO.puts(\"Evaluated\")\n```\n\nAsynchronous messages do not block the caller process. Evaluate the cell below and you'll notice it evaluates immediately, but prints the \"Finished Asynch Increment\" message 2 seconds later.\n\n```elixir\n{:ok, pid} = GenServer.start_link(SlowCounter, [])\nGenServer.cast(pid, :slow_increment)\nIO.puts(\"Evaluated\")\n```\n\n### Synchronous Mailbox\n\nWhether synchronous or asynchronous, GenServers handle messages in the order they are received. These messages are stored in a process **mailbox** until they are handled.\n\nThe synchronous mailbox improves the predictability of a GenServer. It's a major reason for why Elixir is so powerful and simple when building concurrent systems compared to other languages.\n\nNotice that when we call `cast/2`twice below it takes `4` seconds for the second `cast/2` handler to finish. They are not handled concurrently.\n\n```elixir\n{:ok, pid} = GenServer.start_link(SlowCounter, [])\nGenServer.cast(pid, :slow_increment)\nGenServer.cast(pid, :slow_increment)\n```\n\n## Concurrency\n\nTo have concurrent code, we simply need two GenServers. Notice both messages below finish at the same time because each is being processed concurrently.\n\n> If you have fewer CPU cores than processes, concurrent code does not run in **parallel**, so while code gains the benefits of task-switching typically giving the illusion of running in parallel, they will not actually process in parallel at the same time.\n\n```elixir\n{:ok, counter1} = GenServer.start_link(SlowCounter, [])\n{:ok, counter2} = GenServer.start_link(SlowCounter, [])\n\nGenServer.cast(counter1, :slow_increment)\nGenServer.cast(counter2, :slow_increment)\n```\n\n## Regular Messages\n\nYou might wonder why we have both `handle_cast/2` and `handle_info/2` if they both handle asynchronous messages. Here are some key characteristics of each.\n\n* `GenServer.handle_cast/2`\n  * Non-blocking message handling.\n  * Typically only used to update GenServer state.\n* `GenServer.handle_info/2`\n  * Non-blocking message handling\n  * Used for a wider variety of messages such as system level behavior, or handling messages that are sent to many different types of processes.\n  * Can receive messages sent after an amount of time with `Process.send_after/4`.\n\nSee [HexDocs: Receiving Regular Messages](https://hexdocs.pm/elixir/GenServer.html#module-receiving-regular-messages) for more information.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### GenServers Sending Themselves A Message\n\nA [GenServer](https://hexdocs.pm/elixir/GenServer.html) cannot synchronously send itself a message using `call/3` because the current message blocks the process mailbox.\n\n```elixir\ndefmodule SendingSelfExample do\n  use GenServer\n\n  def init(_init_arg) do\n    {:ok, nil}\n  end\n\n  def handle_call(:talking_to_myself, _from, state) do\n    Process.sleep(1000)\n    IO.puts(\"Talking to myself\")\n    GenServer.call(self(), :talking_to_myself)\n    {:reply, \"response\", state}\n  end\n\n  def handle_cast(:talking_to_myself, state) do\n    Process.sleep(1000)\n    IO.puts(\"Talking to myself\")\n    GenServer.cast(self(), :talking_to_myself)\n    {:noreply, state}\n  end\nend\n```\n\nRun the code below and you'll notice the process crashes with the message `process attempted to call itself`.\n\n```elixir\n{:ok, pid} = GenServer.start(SendingSelfExample, [])\nGenServer.call(pid, :talking_to_myself)\n```\n\n## Debugging\n\nWe can use `:sys.get_state/2` to view the state of a GenServer. This should **only** be used for debugging purposes. Generally speaking, do not use `:sys.get_state/2` to expose the state of a GenServer or for testing.\n\n```elixir\n{:ok, pid} = GenServer.start_link(CounterServer, [])\n\n:sys.get_state(pid)\n```\n\n## Named Processes\n\n`GenServer.start_link/3` takes additional options as the third argument. We can provide a `:name` option to name the process. Names are typically atoms or module names (which are just atoms under the hood.)\n\nNamed processes are unique, there cannot be two processes with the same name. Named processes are also easy to reference as you can use the name of the process to send them a message.\n\n```elixir\ndefmodule NamedCounter do\n  def start_link(_opts) do\n    GenServer.start_link(NamedCounter, [], name: NamedCounter)\n  end\n\n  def init(_init_arg) do\n    {:ok, 0}\n  end\n\n  def handle_cast(:increment, state) do\n    {:noreply, state + 1}\n  end\nend\n```\n\nRun the cell below multiple times.\n\nStarting an already started named process returns `{:error, {:already_started, #PID<0.613.0>}}`.\n\n```elixir\nNamedCounter.start_link([])\n```\n\nMost GenServer related functions accept the named process name instead of a `pid`.\n\n```elixir\nGenServer.cast(NamedCounter, :increment)\n:sys.get_state(NamedCounter)\n```\n\nHowever, some do not. If needed, we can use `Process.whereis/1` to find the pid of a named process.\n\n```elixir\nProcess.whereis(NamedCounter)\n```\n\n## Configuration\n\nOften we make [GenServer](https://hexdocs.pm/elixir/GenServer.html) modules configurable for different situations.\n\nThe `start_link/1` function in a GenServer module typically accepts a list of options. The `init/1` callback also accepts an argument, typically (but not necessarily) used to configure the initial state.\n\nHere's an example. There are many ways to make a GenServer configurable depending on your use case.\n\n```elixir\ndefmodule ConfigurableServer do\n  def start_link(opts) do\n    name = Keyword.get(opts, :name)\n    initial_state = Keyword.get(opts, :state, 0)\n\n    GenServer.start_link(__MODULE__, initial_state, name: name)\n  end\n\n  def init(init_arg) do\n    {:ok, init_arg}\n  end\nend\n\nConfigurableServer.start_link(name: :example_name, state: 10)\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: GenServer](https://hexdocs.pm/elixir/GenServer.html#call/3)\n* [ElixirLang: GenServer](https://elixir-lang.org/getting-started/mix-otp/genserver.html)\n* [Exercism: GenServer](https://exercism.org/tracks/elixir/concepts/genserver)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish GenServers reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=GenServers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/process_mailbox.livemd\">Process Mailbox</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/genserver_drills.livemd\">GenServer Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task17-reading-web_servers", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Web Servers\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:finch, \"~> 0.16.0\"}\n])\n\nFinch.start_link(name: MyApp.Finch)\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Web Servers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_1.7.livemd\">Phoenix 1.7</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/phoenix_follow_along_counter_app.livemd\">Follow Along: Phoenix Counter App</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is TCP?\n* What is the lifecycle for a TCP request?\n\n## Overview\n\nWeb development is one sub-field within programming. Broadly speaking, web developers create websites.\n\nWebsites are programs that run on a web server. Clients communicate with these web servers over a computer network. We've already seen how we can connect to a web server as a client using HTTP requests in the [APIs](./apis.livemd) section.\n\nIn this lesson, we'll cover how we can create the web server that the client connects to. Together, we'll create a web server from scratch to demystify how they are built.\n\nHowever, be aware that in general we'll rely on the Phoenix Framework, which is a web framework for Elixir, rather than building our own web server from scratch.\n\nAlso, this lesson relies on port `4000` being free. If you have any programs using port `4000` this lesson may not work properly.\n\n## Transmission Control Protocol (TCP)\n\n[Transmission Control Protocol (TCP)](https://en.wikipedia.org/wiki/Transmission_Control_Protocol) is the communication protocol applications use to communicate and exchange data over a network. TCP is the underlying protocol used by HTTP requests.\n\nWe use the built in [`:gen_tcp`](https://www.erlang.org/doc/man/gen_tcp.html) library from Erlang to start a server that uses TCP to listen for connections on a network.\n\nThis server creates a **socket** connection on a specified **port** of the machine.\nA port is a communication endpoint for a particular service. For example, by default this livebook application runs on port `8080` which you can see in the URL of your browser, `http://localhost:8080/sessions/`. A socket allows for two way communication over this port to send and receive data.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- Learn more at https://mermaid-js.github.io/mermaid -->\n\n```mermaid\ngraph LR;\n  S[Server]\n  P[Port]\n  LSO[Listen Socket]\n  C[Client]\n  S --listen on --> P --establish--> LSO\n  C --request --> LSO\n  LSO --response--> C\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThis socket listens for connections from clients, and accepts them when they connect, reads the request, then send a response to the client.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- Learn more at https://mermaid-js.github.io/mermaid -->\n\n```mermaid\nsequenceDiagram\nparticipant C as Client\nparticipant S as Server\nS->> S: start socket\nC--> S: accept connection\nC->> S: send request\nS->> S: read request\nS->> C: send response\nC--> S: close connection\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nBelow, we simulate a web server that accepts only a single request, and returns `\"Hello, world!\"` to the client. We then send the web server a request and receive a response.\n\n```elixir\nport = 4000\n\nspawn(fn ->\n  # start socket\n  {:ok, listen_socket} = :gen_tcp.listen(port, active: false, reuseaddr: true)\n\n  # accept connection\n  {:ok, connection} = :gen_tcp.accept(listen_socket)\n\n  # read request\n  {:ok, request} = :gen_tcp.recv(connection, 0)\n  IO.inspect(request, label: \"Client Request\")\n\n  # send response\n  response = \"HTTP/1.1 200\\r\\nContent-Type: text/html\\r\\n\\r\\n Hello world!\"\n  :gen_tcp.send(connection, response)\n\n  # close connection\n  :gen_tcp.close(connection)\n\n  # we kill the listen_socket to avoid address already in use issues.\n  # Typically, the listen socket will remain open and recursively accept connections indefinitely.\n  Process.exit(listen_socket, :kill)\nend)\n\n# Send Request\nFinch.build(:get, \"http://localhost:#{port}\") |> Finch.request!(MyApp.Finch)\n```\n\nThe code above is purely for demonstration purposes. We won't need to write our own webserver, instead we'll rely on frameworks like [Phoenix](https://www.phoenixframework.org/) that do all of this for us.\n\n## Web Server\n\nPutting all of this together, we can make a `WebServer` module. The `WebServer` module will listen on port `4000` and recursively accept client requests indefinitely.\n\nStart the `WebServer` socket below by executing the code cell, then navigate to http://localhost:4000 in a new tab in your browser. You should see a message from the web server with the current time.\n\n```elixir\ndefmodule WebServer do\n  def start(port) do\n    {:ok, listen_socket} = :gen_tcp.listen(port, active: false, reuseaddr: true)\n\n    accept(listen_socket)\n  end\n\n  def accept(listen_socket) do\n    # accept connection\n    {:ok, connection} = :gen_tcp.accept(listen_socket)\n\n    # send response\n    current_time = Time.to_string(Time.utc_now())\n    response = \"HTTP/1.1 200\\r\\nContent-Type: text/html\\r\\n\\r\\n It is #{current_time}\"\n    :gen_tcp.send(connection, response)\n\n    # close connection\n    :gen_tcp.close(connection)\n\n    accept(listen_socket)\n  end\nend\n\nWebServer.start(4000)\n```\n\nThis server will remain open indefinitely and recursively call `accept/2` every time a new client connects to the socket on port `4000`.\n\nAll websites use a similar (albeit more fully featured) web server to accept client connections, receive requests, and send responses back.\n\nHopefully, this example provides you context on how web servers operate under the hood. However, it's rarely practical to build our own web server, and instead we'll rely on the Phoenix Framework which hides these implementation details from use.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nWe've seen a simple text response, but web servers are also able to send more complex responses containing an entire web page.\n\nIn the `WebServer` module above, modify the original response:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nresponse = \"HTTP/1.1 200\\r\\nContent-Type: text/html\\r\\n\\r\\n It is #{current_time}\"\n```\n\nTo a response using [Hyper Text Markup Language (HTML)](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics). HTML is the code used to structure a web page. For example, we can modify the response to use an HTML header tag `<h1>`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nresponse = \"HTTP/1.1 200\\r\\nContent-Type: text/html\\r\\n\\r\\n <h1>It is #{current_time}<h1/>\"\n```\n\nVisit http://localhost:4000 to see your modified content. You may need to stop the `WebServer` Elixir cell and start it again.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Web Servers reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Web Servers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_1.7.livemd\">Phoenix 1.7</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/phoenix_follow_along_counter_app.livemd\">Follow Along: Phoenix Counter App</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task18-reading-phoenix_one_to_many_associations", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# One-To-Many Associations\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=One-To-Many Associations\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_migration.livemd\">Blog: Visibility Migration</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_comments.livemd\">Blog: Comments</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we create a foreign key reference in a migration?\n* How do we associate two records in a schema?\n* How do we write tests for associated records?\n* How do we preload associated data?\n\n## Overview\n\nThis is a companion reading for the [Blog: Comments](../exercises/blog_comments.livemd) exercise. This lesson is an overview of how to work with one-to-many associations in a Phoenix application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### One To Many Associations\n\nIn a one-to-many relationship, a single record in one table is associated with multiple records in another table. For example, a `Post` might have many `Comments` associated with it.\n\n```mermaid\nerDiagram\n\nPost {\n}\n\nComment {\n    text content\n    id blog_id\n}\n\nPost ||--o{ Comment : \"has many\"\n```\n\nIn this relationship, we'd say the parent (post) **has many** children (comments), and the child **belongs to** the parent.\n\nThe child in the relationship stores a **foreign key id** that associates it with the parent.\n\n## Generators\n\nWe can generate the scaffolding for an associated resource using the phoenix generators.\n\nOften associated resources don't require their own controller, and instead only need to generate the context. For example:\n\n```\nmix phx.gen.context Comments Comment comments content:text post_id:references:posts\n```\n\nThe `post_id:references:posts` field creates the `post_id` foreign key id field that references the `posts` table.\n\nThen if you need to create controller actions you might re-use the controller for the parent resource.\n\nAlternatively, you might generate the resource normally using `mix phx.gen.html` and selectively include controller actions you expect to use.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nresources \"/comments\", CommentController, only: [:create, :update, :delete]\n```\n\n## Migration\n\nHere's an example migration that creates a foreign key field `post_id` that references another table.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.CreateComments do\n  use Ecto.Migration\n\n  def change do\n    create table(:comments) do\n      add :content, :text\n      add :post_id, references(:posts, on_delete: :nothing)\n\n      timestamps()\n    end\n\n    create index(:comments, [:post_id])\n  end\nend\n```\n\nThe [index/3](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#index/3) macro creates A database that provides a quick and efficient way to look up records in a database. While not required, without an index, the database management system would need to scan through every record in the table to find the desired information.\n\nThe `on_delete` behavior describes what should happen to the child if we delete the parent. For example, we could use the `:delete_all` behavior to delete all comments when a post is deleted. See [references/2 options](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#references/2-options) for a full list of similar options.\n\nWe can also enforce that comments have an associated post using the `null: false` option. See [add/3 options](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#add/3-options) for a full list of similar options.\n\nHere's an example putting that together:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.CreateComments do\n  use Ecto.Migration\n\n  def change do\n    create table(:comments) do\n      add :content, :text\n      add :post_id, references(:posts, on_delete: :delete_all), null: false\n\n      timestamps()\n    end\n\n    create index(:comments, [:post_id])\n  end\nend\n```\n\n## Schema\n\nSchemas are like blueprints that define how data is stored in a database. They have an `id` field for an associated record, but they don't know anything else about how the records are related to each other.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Comments.Comment do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"comments\" do\n    field :content, :string\n    field :post_id, :id\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(comment, attrs) do\n    comment\n    |> cast(attrs, [:content])\n    |> validate_required([:content])\n  end\nend\n```\n\nHowever, It's often useful to describe the association to the schema using the [belongs_to/3](https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3) and [has_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#has_many/3) macros.\n\nFor example, we might want to load the associated comments when we retrieve a `Post`.\n\nHere's how we might modify the `Comment` to include the association.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Comments.Comment do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"comments\" do\n    field :content, :string\n    belongs_to :post, Blog.Posts.Post\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(comment, attrs) do\n    comment\n    |> cast(attrs, [:content, :post_id])\n    |> validate_required([:content, :post_id])\n    |> foreign_key_constraint(:post_id)\n  end\nend\n```\n\nWe also use [foreign_key_constraint/3](https://hexdocs.pm/ecto/Ecto.Changeset.html#foreign_key_constraint/3) above to ensure the `:post_id` provided is an actual post id in the database.\n\nHere's how we might modify the `Post` to include the association.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Posts.Post do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"posts\" do\n    field :content, :string\n    field :subtitle, :string\n    field :title, :string\n    has_many :comments, Blog.Comments.Comment\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(post, attrs) do\n    post\n    |> cast(attrs, [:title, :subtitle, :content])\n    |> validate_required([:title, :subtitle, :content])\n  end\nend\n```\n\n## Preloading\n\nOnce we've defined the association using [belongs_to/3](https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3) or [has_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#has_many/3) we can preload associated data structures when querying the database.\n\nFor example, we can preload data before we've retrieved it from the database using [Ecto.Query.preload/3](https://hexdocs.pm/ecto/Ecto.Query.html#preload/3).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nfrom(p in Post, preload: [:comments]) |> Repo.get!(1)\n```\n\nOr we can preload data on a given struct using [Ecto.Repo.preload/3](https://hexdocs.pm/ecto/Ecto.Repo.html#c:preload/3).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRepo.preload(post, :comments)\n```\n\n## Adding Associations To Tests\n\nBy default, when Phoenix generates tests they do not test the associated data structure, so we have to write our own or modify the existing tests.\n\nFor example, in the case of comments and posts, we'd have to modify all of the tests to create a post and provide the post id when creating a comment.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Imported The PostsFixtures Module To Use The `post_fixture` Function.\nimport Blog.PostsFixtures\n# Use The Post Fixture Whenever Creating A Comment To Provide The `post_id`.\npost = post_fixture()\ncomment = comment_fixture(post_id: post.id)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Testing Preloading Associations\n\nHere's an example of how to test that we preload an association. This would be useful if we want to display all of the comments for a particular post.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"get_post!/1 returns the post with given id and associated comments\" do\n  post = post_fixture()\n  comment = comment_fixture(post_id: post.id)\n  assert Posts.get_post!(post.id).comments == [comment]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Creating Associated Data\n\nHere's an example of how to test that creating a record with an associated data structure works as expected.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"create_comment/1 with valid data creates a comment\" do\n  post = post_fixture()\n  valid_attrs = %{content: \"some content\", post_id: post.id}\n\n  assert {:ok, %Comment{} = comment} = Comments.create_comment(valid_attrs)\n  assert comment.content == \"some content\"\n  assert comment.post_id == post.id\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Fixing Tests Due To An Unloaded Association\n\nSome tests might break due to not using preloaded associations in the assertions. Those tests can be fixed using [Repo.preload/3](https://hexdocs.pm/ecto/Ecto.Repo.html#c:preload/3). For example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"get_post!/1 returns the post with given id\" do\n  post = post_fixture()\n  assert Posts.get_post!(post.id) == Repo.preload(post, :comments)\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Controller Tests\n\nWe often have to fix or write our own tests to handle the creation of associated data and the redirect behavior of controller tests.\n\nHere's an example test for creating a comment.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  describe \"create comment\" do\n    test \"redirects to show when data is valid\", %{conn: conn} do\n      post = post_fixture()\n      create_attrs = %{content: \"some content\", post_id: post.id}\n      conn = post(conn, ~p\"/comments\", comment: create_attrs)\n\n      assert %{id: id} = redirected_params(conn)\n      # redirect to the post show page\n      assert redirected_to(conn) == ~p\"/posts/#{post.id}\"\n\n      conn = get(conn, ~p\"/posts/#{post.id}\")\n      assert html_response(conn, 200) =~ \"some content\"\n    end\n\n    test \"renders errors when data is invalid\", %{conn: conn} do\n      post = post_fixture()\n      invalid_attrs = %{content: nil, post_id: post.id}\n      conn = post(conn, ~p\"/comments\", comment: invalid_attrs)\n      # apostrophes are rendered as &#39; in HTML.\n      assert html_response(conn, 200) =~ \"can&#39;t be blank\"\n    end\n  end\n```\n\nIf generating controllers or controller tests it's best to remove any unused tests and functionality.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Delete Behavior\n\nIf we change the delete behavior of some resource, we might want to verify it works as expected. Here's an example test that ensures we delete comments when we delete a post.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"delete_post/1 deletes the post and associated comments\" do\n  post = post_fixture()\n  comment = comment_fixture(post_id: post.id)\n  assert {:ok, %Post{}} = Posts.delete_post(post)\n\n  assert_raise Ecto.NoResultsError, fn -> Posts.get_post!(post.id) end\n  assert_raise Ecto.NoResultsError, fn -> Comments.get_comment!(comment.id) end\nend\n```\n\n## Associated Forms\n\nAssociated data needs to be sent in an HTTP request. There are a few main ways to include this data:\n\n* body params in the form\n* URL params\n* query params\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Body Params\n\nHere's an example form that uses a `@post` and a `@comment_changeset` that would be defined in the `conn.assigns` by the controller. The form uses a hidden input to include the post id when it makes a request.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={@comment_changeset} action={~p\"/comments\"}>\n  <.input type=\"hidden\" field={f[:post_id]} value={@post.id} />\n  <.input field={f[:content]} type=\"text\" label=\"Content\" />\n  <:actions>\n    <.button>Comment</.button>\n  </:actions>\n</.simple_form>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### URL Params Or Query Params\n\nTo use URL params or query params, change the `action` in the form to include the associated data in the url, then omit the hidden input above.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# URL Params\naction={~p\"/comments/#{@post.id}\"}\n# Query Params\naction={~p\"/comments/?post_id=#{@post.id}\"}\n```\n\n## Handling Associated Data In The Controller\n\nA corresponding controller action needs to be defined to handle the HTTP request with the associated data sent by the form.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Body Params\n\nHere's an example controller action that assumes the `post_id` of a comment is included in the body params with the form.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef create(conn, %{\"comment\" => comment_params}) do\n  case Comments.create_comment(comment_params) do\n    {:ok, comment} ->\n      conn\n      |> put_flash(:info, \"Comment created successfully.\")\n      # redirect to the post show page where the comment form is rendered\n      |> redirect(to: ~p\"/posts/#{comment.post_id}\")\n\n    {:error, %Ecto.Changeset{} = comment_changeset} ->\n      post = Posts.get_post!(comment_params[\"post_id\"])\n      # re-render the post show page with a comment changeset that the page uses to display errors.\n      render(conn, :show, post: post, comment_changeset: comment_changeset)\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### URL Or Query Params\n\nIf the request was sent using URL params or query params the post id would be handled separately like so:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef create(conn, %{\"comment\" => comment_params, \"post_id\" => post_id}) do\n  case Comments.create_comment(Map.put(comment_params, \"post_id\", post_id)) do\n    {:ok, comment} ->\n      conn\n      |> put_flash(:info, \"Comment created successfully.\")\n      |> redirect(to: ~p\"/posts/#{post_id}\")\n\n    {:error, %Ecto.Changeset{} = comment_changeset} ->\n      post = Posts.get_post!(post_id)\n      render(conn, :show, post: post, comment_changeset: comment_changeset)\n  end\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Ecto.Query](https://hexdocs.pm/ecto/Ecto.Query.html)\n* [Elixir Schools: Associations](https://elixirschool.com/en/lessons/ecto/associations)\n* [Elixir Schools: Querying#preloading](https://elixirschool.com/en/lessons/ecto/querying_basics#preloading-9)\n* [Elixir Forum: build_assoc vs put_assoc vs cast_assoc](https://elixirforum.com/t/confussed-with-build-assoc-vs-put-assoc-vs-cast-assoc/29116)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish One-To-Many Associations reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=One-To-Many Associations\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_migration.livemd\">Blog: Visibility Migration</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_comments.livemd\">Blog: Comments</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task19-reading-tuples", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Tuples\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tuples\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/atoms.livemd\">Atoms</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/lists.livemd\">Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is a tuple and how do you create one?\n* How do you pattern match on a tuple to bind elements in the tuple to variables?\n\n## Tuples\n\nTuples are fixed size containers for multiple elements.\nLike lists they can contain any data type.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{}\n{7}\n{1, 2, 3}\n{\"example\"}\n{1, \"pizza\", 3, :success, false}\n```\n\nThey are often used when you know the number of desired elements and their type.\nFor example, it's common in Elixir to use tuples to represent failure or success cases\nwith the associated error message or success value.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:success, \"Well done!\"}\n{:error, \"Too bad!\"}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, create a tuple with `:ok` as the first element, and `\"got it!\"` as\nthe second element.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n{:ok, \"got it!\"}\n```\n\n</details>\n\n```elixir\n\n```\n\n## Pattern Matching\n\nIn Elixir, the `=` sign is the match operator. In other programming languages, you may call it the assignment operator.\n\nElixir calls `=` the match operator because it uses pattern matching to bind variables.\n\nWhat is pattern matching? Well rather than simply assigning values to variables, Elixir allows\nyou to bind variables on the left-hand side of the `=`. So long as it matches the same shape of the right hand side of the `=`.\n\nFor example, the following expression is the most \"strict\" match possible. Both sides are exactly equal.\n\n```elixir\n{1, 2, 3} = {1, 2, 3}\n```\n\nThe `=` operator attempts to coerce the left side value to match the right side value, so when we write the following expression, we bind `my_tuple` to `{1, 2, 3}` in order to make the right and the left side match.\n\nThe coercion to match is less obvious with a simple variable name, because it's like a blank canvas, it can match any value.\n\n```elixir\nmy_tuple = {1, 2, 3}\n```\n\nHowever, we can bind other values inside of a container data type, so the left and right side still match.\n\n```elixir\n{one, two, three} = {1, 2, 3}\n```\n\nNow we can use these bound variables `one`, `two`, and `three` in our program.\n\n```elixir\none\n```\n\n```elixir\ntwo\n```\n\n```elixir\nthree\n```\n\nSo long as the expression on the left side of match operator `=` matches the pattern of the right side, you can bind variables to values.\n\nThe tuple with variables bound on the left side must have the same number of elements as the tuple on the right side, otherwise we'll cause a [MatchError](https://hexdocs.pm/elixir/MatchError.html).\n\n```elixir\n{one, two} = {1, 2, 3}\n```\n\nIf we want to bind some of the variables in a tuple, and ignore others, we can use an `_` to ignore any variables.\n\n```elixir\n{one, _two, three} = {1, 2, 3}\n```\n\nYou can pattern match with any kind of data. So long as the left side matches the right side. We'll cover pattern matching with other data structures in later reading material.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUse pattern matching to bind `\"jewel\"` to a variable called `jewel`.\nReplace `jewel` with your answer.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n{_gold, _treasure, jewel} = {\"gold\", \"treasure\", \"jewel\"}\njewel\n```\n\n</details>\n\n```elixir\n{\"gold\", \"treasure\", \"jewel\"}\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Lang: Tuples](https://elixir-lang.org/getting-started/basic-types.html#tuples)\n* [Exercism: Tuples](https://exercism.org/tracks/elixir/concepts/tuples)\n* [Elixir Schools: Tuples](https://elixirschool.com/en/lessons/basics/collections#tuples-4)\n* [HexDocs: Tuple](https://hexdocs.pm/elixir/Tuple.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Tuples reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tuples\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/atoms.livemd\">Atoms</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/lists.livemd\">Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task20-reading-structs", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Structs\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Structs\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/modules.livemd\">Modules</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rock_paper_scissors_lizard_spock.livemd\">Rock Paper Scissors Lizard Spock</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you use a struct to structure data?\n* Why might you use a struct vs a map?\n* How do you manipulate and access values in a struct?\n\n## Structs\n\nWe've learned how to abstract behavior in our programs, but what about data?\n\nIt's often useful to be able to create a custom data structure. That's what structs are for.\n**Struct** is simply a short word for structure. They are an extension on top of maps that enforce\nconstraints on your data.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Defining A Struct\n\nWe use the `defstruct` keyword to define the allowed keys in our struct. Instances of the struct will not be allowed to contain any data other than these keys.\n\nHere's an example struct called `StructName`. The name `StructName` could be any valid module name. We define `:key1`, `:key2`, and `:key3` keys for the struct. Keys in a struct should always be atoms, but they can be any valid atom.\n\n```elixir\ndefmodule StructName do\n  defstruct [:key1, :key2, :key3]\nend\n```\n\nYou'll notice that structs definitions are created inside of a module. We then use the module name to create an instance of the struct.\n\nKeep in mind, the **struct definition** in the module is like the blueprint to a house. It contains the plans, but it's not the actual physical building.\n\nSimilarly, the **struct instance** is the actual instance of the struct. It's one instance of actual struct data as defined by the struct definition.\n\nWe can create an instance of as struct using `%StructName{}` syntax. This looks similar to a map, because structs are actually implemented using maps under the hood.\n\n```elixir\n%StructName{}\n```\n\nYou'll notice that the struct has a name key, but no value since we didn't provide anything.\n\nHere's how you can pass in a value for a given key.\n\n```elixir\n%StructName{key1: \"value 1\"}\n```\n\nWe can pass in values for any or all of our keys.\n\n```elixir\n%StructName{key1: \"value 1\", key2: \"value 2\", key2: \"value 2\"}\n```\n\nIf we provide an invalid value, our struct instance will raise a [KeyError](https://hexdocs.pm/elixir/KeyError.html).\n\n```elixir\n%StructName{invalid_key: \"invalid key value\"}\n```\n\nThis enforcement of data shape is why we might want to use a struct instead of a map, which does not enforce which keys must be present.\n\n## Default Values\n\nBy providing struct keys as a keyword list, we can define default values for the key.\n\n```elixir\ndefmodule DefaultKeys do\n  defstruct key1: \"default1\", key2: \"default2\"\nend\n```\n\nThe key will have the default value if we don't provide it to the instance of our struct.\n\n```elixir\n%DefaultKeys{}\n```\n\nOr we can override the default value like so.\n\n```elixir\n%DefaultKeys{key1: \"OVERRIDE!\"}\n```\n\nStructs can have keys with and without a default value.\n\n```elixir\ndefmodule SomeDefaults do\n  defstruct [:key2, key1: \"default\"]\nend\n```\n\n```elixir\n%SomeDefaults{}\n```\n\nDefault keys must come last in the list of struct keys otherwise Elixir will raise a [SyntaxError](https://hexdocs.pm/elixir/SyntaxError.html).\n\n```elixir\ndefmodule BadDefaults do\n  defstruct [key1: \"default\", :key2]\nend\n```\n\n## Enforce Keys\n\nIt's common to validate data in a struct. For example, you can use the `@enforce_keys`\nmodule attribute to enforce that certain keys are set.\n\n```elixir\ndefmodule EnforcedNamePerson do\n  @enforce_keys [:name]\n  defstruct [:name]\nend\n```\n\nCreating an instance of `EnforcedNamePerson` without passing the enforced `:name` key a value will cause the struct instance to raise an error.\n\n```elixir\n%EnforcedNamePerson{}\n```\n\nTo avoid repetition, we can use the `@enforce_keys` module attribute in the `defstruct` definition, and add any non-enforced keys using `++`.\n\n```elixir\ndefmodule EnforcedNamePersonWithAge do\n  @enforce_keys [:name]\n  defstruct @enforce_keys ++ [:age]\nend\n```\n\n### Your Turn\n\nDefine a `Coordinate` struct which must have `:x` and `:y` keys. Enforce these keys.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ndefmodule Coordinate do\n  @enforce_keys [:x, :y]\n  defstruct @enforce_keys\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Module Functions\n\nA module that defines a struct can contain functions just like a normal module.\n\n```elixir\ndefmodule Person do\n  defstruct [:name]\n\n  def greet(person) do\n    \"Hello, #{person.name}.\"\n  end\nend\n```\n\n```elixir\nperson = %Person{name: \"Peter\"}\n\nPerson.greet(person)\n```\n\n### Your Turn\n\n* Define a new struct `Hero`.\n* A `Hero` will have a `:name` and `:secret_identity`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nhero = %Hero{\n  name: \"Spider-Man\",\n  secret_identity: \"Peter Parker\"\n}\n```\n\n* Create a `Hero.greeting/1` function which uses the `hero` struct instance and return a greeting.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nHero.greeting(hero) \n\"I am Spider-Man.\"\n```\n\n* Create a `Hero.reveal/1` function which accepts the `hero` struct instance and reveals the hero's secret identity.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nHero.reveal(hero) \n\"I am Peter Parker.\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ndefmodule Hero do\n  defstruct [:name, :secret_identity]\n\n  def greeting(hero) do\n    \"I am #{hero.name}.\"\n  end\n\n  def reveal(hero) do\n    \"I am #{hero.secret_identity}.\"\n  end\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\nWhen finished, bind a variable `hero` to an instance of your `Hero` struct.\n\n```elixir\n\n```\n\nUse the `Hero.greeting/1` function on `hero` to ensure it works correctly.\n\n```elixir\n\n```\n\nUse the `Hero.reveal/1` function on `hero` to ensure it works correctly.\n\n```elixir\n\n```\n\n## Manipulating Structs\n\nStructs are an extension of maps under the hood, so you can use the same map update syntax.\n\n```elixir\ndefmodule MyStruct do\n  defstruct [:key]\nend\n```\n\n```elixir\ninitial = %MyStruct{key: \"value\"}\nupdated = %{initial | key: \"new value\"}\n```\n\nYou can also access values using dot notation.\n\n```elixir\ninstance = %MyStruct{key: \"value\"}\n\ninstance.key\n```\n\nHowever, we can't use square bracket notation. That makes sense, since a struct instance should always have the keys the struct definition defines.\n\n```elixir\ninstance[:key]\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [The Elixir Documentation: Structs](https://elixir-lang.org/getting-started/structs.html)\n* [Elixir School: Structs](https://elixirschool.com/en/lessons/basics/modules#structs-2)\n* [Exercism: Structs](https://exercism.org/tracks/elixir/concepts/structs)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Structs reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Structs\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/modules.livemd\">Modules</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rock_paper_scissors_lizard_spock.livemd\">Rock Paper Scissors Lizard Spock</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task21-reading-phoenix_many_to_many_relationships", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Many-To-Many Relationships\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Many-To-Many Relationships\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_authentication.livemd\">Blog: Authentication</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_tags.livemd\">Blog: Tags</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we configure a many-to-many association with Ecto?\n* How do we load an association when making a database query?\n* How do we handle associated data in a form?\n\n## Overview\n\nThis is a companion reading for the [Blog: Tags](../exercises/blog_tags.livemd) exercise. This lesson is an overview of how to work with one-to-many associations in a Phoenix application. See the `example_projects/blog` project folder to contextualize the examples found throughout this lesson.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Many-to-many Relationships\n\nA many-to-many relationship is a type of association where multiple entities from one table can be connected to multiple entities from another table.\n\nFor example, consider blog posts and tags. Each post can have multiple tags, and each tag can be associated with multiple posts. This represents a many-to-many association between posts and tags.\n\n```mermaid\nerDiagram\n\nPost {\n    string title\n    text content\n    date published_on\n    boolean visibility\n}\n\nTag {\n  string name\n}\n\nPost }O--O{ Tag: \"\"\n```\n\nFor instance, consider the following scenario:\n\n* Post 1: \"Introduction to Machine Learning in Elixir,\" \n  * Tags - [\"Machine Learning\", \"Elixir\"]\n* Post 2: \"Elixir Programming Tips\" \n  * Tags - [\"Elixir\", \"Programming\"]\n\nHere's a simplified posts table based on the data above.\n\n| id  | title                                      |\n| --- | ------------------------------------------ |\n| 1   | Introduction to Machine Learning in Elixir |\n| 2   | Elixir Programming Tips                    |\n\nAnd the tags table.\n\n| id  | tag              |\n| --- | ---------------- |\n| 1   | Machine Learning |\n| 2   | Elixir           |\n| 3   | Programming      |\n\nTo associate the posts and tags, we use a **join table** that stores both the post and the tag, allowing for many posts and many tags to be associated.\n\n| Post                                       | Tag              |\n| ------------------------------------------ | ---------------- |\n| Introduction to Machine Learning in Elixir | Machine Learning |\n| Introduction to Machine Learning in Elixir | Elixir           |\n| Elixir Programming Tips                    | Elixir           |\n| Elixir Programming Tips                    | Programming      |\n\nThe above table is for clarity purposes, in reality the **join table** only stores foreign key for each post/tag.\n\n| post_id | tag_id |\n| ------- | ------ |\n| 1       | 1      |\n| 1       | 2      |\n| 2       | 2      |\n| 2       | 3      |\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Breakdown\n\nTo implement a many-to-many association, there are many parts of our application we need to be aware of.\n\n1. Migration: [create a join table](#join-table-migration)\n2. Schema: [setup the many_to_many association](#schema)\n3. Changeset + Context: [associate the records](#associating-records).\n4. Form: [send associated data in the form](#sending-associated-data-in-a-form)\n5. Controller: [handle associated data in the controller](#handling-associated-data-in-the-controller)\n\nWe'll also cover how to [test many to many associations](#testing-many-to-many-associations).\n\nHere's a refresher of the HTTP request cycle in a Phoenix application using creating a post with associated tags as an example.\n\n```mermaid\nsequenceDiagram\n    Form->>Router: HTTP Post \"/posts\" %{attrs}\n    Router ->>Controller: :create\n    Controller ->> Context: create_post\n    Context -->> Schema: changeset\n    Schema -->> Context: changeset\n    Context -->> Repo: insert\n    Repo --> Migration: CREATE\n```\n\nIn the example above `attrs` would be the data required to create a post and associate tags with the post.\n\nRather than memorizing a series of steps, aspire to understand each layer of the Phoenix app well enough that you can connect them together to build any desired feature.\n\nIn the following lesson, we'll cover examples of each step. You can refer to the example blog application in the `example_projects/blog` folder to see this working together in a real application.\n\n## Join Table Migration\n\nJoin tables do not require a schema, only a migration in the database.\n\nHere's an example of a join table migration that could have been initial generated using `mix ecto.gen.migration add_posts_tags_join_table`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.AddPostsTagsJoinTable do\n  use Ecto.Migration\n\n  def change do\n      create table(:posts_tags, primary_key: false) do\n        add :post_id, references(:posts, on_delete: :delete_all)\n        add :tag_id, references(:tags, on_delete: :delete_all)\n      end\n\n      create(unique_index(:post_tags, [:post_id, :tag_id]))\n  end\nend\n```\n\nThe `primary_key: false` option specifies that the records in the join table do not require a primary key.\n\nWhile not strictly necessary, the [unique_index/3](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#unique_index/3) macro optimizes performance when searching for a post's tags and that a post cannot have the same tag twice.\n\n## Schema\n\nJoin tables do not require their own schema, however it's possible to have a [separate schema that also joins two tables together](https://hexdocs.pm/ecto/associations.html#many-to-many). Instead, the [many_to_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#many_to_many/3) macro allows us to setup the many-to-many association in our schemas through the join table.\n\nHere's an example `Tag` schema that has a many-to-many relationship with `Post`s through the `posts_tags` table.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Tags.Tag do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"tags\" do\n    field :name, :string\n    many_to_many :posts, Blog.Posts.Post, join_through: \"posts_tags\"\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(tag, attrs) do\n    tag\n    |> cast(attrs, [:name])\n    |> validate_required([:name])\n  end\nend\n```\n\nHere's an example `Post` schema that has a many-to-many relationship with `Tag`s through the `posts_tags` table.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Posts.Post do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"posts\" do\n    field :content, :string\n    field :title, :string\n    field :visible, :boolean, default: true\n    field :published_on, :utc_datetime\n\n    has_many :comments, Blog.Comments.Comment\n    belongs_to :user, Blog.Accounts.User\n    many_to_many :tags, Blog.Posts.Tag, join_through: \"posts_tags\"\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(post, attrs) do\n    post\n    |> cast(attrs, [:title, :content, :visible, :published_on, :user_id])\n    |> validate_required([:title, :content, :visible, :user_id])\n    |> unique_constraint(:title)\n    |> foreign_key_constraint(:user_id)\n  end\nend\n```\n\n## Putting Associating Records\n\nTo insert associated existing records, we can use the [put_assoc/3](https://hexdocs.pm/ecto/Ecto.Changeset.html#put_assoc/4) function which puts the associated data in a changeset.\n\nHere's an example of associating Tags with a post changeset.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef changeset(post, attrs, tags \\\\ []) do\n  post\n  |> cast(attrs, [:title, :content, :visible, :published_on, :user_id])\n  |> validate_required([:title, :content, :visible, :user_id])\n  |> unique_constraint(:title)\n  |> foreign_key_constraint(:user_id)\n  # tags is a list of existing Tag structs.\n  |> put_assoc(:tags, tags)\nend\n```\n\nAssociations built with `put_assoc/3` are stored in the changeset.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n#Ecto.Changeset<\n  action: nil,\n  changes: %{\n    content: \"some content\",\n    tags: [\n      #Ecto.Changeset<action: :update, changes: %{}, errors: [],\n       data: #Blog.Tags.Tag<>, valid?: true>,\n      #Ecto.Changeset<action: :update, changes: %{}, errors: [],\n       data: #Blog.Tags.Tag<>, valid?: true>\n    ],\n    title: \"some title\",\n    user_id: 4975\n  },\n  errors: [],\n  data: #Blog.Posts.Post<>,\n  valid?: true\n>\n```\n\nThese associated records put into the changeset will create records in the join table when passed to the `Repo` to insert the data into the database.\n\nHere's an example of a context function for creating posts that passes the list of tags to the changeset. Keep in mind this is just an example. There are many patterns for providing this data, and this pattern in particular is simple when there is only one association, but would not scale well when providing many different associated records.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef create_post(attrs \\\\ %{}, tags \\\\ []) do\n  %Post{}\n  |> Post.changeset(attrs, tags)\n  |> Repo.insert()\nend\n```\n\nSee the [Ecto: Inserting Associated Records](https://hexdocs.pm/ecto/associations.html#inserting-associated-records) guide for more ways including:\n\n* Inserting a child record to an existing parent\n* Inserting parent and child records together\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Updating Associated Records\n\nUpdating associated records requires setting the `on_replace` behavior for the many to many relationship on the schema. Here's an example of a [many_to_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#many_to_many/3) call which configures the `Post` schema so that `posts_tags` records are deleted when updating the post's tags.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmany_to_many(:tags, Blog.Tags.Tag, join_through: \"posts_tags\", on_replace: :delete)\n```\n\nHere's how the new tags could be sent from the context.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef update_post(%Post{} = post, attrs, tags \\\\ []) do\n  post\n  |> Post.changeset(attrs, tags)\n  |> Repo.update()\nend\n```\n\n## Form Association Data\n\nWe've already seen how to send associated data in a form. However many-to-many relationships are more complex than other relationships, and there are many different ways to create the data.\n\n* Create the associated data\n* Associate existing data\n\nIn the case of posts and tags, we might enforce that users only select from a list of existing tags. Alternatively, we might instead allow users to create their own tags when creating a post.\n\nRegardless of how our specific implementation works, there are only 3 ways to send associated data.\n\n* query params\n* url params\n* body params\n\nWe can submit the required data for the association through a form. For example, to associate a post with certain tags, we might submit a list of tag ids.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Select Inputs\n\nSelect inputs allow us to send a list of options and include a `selected` field for which options are selected.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  <.input \n    field={f[:field]} \n    type=\"select\" \n    multiple={true} \n    options={[\n      [key: \"Option1\", value: 1, selected: true],\n      [key: \"Option2\", value: 2, selected: false],\n      [key: \"Option3\", value: 3, selected: true]\n    ]}\n  />\n```\n\n`options` in a select input can be in a few formats:\n\n* a list of values i.e. `[\"1\", \"2\", \"3\"]`\n* a list of key/value tuples i.e. `[{\"one\", \"1\"}, {\"two\", \"2\"}]`\n* a keyword list with key, value, and selected field i.e. `[[key: \"one\", value: \"1\", selected: true]]`\n\nIt's also possible to omit the `selected` option as `false` is the default.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Associating Existing Data\n\nHere's an example of a form that uses `tag_options` passed in from the `conn.assigns` to create a select input for a list of tags.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={@changeset} action={@action}>\n  <.error :if={@changeset.action}>\n    Oops, something went wrong! Please check the errors below.\n  </.error>\n  <.input field={f[:user_id]} type=\"hidden\" value={@current_user.id} />\n  <.input field={f[:title]} type=\"text\" label=\"Title\" />\n  <.input field={f[:content]} type=\"text\" label=\"Content\" />\n  <.input field={f[:published_on]} type=\"datetime-local\" label=\"Publish On\" value={DateTime.utc_now()} />\n  <.input field={f[:visible]} type=\"checkbox\" label=\"Visible\" />\n  <.input field={f[:tag_ids]} type=\"select\" label=\"Tags\" multiple={true} options={@tag_options} />\n\n\n  <:actions>\n    <.button>Save Post</.button>\n  </:actions>\n</.simple_form>\n```\n\nKeep in mind that it's not possible to store an Elixir term in an HTML input otherwise we'll encounter a `Phoenix.HTML.Safe not implemented for ELIXIRTERM` where `ELIXIRTERM` is the data structure we attempted to embed into HTML. We often encounter this issue when Phoenix uses the default value of some association, that's why we've made the field `:tag_ids` instead of `:tags`. There are work-arounds to this problem, but this is a simple way to avoid the issue.\n\nHere's how the tag options could be built:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp tag_options(selected_ids \\\\ []) do\n  Tags.list_tags()\n  |> Enum.map(fn tag ->\n    [key: tag.name, value: tag.id, selected: tag.id in selected_ids]\n  end)\nend\n```\n\nThen provided from the controller actions:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef new(conn, _params) do\n  changeset = Posts.change_post(%Post{tags: []})\n  render(conn, :new, changeset: changeset, tag_options: tag_options())\nend\n\n...\n\ndef edit(conn, %{\"id\" => id}) do\n  post = Posts.get_post!(id)\n  changeset = Posts.change_post(post)\n\n  render(conn, :edit,\n    post: post,\n    changeset: changeset,\n    tag_options: tag_options(Enum.map(post.tags, & &1.id))\n  )\nend\n```\n\nIf using a component, remember that values in the `conn.assigns` need to be passed to the component as well. Here's an example of providing a list of `tag_options` to a form component.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.post_form changeset={@changeset} action={~p\"/posts\"} current_user={@current_user} tag_options={@tag_options} />\n```\n\nSee the example blog project in the `example_projects/blog` folder for more concrete examples.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Creating Associated Data\n\nFor more advanced use-cases, the [inputs_for/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#inputs_for/1) macro makes it possible to send data for associated records in a form. For example, we could use [inputs_for/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#inputs_for/1) to create tags when creating a post.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.form\n  # other form attributes\n  ...\n>\n  # other form inputs\n  ...\n  <.inputs_for :let={f_nested} field={f[:tags]}>\n    <.input type=\"text\" field={f_nested[:name]} />\n  </.inputs_for>\n</.form>\n```\n\nEcto also provides [Ecto.Multi](https://hexdocs.pm/ecto/Ecto.Multi.html) for grouping such database operations.\n\n## Controller Association Data\n\nOften we have to load the associated data when performing the create or update actions on some associated resource.\n\nHere's an example create and update action in a controller that loads a list of tags using a list of `tag_ids` sent from a form.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  def create(conn, %{\"post\" => post_params}) do\n    tags = Map.get(post_params, \"tag_ids\", []) |> Enum.map(&Tags.get_tag!/1)\n\n    case Posts.create_post(post_params, tags) do\n      {:ok, post} ->\n        conn\n        |> put_flash(:info, \"Post created successfully.\")\n        |> redirect(to: ~p\"/posts/#{post}\")\n\n      {:error, %Ecto.Changeset{} = changeset} ->\n\n        render(conn, :new,\n          changeset: changeset,\n          tag_options: tag_options(Enum.map(tags, & &1.id))\n        )\n    end\n  end\n\n  ...\n\n  def update(conn, %{\"id\" => id, \"post\" => post_params}) do\n    post = Posts.get_post!(id)\n    tags = Map.get(post_params, \"tag_ids\", []) |> Enum.map(&Tags.get_tag!/1)\n\n    case Posts.update_post(post, post_params, tags) do\n      {:ok, post} ->\n        conn\n        |> put_flash(:info, \"Post updated successfully.\")\n        |> redirect(to: ~p\"/posts/#{post}\")\n\n      {:error, %Ecto.Changeset{} = changeset} ->\n\n        render(conn, :edit,\n          post: post,\n          changeset: changeset,\n          tag_options: tag_options(Enum.map(tags, & &1.id)),\n        )\n    end\n  end\n```\n\n## Testing Many-to-many Associations\n\nIt's essential to test many-to-many associations to verify that the relationships between entities are properly established and that the functions for managing these associations behave correctly.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Context Test\n\nHere's an example context test that ensures we can associate a post with many tags when it's created. To be extra thorough, this test asserts on both the `post.tags` and `tag.posts` sides of the many-to-many association.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"create_post/1 with tags\" do\n  user = user_fixture()\n  tag1 = tag_fixture()\n  tag2 = tag_fixture()\n\n  valid_attrs1 = %{content: \"some content\", title: \"post 1\", user_id: user.id}\n  valid_attrs2 = %{content: \"some content\", title: \"post 2\", user_id: user.id}\n\n  assert {:ok, %Post{} = post1} = Posts.create_post(valid_attrs1, [tag1, tag2])\n  assert {:ok, %Post{} = post2} = Posts.create_post(valid_attrs2, [tag1])\n\n  # posts have many tags\n  assert Repo.preload(post1, :tags).tags == [tag1, tag2]\n  assert Repo.preload(post2, :tags).tags == [tag1]\n\n  # tags have many posts\n  # we preload posts: [:tags] because posts contain the list of tags when created\n  assert Repo.preload(tag1, posts: [:tags]).posts == [post1, post2]\n  assert Repo.preload(tag2, posts: [:tags]).posts == [post1]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Controller Test\n\nHere's an example controller test that verifies we can create a post with associated tags through a list of tag ids.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"create post with tags\", %{conn: conn} do\n  # Arrange: Setup the necessary data\n  user = user_fixture()\n  conn = log_in_user(conn, user)\n\n  tag1 = tag_fixture(name: \"tag 1 name\")\n  tag2 = tag_fixture(name: \"tag 2 name\")\n\n  create_attrs = %{\n    content: \"some content\",\n    title: \"some title\",\n    visible: true,\n    published_on: DateTime.utc_now(),\n    user_id: user.id,\n    tag_ids: [tag1.id, tag2.id]\n  }\n\n  # Act: send the HTTP POST request\n  conn = post(conn, ~p\"/posts\", post: create_attrs)\n\n  # Assert: Verify the response is redirected and that the post is created with tags.\n  assert %{id: id} = redirected_params(conn)\n  assert redirected_to(conn) == ~p\"/posts/#{id}\"\n\n  assert Posts.get_post!(id).tags == [tag1, tag2]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Testing Association Issues\n\nIt's common to run into issues in tests due to loading or not loading associated data structures.\n\nHere are 3 common ways to fix this problem.\n\n* Compare IDs only\n* Remove the association field\n* Preload the association\n\nHere's an example of comparing the IDs only using pattern matching.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Use The Pin Operator ^ To Pattern Match On The Post's Id.\nassert [%{id: ^post_id}] = Posts.list_posts(\"ITL\")\n```\n\nHere's an example of comparing the IDs by accessing the id.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nassert Posts.list_posts() |> Enum.map(& &1.id) == [post1.id, post2.id]\n```\n\nHere's an example of removing the association field.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMap.delete(post, :tags) == Map.delete(expected, :tags)\n```\n\nHere's an example of preloading the association. In this example, `post1` and `post2` have already loaded the `:tags` association. The `force` option is sometimes necessary if the association was created after the data was already loaded. See [Ecto.Repo.preload/3 #options](https://hexdocs.pm/ecto/Ecto.Repo.html#c:preload/3-options) for more.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nassert Blog.Repo.preload(post, :tags, force: true).tags == [tag1, tag2]\n```\n\n## Further Reading\n\nFor more on Phoenix, consider the following resources.\n\n* [Ecto Associations: Many to Many](https://hexdocs.pm/ecto/associations.html#many-to-many)\n* [Elixir Schools: Associations](https://elixirschool.com/en/lessons/ecto/associations)\n* [Elixir Forum: Ecto associations and the purpose of has many through and many to many](https://elixirforum.com/t/ecto-associations-and-the-purpose-of-has-many-through-and-many-to-many/32164/2)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Many-To-Many Relationships reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Many-To-Many Relationships\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_authentication.livemd\">Blog: Authentication</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_tags.livemd\">Blog: Tags</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task22-reading-ranges", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Ranges\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Ranges\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/pokemon_battle.livemd\">Pokemon Battle</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/enum.livemd\">Enum</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we represent a range of numbers in Elixir?\n* What is the step of a range, and how do we change it?\n* How can we pattern match on a range?\n\n## Ranges\n\n**Ranges** are useful for representing an ascending or descending sequence of numbers, without needing\nto manually type each number in a list.\n\nFor example, you could have a range from 1 to 10.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n1..10\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\n\nflowchart LR\n  1 --> 2 --> 3 --> 4 --> 5 --> 6 --> 7 --> 8 --> 9 --> 10\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nor 5 to -5.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n5..-5\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  5 --> 4 --> 3 --> 2 --> 1 --> 0 --> -1 --> -2 --> -3 --> -4 --> -5\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou can visualize a range as representing an ascending or descending list of integers.\n\nOn its own, it might not seem like much. But ranges will be incredibly useful with the [Enum](https://hexdocs.pm/elixir/Enum.html) module.\nYou'll learn more about the [Enum](https://hexdocs.pm/elixir/Enum.html) module in a future lesson. For now, it's enough\nto understand the relationship between ranges and lists.\n\nFor example the range `1..5` equates to `[1, 2, 3, 4, 5]` as a list.\n\nTo establish that relationship, you can use [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to convert a range from the list.\n\n```elixir\nEnum.to_list(1..5)\n```\n\nRanges can have a step. By default ranges have a step of `1`. That means that by default they\ninclude each whole number in the range.\n\nYou can override the default step of the range using `//`:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n0..10//2\n```\n\nThis creates a range from `0` to `10` with a step of `2`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n0 --> 2 --> 4 --> 6 --> 8 --> 10\n```\n\nThat means the range `0..10//2` correlates to the list `[0, 2, 4, 6, 8, 10]`\n\nHere's the same range converted into a list to help you visualize it. Once again, you will\nlearn more about what `Enum.to_list` is in a future lesson.\n\n```elixir\nEnum.to_list(0..10//2)\n```\n\n### Your Turn\n\nIn the Elixir cell below, use [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to convert a range from `3` to `9` with a step of `3` into a list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n  ```elixir\n  Enum.to_list(3..9//3)\n  ```\n</details>\n\n```elixir\n\n```\n\n### Pattern Matching With Ranges\n\nWe can pattern match on ranges just like any other data type.\n\nFor the most strict match, the left and right side must be exactly equal.\n\n```elixir\n1..10 = 1..10\n```\n\nWe can also bind the start and end of the range to a variable in our pattern match.\n\n```elixir\nstart..finish = 1..10\n```\n\n```elixir\nstart\n```\n\n```elixir\nfinish\n```\n\nWe can also bind the step.\n\n```elixir\nstart..finish//step = 0..9//3\n```\n\n```elixir\nstart\n```\n\n```elixir\nfinish\n```\n\n```elixir\nstep\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Ranges reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Ranges\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/pokemon_battle.livemd\">Pokemon Battle</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/enum.livemd\">Enum</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task23-reading-protocols", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Protocols\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Protocols\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/math_with_guards.livemd\">Math With Guards</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/math_with_protocols.livemd\">Math With Protocols</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you achieve data-based polymorphism using protocols?\n* Why might you use protocols instead of some control flow structure or some alternative means of achieving data-based polymorphism?\n\n## Protocols\n\nIn English, a protocol means a set of rules or procedures. In Elixir, a protocol allows us to\ncreate a common functionality, with different implementations.\n\nSpecifically, protocols enable polymorphic behavior based off of data.\n\n```mermaid\nflowchart\n  A -- data --> B\n  B --> C\n  B --> D\n  B --> E\n  B --> F\n\n  A[Caller]\n  B[Protocol]\n  C[Implementation]\n  D[Implementation]\n  E[Implementation]\n  F[Implementation]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFor example, the [Enum](https://hexdocs.pm/elixir/Enum.html) module works with any collection data type. Under the hood, it uses the\n[Enumerable](https://hexdocs.pm/elixir/Enumerable.html) protocol.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  E[Enum]\n  EN[Enumerable]\n  E --> EN\n  EN --> Map\n  EN --> List\n  EN --> k[Keyword List]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIt then executes the appropriate instructions depending on which data type the [Enum](https://hexdocs.pm/elixir/Enum.html) function\nis called with.\n\n```elixir\nEnum.random(%{one: 1, two: 2})\n```\n\n```elixir\nEnum.random(1..20)\n```\n\n```elixir\nEnum.random(one: 1, two: 2)\n```\n\n## Protocols On Simple Data Types\n\nAnytime you need a common function for multiple data types or structs, you\ncan consider a protocol.\n\nFor example, let's create an `Adder` protocol\nthat's going to add two values together. It will accept integers, strings, and lists\nand hide the specifics of which operator is necessary to add different types.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nAdder.add(1, 2)\n3\n\nAdder.add(\"hello, \", \"world\")\n\"hello, world\"\n\nAdder.add([1], [2])\n[1, 2]\n```\n\nSo if we give the protocol an integer, it will use the implementation for [Integer](https://hexdocs.pm/elixir/Integer.html).\nIf we provide the protocol a string, it will use the implementation for `BitString`, and\nif we provide the protocol a list, it will use the implementation for [List](https://hexdocs.pm/elixir/List.html).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  A -- Integer --> B\n  B -- Integer --> C\n  B -- BitString --> D\n  B -- List --> E\n  style C color:green\n  style D color:red\n  style E color:red\n  A[Caller]\n  B[Adder Protocol]\n  C[Integer Implementation]\n  D[String Implementation]\n  E[List Implementation]\n```\n\n[List](https://hexdocs.pm/elixir/List.html), [Integer](https://hexdocs.pm/elixir/Integer.html), and `BitString` are all built-in Elixir modules used to define\nwhich data type the protocol implementation is for.\n\nWe define a protocol using `defprotocol` and define a function clause. We only need the function\nhead, not the function body.\n\n```elixir\ndefprotocol Adder do\n  def add(value, value)\nend\n```\n\nWe've defined a protocol above, but we haven't implemented it for any data type yet.\n\nNotice the error for `Adder.add/2` called with two integers says\n`protocol Adder not implemented for 1 of type Integer`\n\n```elixir\nAdder.add(1, 2)\n```\n\nTo define an implementation for a protocol, we use `defimpl` and provide it the name of the protocol.\nWe also declare what struct or data type the protocol is `for:`\n\n```elixir\ndefimpl Adder, for: Integer do\n  def add(int1, int2) do\n    int1 + int2\n  end\nend\n\nAdder.add(1, 2)\n```\n\nWe also want the `Adder` protocol to handle strings and lists. That means we need to create\nan implementation for List and String. In Elixir, the underlying type for strings is `BitString`.\n\nWhy `BitString`? In Elixir, strings are stored as [bitstrings](https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html#bitstrings).\n\n```elixir\ndefimpl Adder, for: BitString do\n  def add(string1, string2) do\n    string1 <> string2\n  end\nend\n\nAdder.add(\"hello, \", \"world\")\n```\n\n### Your Turn\n\nIn the Elixir cell below, create an implementation of `Adder` for lists.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefimpl Adder, for: List do\n  def add(list1, list2) do\n    list1 ++ list2\n  end\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Protocols With Structs\n\nWe can create implementations for a protocol based on simple data types such as `integer` and `string`.\nIn addition to those simple data types, we can also create an implementation for specific structs.\n\nFor example, let's say we're making an old school kids toy that says different animal noises.\n\nwe'll create a `Sound` protocol that prints different sounds depending on\nthe struct given to it.\n\n```elixir\ndefprotocol Sound do\n  def say(struct)\nend\n```\n\nWe'll create a `Cat` struct.\n\n```elixir\ndefmodule Cat do\n  defstruct [:mood]\nend\n```\n\nThen a `Cat` implementation for the `Sound` protocol.\n\n```elixir\ndefimpl Sound, for: Cat do\n  def say(cat) do\n    case cat.mood do\n      :happy -> \"Purr\"\n      :angry -> \"Hiss!\"\n    end\n  end\nend\n```\n\n```elixir\nSound.say(%Cat{mood: :happy})\n```\n\n```elixir\nSound.say(%Cat{mood: :angry})\n```\n\n### Your Turn\n\n```elixir\ndefmodule Dog do\n  defstruct []\nend\n```\n\nDefine a `Sound` implementation for the `Dog` struct above.\nWhen `Sound.say/1` is called with a `Dog` struct it should return `\"Woof!\"`\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nSound.say(%Dog{})\n\"Woof!\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefimpl Sound, for: Dog do\n  def say(dog) do\n    \"woof!\"\n  end\nend\n```\n\n</details>\n\n```elixir\n\n```\n\nFor more information, there is a talk by Kevin Rockwood.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=sJvfCE6PFxY\\\")\",\"title\":\"Kevin Rockwood | A Practical Guide to Elixir Protocols\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=sJvfCE6PFxY\")\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Protocols reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Protocols\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/math_with_guards.livemd\">Math With Guards</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/math_with_protocols.livemd\">Math With Protocols</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task24-reading-io", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# IO\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=IO\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/strings.livemd\">Strings</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/booleans.livemd\">Booleans</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## IO\n\nWe can use the [IO](https://hexdocs.pm/elixir/IO.html) module for retrieving user input and displaying output.\n\nWe can use [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) and [IO.puts/2](https://hexdocs.pm/elixir/IO.html#puts/2) print displaying information.\n\nWe can also use [IO.gets/2](https://hexdocs.pm/elixir/IO.html#gets/2) to retrieve input from the user.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> input = IO.gets(\"Give me some input: \")\nGive me some input: sure!\n\"sure!\\n\"\niex> input\n\"sure!\\n\"\n```\n\nKeep in mind, this will work when running an Elixir project or in the [IEx](https://hexdocs.pm/iex/IEx.html) shell, but will fail with an `:enotsup` (error not supported) error when we run it from Livebook.\n\n```elixir\nIO.gets(\"I will fail!\")\n```\n\nThat's because there is no command line or other device to retrieve user input from.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nRun [IO.gets/2](https://hexdocs.pm/elixir/IO.html#gets/2) in the command line from the [IEx](https://hexdocs.pm/iex/IEx.html) shell and bind the return value to an `input` variable.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> input = IO.gets(\"Give me some input: \")\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish IO reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=IO\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/strings.livemd\">Strings</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/booleans.livemd\">Booleans</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task25-reading-file", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# File\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/streams.livemd\">Streams</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/stream_drills.livemd\">Stream Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* How can you use the file system for long-term persistence and retrieval of elixir terms?\n* What is the absolute and relative **path**?\n\n## Persistence\n\nSo far, we've only been able to persist values during the **runtime** of our application. This is a form of **short-term** persistence that ends the moment we stop our application.\n\nAlternatively, we can have **long-term** persistence mechanisms that persist after we stop our application and will be unchanged the next time we start the application.\n\nUsing the file system is one form of long-term persistence. When we save a file, we save it to a storage device on our computer, usually a [solid state drive](https://en.wikipedia.org/wiki/Solid-state_drive) or [hard disc drive](https://en.wikipedia.org/wiki/Hard_disk_drive).\n\nShort-term persistence is instead stored in [Random Access Memory (RAM)](https://en.wikipedia.org//wiki/Random-access_memory), usually referred to as simply \"memory\". See [Computer Hardware](computer_hardware.livemd) for a further breakdown of how hardware and software relate to each other.\n\n## File\n\nWe use the [File](https://hexdocs.pm/elixir/File.html) module for working with the file system and the [Path](https://hexdocs.pm/elixir/Path.html) module for working with file paths.\n\nMany [File](https://hexdocs.pm/elixir/File.html) operations mimic terminal functionality and even use the same names in a Unix (MacOS or Linux) environment.\n\nFor example, we have the [File.ls/1](https://hexdocs.pm/elixir/File.html#ls/1) function, which lists folders and files in the current path.\n\n```elixir\nFile.ls!()\n```\n\nThis mimics the `ls` command that also lists files in the current directory in Linux and macOS.\n\n```\n$ ls\nCONTRIBUTING.md  README.md  data  exercises   flake.nix  reading                      scripts       utils\nLICENSE          _build     deps  flake.lock  images     removed_content_tracking.md  start.livemd  v_graph.livemd\n```\n\n```elixir\nPath.absname(\"exercises\")\n```\n\n## Absolute Path Vs Relative Path\n\nThe **absolute path** is the absolute path to a file relative to the computer's root directory. For example, we can see the absolute path of the current file using [__DIR__](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__DIR__/0).\n\n```elixir\n__DIR__\n```\n\nThe **relative path** is the relative path to a file relative to the current directory location. For example, if we have the following folder structure:\n\n```\nmain_directory/\n  sub_directory_1/\n  sub_directory_2/\n```\n\nIf we were in `sub_directory_2`, the relative path to `sub_directory_1` would be `\"../sub_directory_1\"`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Current Directory\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe [File](https://hexdocs.pm/elixir/File.html) module uses relative paths based on the current directory. The current directory will depend on how you start livebook. We can see the current path using the [Path](https://hexdocs.pm/elixir/Path.html) module to get the absolute name of the current path.\n\n```elixir\nPath.absname(\"\")\n```\n\n## File Module Functions\n\nThe [File](https://hexdocs.pm/elixir/File.html) module has many useful functions for working with the file system.\n\nWe'll have the opportunity to learn more about the [File](https://hexdocs.pm/elixir/File.html) module and the various functions during the [drills exercise](../exercises/file_drills.livemd). For now, here are some common functions to get you started.\n\n* [File.cd/1](https://hexdocs.pm/elixir/File.html#cd/1) change the current directory.\n* [File.dir?/2](https://hexdocs.pm/elixir/File.html#dir?/2) check if a given path is a directory.\n* [File.exists?/2](https://hexdocs.pm/elixir/File.html#exists?/2) check if a file exists.\n* [File.ls/1](https://hexdocs.pm/elixir/File.html#ls/1) list all files and folders in the current directory.\n* [File.read/1](https://hexdocs.pm/elixir/File.html#read/1) read content from a file.\n* [File.rm/1](https://hexdocs.pm/elixir/File.html#rm/1) remove a file.\n* [File.rm_rf/1](https://hexdocs.pm/elixir/File.html#rm_rf/1)remove files and directories in a given path.\n* [File.mkdir/1](https://hexdocs.pm/elixir/File.html#mkdir/1) create a directory given a path.\n* [File.mkdir_p/1](https://hexdocs.pm/elixir/File.html#mkdir_p/1) create a directory and any missing parent directories given a path.\n* [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) write content to a given file path.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can create a file using [File.write/3](https://hexdocs.pm/elixir/File.html#write/3).\n\n```elixir\nFile.write(\"file.txt\", \"file content\")\n```\n\nTo prove we created the file, we can read the content using [File.read/1](https://hexdocs.pm/elixir/File.html#read/1).\n\n```elixir\nFile.read(\"file.txt\")\n```\n\nThe file is now in our list of files.\n\n```elixir\nFile.ls()\n```\n\nTo clean up the file, uncomment the following code which should remove it.\n\n```elixir\n# File.rm(\"file.txt\")\n```\n\nNow the file should no longer exist. Let's check with [File.exists?/2](https://hexdocs.pm/elixir/File.html#exists?/2).\n\n```elixir\nFile.exists?(\"file.txt\")\n```\n\n### Your Turn\n\nExperiment with the functions above. Refer to the documentation for examples you can try.\n\n<div style=\"background-color: lightcoral; font-weight: bold; padding: 1rem; color: white; margin: 1rem 0;\">\nDO NOT DELETE IMPORTANT FILES ON YOUR SYSTEM WHEN USING THE FILE MODULE\n</div>\n\n```elixir\n\n```\n\n## Path Module Functions\n\nThe [Path](https://hexdocs.pm/elixir/Path.html) module contains many useful functions for working with the paths to files.\n\nWe'll have the opportunity to learn more about the [Path](https://hexdocs.pm/elixir/Path.html) module and the various functions during the [drills exercise](../exercises/file_drills.livemd). For now, here are some common functions to get you started.\n\n* [Path.absname/1](https://hexdocs.pm/elixir/Path.html#absname/1) convert the given path into an absolute path.\n* [Path.dirname/1](https://hexdocs.pm/elixir/Path.html#dirname/1) return the directory portion of a given path.\n* [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) join two paths. This is much more reliable than string concatenation.\n* [Path.split/1](https://hexdocs.pm/elixir/Path.html#split/1) split a path into a list on each directory separator `/`\n* [Path.wildcard/2](https://hexdocs.pm/elixir/Path.html#wildcard/2) return a list of files that match the provided expression.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n[Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) is especially useful, as it's easy to make mistakes using string concatenation. Notice below that we accidentally join `folder` and `more` together to make `foldermore`.\n\n```elixir\npath1 = \"path/to/folder\"\npath2 = \"more/path/to/file.txt\"\n\npath1 <> path2\n```\n\n[Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) is smart enough to treat these as separate folders to make the path.\n\n```elixir\npath1 = \"path/to/folder\"\npath2 = \"more/path/to/file.txt\"\n\nPath.join(path1, path2)\n```\n\n### Your Turn\n\nExperiment with the functions above. Refer to the documentation for examples you can try.\n\n```elixir\n\n```\n\n## Bang Functions\n\nMany functions in the [File](https://hexdocs.pm/elixir/File.html) module have a bang version ending in `!`.\n\nBang functions raise an error if they fail.\n\n```elixir\nFile.ls!(\"invalid\")\n```\n\nRegular functions typically return an `{:ok, value}` or an `{:error, reason}` tuple.\n\n```elixir\nFile.ls(\"invalid\")\n```\n\nUse a bang function if you expect that the function should always succeed or if you want to raise an error. Use a regular function if you want specific error handling or don't care if the function fails.\n\nFor example, if we're reading a file but not sure if it exists or not, we might use [File.read/1](https://hexdocs.pm/elixir/File.html#read/1). If we think the file should always exist (and want to crash our program if it doesn't), we use [File.read!/1](https://hexdocs.pm/elixir/File.html#read!/1).\n\n## Persisting Erlang Terms\n\n[File.write/2](https://hexdocs.pm/elixir/File.html#write/2) does not work with many non-string elixir terms. We'll get a `:badarg` (bad argument) error when we try.\n\n```elixir\nFile.write(\"data/erlang_term\", %{1 => 2})\n```\n\nTo get around these issues we can use `:erlang.binary_to_term/1` and `:erlang.term_to_binary/1` which convert an elixir term to and from binary.\n\nWhen creating the file, we need to convert the Elixir term into binary using `:erlang.term_to_binary/1`\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph Writing\n  direction LR\n  1[Term] --> 2[Binary] --> 3[Write]\nend\n```\n\n```elixir\n:erlang.term_to_binary(%{key: \"value\"})\n```\n\nWhen reading the saved binary, we need to convert it back into an elixir term using `:erlang.binary_to_term/1`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph Reading\n  direction LR\n  A[Read] --> B[Binary] --> C[Term]\nend\n```\n\n```elixir\nbinary =\n  <<131, 116, 0, 0, 0, 1, 100, 0, 3, 107, 101, 121, 109, 0, 0, 0, 5, 118, 97, 108, 117, 101>>\n\n:erlang.binary_to_term(binary)\n```\n\nNow we can write an Elixir term in it's binary format, then read the file.\n\n```elixir\n:ok = File.write(\"binary.txt\", :erlang.term_to_binary([1, 2]))\n\n{:ok, binary} = File.read(\"binary.txt\")\n\n[1, 2] = :erlang.binary_to_term(binary)\n\n# Cleaning Up The File To Avoid Saving A File On Your Computer.\nFile.rm(\"binary.txt\")\n```\n\n## Handling Large Files\n\nUsing [File.read/1](https://hexdocs.pm/elixir/File.html#read/1) loads all of a file's contents into memory. This causes performance issues when dealing with large files, or when dealing with many files.\n\nTo avoid performance issues we have two options. We can use [File.stream!/3](https://hexdocs.pm/elixir/File.html#stream!/3) to treat the file as a stream. Or we can use [File.open/3](https://hexdocs.pm/elixir/File.html#open/3) and [File.close/1](https://hexdocs.pm/elixir/File.html#close/1) with the [IO](https://hexdocs.pm/elixir/IO.html) module to open a file, and read/write it's contents more selectively.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Streams\n\nTo stream a file, use [File.stream!/3](https://hexdocs.pm/elixir/File.html#stream!/3). By default, each element in the stream will be one line of the file. See [Streams](./streams.livemd) if you need a refresher on working with streams.\n\n```elixir\ncontent = \"\"\"\nline 1\nline 2\nline 3\n\"\"\"\n\nFile.write!(\"stream.txt\", content)\n\nstream = File.stream!(\"stream.txt\") |> IO.inspect(label: \"Stream\")\n\nEnum.to_list(stream) |> IO.inspect(label: \"Lines\")\n\n# Cleaning Up File\nFile.rm(\"stream.txt\")\n```\n\n### IO And The File System\n\nWe use [File.open/2](https://hexdocs.pm/elixir/File.html#open/2) and [File.close/1](https://hexdocs.pm/elixir/File.html#close/1) to open a file and perform some operations, then close it when we're finished.\n\nWhile the file is open, we use [IO.read/2](https://hexdocs.pm/elixir/IO.html#read/2) and [IO.write/2](https://hexdocs.pm/elixir/IO.html#write/2) to read and write to the file. The [IO.read/2](https://hexdocs.pm/elixir/IO.html#read/2) function can read a new line each time we call it.\n\n```elixir\nFile.write!(\"open_close.txt\", content)\n\n{:ok, file} = File.open(\"open_close.txt\")\n\nIO.read(file, :line) |> IO.inspect()\nIO.read(file, :line) |> IO.inspect()\nIO.read(file, :line) |> IO.inspect()\nIO.read(file, :line) |> IO.inspect()\n\nFile.close(file)\n\n# Cleaning Up File.\n\nFile.rm!(\"open_close.txt\")\n```\n\n[IO.write/2](https://hexdocs.pm/elixir/IO.html#write/2) writes over the entire content of the file. We need to open the file with the `:write` option to enable write permission.\n\n```elixir\nFile.write!(\"open_close.txt\", content)\n\n{:ok, file} = File.open(\"open_close.txt\", [:write])\n\nIO.write(file, \"written content\")\n\nFile.close(file)\n\nFile.read(\"open_close.txt\") |> IO.inspect(label: \"Updated File\")\n\n# Cleaning Up File.\nFile.rm!(\"open_close.txt\")\n```\n\n## Further Reading\n\nConsider the following resources to deepen your understanding of the topic.\n\n* [HexDocs: File](https://hexdocs.pm/elixir/File.html)\n* [Elixir-lang: IO and the file system](https://elixir-lang.org/getting-started/io-and-the-file-system.html)\n* [Exercism: File](https://exercism.org/tracks/elixir/concepts/file)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish File reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/streams.livemd\">Streams</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/stream_drills.livemd\">Stream Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task26-reading-documentation_and_static_analysis", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Documentation And Static Analysis\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Documentation And Static Analysis\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_wordle.livemd\">Games: Wordle</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/typespec_drills.livemd\">Typespec Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* How do we write documentation and doctests?\n* What is the purpose of dialyzer and typespecs?\n* What is the purpose of Credo?\n* How do we use dialyzer with typespecs to check for typespec issues?\n\n## Documentation And Static Analysis\n\nIn this lesson, we'll cover the following tools for documentation and static analysis:\n\n* **Documentation and DocTests**: Elixir provides built-in support for documenting code and writing tests within the documentation itself.\n* **ExDoc**: Generates documentation for Elixir projects, making code easier to understand and use.\n* **Credo**: Checks Elixir code for issues, promotes coding standards, and catches common mistakes.\n* **Dialyzer**: Performs static analysis on Elixir code, identifies potential errors, and improves code reliability.\n* **Typespecs**: Annotations that specify types in Elixir code, enhancing readability and enabling better error checking with tools like Dialyzer.\n\nBy leveraging these tools and practices, we can enhance the quality, reliability, and maintainability of our Elixir codebases while promoting collaboration and facilitating code understanding for ourselves and other developers working on the project.\n\nThese static analysis tools are generally powered by the [Elixir Language Server](https://github.com/elixir-lsp/elixir-ls).\n\n## Documentation\n\nElixir provides special module attributes for documenting modules and functions.\n\n* `@moduledoc` document the entire module.\n* `@doc` document the next function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Hello do\n  @moduledoc \"\"\"\n  Documentation for `Hello`\n  \"\"\"\n\n  @doc \"\"\"\n  An example function for demonstrating documentation.\n\n  prints \"Hello, world!\"\n\n  ## Examples\n\n      Hello.world()\n      \"Hello, world!\"\n  \"\"\"\n  def world do\n    \"Hello, world!\"\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### DocTests\n\nlines starting with `iex>` will be interpreted as a documentation test.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@doc \"\"\"\n    iex> 1 + 1\n    2\n\"\"\"\n```\n\nThe [doctest/2](https://hexdocs.pm/ex_unit/ExUnit.DocTest.html#doctest/2) macro runs doctests for a module.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndoctest Example.Module\n```\n\nDoctests are automatically run inside of a Livebook. Here's an example of passing and failing tests.\n\n```elixir\ndefmodule DocTestExample do\n  @doc \"\"\"\n  adds two numbers together\n\n  ## Examples\n\n      iex> DocTestExample.add(1, 1)\n      2\n\n      iex> DocTestExample.add(1, 2)\n      3\n  \"\"\"\n  def add(int, int) do\n    2\n  end\nend\n```\n\n## ExDoc\n\n[ExDoc](https://github.com/elixir-lang/ex_doc) generates project documentation.\n\nWe can add the following dependency to a mix project to include `ExDoc`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  defp deps do\n    [\n      {:ex_doc, \"~> 0.29\", only: :dev, runtime: false}\n    ]\n  end\n```\n\nInstall dependencies.\n\n```\n$ mix deps.get\n```\n\nThen generate documentation for the project.\n\n```\n$ mix docs\n```\n\nThis creates a `docs/` folder. Inside the docs folder is an `index.html` file.\n`HTML` stands for hyper-text-markup-language. It's the code used to structure a web page and its content.\n\nYou can open the `docs/index.html` file in your browser to view the project documentation.\n\n## Typespecs\n\n### `@spec`\n\nWe can specify the input and output types of a function using `@spec`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@spec add(integer, integer) :: integer()\ndef add(int, int) do\n  int + int\nend\n```\n\n`integer` is a built in type. Here's are several common built-in types you should be aware of.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nany()\natom()\nmap()\ntuple()\nlist()\nlist(type) or [type] # a list where the elements are particular type\nfloat()\ninteger()\nnumber() # both integers and floats\nString.t() # the string type\n```\n\nSee [Basic Types](https://hexdocs.pm/elixir/typespecs.html#basic-types) for a full list of built-in types.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### `@type`\n\nWe can define custom types with `@type`. For example, we can use `|` in combination with other types to combine types.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@type color :: :red | :orange | :yellow | :green | :blue | :purple \n```\n\n## Dialyzer\n\nDialyzer is a static analysis tool used to provide warnings about your code, such as mismatched types,\nunreachable code, and other common issues.\n\nTo use Dialyzer, we install [Dialyxir](https://github.com/jeremyjh/dialyxir), which provides conveniences for working with Dialyzer in an Elixir project.\n\nWe can add `:dialyxir` as a dependency in the `mix.exs` file in any mix project.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n defp deps do\n    [\n      {:dialyxir, \"~> 1.3\", only: :dev, runtime: false}\n    ]\n  end\n```\n\nMake sure to install dependencies.\n\n```\n$ mix deps.get\n```\n\nWe can then run Dialyzer by running the following in the command line.\n\n```\n$ mix dialyzer\n...\nTotal errors: 0, Skipped: 0, Unnecessary Skips: 0\ndone in 0m0.82s\n```\n\nIf using Visual Studio Code, Dialyzer will also provide inline warnings if there are type issues.\n\n## Credo\n\nCredo is another static analysis tool which focuses on teaching and code consistency.\nIt scans a project's code for anti-patterns and provides suggestions to improve it's quality and readability.\n\nWe can install Credo a math project by adding it to your dependencies in `mix.exs` with the [latest Credo version](https://hex.pm/packages/credo).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp deps do\n  [\n      {:credo, \"~> 1.7\", only: [:dev, :test], runtime: false}\n  ]\nend\n```\n\nEnsure you install the new dependency.\n\n```\n$ mix deps.get\n```\n\nThen run the following command to see credo warnings.\n\n```\n$ mix credo\n...\nAnalysis took 0.01 seconds (0.01s to load, 0.00s running 52 checks on 3 files)\n3 mods/funs, found no issues.\n```\n\nCredo provides code suggestions that help you write idiomatic Elixir. For example, Credo will warn you if you leave an [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) in your project.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [ElixirSchools: Documentation](https://elixirschool.com/en/lessons/basics/documentation)\n* [elixir-lang: doctests](https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html#doctests)\n* [HexDocs: Credo](https://hexdocs.pm/credo/overview.html)\n* [elixir-lang: typespecs](https://elixir-lang.org/getting-started/typespecs-and-behaviours.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Documentation And Static Analysis reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Documentation And Static Analysis\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_wordle.livemd\">Games: Wordle</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/typespec_drills.livemd\">Typespec Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task27-reading-comments", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Comments\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comments\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/github_collab.livemd\">Github Collab</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/arithmetic.livemd\">Arithmetic</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you write a comment in Elixir?\n* What keyboard command can you use in both Livebook and Visual Studio Code to comment one or more lines of code in Elixir?\n\n## Comments\n\nYou can create inline comments in your code in Elixir using `#`. Anything after the `#` on the same line will be part of the comment\n\n```elixir\n# You Can Use Comments To Leave Messages In Your Code.\n```\n\nIt's sometimes handy for documenting what your code does. However, it's often better to use comments sparingly.\nLeaving a comment often means that there's something in your code that didn't explain itself.\n\nIn these moments you might find it useful to consider how you can improve your code to be self documenting rather than leaving\na comment in unclear code. There are better forms of documentation that you'll learn about in future lessons.\n\nSometimes it's handy to use comments to temporarily remove pieces of code and save them for later.\nHowever, comments can be misused.\nYou're also likely to\nencounter codebases that leave thousands of TODO comments everywhere. TODO comments can be useful, but when abused they\ncan be worse than no comment at all!\n\n```elixir\n# Use Comments To Leave Notes On Your Code.\n```\n\nDepending on your code editor, You can comment out many lines of code at once. Highlight the code you want to comment\nthen press the correct keybinding. The binding will be different depending on your editor and if you are using GNU/Linux, macOS, or Windows.\nIn Livebook, it's likely `CTRL-/` or `COMMAND-/` but you can double check in the keyboard shortcuts tab.\n\nClick on the keyboard icon <i class=\"ri-keyboard-box-fill\"></i> in the left sidebar of this page to see all of the keyboard shortcuts.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIn the Elixir cell below, create a comment `# hello world`\n\n```elixir\n\n```\n\nIn the Elixir cell below, comment all of the code out using the **Toggle lines comment** keyboard shortcut.\n\n```elixir\n1 + 1\n2 + 3\n3 + 1 + 2\n123 + 12 + 256\n```\n\n## Further Reading\n\nThroughout this course we will often recommend trusted resources for further study.\n\nSome of our favourite platforms to recommend include:\n\n* [HexDocs](https://hexdocs.pm/) A hosting platform for documentation\n* [Elixir School](https://elixirschool.com/en) An education platform for learning Elixir.\n* [Exercism](https://exercism.org/) An education platform with a great number resources and exercises. You can signup for an account if you would like further practice with a concept beyond the exercises in this course.\n* [Elixir-lang](https://elixir-lang.org/) The official Elixir website which includes guides, documentation, and other Elixir resources.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Comments reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comments\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/github_collab.livemd\">Github Collab</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/arithmetic.livemd\">Arithmetic</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task28-reading-control_flow", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Control Flow\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:smart_animation, github: \"brooklinjazz/smart_animation\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Control Flow\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/functions.livemd\">Functions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/naming_numbers.livemd\">Naming Numbers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we execute code in our programs depending on some condition?\n* When might you use `case` vs `cond` vs `if`?\n* How can you use pattern matching inside of a `case` statement?\n\n## Overview\n\nControl flow. What does that mean?\n\nWell, so far you've learned mostly about how to give computers a single set of instructions.\nBut sometimes, depending on certain conditions, you want to deliver a different set of instructions.\n\n```mermaid\nflowchart\n  Input --- Condition\n  Condition --- 1[Instruction]\n  Condition --- 2[Instruction]\n```\n\nThe flow of our program through these branches, and how we control it is called **control flow**. We have a variety of tools to control the flow of our program including `if`, `cond`, and `case` statements.\n\n## If Statements\n\nWe've already seen `if` statements, which are a useful when we have one or two branching paths in our code.\n\nFor example, we might build a weather app that provides recommendations of what to wear.\n\nWe'll have some condition like **if it is cold** then provide a recommendation to **wear a coat**. If it is not cold, then we'll provide a recommendation to wear a t-shirt.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nweather --> hot --> t-shirt \nweather --> cold --> coat\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere's how we can translate that into a program.\n\n```elixir\nweather = :cold\n\nif weather == :cold do\n  \"coat\"\nelse\n  \"t-shirt\"\nend\n```\n\n`if` statements are only effective for up to two paths. We'll likely have to write overly verbose solutions that involve re-binding a variable if we try to use them for multiple conditions.\n\nThis is not recommended. For example, let's expand our weather application to handle many conditions, instead of only hot and cold.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nweather --> sunny --> r1[t-shirt]\nweather --> snowing --> r2[thick coat]\nweather --> rainy --> r3[rain coat]\nweather --> foggy --> r4[something bright]\n```\n\n```elixir\n# Change :sunny To :snowing, :raining, And :foggy To See A Different Result.\nweather = :sunny\n\nrecommendation = \"t-shirt\"\nrecommendation = if weather == :snowing, do: \"thick coat\", else: recommendation\nrecommendation = if weather == :raining, do: \"raincoat\", else: recommendation\nrecommendation = if weather == :foggy, do: \"something bright\", else: recommendation\n\nrecommendation\n```\n\n### Your Turn\n\nCreate a thermometer program that determines if the temperature is `:hot`, or `:cold`. Bind a variable `temperature` to a number between `0` and `20`. If the temperature is above `10`, then return `:hot`, otherwise return `:cold`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ntemperature = 10\n\nif temperature > 10 do\n  :hot\nelse\n  :cold\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Clear Control Flow\n\nControl flow impacts the complexity of a program. The more branching paths we have in our program, the more complex it is.\n\nSome complexity is necessary, but overly complex programs are often the result of improper use of control flow.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  A[Input] --> B[Decision]\n  B --> B1[Decision]\n  B --> B2[Decision]\n  B --> B3[Decision]\n  B1 --> B11[Decision]\n  B1 --> B12[Decision]\n  B1 --> B13[Decision]\n  B2 --> B21[Decision]\n  B2 --> B22[Decision]\n  B2 --> B23[Decision]\n  B3 --> B31[Decision]\n  B3 --> B32[Decision]\n  B3 --> B33[Decision]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can simplify our programs by reducing the number of branching decisions and leveraging different control flow structures.\n\n## Case\n\n`case` is a control flow structure that allows you to define a series of cases, and handle them separately.\n\n`case` is best used when you have many branching conditions, that all work well with pattern matching.\n\nWe'll use this to improve our weather application that handles many different conditions.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nweather --> sunny --> r1[t-shirt]\nweather --> snowing --> r2[thick coat]\nweather --> rainy --> r3[rain coat]\nweather --> foggy --> r4[something bright]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can break this control flow down into several cases.\n\n* Case 1: It's sunny so wear a t-shirt.\n* Case 4: It's snowing so wear a thick coat.\n* Case 2: It's raining so wear a raincoat.\n* Case 3: It's foggy so wear a something bright.\n\nHere's how we translate that into code. This is significantly more straightforward than our solution using `if`.\n\n```elixir\n# Change :sunny To :snowing, :raining, And :foggy To See A Different Result.\nweather = :sunny\n\ncase weather do\n  :sunny -> \"t-shirt\"\n  :snowing -> \"thick coat\"\n  :raining -> \"raincoat\"\n  :foggy -> \"something bright\"\nend\n```\n\n### Case Breakdown\n\nLet's break down the `case` statement above. To use a `case` statement, start with the `case` keyword.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase\n```\n\nThen enter a value that will match one of the cases. This can be a variable, or any elixir term. We'll use \"sunny\" from above.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase :sunny\n```\n\nNow write the `do` keyword to start defining the series of potential cases.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase :sunny do\n```\n\nDefining the \"sunny\" case. We'll trigger the case that matches the value between `case` and `do`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase :sunny do\n  :sunny\n```\n\nWe separate the pattern to match on with the code to run if it matches using the `->`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase :sunny do\n  :sunny ->\n```\n\nWe then provide the code to run when the case hits. In this case, `\"t-shirt\"`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase :sunny do\n  :sunny -> \"t-shirt\"\n```\n\nThen we `end` the case statement.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase :sunny do\n  :sunny -> \"t-shirt\"\nend\n```\n\nWe can provide any number of cases. Cases use pattern matching to decide which result to run.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nReturn each value from `1` to `5` by changing the `condition` variable below.\n\n```elixir\ncondition = nil\n\ncase condition do\n  :red -> 1\n  \"blue\" -> 2\n  %{key: \"value\"} -> 3\n  123 -> 4\n  [1, 2, 3] -> 5\n  _ -> \"default\"\nend\n```\n\n## Pattern Matching With Case\n\n`case` uses pattern matching to determine which case to run. If the left side of the `->` operator would match with the provided value, then the `case` statement returns the right side of the `->` operator.\n\nExact values always match.\n\n```elixir\ncase {:exactly, :equal} do\n  {:exactly, :equal} -> \"I hit this case\"\nend\n```\n\nUnder the hood, Elixir checks if the condition, and the left side of the `->` symbol would match.\n\n```elixir\n{:exactly, :equal} = {:exactly, :equal}\n```\n\nIf the values would throw a [MatchError](https://hexdocs.pm/elixir/MatchError.html) with the match operator `=`, then they do not match.\n\n```elixir\n{:not_exactly, :equal} = {:exactly, :equal}\n```\n\nThat's why the following `case` statement does not trigger the `\"non-matching case\"`.\n\n```elixir\ncase {:exactly, :equal} do\n  {:not_exactly, :equal} -> \"non-matching case\"\n  {:exactly, :equal} -> \"matching case\"\nend\n```\n\nWe can use pattern matching the same way we already have with the match operator `=`.\n\n```elixir\n{_mostly, :equal} = {:exactly, :equal}\n```\n\nSo now, by matching on `:exactly` using a variable, we can trigger the first case below.\n\n```elixir\ncase {:exactly, :equal} do\n  {_mostly, :equal} -> \"matching case\"\n  {:exactly, :equal} -> \"exactly equal case\"\nend\n```\n\n`case` statements will raise a **CaseClauseError** if the value provided doesn't match any case.\n\n```elixir\ncase \"no match\" do\n  :sunny -> \"t-shirt\"\nend\n```\n\nTo provide a default case for the `case` statement, you can use a variable, which pattern matches with any Elixir value.\n\n```elixir\ncase \"no match\" do\n  \"sunnny\" -> \"wear a t-shirt\"\n  anything -> \"wear clothing\"\nend\n```\n\nWe're not using this variable, so we should preface it with an `_`.\n\n```elixir\ncase \"no match\" do\n  \"sunnny\" -> \"wear a t-shirt\"\n  _anything -> \"wear clothing\"\nend\n```\n\nIt's common to simply use an `_` rather than naming the variable.\n\n```elixir\ncase \"no match\" do\n  \"sunnny\" -> \"wear a t-shirt\"\n  _ -> \"wear clothing\"\nend\n```\n\n### Your Turn\n\nReturn each result from `1` to `5` by changing the `condition` variable below.\n\n```elixir\ncondition = nil\n\ncase condition do\n  [1, 2, 3] -> 1\n  [_head | _tail] -> 2\n  {_, _} -> 3\n  %{key1: _, key2: \"value\"} -> 4\n  {1, _, %{key: [1, _, _]}} -> 5\n  _ -> \"default\"\nend\n```\n\n## Cond\n\n`cond` stands for **condition**. `cond` is best used for control flow with many branching paths that does not work well with pattern matching.\n\nFor example, if we expand our weather application to handle conditions that depend on a range of temperatures.\n\n* If the temperature is below `5` degrees: wear a thick coat.\n* If the temperature is `5-10` degrees: wear a coat.\n* If the temperature is `11-15` degrees: wear a light coat.\n* If the temperature is `16-20` degrees: wear a heavy shirt.\n* If the temperature is `21+` degrees: wear a t-shirt.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\ntemperature --> t1[0<] --> r1[thick coat]\ntemperature --> t2[5-10] --> r2[coat]\ntemperature --> t3[11-15] --> r3[light coat]\ntemperature --> t4[16-20] --> r4[heavy shirt]\ntemperature --> t5[21+] --> r5[t-shirt]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere's how we can translate this into a program using `cond`.\n\n```elixir\n# Change Temperature To Change The Condition Triggered.\ntemperature = 6\n\ncond do\n  temperature >= 21 -> \"t-shirt\"\n  temperature >= 16 and temperature <= 20 -> \"heavy shirt\"\n  temperature >= 11 and temperature <= 15 -> \"light coat\"\n  temperature >= 6 and temperature <= 10 -> \"coat\"\n  temperature <= 5 -> \"thick coat\"\nend\n```\n\n`cond` accepts a truthy value on the left-hand side of the arrow `->` and returns the expression on the right-hand side of the arrow for whichever condition returns `true` first.\n\nThis means that order does matter. Here, even though the integer is above `5`, it will never trigger the second condition, because the first condition is always true.\n\n```elixir\nvalue = 10\n\ncond do\n  is_integer(value) -> \"value is an integer\"\n  value > 5 -> \"value is above 5\"\nend\n```\n\nGenerally, we want more specific conditions to be higher in priority than less specific conditions.\n\n```elixir\nvalue = 10\n\ncond do\n  value > 5 -> \"value is above 5\"\n  is_integer(value) -> \"value is an integer\"\nend\n```\n\nLike `case` statements, `cond` will raise an error if we don't trigger any condition.\n\n```elixir\ncond do\n  false -> \"\"\nend\n```\n\nWe can provide a default condition using `true`.\n\n```elixir\ncond do\n  false -> \"\"\n  true -> \"default condition\"\nend\n```\n\n### Your Turn\n\nIn the Elixir cell below:\n\n* Create a variable called `grade` which will be a number grade from 1 to 100.\n* Create a condition that returns `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"` depending on the value of `grade`.\n\nThe conditions for `grade` should be:\n\n* 85-100 is an A\n* 70-84 is a B\n* 55-69 is a C\n* 1-54 is a D\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\nWe can solve this problem being very explicit about each condition.\n\n```elixir\ngrade = 0\n\ncond do\n  85 <= grade and grade <= 100 -> \"A\"\n  70 <= grade and grade <= 84 -> \"B\"\n  55 <= grade and grade <= 59 -> \"C\"\n  1 <= grade and grade <= 54 -> \"D\"\nend\n```\n\nOr we can make use of order to make the code more concise.\nHowever, this wouldn't reveal if `grade` were an invalid value\nsuch as `-5`, `110`, or `\"hello\"`.\n\n```elixir\ncond do\n  grade >= 85 -> \"A\"\n  grade >= 70 -> \"B\"\n  grade >= 55 -> \"C\"\n  true -> \"D\"\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Unless\n\n`unless` is `if` in reverse. It's helpful for times when you want to always do something unless\nsome condition is true.\n\nFor example:\n\n* Unless it rains on sunday lets go to the park.\n* Unless it is the weekend you work.\n* Unless it's high tide, lets go to the beach.\n\n```elixir\nunless false do\n  \"Hello!\"\nend\n```\n\n```elixir\nunless true do\n  \"Hello!\"\nend\n```\n\n```elixir\nis_raining = false\n\nunless is_raining do\n  \"Let's go to the beach!\"\nend\n```\n\nYou can also use `else` with unless but it's not always the most clear to read and should probably\nbe an `if` instead.\n\n```elixir\ncondition = true\n\nunless condition do\nelse\n  \"Will I print?\"\nend\n```\n\n### Your Turn\n\nIn the Elixir cell below\n\n* Create a variable named `tired` which is `true` or `false`.\n* Create an `unless` statement. which returns `\"awake\"` unless `tired`.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Control Flow reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Control Flow\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/functions.livemd\">Functions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/naming_numbers.livemd\">Naming Numbers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task29-reading-executables", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Executables\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Executables\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_documentation_and_static_analysis.livemd\">Games: Documentation And Static Analysis</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_menu.livemd\">Games: Menu</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you configure a project as an executable script?\n\n## Executables\n\nWe can configure mix projects to run as an executable script using escript.\n\nOnce configured, we can run a mix project using an executable file inside of the project folder.\n\n```\n./project_name\n```\n\nTo demonstrate how to configure an executable, We're going to create a simple `greeting` executable which prints a good morning message.\n\nCreate a new mix project.\n\n```\n$ mix new greeting\n```\n\nFirst, we need to define a module with a `main/1` function. This function will be what's triggered by the executable.\nWe can modify the existing `Greeting` module in `lib/greeting.ex`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Greeting do\n  def main(_args) do\n    IO.puts(\"Good morning!\")\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<div style=\"background-color: orange; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;\">\nRemove doctests and the existing `test` macros to ensure all tests pass when you run `mix test`.\n</div>\n\n## Executable Configuration\n\nIn any mix project, we can configure an executable using the `:escript` option in the `mix.exs` file.\nAdd the `:escript` configuration to the existing `project/0` function.\n\nWe've defined our `main/1` function in the `Greeting` module, so we provide that as our `:main_module`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef project do\n  # make sure you keep existing configuration\n  escript: [main_module: Greeting]\nend\n```\n\nNow we have to build the executable script from the `greeting` folder.\n\n```\n$ mix escript.build\n```\n\nExecute the script to see the good morning message.\n\n```\n$ ./greeting\nGood morning!\n```\n\n## Parsing Arguments\n\nWe can provide arguments to executable scripts using `--arg_name` flags. A flag can be empty, or it can have a value `--arg_name=true`.\n\nElixir provides an [OptionParser](https://hexdocs.pm/elixir/OptionParser.html) module to parse arguments provided to the script into Elixir terms.\n\n```elixir\nOptionParser.parse([\"--flag=true\"], switches: [flag: :boolean])\n```\n\nIf the `:boolean` type is given, flags are true by default when provided.\n\n```elixir\nOptionParser.parse([\"--flag=true\"], switches: [flag: :boolean])\n```\n\nOr we can set them to false.\n\n```elixir\nOptionParser.parse([\"--flag=false\"], switches: [flag: :boolean])\n```\n\nArguments may have different [types](https://hexdocs.pm/elixir/OptionParser.html#parse/2-types) such as `:boolean`, `:count`, `:integer`, `:float`, and `:string`.\n\n```elixir\nOptionParser.parse([\"--time=hello\"], switches: [time: :string])\n```\n\n```elixir\nOptionParser.parse([\"--name=hello\"], switches: [name: :string])\n```\n\nFor example, we can use a `--time` flag to change the greeting based on the time of day.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Greeting do\n  def main(args) do\n    {opts, _word, _errors} = OptionParser.parse(args, switches: [time: :string])\n    IO.puts(\"Good #{opts[:time] || \"morning\"}!\")\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nNow rebuild the script, and you can customize the message using the `--time` flag.\n\n```\n$ mix escript.build\n$ ./greeting --time=\"evening\"\nGood evening!\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate an `--upcase` flag, which upcases the greeting so `\"Good morning!` becomes `GOOD MORNING!`.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Executables reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Executables\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_documentation_and_static_analysis.livemd\">Games: Documentation And Static Analysis</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_menu.livemd\">Games: Menu</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task30-reading-functions", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Functions\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:smart_animation, github: \"brooklinjazz/smart_animation\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Functions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/mazes.livemd\">Mazes</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/control_flow.livemd\">Control Flow</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we define a function?\n* How do we call a function?\n* How do we use the pipe operator `|>` to pipe function calls into each other?\n\n## Functions\n\nElixir is a functional programming language. So you can imagine that functions must be important. But what is a function?\n\n### Input And Output (IO)\n\nA function is a set of repeatable instructions. A function accepts some **input**, and returns\nsome **output**.\n\n```mermaid\n  flowchart LR\n    Input --> Output\n```\n\n### Black Box\n\nHow the function converts some input to some output is often referred to as a **black box**.\nIt's a black box because you don't need to know (or can't know) the details of how it works.\n\n```mermaid\n  flowchart LR\n    Input --> B[Black Box] --> Output\n```\n\n### Creating A Function\n\nLet's create a function called `double` which will take in a number and\ndouble its value.\n\n```mermaid\nflowchart LR\n  A[2] --> B[double] --> C[4]\n```\n\nNow, let's create our first function. At first, it's going to do nothing.\nA function must have an output. We can return `nil` for now.\n\n```elixir\ndouble = fn -> nil end\n```\n\nYou may see some weird-looking output like `#Function<45.65746770/0 in :erl_eval.expr/5>`.\nDon't worry too much about that. It's how Elixir represents a function internally.\n\n### Parts Of A Function\n\nLet's break down what we did above.\n\n1. `double` is a variable name. Often you'll refer to it as the **function name**.\n   It can be any valid variable name.\n\n2. We bind `double` to an **anonymous function**.\n   The anonymous function is everything from the `fn` to the `end`.\n\n   ```mermaid\n   flowchart LR\n    A[function name] --> B[=]\n    B --> C[anonymous function]\n   ```\n\n3. Elixir uses the `fn` keyword to define a function.\n\n4. The next value `->` separates the **function head** and the **function body**.\n\n5. The **function head** describes the input of the function. In this example, it's empty.\n\n6. The **function body** contains the function's implementation or **black box** . In this example, it returns `nil`.\n\n7. Elixir uses the `end` keyword to stop creating a function.\n\n<!--  -->\n\n```mermaid\nflowchart LR\n   direction LR\n   a[function name] --> B\n   b[function head] --> A\n   b[function head] --> B\n   c[function body] --> C\n   subgraph a[Breaking Down A Function]\n      direction LR\n      A[fn] ---- B\n      B[->] --- C\n      C[nil] --- D\n      D[end]\n   end\n```\n\n### Calling A Function\n\nOur `double` function doesn't do much at this point, but let's see the **output** that it returns.\n\nWe use the `.()` syntax in Elixir to get the function's output. We often say we are **executing** or **calling** a function.\n\n```elixir\ndouble.()\n```\n\n`double` should return `nil` because that's all we've told it to do so far. However, we want\nit to multiply a number by `2`.\n\nTo do that, we need to make the function accept some input. To do this,\nwe define a **parameter** in the function like so.\n\n```elixir\ndouble = fn parameter -> nil end\n```\n\nYou'll notice a warning above. That's because Elixir is smart and lets us know that we've\ncreated a parameter, but we're not using it.\n\nIn Elixir, you can ignore this warning for unused variables by starting them with an underscore `_`\n\n```elixir\ndouble = fn _parameter -> nil end\n```\n\nNo more warning \ud83d\ude00 But we actually want to use that parameter, so let's\nmodify the function to return the parameter instead.\n\n```elixir\ndouble = fn parameter -> parameter end\n```\n\nThe parameter is named `parameter` here for the sake of example. But it works a lot like a variable,\nand it can be named any valid variable name.\n\nLet's rename it to `number` to clarify that we expect the input to be a number.\n\n```elixir\ndouble = fn number -> number end\n```\n\nNow the function head takes in a value. We have to pass it\nan **argument** when we call it. The argument will be bound to the parameter when the function\nexecutes. We'll give it the integer `2`.\n\n```elixir\ndouble.(2)\n```\n\nNotice that if you try to call the function without an argument, it fails because\nit expects an argument. Not all languages do that, but Elixir is pretty smart \ud83d\ude0e\n\n```elixir\ndouble.()\n```\n\nGreat, now all that's left is to multiply the parameter by `2`. You should be familiar with\nthis from the previous sections.\n\n```elixir\ndouble = fn number -> number * 2 end\n```\n\nAnd you can use it to double any number.\n\n```elixir\ndouble.(10)\n```\n\n```elixir\ndouble.(11)\n```\n\n```elixir\ndouble.(10 ** 2 - 1)\n```\n\nUnder the hood, when the function runs, the parameter is bound to the argument's value.\n\nLet's break down how a function executes step by step in the following slideshow.\n\n<!-- livebook:{\"attrs\":{\"source\":\"frames =     [\\n      \\\"\\n  First, we define the `double` function and call it.\\n  ```elixir\\n  double = fn number -> number * 2 end\\n  double.(3)\\n  ```\\n  \\\",\\n      \\\"\\n  The `double` function executes in place of the `double.(call)` with `number` bound to `3`.\\n  ```elixir\\n  double = fn number -> number * 2 end\\n  fn 3 -> 3 * 2 end\\n  ```\\n  \\\",\\n      \\\"\\n  The function evaluates the function body between the `->` and the `end`\\n  ```elixir\\n  double = fn number -> number * 2 end\\n  3 * 2\\n  ```\\n  \\\",\\n      \\\"\\n  `3` * `2` is `6`, so the function call returns `6`.\\n  ```elixir\\n  double = fn number -> number * 2 end\\n  6\\n  ```\\n  \\\"\\n    ]\\n\\nSmartAnimation.new(0..Enum.count(frames) - 1, fn i ->\\n    Enum.at(frames, i) |> Kino.Markdown.new()\\nend)\",\"title\":\"Function Flow\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n````elixir\nframes = [\n  \"\n  First, we define the `double` function and call it.\n  ```elixir\n  double = fn number -> number * 2 end\n  double.(3)\n  ```\n  \",\n  \"\n  The `double` function executes in place of the `double.(call)` with `number` bound to `3`.\n  ```elixir\n  double = fn number -> number * 2 end\n  fn 3 -> 3 * 2 end\n  ```\n  \",\n  \"\n  The function evaluates the function body between the `->` and the `end`\n  ```elixir\n  double = fn number -> number * 2 end\n  3 * 2\n  ```\n  \",\n  \"\n  `3` * `2` is `6`, so the function call returns `6`.\n  ```elixir\n  double = fn number -> number * 2 end\n  6\n  ```\n  \"\n]\n\nSmartAnimation.new(0..(Enum.count(frames) - 1), fn i ->\n  Enum.at(frames, i) |> Kino.Markdown.new()\nend)\n````\n\nAs expected, `double.(3)` returns `6`.\n\n```elixir\ndouble.(3)\n```\n\n### Implied Return Values\n\nSome languages require explicit return values.\n\nHowever, in Elixir the output of a function is always the last line.\n\nFor example, notice that the return value below is `first` + `second`, which equals `3`.\n\n```elixir\nmultiline_function = fn ->\n  first = 1\n  second = 2\n  first + second\nend\n\nmultiline_function.()\n```\n\n### Your Turn\n\nCreate a function `is_even?/1` that accepts an integer, and returns `true` if the integer is even, or `false` if the integer is odd.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nis_even?.(2) # true\nis_even?.(1) # false\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nis_even? = fn int -> rem(int, 2) == 0 end \n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Multi-Parameter Functions\n\nFunctions can accept multiple inputs. Separate parameters with commas `,` to create a multi-parameter function.\n\n```elixir\nsum3 = fn param1, param2, param3 -> param1 + param2 + param3 end\n\nsum3.(2, 3, 4)\n```\n\nKeep in mind that the first argument will be the value of the first parameter, and the second argument\nwill be the value of the second parameter. You can repeat this with as many parameters as you want!\n\n```elixir\nto_list = fn a, b, c, d, e -> [a, b, c, d, e] end\n\nto_list.(1, 2, 3, 4, 5)\n```\n\nBut usually, you want to avoid having too many parameters because it makes your function hard\nto understand.\n\nA parameter can be bound to any valid data type, so you could instead use an associative data\nstructure like a map or keyword list.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Function Arity\n\nThe number of parameters your function accepts is called the **arity** of the function.\n\nA function with no parameters has an arity of zero. A function with one parameter has\nan arity of one, and so on.\n\nYou refer to the function as `function_name/arity` thus a function named `add_two` with two parameters\nis called `add_two/2`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a function `calculate_force/2` that accepts a `mass` and `acceleration` parameters.\nThe `calculate_force/2` function should return `mass * acceleration`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncalculate_force.(10, 10) # 100\ncalculate_force.(2, 4) # 8\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ncalculate_force = fn mass, acceleration -> mass * acceleration end\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Shorthand Syntax\n\nAnonymous functions can be defined using a shorthand syntax. It is only an alternative and shorter\nversion to define a function. You will sometimes see shorthand syntax, so it's helpful to understand it.\nHowever, it should not be over-used. Otherwise, your program may be less clear.\n\nYou can still bind the anonymous function to a variable with the shorthand syntax.\nHowever, you define the function with `&()` and put the function body between the brackets.\n\nHere's the same `double` function using short-hand syntax.\n\n```elixir\ndouble = &(&1 * 2)\ndouble.(5)\n```\n\n`&1` means the first parameter. If the function had more parameters, you could access them with `&2`, `&3`, and so on.\n\n```elixir\nadd_two = &(&1 + &2)\nadd_two.(2, 3)\n```\n\n### Your Turn\n\nUsing shorthand syntax, create a `subtract/2` function which subtracts two numbers.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nsubtract.(1, 1) # 0\nsubtract.(20, 25) # -5\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nsubtract = &(&1 - &2)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n### Your Turn\n\nUsing shorthand syntax, create a `multiply_three/3` function which multiplies three numbers together.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmultiply_three.(2, 2, 2) # 8\nmultiply_three.(2, 5, 3) # 30\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nmultiply_three = &(&1 * &2 * &3)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## First-class Functions\n\nFunctions in Elixir are [first-class citizens](https://en.wikipedia.org/wiki/First-class_citizen).\n\nFor our purposes, this means we can bind functions to variables, store them in other data types, pass them as arguments to other functions.\n\nWe'll see something like `#Function<42.3316493/1 in :erl_eval.expr/6>` if we try to view a function as data. This is the internal representation of the function in Elixir. We can only view a function this way, we cannot use this syntax in our code.\n\n```elixir\n[fn int -> int * 2 end, 2, 3, 4]\n```\n\nFunctions are just data as far as our programs are concerned. We can work with them like we would work with any data structure.\n\n```elixir\n[my_function | _tail] = [fn int -> int * 2 end, 2, 3, 4]\n\nmy_function.(10)\n```\n\nIf a function takes in another function as a parameter, it's called a **higher-order function**.\nThe function passed in is called a **callback function**.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncallback_function = fn -> end\n\nhigher_order_function.(callback_function)\n```\n\nFor example, we can create a `call_with_2/1` higher order function, that accepts a callback function, and calls it with the integer `2`.\n\n```elixir\ncall_with_2 = fn callback -> callback.(2) end\n```\n\nWe can then use the `call_with_2/1` higher order function with an `add_three/1` callback function. This calls `add_three/1` with `2` to return `5`.\n\n```elixir\nadd_three = fn int -> int + 3 end\n\ncall_with_2.(add_three)\n```\n\nInstead of binding the callback function to a variable, we can pass in the anonymous function directly.\n\n```elixir\ncall_with_2.(fn int -> int + 3 end)\n```\n\nCallback functions are useful for creating re-usable behavior with slight alterations. For example, in Elixir we have a built-in function [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) which we will cover in later lessons.\n\n[Enum](https://hexdocs.pm/elixir/Enum.html) is a module. We'll cover modules in the next [Modules](./modules.livemd) reading material.\n\n[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) can accept a list as the first argument, and a callback function as the second argument. The callback function is applied to every element in the list to create a new list.\n\n```elixir\nEnum.map([1, 2, 3], fn element -> element * 2 end)\n```\n\n### Your Turn\n\nCreate a `call_with_10_and_20/1` function. The `call_with_10_and_20/1` function should accept a call back function, and call the function with `10` as the first argument, and `20` as the second argument.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nadd = fn int1, int2 -> end\n\ncall_with_10_and_20.(add) # 30\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ncall_with_10_and_20 = fn callback -> callback.(10, 20) end\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\ncall_with_10_and_20 = nil\n```\n\n## Pipe Operator\n\nTo create more complex behavior, you'll often compose smaller functions together. Composing functions together reflects\nnature of problem-solving where we take large problems and break them down into smaller ones.\n\nTo help compose functions together, Elixir provides the pipe <span style=\"background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;\">|></span> operator.\nThat's the `|` symbol likely above your enter key, and the greater than `>` symbol side by side to make <span style=\"background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;\">|></span>.\n\nThe pipe operator allows you to take the output of one function and pass it in as an argument\nfor the input of another function.\n\n```mermaid\nflowchart LR\n  A[Input] --> B[Function1]\n  B --> C[Pipe]\n  C --> D[Function2]\n  D --> E[Output]\n```\n\nWhy is this useful? Without the pipe operator you can wind up writing deeply nested function calls.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nfour.(three.(two.(one.())))\n```\n\nOr rebinding values between function calls.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\na = one.()\nb = two.(a)\nc = three.(b)\nd = four.(c)\n```\n\nBut with the pipe operator, you can chain functions together.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\none.() |> two.() |> three.() |> four.()\n```\n\nIf a function is called with multiple arguments, the function piped in will be the first argument.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntwo(1, 2) # how to call two/2 by itself.\n\n# How To Use The Pipe Operator\n# To Call The Two/2 With One/1 As The First Argument.\none.() |> two.(2)\n```\n\nYou can also pass in a value to a pipe. It's generally non-idiomatic (not following the standards of the community) to use the pipe operator for a single value and function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Non-idiomatic\n1 |> two.()\n\n# Idiomatic\ntwo.(1)\n\n# Idiomatic\n1 |> two.() |> three()\n```\n\nThe pipe operator doesn't change the behavior of a program. Instead, the pipe operator\nexists as syntax sugar to improve the clarity of your code.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nCreate three functions `add/2`, `subtract/2`, and `multiply/2` which add, subtract, or multiply two numbers.\n\nUse these functions with the pipe operator <span style=\"background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;\">|></span> to:\n\n1. start with `10`.\n2. add `2`.\n3. multiply by `5`.\n4. subtract by `4`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nadd = fn int1, int2 -> int1 + int2 end\nsubtract = fn int1, int2 -> int1 - int2 end\nmultiply = fn int1, int2 -> int1 * int2 end\n\n10\n|> add.(2)\n|> multiply.(2)\n|> subtract.(4)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Functions reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Functions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/mazes.livemd\">Mazes</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/control_flow.livemd\">Control Flow</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task31-reading-picchat_emails", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# PicChat: Emails\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Emails\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_infinite_scroll.livemd\">PicChat: Pagination</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/lists_vs_tuples.livemd\">Lists Vs Tuples</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we use Swoosh and SendGrid to send emails?\n* How do we configure environment variables?\n* How do we use Oban to schedule jobs?\n\n## Overview\n\n### [SendGrid](https://sendgrid.com/)\n\nSendGrid is an email provider that allows businesses to send email communications to customers and prospects. It provides a platform for email delivery, which includes a web-based interface for managing contacts and creating and sending email campaigns, as well as APIs for integrating email functionality into applications.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Swoosh](https://hexdocs.pm/swoosh/Swoosh.html)\n\nSwoosh is an Elixir library for sending emails.The library allows you to send emails using various email providers such as Sendgrid, SMTP, Mailgun and [more](https://hexdocs.pm/swoosh/Swoosh.html#module-adapters).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Oban](https://hexdocs.pm/oban/Oban.html)\n\nOban is an Elixir library for running background jobs. It is a powerful and flexible job queue built on top of OTP. Oban allows you to enqueue jobs and process them in the background, which can be useful for tasks that are time-consuming or need to be run independently of the application's main process. The jobs can be executed concurrently and can be scheduled to run at a specific time.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Mailer](https://hexdocs.pm/swoosh/Swoosh.Mailer.html)\n\nBy default, Phoenix defines a `App.Mailer` (where `App` is the app name) module in `app/mailer.ex`, which uses the `Swoosh.Mailer` module.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule App.Mailer do\n  use Swoosh.Mailer, otp_app: :app\nend\n```\n\nThe `Mailer` module is configured with some adapter for sending emails with Swoosh and some email provider such as SendGrid.\n\n## PicChat: Emails\n\nThis is the final feature we're going to add to the `PicChat` application we've spent the last few lessons building. This lesson will focus on sending and scheduling emails with Oban and Swoosh.\n\n## Example Email\n\nWe're going to demonstrate how to send an email in the [IEx](https://hexdocs.pm/iex/IEx.html) shell. First, start the server.\n\n```el\niex -S mix phx.server\n```\n\nRun the following in the [IEx](https://hexdocs.pm/iex/IEx.html) shell to build a [Swoosh.Email](https://hexdocs.pm/swoosh/Swoosh.Email.html) struct, then pass that struct to the [Mailer.deliver/2](https://hexdocs.pm/swoosh/Swoosh.Mailer.html#deliver/2) function to send the email.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nimport Swoosh.Email\n\nnew()\n|> to(\"test@test.com\")\n|> from({\"sender\", \"sender@sender_domain.com\"})\n|> subject(\"Test Email Subject\")\n|> html_body(\"<h1>Test Email</h1>\")\n|> text_body(\"Test Email\")\n|> PicChat.Mailer.deliver()\n```\n\nVisit http://localhost:4000/dev/mailbox to see the sent email.\n\n## Subscribe Users\n\nUsers should always be able to opt-in and out of notifications. We're going to add a `subscribed` field to every user and only send emails to subscribed users.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create Migration\n\nRun the following to create the migration.\n\n```\n$ mix ecto.gen.migration add_subscribed_to_users\n```\n\nAdd the following to the migration.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.Repo.Migrations.AddSubscribedToUsers do\n  use Ecto.Migration\n\n  def change do\n    alter table(:users) do\n      add :subscribed, :boolean, default: false\n    end\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Modify Schema\n\nAdd the following to the `User` schema.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# User.ex Inside The `schema` Macro.\nfield :subscribed, :boolean, default: false\n```\n\nModify the `registration_changeset` to add the `:subscribed` field.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# User.ex\ndef registration_changeset(user, attrs, opts \\\\ []) do\n  user\n  |> cast(attrs, [:email, :password, :username, :subscribed])\n  |> validate_email(opts)\n  |> validate_password(opts)\n  |> validate_username()\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Add Subscribed Checkbox\n\nAdd a checkbox when registering a user so that they can opt-in to email notifications.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# User_registration_live Inside Of The Existing Form.\n<.input field={@form[:subscribed]} type=\"checkbox\" label=\"Receive email updates\" />\n```\n\n## Daily Summary Email\n\nWe're going to send all of our users a daily email containing a summary of the messages sent that day.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Find Todays Messages\n\nCreate the following function to find the list of all messages created today. [fragment/1](https://hexdocs.pm/ecto/Ecto.Query.API.html#fragment/1) lets us inject SQL directly into a query. Here we use it to convert the `inserted_at` value to a date to compare it with todays date.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Chat.ex\ndef todays_messages do\n  today = Date.utc_today()\n\n  from(m in Message,\n    where: fragment(\"date(inserted_at) = ?\", ^today),\n    order_by: [desc: :inserted_at, desc: :id]\n  )\n  |> Repo.all()\nend\n```\n\n> This implementation could result sending too many messages in the email, or missing messages depending on when we send the daily email. A more complex and reliable implementation could be to have a flag on every message to store whether or not they were sent in the previous daily summary email.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Find All Subscribed User Emails\n\nAdd the following function to get a list of subscribed user emails from the database.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Accounts.ex\ndef subscriber_emails() do\n  from(u in User, where: u.subscribed == true, select: u.email)\n  |> Repo.all()\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Build And Send Summary Emails\n\nCreate a `lib/pic_chat/summary_emails.ex` context that sends every subscriber an email with a summary of all of todays messages.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.SummaryEmail do\n  import Swoosh.Email\n\n  @sender_name \"PicChat\"\n  @sender_email \"info@picchat.com\"\n\n  def send_to_subscribers do\n    messages = PicChat.Chat.todays_messages()\n    subscribers = PicChat.Accounts.subscriber_emails()\n\n    for subscriber <- subscribers do\n      PicChat.Mailer.deliver(build(subscriber, messages))\n    end\n  end\n\n  def build(receiver_email, messages) do\n    new()\n    |> to(receiver_email)\n    |> from({@sender_name, @sender_email})\n    |> subject(\"PicChat Summary Report\")\n    |> html_body(\"\"\"\n    <h1>Summary Report</h1>\n    #{Enum.map(messages, &render_message/1)}\n    \"\"\")\n    |> text_body(\"\"\"\n    Summary Report\n    #{messages |> Enum.map(&(&1.content)) |> Enum.join(\"\\n\")}\n    \"\"\")\n  end\n\n  defp render_message(message) do\n    \"\"\"\n    <p>#{message.content}</p>\n    \"\"\"\n  end\nend\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Configure Oban\n\nFollow the [Oban Installation Instructions](https://hexdocs.pm/oban/installation.html) to add Oban to your project.\n\nWe'll outline the steps here.\n\nFirst, add oban to your list of dependencies in `mix.exs`. Make sure your version is up to date.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:oban, \"~> 2.14\"}\n```\n\nConfigure Oban in `config.exs`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nconfig :pic_chat, Oban,\n  repo: Newsletter.Repo,\n  plugins: [Oban.Plugins.Pruner],\n  queues: [default: 10]\n```\n\nAdd Oban testing configuration in `test.exs`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Oban\nconfig :pic_chat, Oban, testing: :inline\n```\n\nAdd Oban to your application's supervision tree.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef start(_type, _args) do\n  children = [\n    # Start the Ecto repository\n    PicChat.Repo,\n    # Start the Telemetry supervisor\n    PicChatWeb.Telemetry,\n    # Start the PubSub system\n    {Phoenix.PubSub, name: PicChat.PubSub},\n    # Start the Endpoint (http/https)\n    PicChatWeb.Endpoint,\n    # Start a worker by calling: Newsletter.Worker.start_link(arg)\n    # {Newsletter.Worker, arg},\n    {Oban, Application.fetch_env!(:pic_chat, Oban)} # Added Oban\n  ]\n\n  # See https://hexdocs.pm/elixir/Supervisor.html\n  # for other strategies and supported options\n  opts = [strategy: :one_for_one, name: PicChat.Supervisor]\n  Supervisor.start_link(children, opts)\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### DailySummaryEmail Worker\n\nOban can schedule workers to perform a job in a certain amount of time, or at a specific time. See [Oban: Scheduling Jobs](https://hexdocs.pm/oban/Oban.html#module-scheduling-jobs) for more information.\n\nCreate a `lib/pic_chat/workers/daily_summary_email.ex` worker with the following content.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.Workers.DailySummaryEmail do\n  # We've made max_attempts: 1 to avoid re-sending users the same email. \n  use Oban.Worker, queue: :default, max_attempts: 1\n\n  @impl true\n  def perform(_params) do\n    PicChat.SummaryEmail.send_to_subscribers()\n\n    :ok\n  end\nend\n```\n\nRun the following in the [IEx](https://hexdocs.pm/iex/IEx.html) shell to schedule the job after five seconds.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> PicChat.Workers.DailySummaryEmail.new(%{}, schedule_in: 5) |> Oban.insert!()\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Daily Cron Job\n\nOban allows us to configure [Cron](https://hexdocs.pm/oban/Oban.Plugins.Cron.html) based scheduling.\n\nModify the oban config in `config.exs` to add a daily CRON job that runs at 8am every day.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nconfig :pic_chat, Oban,\n  repo: PicChat.Repo,\n  plugins: [\n    Oban.Plugins.Pruner,\n    {Oban.Plugins.Cron,\n     crontab: [\n       {\"0 8 * * *\", PicChat.Workers.DailySummaryEmail}\n     ]}\n  ],\n  queues: [default: 10]\n```\n\n## Tests\n\n### Todays Messages\n\nTesting time can be tricky. However, it's possible to override the `inserted_at` field in a record. The following test demonstrates how to ensure that the `Chat.todays_messages/0` function only finds messages created today.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Chat_test.exs\ntest \"todays_messages/0\" do\n  user = user_fixture()\n  today_message = message_fixture(user_id: user.id)\n\n  yesterday =\n    NaiveDateTime.add(NaiveDateTime.utc_now(), -1, :day) |> NaiveDateTime.truncate(:second)\n\n  yesterday_message =\n    PicChat.Repo.insert!(%Message{\n      content: \"some content\",\n      user_id: user.id,\n      inserted_at: yesterday\n    })\n\n  assert Chat.todays_messages() == [today_message]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Testing Oban\n\nWe can test the `perform/1` function directly if desired.\n\nFor example, create a test file `pic_chat/workers/daily_summary_email_test.exs` with the following content.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.Workers.DailySummaryEmailTest do\n  use PicChat.DataCase\n  use Oban.Testing, repo: PicChat.Repo\n\n  alias PicChat.Workers.DailySummaryEmail\n  alias PicChat.SummaryEmail\n\n  import Swoosh.TestAssertions\n  import PicChat.AccountsFixtures\n  import PicChat.ChatFixtures\n\n  test \"perform/1 sends daily summary emails\" do\n    user = user_fixture(email: \"test@test.test\", subscribed: true)\n    message1 = message_fixture(user_id: user.id)\n    message2 = message_fixture(user_id: user.id)\n\n    assert :ok = DailySummaryEmail.perform(%{})\n\n    assert_email_sent SummaryEmail.build(user.email, [message2, message1])\n  end\nend\n```\n\nOban also provides the [Oban.Testing.assert_enqueued/2](https://hexdocs.pm/oban/Oban.Testing.html#assert_enqueued/2) function for testing if a job is enqueued.\n\nHere's a fantastic video that you may watch if you'd like to learn more about testing Oban.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=PZ48omi0NKU&ab_channel=ElixirConf\\\")\",\"title\":\"ElixirConf 2021 - Parker Selbert - Testing Oban Jobs From the Inside Out\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=PZ48omi0NKU&ab_channel=ElixirConf\")\n```\n\n## Production Emails\n\nSo far, we've only sent emails to the development mailbox. We have not actually configured our email system to send real emails.\n\nNow, we're going to configure the `SendGrid` to send actual emails when in a production environment.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create SendGrid Account\n\nTo use SendGrid with Swoosh, we'll need a SendGrid API Token.\n\nTo get a SendGrid API Token, complete the following steps.\n\n1. Sign up for a [Free SendGrid Account](https://signup.sendgrid.com/).\n2. [Create a Single Sender](https://app.sendgrid.com/settings/sender_auth/senders/new). This will be the configuration used for sending emails and receiving replies.\n3. Verify your sender identity through the confirmation email.\n4. [Set up MFA](https://app.sendgrid.com/settings/auth) (Multi-Factor Authentication)\n5. [Create an API key](https://app.sendgrid.com/settings/api_keys). You can create a Full Access key if you would like, but it's safer to create a Restricted Access key with the \"Mail Send\" permission. Make sure to save your API key someplace safe where others will not be able to view it.\n\nUpon completing the above, [review your sender](https://app.sendgrid.com/settings/sender_auth) to ensure they have been successfully set up.\n\n> Unfortunately SendGrid can take some time to verify the account and you may not be allowed to send emails right away. If this is the case, your teacher can provide you with a temporary key to use.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Set The API Key In The Environment\n\nCreate a `.env` file with the following content. Replace KEY with your API key.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nexport SENDGRID_API_KEY=\"KEY\"\n```\n\nAdd the `.env` file to `.gitignore` to prevent putting API keys in GitHub.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# .gitignore\n.env\n```\n\nMake sure to source the `.env` file into the environment.\n\n```\n$ source .env\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Alter `@sender_name` And `@sender_email`.\n\nMake the sender name and sender email match the sender you created on SendGrid.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Summary_email.ex\n@sender_name \"YOUR_SENDER_NAME\"\n@sender_email \"YOUR_SENDER_EMAIL\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### SendGrid Config\n\nReplace the existing mailer config with the following in `config.exs` to setup SendGrid.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Config :pic_chat, PicChat.Mailer, Adapter: Swoosh.Adapters.Local\nconfig :pic_chat, PicChat.Mailer,\n  adapter: Swoosh.Adapters.Sendgrid,\n  api_key: System.get_env(\"SENDGRID_API_KEY\")\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Prod Adapter Config\n\nBy default, `prod.exs` should already be configured to use [Finch](https://hexdocs.pm/finch/Finch.html) for sending HTTP requests.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Configures Swoosh API Client\nconfig :swoosh, api_client: Swoosh.ApiClient.Finch, finch_name: PicChat.Finch\n```\n\nThat's everything we need to send emails in the production environment.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Send Email In Development\n\nGenerally, it's unwise to send real emails while in the dev environment as it's possible to accidentally send users development emails. That's why `dev.exs` configures `:swoosh` so that it can't send any emails.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nconfig :swoosh, :api_client, false\n```\n\nHowever, we're going to briefly configure the application to send real emails for testing purposes. Replace the `dev.exs` config that overwrites the `:swoosh` adapter with the following.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Config :swoosh, :api_client, False\nconfig :swoosh, api_client: Swoosh.ApiClient.Finch, finch_name: PicChat.Finch\n```\n\nRun the following in the [IEx](https://hexdocs.pm/iex/IEx.html) shell to send a real email. Replace `YOUR_EMAIL`, `SENDER_NAME`, and `SENDER_EMAIL` with your own information from SendGrid and your own email.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nimport Swoosh.Email\n\nnew()\n|> to(\"YOUR_EMAIL\")\n|> from({\"SENDER_NAME\", \"SENDER_EMAIL\"})\n|> subject(\"Test Email Subject\")\n|> html_body(\"<h1>Test Email</h1>\")\n|> text_body(\"Test Email\")\n|> PicChat.Mailer.deliver()\n```\n\nCheck your email or SendGrid to verify the email was sent. It may be in the Spam folder. You can view sent emails on the [SendGrid activity feed](https://app.sendgrid.com/email_activity?filters=%5B%7B%22val%22%3A%5B%22%22%5D%2C%22selectedFieldName%22%3A%22to_email%22%2C%22comparisonType%22%3A%22Contains%22%7D%2C%7B%22val%22%3A%5B%222023%2F01%2F12%20-%202023%2F01%2F15%22%5D%2C%22selectedFieldName%22%3A%22last_event_time%22%2C%22comparisonType%22%3A%22Between%22%7D%5D&isAndOperator=true&page=1).\n\nOnce verified, make sure you change the development configuration back.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Dev.exs\nconfig :swoosh, :api_client, false\n# Config :swoosh, Api_client: Swoosh.ApiClient.Finch, Finch_name: PicChat.Finch\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: Oban](https://hexdocs.pm/oban/Oban.html)\n* [HexDocs: Swoosh](https://hexdocs.pm/swoosh/Swoosh.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish PicChat: Emails reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Emails\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_infinite_scroll.livemd\">PicChat: Pagination</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/lists_vs_tuples.livemd\">Lists Vs Tuples</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task32-reading-pic_chat_infinite_scroll", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# PicChat: Pagination\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Pagination\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_pub_sub.livemd\">PicChat: PubSub</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/picchat_emails.livemd\">PicChat: Emails</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How and why do we paginate large data in a Phoenix Application?\n* How to implement client-server communication with Phoenix Hooks.\n* How to implement server to client communication with [Phoenix.LiveView.push_event/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3)\n\n## Overview\n\n### JavaScript Interoperability\n\nJavaScript interoperability refers to the ability to call JavaScript functions from Elixir code, and vice versa. In a Phoenix Application with LiveView, we can push events from the server to the client, and push events from the client to the server.\n\n* **client to server communication:** A client `pushEvent` function sends a message to the server which is handled by LiveView `handle_event/3` callback function.\n* **server to client communication** A LiveView calls the [Phoenix.LiveView.push_event/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3) function on the `socket`, which is then handled by a `handleEvent` JS event listener.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### JavaScript Events\n\nJavaScript uses `listeners` to listen to triggered events on some target such as an element or the `window`. Listeners trigger a callback function whenever the specified event is delivered to the target.\n\nListeners are added to a target using [addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).\n\n```javascript\nelement.addEventListener(\"click\", function(event) {\n  console.log(\"element was clicked\")\n})\n```\n\nSee [MDN: Event Listing](https://developer.mozilla.org/en-US/docs/Web/Events#event_listing) for a full list of events if you would like to learn more.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window)\n\nIn a web browser, the `window` object represents the current web page that is being displayed. It is the top-level object in the browser's object model, and provides access to the browser's features and the web page's content. The `window` contains the `document` which points to the HTML Document Object Model (DOM) loaded in that window.\n\nPhoenix LiveView dispatches several events prefixed with `phx:` to the `window`. The `window` can listen to these events and handle them appropriately. For example, every `app.js` file in any Phoenix application handles the `phx:page-loading-start` and `phx:page-loading-stop` events by displaying and hiding a topbar.\n\n```javascript\nimport topbar from \"topbar\"\nwindow.addEventListener(\"phx:page-loading-start\", info => topbar.show())\nwindow.addEventListener(\"phx:page-loading-stop\", info => topbar.hide())\n```\n\nThe window can also handle any server initiated events sent with [Phoenix.LiveView.push_event/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3).\n\nFirst, some event handler would call `push_event/3`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef handle_info(_some_message, socket) do\n  params = %{} # some Elixir term\n  {:noreply, push_event(socket, \"my_event\", params})}\nend\n```\n\nThen the `window` can handle the pushed event through an event listener. Event params will be stored on the `event` object's `detail` property.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nwindow.addEventListener(`phx:my_event`, (event) => {\n  let params = event.detail\n  # js code to handle the event\n})\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Document (DOM)](https://developer.mozilla.org/en-US/docs/Glossary/DOM)\n\nThe Document Object Model (DOM) is a programming interface for HTML documents. It represents the structure of a document as a tree of objects, with each object representing a part of the document (such as an element or an attribute). For example, consider the following HTML document:\n\n```html\n<html>\n  <head>\n    <title>My Page</title>\n  </head>\n  <body>\n    <h1>Welcome to my page</h1>\n    <p>This is some text</p>\n  </body>\n</html>\n```\n\nIn the DOM, this document would be represented as a tree of objects like this:\n\n```\n- html\n    - head\n      - title\n        - #text My Page\n    - body\n      - h1 \n        - #text Welcome to my page\n      - p \n        - #text This is some text\n```\n\nThe DOM allows a program to access and manipulate the content, structure, and style of a document.\n\nTypically we'll use the `document` object in a JavaScript `.js` file to select an HTML element.\n\n```javascript\ndragndrop = document.getElementById(\"element-1\")\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Client Hooks](https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook)\n\nClient-side hooks are JavaScript functions that are executed at specific points during the rendering and lifecycle of an element. We can hook into the following element lifecycle callbacks.\n\n* `mounted`: the element has been added to the DOM and its server LiveView has finished mounting\n* `beforeUpdate`: the element is about to be updated in the DOM\n* `updated`: the element has been updated in the DOM by the server\n* `destroyed`: the element has been removed from the page\n* `disconnected`: the element's parent LiveView has disconnected from the server\n* `reconnected`: the element's parent LiveView has reconnected to the server\n\nFor example, we connect an element with a hook using `phx-hook`.\n\n```html\n<div phx-hook=\"MyHook\" />\n```\n\nThen trigger the JavaScript by providing a matching `Hooks` callback object to the socket.\nThe object specifies the JS to run, and the lifecycle event to trigger the JS during.\n\n```javascript\n// app.js\n\nlet Hooks = {\n  MyHook: {\n    mounted() {\n      // run the following JS on upon mounting the HTML element.\n      // `this` references an object containing properties related to the current element.\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this for more on `this`.\n      this.el.addEventListener(\"click\", event => {\n        // run the following JS when the \"click\" event is triggered on the HTML element.\n        console.log(\"clicked\") \n      })\n    }\n  }\n}\n\n// modify the existing liveSocket\nlet liveSocket = new LiveSocket(\"/live\", Socket, { params: { _csrf_token: csrfToken }, hooks: Hooks })\n```\n\n## PicChat: Pagination\n\nOver the next several lessons, we're going to build a `PicChat` application where users can create messages with uploaded pictures. This lesson will focus adding pagination and infinite scroll to enable our system to be more performant for larger amounts of data.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Pagination: Limit And Offset\n\n[Ecto.Query.limit/3](https://hexdocs.pm/ecto/Ecto.Query.html#limit/3) and [Ecto.Query.offset/3](https://hexdocs.pm/ecto/Ecto.Query.html#offset/3) allow us to paginate data.\n\nImagine we have we have 15 records. If we `limit` our query to `5`, then each page would have five elements. To retrieve a page, we would use an `offset` in multiples of `5`.\n\n* page 1\n  * offset: `0`\n  * limit: `5`\n* page 2\n  * offset: `5`\n  * limit: `5`\n* page 3\n  * offset: `10`\n  * limit: `5`\n\nHere's a graphic to help visualize these pages of data.\n\n```mermaid\nflowchart TB\nsubgraph Page 3\n  direction RL\n  11[record 11]\n  12[record 12]\n  13[record 13]\n  14[record 14]\n  15[record 15]\nend\n\nsubgraph Page 2\n  direction RL\n  6[record 6]\n  7[record 7]\n  8[record 8]\n  9[record 9]\n  10[record 10]\nend\n\nsubgraph Page 1\n  direction RL\n  1[record 1]\n  2[record 2]\n  3[record 3]\n  4[record 4]\n  5[record 5]\nend\n```\n\nModify the `Chat.list_messages/0` function into the following to allow it to optionally paginate data. This does not break the existing interface, so all tests should still pass.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef list_messages(opts \\\\ []) do\n  limit = Keyword.get(opts, :limit)\n  offset = Keyword.get(opts, :offset, 0)\n\n  Message\n  |> from(order_by: [desc: :inserted_at])\n  |> limit(^limit)\n  |> offset(^offset)\n  |> Repo.all()\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Load Paginated Data On Mount\n\nModify the `mount/3` function to retrieve the first page of data. We're also going to store the `page` information in the LiveView.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\n@limit 10\n\n@impl true\ndef mount(_params, _session, socket) do\nif connected?(socket) do\n  PicChatWeb.Endpoint.subscribe(\"messages\")\nend\n\n{:ok,\n  socket\n  |> assign(:page, 1)\n  |> stream(:messages, Chat.list_messages(limit: @limit))}\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Load More Paginated Data\n\nDefine an event handler that will load more data and insert them into the stream of messages.\n\n> At the time of writing, there is no function for inserting many items into a stream so we've written a custom `stream_insert_many/3` helper function. However [streams](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream/4) are very new to LiveView so that may change.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\n@impl true\ndef handle_event(\"load-more\", _params, socket) do\n  offset =  socket.assigns.page * @limit\n  messages = Chat.list_messages(offset: offset, limit: @limit)\n\n  {:noreply,\n    socket\n    |> assign(:page, socket.assigns.page + 1)\n    |> stream_insert_many(:messages, messages)}\nend\n\ndefp stream_insert_many(socket, ref, messages) do\n  Enum.reduce(messages, socket, fn message, socket ->\n    stream_insert(socket, ref, message)\n  end)\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Seeding\n\nSeeding makes it easier to test situations that would be difficult to reproduce manually. For example, instead of creating messages to test pagination manually, add the following to `seeds.exs`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Seeds.ex\n{:ok, user} =\n  PicChat.Accounts.register_user(%{\n    email: \"test@test.test\",\n    password: \"testtesttest\"\n  })\n\n\nfor n <- 1..100 do\n  PicChat.Chat.create_message(%{user_id: user.id, content: \"message #{n}\"})\nend\n```\n\nThen reset the database to seed the data.\n\n```\n$ mix ecto.reset\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Load More Button\n\nHere's a simple button to trigger loading more messages. Add this below the table of messages to verify loading more messages works as expected.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\n<.button phx-click=\"load-more\">Load More</.button>\n```\n\n## PicChat: Infinite Scroll\n\nInfinite scroll is a common behavior you'll often see on social media sites or other websites with a feed of data to automatically load more data when the user scrolls past a certain point on the page.\n\nTo implement **infinite scroll** we need to work with the [JavaScript scroll event](https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event).\n\nHowever, there is no `phx-scroll` binding, as this would send way too many messages to the server. For times like this, we can rely on [JavaScript Interoperability](https://hexdocs.pm/phoenix_live_view/js-interop.html#content), specifically in our case [Client Hooks](https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Client Hooks\n\nHooks are defined in `app.js` in a JavaScript object and provided to the `live_socket`.\n\nAdd the following to `app.js` to create an InfiniteScroll hook. This snippet was created by [Chris McChord](https://elixirforum.com/t/how-can-i-implement-an-infinite-scroll-in-liveview/30457/2). It checks if the scroll position is greater than `90%` and that we're not currently loading more data, then uses `pushEvent` to send the `\"load-more\"` message to the server.\n\n```javascript\nlet Hooks = {}\n\nlet scrollAt = () => {\n    let scrollTop = document.documentElement.scrollTop || document.body.scrollTop\n    let scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight\n    let clientHeight = document.documentElement.clientHeight\n\n    return scrollTop / (scrollHeight - clientHeight) * 100\n}\n\nHooks.InfiniteScroll = {\n    page() { return this.el.dataset.page },\n    mounted() {\n        this.pending = this.page()\n        window.addEventListener(\"scroll\", e => {\n            if (this.pending == this.page() && scrollAt() > 90) {\n                this.pending = this.page() + 1\n                this.pushEvent(\"load-more\", {})\n            }\n        })\n    },\n    reconnected() { this.pending = this.page() },\n    updated() { this.pending = this.page() }\n}\n\nlet csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\")\nlet liveSocket = new LiveSocket(\"/live\", Socket, { hooks: Hooks, params: { _csrf_token: csrfToken } })\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### `phx-hook` Binding\n\nAt the time of writing, the `table` core component does not support the `phx-hook` attribute, so we're unable to simply add `phx-hook=\"InfiniteScroll\"` to connect our component and the `InfiniteScroll` hook we've created.\n\nAs `core_components` are new, this may change in the future.\n\nThere are two main solutions to this problem:\n\n1. Modify the core component\n2. Wrap the table in an element.\n\nWe're going to modify the core component. Core components might feel special, but they are a part of our application. We can modify them as we please!\n\nModify the `table` component to include a `@rest` attribute that allows us to provide arbitrary HTML attributes to the component.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Add Alphabetically To The Other `attr` For The Table In Core_components.ex\nattr :rest, :global, doc: \"the arbitrary HTML attributes to add to the table\"\n\n# Add `@rest` To The Table Body Element In Core_components.ex\n<tbody\n  id={@id}\n  phx-update={match?(%Phoenix.LiveView.LiveStream{}, @rows) && \"stream\"}\n  class=\"relative divide-y divide-zinc-100 border-t border-zinc-200 text-sm leading-6 text-zinc-700\"\n  {@rest}\n>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Attach The Hook\n\nAdd the `phx-hook` binding to the table element. We also need the `data-page` attribute used in the `InfiniteScroll` hook to access which page of data was last loaded.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Add Phx-hook And Data-page Attributes To The Table Element In `index.ex`\n<.table \n  id=\"messages\" \n  rows={@streams.messages} \n  phx-hook=\"InfiniteScroll\" \n  data-page={@page} \n  row_click={fn {_id, message} -> JS.navigate(~p\"/messages/#{message}\") end}\n>\n```\n\n## PicChat: Highlighting\n\nWe've seen that our client can send the server a message using `pushEvent`. Our server can also send the client a message using [Phoenix.LiveView.push_event/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3). This is often useful when we want to trigger some JavaScript logic.\n\nTo demonstrate this feature we're going to highlight messages whenever they are updated or created.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Push The \"highlight\" Event From The Server\n\nAdd [push_event/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3) to your handlers for the `\"new\"` and `\"edit\"` actions.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef handle_info(\n      %Phoenix.Socket.Broadcast{topic: \"messages\", event: \"new\", payload: message},\n      socket\n    ) do\n  {:noreply,\n    socket\n    |> push_event(\"highlight\", %{id: message.id})\n    |> stream_insert(:messages, message, at: 0)}\nend\n\n@impl true\ndef handle_info(\n      %Phoenix.Socket.Broadcast{topic: \"messages\", event: \"edit\", payload: message},\n      socket\n    ) do\n  {:noreply,\n    socket\n    |> push_event(\"highlight\", %{id: message.id})\n    |> stream_insert(:messages, message)}\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Receive Message On The Client\n\nUse `handleEvent` to receive the message on the client and add the `\"highlight\"` class to the new or updated element. Add the following inside of the `mounted` function.\n\n```javascript\nmounted() {\n    // Keep the existing InfiniteScroll code and add this below it.\n    this.handleEvent(\"highlight\", () => {\n        new_message = document.getElementById(`message-${id}`)\n        if (new_message) {\n            new_message.classList.add(\"highlight\")\n        }\n    })\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Style The Highlighted Element\n\n```css\n.highlight {\n  border-radius: 3px;\n  animation: highlight 1000ms ease-out;\n}\n\n@keyframes highlight {\n  0% {\n    background-color: lightgrey;\n  }\n\n  100% {\n    background-color: white;\n  }\n}\n```\n\n## Tests\n\n### Context Test\n\nAdd the following test to ensure the `limit` and `offset` work as expected in the `Chat` context.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"list_messages/1 returns paginated messages\" do\n  user = user_fixture()\n  message1 = message_fixture(user_id: user.id)\n  message2 = message_fixture(user_id: user.id)\n  assert Chat.list_messages(limit: 1, offset: 1) == [message1]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### LiveView Test\n\nWe can use [render_hook/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#render_hook/3) to send a hook event for the sake of testing the `\"load-more\"` event handler.\n\nAdd the following test inside of the `\"Index\"` describe block. This test ensures we only display the next page of data after triggering the `\"load-more\"` event.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"infinite load 10 messages at a time\", %{conn: conn} do\n  user = user_fixture()\n\n  messages =\n    Enum.map(1..20, fn n ->\n      message_fixture(user_id: user.id, content: \"message-content-#{n}\")\n    end)\n    |> Enum.reverse()\n\n  page_one_message = Enum.at(messages, 0)\n  page_two_message = Enum.at(messages, 10)\n\n  {:ok, index_live, html} = live(conn, ~p\"/messages\")\n\n  assert html =~ \"Listing Messages\"\n\n  assert html =~ page_one_message.content\n  refute html =~ page_two_message.content\n  assert render_hook(index_live, \"load-more\", %{}) =~ page_two_message.content\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: Simulating Latency](https://hexdocs.pm/phoenix_live_view/js-interop.html#simulating-latency)\n* [HexDocs: JavaScript Interoperability](https://hexdocs.pm/phoenix_live_view/js-interop.html#content)\n* [HexDocs: Client Hooks](https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook)\n* [HexDocs: Phoenix.LiveView.JS](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html)\n* [HexDocs: Handling server-pushed events](https://hexdocs.pm/phoenix_live_view/js-interop.html#handling-server-pushed-events)\n* [MDN: CSS Animations](https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Animations)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish PicChat: Pagination reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Pagination\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_pub_sub.livemd\">PicChat: PubSub</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/picchat_emails.livemd\">PicChat: Emails</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task33-reading-task_supervisor", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Task Supervisor\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Task Supervisor\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/task.livemd\">Task</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/task_drills.livemd\">Task Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* Why might we want to supervise a task?\n* How do we supervise tasks?\n\n## Task Supervisor\n\nWe can start [Task](https://hexdocs.pm/elixir/Task.html) processes under a `Task.Supervisor` which can dynamically supervise tasks. The supervisor will automatically restart tasks if they encounter an error.\n\nGenerally speaking, we should start [Task](https://hexdocs.pm/elixir/Task.html) processes under a supervisor.\n\n> We encourage developers to rely on supervised tasks as much as possible. Supervised tasks improves the visibility of how many tasks are running at a given moment and enable a huge variety of patterns that gives you explicit control on how to handle the results, errors, and timeouts. Here is a summary:\n> \n> Using `Task.Supervisor.start_child/2` allows you to start a fire-and-forget task that you don't care about its results or if it completes successfully or not.\n> \n> Using `Task.Supervisor.async/2 + Task.await/2` allows you to execute tasks concurrently and retrieve its result. If the task fails, the caller will also fail.\n> \n> Using `Task.Supervisor.async_nolink/2` + [Task.yield/2](https://hexdocs.pm/elixir/Task.html#yield/2) + [Task.shutdown/2](https://hexdocs.pm/elixir/Task.html#shutdown/2) allows you to execute tasks concurrently and retrieve their results or the reason they failed within a given time frame. If the task fails, the caller won't fail. You will receive the error reason either on yield or shutdown.\n> \n> * [Hexdocs: Dynamically Supervised Tasks](https://hexdocs.pm/elixir/Task.html#module-dynamically-supervised-tasks)\n\nThe `Task.Supervisor` is started as a child under a normal supervisor. We start the `Task.Supervisor` as a named process using an atom or a module name.\n\n```elixir\nchildren = [\n  {Task.Supervisor, name: MyTaskSupervisor}\n]\n\n{:ok, supervisor_pid} =\n  Supervisor.start_link(children, strategy: :one_for_one, name: :parent_supervisor)\n```\n\nWe don't need to define a `MyTaskSupervisor` module. The supervisor uses this name to start a `Task.Supervisor` process. We can see that `MyTaskSupervisor` is a child process of our supervisor.\n\n```elixir\nSupervisor.which_children(supervisor_pid)\n```\n\nWe can also see that demonstrated in the following diagram.\n\n<!-- livebook:{\"attrs\":{\"source\":\"Kino.Process.sup_tree(supervisor_pid)\",\"title\":\"Supervisor Visualization\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.Process.sup_tree(supervisor_pid)\n```\n\n## Async Tasks\n\nNow we can spawn supervised [Task](https://hexdocs.pm/elixir/Task.html) processes under `MyTaskSupervisor` using `Task.Supervisor.async/3`.\n\n```elixir\ntask =\n  Task.Supervisor.async(MyTaskSupervisor, fn ->\n    IO.puts(\"Task Started\")\n    Process.sleep(1000)\n    IO.puts(\"Task Finished\")\n    \"response!\"\n  end)\n\nTask.await(task)\n```\n\nWe can spawn many tasks under the supervisor.\n\n```elixir\ntasks =\n  Enum.map(1..5, fn int ->\n    task =\n      Task.Supervisor.async(MyTaskSupervisor, fn ->\n        IO.puts(\"Task Started\")\n        Process.sleep(30000)\n        IO.puts(\"Task Finished\")\n        int * 2\n      end)\n  end)\n```\n\nEvaluate the diagram below to see the tasks spawned under the `MyTaskSupervisor` process.\n\n<!-- livebook:{\"attrs\":{\"source\":\"Kino.Process.sup_tree(supervisor_pid)\",\"title\":\"Supervisor Visualization\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nKino.Process.sup_tree(supervisor_pid)\n```\n\nWe can then await the response from all of the tasks.\n\n```elixir\nTask.await_many(tasks)\n```\n\n## Fire-and-Forget Tasks\n\n`Task.Supervisor.start_child/2` allows us to start a **fire-and-forget** task that will perform some work without returning a response.\n\n```elixir\nTask.Supervisor.start_child(MyTaskSupervisor, fn ->\n  IO.puts(\"Fire-and-forget task started\")\n  Process.sleep(60000)\n  IO.puts(\"Fire-and-forget task finished\")\nend)\n```\n\nRe-evaluate the cell above a few times, and you'll see several tasks under the `MyTaskSupervisor`.\n\n```elixir\nchildren = Supervisor.which_children(MyTaskSupervisor)\n```\n\nWe can provide a `:restart` strategy when we start a process. By default, `Task.Supervisor.start_child/2` uses the `:temporary` `:restart` strategy. These [Task](https://hexdocs.pm/elixir/Task.html) processes will never be restarted.\n\n```elixir\n{:ok, pid} =\n  Task.Supervisor.start_child(MyTaskSupervisor, fn ->\n    Process.sleep(60000)\n  end)\n\nSupervisor.which_children(MyTaskSupervisor)\n|> IO.inspect(label: \"Started children\")\n\nProcess.exit(pid, :kill)\n\nProcess.sleep(1000)\n\nSupervisor.which_children(MyTaskSupervisor)\n|> IO.inspect(label: \"Children after exit\")\n```\n\nInstead we can use the `:permanent` process to always restart a [Task](https://hexdocs.pm/elixir/Task.html) or `:transient` to restart a [Task](https://hexdocs.pm/elixir/Task.html) if it's exit reason is not `:normal`, `:shutdown`, or `{:shutdown, reason}`.\n\nSee [Task.Supervisor.start_child/3#options](https://hexdocs.pm/elixir/Task.Supervisor.html#start_child/3-options) for more.\n\nNow when we kill a [Task](https://hexdocs.pm/elixir/Task.html) started with the `:transient` strategy, notice that a new process with a different `pid` is started under `MyTaskSupervisor`.\n\n```elixir\n{:ok, pid} =\n  Task.Supervisor.start_child(\n    MyTaskSupervisor,\n    fn ->\n      Process.sleep(60000)\n    end,\n    restart: :transient\n  )\n\nSupervisor.which_children(MyTaskSupervisor)\n|> IO.inspect(label: \"Started children\")\n\nProcess.exit(pid, :kill)\n\nProcess.sleep(1000)\n\nSupervisor.which_children(MyTaskSupervisor)\n|> IO.inspect(label: \"Children after exit\")\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: Task.Supervisor](https://hexdocs.pm/elixir/Task.Supervisor.html)\n* [ElixirSchools: Task.Supervisor](https://elixirschool.com/en/lessons/advanced/otp_supervisors#task-supervisor-4)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Task Supervisor reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Task Supervisor\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/task.livemd\">Task</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/task_drills.livemd\">Task Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task34-reading-reduce", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Reduce\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:smart_animation, github: \"brooklinjazz/smart_animation\"},\n  {:visual, github: \"brooklinjazz/visual\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Reduce\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/comprehension_search.livemd\">Comprehension Product Search</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/number_finder.livemd\">Number Finder</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* When should we use `map` vs `filter` vs `reduce`?\n* How can we build an accumulated value using reduce?\n\n## Overview\n\nReduce is an incredibly powerful tool you can leverage in a wide variety of circumstances.\n\n> Reduce (sometimes called fold) is a basic building block in functional programming. Almost all of the functions in the Enum module can be implemented on top of reduce. Those functions often rely on other operations, such as Enum.reverse/1, which are optimized by the runtime.\n> \n> * [HexDocs](https://hexdocs.pm/elixir/Enum.html#reduce/3)\n\nIf you'd like to learn more about reduce, there's an [excellent video](https://github.com/paulfioravanti/presentations/tree/master/everything_is_reduce) by Paul Fioravanti.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=OQrfedclHfk\\\")\",\"title\":\"Everything Is Reduce\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=OQrfedclHfk\")\n```\n\n## Input -> Output\n\nAs we've seen, other [Enum](https://hexdocs.pm/elixir/Enum.html) functions such as [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) or [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) take in a collection as input and produce a list as output.\n\n```mermaid\nflowchart LR\nC1[Collection] --> Enum.map/2 --> L1[List]\nC2[Collection] --> Enum.filter/2 --> L2[List]\n```\n\nReduce allows you to take any collection and produce **any** output. That's powerful.\n\n```mermaid\nflowchart LR\nC1[Collection] --> Enum.reduce/3 --> ANYTHING!!!\n```\n\nAnytime you have a collection, and want to produce a non-list output, [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) might be the right tool for the job.\n\n## Building The Accumulator\n\n[Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) works by enumerating over the collection and building up an accumulator. Instead of applying a change to each element in the collection, we transform the accumulator by applying a callback function on every element.\n\nFor example, we can simply return `0` in the body of the callback function to return this value as the accumulator.\n\n```elixir\nEnum.reduce(1..3, 0, fn _integer, _acc -> 0 end)\n```\n\nWith each step in [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) we create a new acculumator of `0`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart TB\n  subgraph Accumulator\n  direction TB\n    A1 --> A2 --> A3\n  end\n  subgraph Element\n    direction TB\n    1 --> 2 --> 3\n  end\n  A1[0]\n  A2[0]\n  A3[0]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Anagrams](../exercises/anagram.livemd)\n\nLet's look at a more practical example of taking a collection, and returning a non-list output.\n\nIn the [Anagram](../exercises/anagram.livemd) exercise you previously completed, you built an `Anagram.anagram?/2` function to determine if two strings are anagrams. One solution to the problem is to build a map storing the character counts of two strings.\n\nFor example, to determine if `\"state\"` and `\"taste\"` are anagrams of each other, we can convert them into the following maps with a count of each character, and check if they are equal. Remember that order in maps does not matter.\n\n```elixir\n%{\"s\" => 1, \"t\" => 2, \"a\" => 1, \"e\" => 1} == %{\"t\" => 2, \"a\" => 1, \"s\" => 1, \"e\" => 1}\n```\n\nWe can use [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) to convert a string into a map of character counts. For each character in the string, we'll build a new map with an updated key.\n\nHere's how we would build the accumulator for the string `\"aba\"`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart TB\n  A1[\"%{''a'' => 1}\"]\n  A2[\"%{''a'' => 1, ''b'' => 1}\"]\n  A3[\"%{''a'' => 2, ''b'' => 1}\"]\n\n  subgraph Accumulator\n    direction TB\n    A1 --> A2 --> A3\n  end\n  subgraph Element\n    direction TB\n    a1[a] --> b --> a2[a]\n  end\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can initialize or update a value in a map using [Map.update/4](https://hexdocs.pm/elixir/Map.html#update/4). If there is no existing key, it initializes the map key with the default value provided.\n\n```elixir\nupdated_map = Map.update(%{}, :key, \"default value\", fn current -> \"updated: #{current}\" end)\n```\n\nIf there is an existing key, then it can update the map key using the existing value.\n\n```elixir\nMap.update(updated_map, :key, \"default value\", fn current -> \"updated: #{current}\" end)\n```\n\nWhen converting a string to a map of character counts, if there is no key, the value will be `1`. If there is an existing key in the map, the value will be the current value incremented by `1`. Here are the steps we want to accomplish for our [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) function.\n\n```elixir\ninitial_accumulator = %{}\n```\n\n```elixir\nstep1 = Map.update(initial_accumulator, \"a\", 1, fn current_value -> current_value + 1 end)\n```\n\n```elixir\nstep2 = Map.update(step1, \"b\", 1, fn current_value -> current_value + 1 end)\n```\n\n```elixir\nstep3 = Map.update(step2, \"a\", 1, fn current_value -> current_value + 1 end)\n```\n\nPutting this all together, here's the [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) function that lets us convert a string into a map with character counts. Note that we have to split the string into a list of characters first to make it enumerable.\n\n```elixir\nsplit_string = String.split(\"aba\", \"\", trim: true)\n\nEnum.reduce(split_string, %{}, fn char, map_accumulator ->\n  Map.update(map_accumulator, char, 1, fn current -> current + 1 end)\nend)\n```\n\n### Your Turn\n\nUse [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) to convert the integer `1234321` into a map of digit counts.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{1 => 2, 2 => 2, 3 => 2, 4 => 1}\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndigits = Integer.digits(1_234_321)\n\nEnum.reduce(digits, %{}, fn integer, acc ->\n  Map.update(acc, integer, 1, fn current -> current + 1 end)\nend)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Multiple Accumulators\n\nOne trick for reduce is to use a collection data-type to simulate having multiple accumulators.\n\nHere's an example of separating a range into even and odd numbers.\n\n```elixir\nEnum.reduce(1..10, {[], []}, fn integer, {evens, odds} ->\n  if rem(integer, 2) == 0 do\n    {[integer | evens], odds}\n  else\n    {evens, [integer | odds]}\n  end\nend)\n```\n\nTechnically, there is only one actual accumulator, our tuple with two lists. However, this functions as a way to track multiple values with each enumeration in the reduce operation.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Schools: Reduce](https://elixirschool.com/en/lessons/basics/enum#reduce-9)\n* [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2)\n* [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Reduce reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Reduce\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/comprehension_search.livemd\">Comprehension Product Search</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/number_finder.livemd\">Number Finder</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task35-reading-enum", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Enum\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:smart_animation, github: \"brooklinjazz/smart_animation\"},\n  {:visual, github: \"brooklinjazz/visual\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Enum\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/ranges.livemd\">Ranges</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fizzbuzz.livemd\">FizzBuzz</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* When and why might we use enumeration in programming?\n* How do we transform every element in an enumerable?\n* How do we remove elements from an enumerable?\n* How do we use every element in an enumerable to build an acculumator and return a transformed value?\n\n## Overview\n\n### Enumeration\n\nEnumeration is the act of looping through elements. Unlike iteration, which you may have encountered in other programming languages, enumeration does not allow you to change (mutate) elements in the original collection.\n\nFor example, we could enumerate through a list of numbers from one to five, and transform them into a new list of doubled numbers.\n\n```mermaid\nflowchart\nsubgraph Original\n  direction LR\n  1 --- 2 --- 3 --- 4 --- 5\nend\nsubgraph Transformed\n  direction LR\n  T2[2] --- T4[4] --- T6[6] --- T8[8] --- T10[10]\nend\n\nOriginal --> Transformed\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Enum](https://hexdocs.pm/elixir/Enum.html)\n\nThe Elixir [Enum](https://hexdocs.pm/elixir/Enum.html) module contains functions for using enumeration with enumerable data structures.\n\nFor example, there is the [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) function for applying a transformation function to each element in an enumerable.\n\n```elixir\nEnum.map([1, 2, 3, 4, 5], fn element -> element * 2 end)\n```\n\n### Enumerable\n\nCertain data types in Elixir implement the [Enumerable](https://hexdocs.pm/elixir/Enumerable.html) protocol. That means we can enumerate through elements in these enumerable data types.\n\nMost enumerables are collections, but not all of them. For example a range doesn't contain other elements, but it is enumerable.\n\n```elixir\nEnum.map(1..5, fn element -> element * 2 end)\n```\n\n### Collections\n\nData types that store other elements are often referred to as **collections**. For example, maps, lists, keyword lists, and tuples are all collections.\n\nMany collections are enumerable, but not all of them. For example, a tuple is not enumerable.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Map, Filter, And Reduce\n\n[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2), [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2), and [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) are the most common functions for enumeration. By understanding these functions and when to use them, you'll be able to solve most enumeration problems.\n\n* [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) returns the same number of elements with a transformation applied to each.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nsubgraph map\n  direction LR\n  subgraph input\n    direction LR\n    im1((1)) --> im2((2)) --> im3((3))\n  end\n  subgraph output\n    direction LR\n    om1[2] --> om2[4] --> om3[6]\n  end\n  input --\"Enum.map(1..3, fn el -> el * 2 end)\"--> output\nend\n```\n\n```elixir\nEnum.map(1..3, fn el -> el * 2 end)\n```\n\n* [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) removes element(s) from an enumerable without transforming them.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nsubgraph map\n  direction LR\n  subgraph input\n    direction LR\n    im1((1)) --> im2((2)) --> im3((3))\n  end\n  subgraph output\n    direction LR\n    om1((1)) --> om2((2))\n  end\n  input --\"Enum.filter(1..3, fn el -> el <= 2 end)\"--> output\nend\n```\n\n```elixir\nEnum.filter(1..3, fn el -> el <= 2 end)\n```\n\n* [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) uses the elements in an enumerable to build an accumulated value and return a transformed data structure.\n\n```mermaid\nflowchart\nsubgraph map\n  direction LR\n  subgraph input\n    direction LR\n    im1((1)) --> im2((2)) --> im3((3))\n  end\n  subgraph output\n    direction LR\n    om1[[6]]\n  end\n  input --\"Enum.reduce(1..3, fn el, acc -> acc + el end)\"--> output\nend\n```\n\n```elixir\nEnum.reduce(1..3, fn el, acc -> acc + el end)\n```\n\n## Scenario\n\nOften while programming, you run into problems where you need the ability\nto do something many many times.\n\nFor example, let's say you're creating a shopping application.\nIn this application, customers create a shopping list.\n\nWe'll represent this shopping cart as a list of item costs in pennies.\n\n```elixir\nshopping_cart = [100, 200, 150, 200]\n```\n\nWe can create a function that will calculate the after tax cost of an item called `calculate_tax/1`. Lets say that the tax is `5%` so we can multiply our cost by `1.05`.\n\n```elixir\ncalculate_tax = fn cost -> cost * 1.05 end\n```\n\nWith four items in our shopping list, it's a bit tedius to call the `calculate_tax/1` function on each item. We'd need to bind each item to a variable and call the `calculate_tax/1` function on each item individually to determine the after tax cost of each item.\n\n```elixir\n[one, two, three, four] = shopping_cart\n\n[calculate_tax.(one), calculate_tax.(two), calculate_tax.(three), calculate_tax.(four)]\n```\n\nThis only works when there are exactly four items. If we want to handle when there is one, two, three, or four items our code gets much more verbose. As you can imagine, this solution is not scalable.\n\n```elixir\nshopping_cart = [100, 200, 150]\n\ncase shopping_cart do\n  [] ->\n    []\n\n  [one] ->\n    [calculate_tax.(one)]\n\n  [one, two] ->\n    [calculate_tax.(one), calculate_tax.(two)]\n\n  [one, two, three] ->\n    [calculate_tax.(one), calculate_tax.(two), calculate_tax.(three)]\n\n  [one, two, three, four] ->\n    [calculate_tax.(one), calculate_tax.(two), calculate_tax.(three), calculate_tax.(four)]\nend\n```\n\nTo solve this problem, we need to apply the `calculate_tax/1` function on every element in the list. Any time we need to repeat a similar action over and over again we can use **enumeration**.\n\nEnumeration is the act of looping through a collection and reading\nits elements for the sake of returning some output.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  Input ---> Enumeration --> Function --> Enumeration\n  Enumeration --> Output\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWith enumeration, we can `calculate_tax/1` on any number of items with a single call to [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2).\n\n```elixir\nshopping_cart = [100, 200, 150]\n\nEnum.map(shopping_cart, fn item -> calculate_tax.(item) end)\n```\n\n## The Enum Module\n\nElixir provides the [Enum](https://hexdocs.pm/elixir/Enum.html) to accomplish enumeration. The [Enum](https://hexdocs.pm/elixir/Enum.html) module contains a large amount of useful functions that all work on collection data types such as lists, ranges, maps, and keyword lists.\n\nMost enumeration problems can be solved with the following [Enum](https://hexdocs.pm/elixir/Enum.html) functions.\n\n* [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) enumerate over every element and create a new collection with a new value.\n* [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) and [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3). Enumerate over every element into an accumulated value.\n* [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) filter out elements from a collection.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) applies the callback function on every element in a collection to build a new list.\n\nEach element in the new list will be the return value of the provided callback function.\n\n```elixir\nEnum.map(1..10, fn element -> element * 2 end)\n```\n\n[Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) applies the callback function to every element in the collection and keeps an element when the callback function returns `true`.\n\n```elixir\nEnum.filter(1..10, fn element -> rem(element, 2) == 0 end)\n```\n\n[Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) and [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) applies the callback function to every element in the collection and builds an accumulated value stored between each function call.\n\nWhen complete, it returns the result of the last function call, which is typically the accumulated value\n\n```elixir\n# 0 Is The Initial Accumulator Value\nEnum.reduce(1..3, 0, fn element, accumulator ->\n  element + accumulator\nend)\n```\n\n[Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) uses the first value in the collection as the initial accumulator. Generally (but not always) [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) is preferable for the sake of clarity, and we will prefer it for most use cases.\n\n```elixir\nEnum.reduce(1..3, 5, fn element, accumulator ->\n  element + accumulator\nend)\n```\n\n```elixir\nEnum.reduce(1..3, fn element, accumulator ->\n  element + accumulator\nend)\n```\n\n### Other Handy Functions\n\nThe [Enum](https://hexdocs.pm/elixir/Enum.html) module also provides other useful functions. Here are a handful of the most used.\n\n* [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) check if all elements in a collection match some condition.\n* [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) check if any elements in a collection match some condition.\n* [Enum.count/2](https://hexdocs.pm/elixir/Enum.html#count/2) return the number of elements in a collection collection.\n* [Enum.find/3](https://hexdocs.pm/elixir/Enum.html#find/3) return an element in a collection that matches some condition.\n* [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) return a random element in a collection.\n\nAnytime we're working with a collection, we should refer to the [Enum](https://hexdocs.pm/elixir/Enum.html) module to see if it has a built-in solution we can use. Alternatively, we can build nearly all functionality using only [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2), [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3), and [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) so consider developing the most familiarity with these three functions.\n\n## Enum.map/2\n\n[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) allows you to enumerate through the collection you provide it as its first argument. It then calls a function that you provide it as its second argument on each element. Finally it returns a new collection with the modified values.\n\n```mermaid\nflowchart LR\n  A[Collection] --> E[Enum.map]\n  E --> Function\n  Function --> E\n  E --> B[New Collection]\n```\n\nHere's an example that doubles all the integers in a list.\n\n```elixir\nEnum.map([1, 2, 3, 4], fn integer -> integer * 2 end)\n```\n\n```mermaid\nflowchart LR\n  A[\"[1, 2, 3, 4]\"] --> E[Enum.map]\n  E --> F[\"fn integer -> integer * 2 end\"]\n  F --> E\n  E --> B[\"[2, 4, 6, 8]\"]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIt's useful to be aware that you can use ranges with enumerables to easily enumerate over large\nranges without needing to define every element in the list.\n\n```elixir\nEnum.map(1..100, fn integer -> integer * 2 end)\n```\n\n[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) accepts any enumerable, and always returns a list, regardless of the input.\n\n**keyword lists** and **maps** will be treated as lists of tuples for the sake of enumeration.\n\n```elixir\nEnum.map(%{\"one\" => 1, \"two\" => 2}, fn element -> element end)\n```\n\n```elixir\nEnum.map([one: 1, two: 2], fn element -> element end)\n```\n\nWe can even pattern match on the key and value in the tuple.\n\n```elixir\nEnum.map(%{\"one\" => 1, \"two\" => 2}, fn {_key, value} -> value end)\n```\n\n```elixir\nEnum.map([one: 1, two: 2], fn {key, _value} -> key end)\n```\n\n### Your Turn\n\nUse [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) to convert a list of integers from `1` to `10` to strings.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Expected Output\n[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n```elixir\nEnum.map(1..10, fn integer -> \"#{integer}\" end)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Enum.reduce/2 And Enum.reduce/3\n\n[Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) allows you to enumerate over a collection and build up an accumulated value with each enumeration.\n\nUnlike [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) this gives you significantly more control over your output, as the data type of the accumulator and return value do not have to be a list.\n\n```mermaid\nflowchart LR\n  A[Collection] --> E[Enum.reduce]\n  E -- Accumulator --> Function\n  Function -- Accumulator --> E\n  E --Final Accumulator--> B[Output]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFor example, we can sum all of the numbers in a list by building up an accumulated sum.\n\n```elixir\nlist = [1, 2, 3, 4]\n\nEnum.reduce(list, fn integer, accumulator -> integer + accumulator end)\n```\n\nThe function you provide as the second argument of [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) will be called with the current element, and current accumulator.\n\nThe first value in the collection will be the initial accumulator value.\n\n<!-- livebook:{\"attrs\":{\"source\":\"frames = [\\n      \\\"\\nFirst, we define the call the [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) function with a list, and a function.\\n```elixir\\nEnum.reduce([1, 2, 3, 4], fn integer, accumulator -> integer + accumulator  end)\\n```\\n\\\",\\n      \\\"\\nThe first element in the list `1` is the initial accumulator value.\\n```elixir\\nEnum.reduce([2, 3, 4], fn integer, 1 -> integer + 1  end)\\n```\\n\\\",\\n      \\\"\\nThe function is called on the next element `2`. The next accumulator is 2 + 1\\n```elixir\\nEnum.reduce([3, 4], fn 2, 1 -> 2 + 1  end)\\n```\\n\\\",\\n      \\\"\\nThe function is called on the next element `3`. The next accumulator is 3 + 3\\n```elixir\\nEnum.reduce([4], fn 3, 3 -> 3 + 3  end)\\n```\\n\\\",\\n      \\\"\\nThe function is called on the next element `4`. The next accumulator is 4 + 6\\n```elixir\\nEnum.reduce([], fn 4, 6 -> 4 + 6  end)\\n```\\n\\\",\\n      \\\"\\n4 + 6 equals 10.\\n```elixir\\nEnum.reduce([], fn 4, 6 -> 10  end)\\n```\\n\\\",\\n      \\\"\\n`10` is the last accumulator value, so [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) returns `10`.\\n```elixir\\n                           10\\n```\\n\\\"\\n    ]\\n\\nSmartAnimation.new(0..Enum.count(frames) - 1, fn i ->\\n    Kino.Markdown.new(Enum.at(frames, i))\\nend)\",\"title\":\"Reduce\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n````elixir\nframes = [\n  \"\nFirst, we define the call the [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) function with a list, and a function.\n```elixir\nEnum.reduce([1, 2, 3, 4], fn integer, accumulator -> integer + accumulator  end)\n```\n\",\n  \"\nThe first element in the list `1` is the initial accumulator value.\n```elixir\nEnum.reduce([2, 3, 4], fn integer, 1 -> integer + 1  end)\n```\n\",\n  \"\nThe function is called on the next element `2`. The next accumulator is 2 + 1\n```elixir\nEnum.reduce([3, 4], fn 2, 1 -> 2 + 1  end)\n```\n\",\n  \"\nThe function is called on the next element `3`. The next accumulator is 3 + 3\n```elixir\nEnum.reduce([4], fn 3, 3 -> 3 + 3  end)\n```\n\",\n  \"\nThe function is called on the next element `4`. The next accumulator is 4 + 6\n```elixir\nEnum.reduce([], fn 4, 6 -> 4 + 6  end)\n```\n\",\n  \"\n4 + 6 equals 10.\n```elixir\nEnum.reduce([], fn 4, 6 -> 10  end)\n```\n\",\n  \"\n`10` is the last accumulator value, so [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) returns `10`.\n```elixir\n                           10\n```\n\"\n]\n\nSmartAnimation.new(0..(Enum.count(frames) - 1), fn i ->\n  Kino.Markdown.new(Enum.at(frames, i))\nend)\n````\n\n### Enum.reduce/3\n\nAlternatively, we can provide a default value for the accumulator with [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3).\n\n[Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) will call the function on every element, rather than setting the initial accumulator as the first element. Below, we sum all of the numbers in the list, with an initial sum of `10`.\n\n```elixir\nEnum.reduce([1, 2, 3], 10, fn integer, accumulator -> integer + accumulator end)\n```\n\n### Your Turn\n\nUse [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) or [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) to sum all of the even numbers from `1` to `10`. It should return `30`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n2 + 4 + 6 + 8 + 10 = 30\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n```elixir\nEnum.reduce(1..10, 0, fn int, acc ->\n  if rem(int, 2) == 0 do\n    acc + int\n    else\n    acc\n  end\nend)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Enum.filter\n\nThe [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) function allows us to filter elements in a collection. [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) calls the function with each element in the collection. If the function returns `false` then the element is filtered out.\n\n```mermaid\nflowchart LR\n  C[Collection] --> E[Enum.filter]\n  E --> F[Function]\n  F -- boolean --> E\n  F --> true --> A[Keep]\n  F --> false --> B[Remove]\n  E --> O[Filtered Collection]\n```\n\n```elixir\nEnum.filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], fn integer -> integer <= 5 end)\n```\n\n### Your Turn\n\nuse [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) to create a list of odd numbers from `1` to `10` and a list of even numbers from `1` to `10`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\neven_numbers = Enum.filter(1..10, fn integer -> rem(integer, 2) == 0 end)\nodd_numbers = Enum.filter(1..10, fn integer -> rem(integer, 2) != 0 end)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Enum.all?/2\n\n[Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) checks that all elements in a collection match some condition.\n\n[Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) executes the callback function provided on each element. If every element returns truthy, then [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) returns `true`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nCollection --> E[Enum.all?/2]\nE --> Function\nFunction -- truthy --> E\nE --> Boolean\n```\n\n```elixir\nEnum.all?([1, 2, 3], fn integer -> is_integer(integer) end)\n```\n\nIf a single element returns a falsy value, then [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) returns `false`.\n\n```elixir\nEnum.all?([1, 2, 3, \"4\"], fn element -> is_integer(element) end)\n```\n\nFor performance reasons, [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) will complete as soon as it finds a single element that returns a falsey value when called with the function.\n\nNotice the code below should finish very quickly because the very first element fails the condition.\n\n```elixir\nEnum.all?(1..10_000_000, fn integer -> is_bitstring(integer) end)\n```\n\nIf [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) must traverse the entire collection if all elements pass the condition, or if a failing element is towards the end of the list.\n\nNotice the code below should take awhile to finish running because every element passes the condition.\n\n```elixir\nEnum.all?(1..10_000_000, fn integer -> is_integer(integer) end)\n```\n\n### Your Turn\n\nUse [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2) to determine if all of the `colors` in this list of colors are `:green`. You may change the value of `colors` to experiment with [Enum.all?/2](https://hexdocs.pm/elixir/Enum.html#all?/2).\n\n```elixir\ncolors = [:green, :green, :red]\n```\n\n## Enum.any?/2\n\n[Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) checks if any elements in a collection pass some condition. If a single element returns a truthy value when called with the callback function, then [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) returns `true`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nCollection --> E[Enum.any?/2]\nE --> Function\nFunction -- truthy --> E\nE --> Boolean\n```\n\n```elixir\nEnum.any?([1, \"2\", \"3\"], fn element -> is_integer(element) end)\n```\n\n[Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) returns as soon as an element in the collection returns a truthy value.\n\nNotice the code below finishes very quickly, because the first element in the collection passes the condition.\n\n```elixir\nEnum.any?(1..10_000_000, fn integer -> is_integer(integer) end)\n```\n\nHowever, the following takes awhile to run because all elements in the collection fail the condition.\n\n```elixir\nEnum.any?(1..10_000_000, fn integer -> is_bitstring(integer) end)\n```\n\n### Your Turn\n\nUse [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) to determine if any of the animals in the `animals` list are `:dogs`. You may change the `animals` list to experiment with [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2).\n\n```elixir\nanimals = [:cats, :dogs, :bears, :lions, :penguins]\n```\n\n## Enum.count/1\n\n[Enum.count/1](https://hexdocs.pm/elixir/Enum.html#count/1) returns the number of items in a collection.\n\n```mermaid\nflowchart LR\n  Collection --> Enum.count --> Integer\n```\n\n```elixir\nEnum.count([1, 2, 3])\n```\n\nThe type of elements does not matter. Collections with multiple elements still only count as a single individual element.\n\n```elixir\nEnum.count([{}, \"hello\", %{}, [[[]]]])\n```\n\n### Your Turn\n\nIn the Elixir cell below, count the number of elements in the `collection`. It should return `5`.\n\n```elixir\ncollection = [1, 2, 3, 4, 5]\n```\n\n## Enum.find/3\n\n[Enum.find/3](https://hexdocs.pm/elixir/Enum.html#find/3) takes in a collection and a function. Then searches the collection and returns the first element that returns true when called as the argument to the passed-in function.\n\n```elixir\nEnum.find([\"hello\", 2, 10], fn each -> is_integer(each) end)\n```\n\nIf no element is found, [Enum.find/2](https://hexdocs.pm/elixir/Enum.html#find/2) returns `nil`.\n\n```elixir\nEnum.find([\"h\", \"e\", \"l\", \"l\", \"o\"], fn each -> is_integer(each) end)\n```\n\nYou might notice the arity of the function is `3` even though we passed in only `2` arguments. That's because there's an optional `default` value argument. The `default` value will be returned instead of `nil` if no element is found.\n\n```elixir\nEnum.find([\"h\", \"e\", \"l\", \"l\", \"o\"], 10, fn each -> is_integer(each) end)\n```\n\n### Your Turn\n\nUse [Enum.find/2](https://hexdocs.pm/elixir/Enum.html#find/2) to find the first even integer in this list.\n\n```elixir\n[1, \"2\", \"three\", 4, \"five\", 6]\n```\n\n## Enum.random/1\n\n[Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) returns a random element in a collection. It's often used to generate random numbers in a range.\n\n```elixir\nEnum.random(1..10)\n```\n\n### Your Turn\n\nGenerate a list with ten random integers from `0` to `9`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nEnum.map(1..10, fn _ -> Enum.random(0..9) end)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Capture Operator And Module Functions\n\nWhen we provide a function to any of the [Enum](https://hexdocs.pm/elixir/Enum.html) we're passing an anonymous function, which will be called under the hood.\n\nWe'll bind this function to a variable and inspect every value to demonstrate.\n\n```elixir\nmy_function = fn element -> IO.inspect(element) end\n\nEnum.map(1..10, my_function)\n```\n\nWe can use the capture operator `&` syntax to provide module functions.\n\n```elixir\ndefmodule NonAnonymous do\n  def function(element) do\n    IO.inspect(element)\n  end\nend\n\nEnum.map(1..10, &NonAnonymous.function/1)\n```\n\nThis can be used with any of Elixir's built-in functions as well, as long as their arity matches the callback function.\n\n```elixir\nEnum.map(1..10, &is_integer/1)\n```\n\nWe can also use the capture operator alone to create an anonymous function. However, we generally don't recommend this as it typically reduces readability. `&1` is the first argument to the function.\n\n```elixir\nEnum.map(1..10, &(&1 * 2))\n```\n\n## Further Reading\n\nThe [Enum](https://hexdocs.pm/elixir/Enum.html) module has many more functions. You'll have the opportunity to encounter more as you need them to solve future challenges.\n\nFor more information, you may also wish to read:\n\n* [The Enum Documentation](https://hexdocs.pm/elixir/Enum.html)\n* [Elixir Schools Enum](https://elixirschool.com/en/lessons/basics/enum)\n\nWe have several exercises dedicated to the [Enum](https://hexdocs.pm/elixir/Enum.html) module as part of this curriculum. However, if you wish for more practice [Exercism.io](https://exercism.org/tracks/elixir/concepts/enum) has a number of excellent exercises.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Enum reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Enum\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/ranges.livemd\">Ranges</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fizzbuzz.livemd\">FizzBuzz</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task36-reading-pic_chat_pub_sub", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# PicChat: PubSub\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: PubSub\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_image_upload.livemd\">PicChat: Image Upload</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_infinite_scroll.livemd\">PicChat: Pagination</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is the PubSub (Publisher/Subscriber pattern) and how does it enable real-time features?\n* How do we subscribe a LiveView process to a topic?\n* How do we broadcast to a topic?\n* How do we handle a broadcasted message in a LiveView process?\n\n## Overview\n\n### [PubSub](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)\n\nPubSub, or \"Publish-Subscribe\", is a messaging pattern that allows senders of messages (publishers) to send messages to multiple receivers (subscribers) without explicitly establishing a connection to each individual receiver. This allows for a decoupled communication model, where the publisher and subscriber do not need to be aware of each other or directly connected in order to communicate.\n\n```mermaid\nflowchart\nPS[PubSub]\nP[Publisher]\nS1[Subscriber]\nS2[Subscriber]\nS3[Subscriber]\n\nP --broadcast--> PS\nPS --broadcast--> S1\nPS --broadcast--> S2\nPS --broadcast--> S3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Topics\n\nIn a PubSub system, a publisher sends a message to a topic, which acts as a logical channel for the message. Subscribers can then subscribe to that topic, and will receive a copy of the message when it is published. This allows multiple subscribers to receive the same message, and also allows publishers to send messages to multiple topics, which can then be received by multiple subscribers.\n\n```mermaid\nflowchart BT\nS1[Subscriber]\nS2[Subscriber]\nS3[Subscriber]\nT[Topic]\n\nS1 --subscribe--> T\nS2 --subscribe--> T\nS3 --subscribe--> T\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Phoenix.PubSub](https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html)\n\nPhoenix provides a built-in PubSub system based on the Elixir process-based actors model, which allows clients to subscribe to topics and receive messages in real-time. Since LiveViews are GenServer processes, each Phoenix LiveView can subscribe to relevant topics and render information in real-time based on published events.\n\nOur Phoenix PubSub service is started in `application.ex` as part of the application supervision tree.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef start(_type, _args) do\n  children = [\n    # Start the Ecto repository\n    App.Repo,\n    # Start the Telemetry supervisor\n    AppWeb.Telemetry,\n    # Start the PubSub system\n    {Phoenix.PubSub, name: App.PubSub},\n    # Start the Endpoint (http/https)\n    AppWeb.Endpoint\n    # Start a worker by calling: App.Worker.start_link(arg)\n    # {App.Worker, arg}\n  ]\n\n  # See https://hexdocs.pm/elixir/Supervisor.html\n  # for other strategies and supported options\n  opts = [strategy: :one_for_one, name: App.Supervisor]\n  Supervisor.start_link(children, opts)\nend\n```\n\n## PicChat: Pub Sub\n\nOver the next several lessons, we're going to build a `PicChat` application where users can create messages with uploaded pictures. This lesson will focus adding a pub-sub system that enables a real-time feed of messages.\n\nWhenever a LiveView process triggers a relevant event such as adding, creating, or updating a message, we'll broadcast a message in the pubsub that causes other LiveView processes to update their chat feed.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nP[Publisher]\nPS[(PubSub)]\nS1[LiveView Subscriber]\nS2[LiveView Subscriber]\nS3[LiveView Subscriber]\n\nP --broadcast event to ''messages'' topic--> PS\nPS --broadcast event--> S1\nPS --broadcast event--> S2\nPS --broadcast event--> S3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThere are three main steps to implement a simple PubSub system.\n\n1. Use [Endpoint.subscribe/2](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#c:subscribe/2) which calls [Phoenix.PubSuber.subscribe/3](https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html#subscribe/3) to subscribe the relevant processes to a topic.\n2. Broadcast a message to all subscribers of a topic using a broadcast function such as [Endpoint.broadcast/3](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#c:broadcast/3) or [Endpoint.broadcast_from/4](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#c:broadcast_from/4) (does not send a message to the caller)\n3. Handle the broadcasted message in the subscriber processes with a [handle_info/2](https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2) callback.\n\n## Subscribe\n\nWe display the list of messages on the `MessageLive.Index` LiveView. We're going to subscribe every mounted `MessageLive.Index` LiveView to a `\"messages\"` topic.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\ndef mount(_params, session, socket) do\n  if connected?(socket) do\n    PicChatWeb.Endpoint.subscribe(\"messages\")\n  end\n\n  {:ok, stream(socket, :messages, Chat.list_messages())}\nend\n```\n\nNow our subscribed `MessageLive.Index` LiveView processes will receive any messages broadcast to the `\"messages\"` topic.\n\n## Broadcast\n\nWe want to broadcast messages to our PubSub system whenever an event occurs on the `\"messages\"` topic that is relevant to providing real-time updates. We'll broadcast a message anytime we create, update, or delete a `Message` record.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Save Message\n\nBroadcast a `\"new\"` or `\"edit\"` event on the `\"messages\"` topic whenever we create or update a new message.\n\nTo save time so that the broadcasted message doesn't have to go through the PubSub system, we've opted to use `broadcast_from/4` instead of `broadcast/3` and let the sender notify the parent LiveView of the saved message directly.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Form_component.ex\ndefp save_message(socket, :edit, message_params) do\n  case Chat.update_message(socket.assigns.message, message_params) do\n    {:ok, message} ->\n      notify_parent({:edit, message})\n      PicChatWeb.Endpoint.broadcast_from(self(), \"messages\", \"edit\", message)\n\n      {:noreply,\n        socket\n        |> put_flash(:info, \"Message updated successfully\")\n        |> push_patch(to: socket.assigns.patch)}\n\n    {:error, %Ecto.Changeset{} = changeset} ->\n      {:noreply, assign_form(socket, changeset)}\n  end\nend\n\ndefp save_message(socket, :new, message_params) do\n  case Chat.create_message(message_params) do\n    {:ok, message} ->\n      notify_parent({:new, message})\n      PicChatWeb.Endpoint.broadcast_from(self(), \"messages\", \"new\", message)\n\n      {:noreply,\n        socket\n        |> put_flash(:info, \"Message created successfully\")\n        |> push_patch(to: socket.assigns.patch)}\n\n    {:error, %Ecto.Changeset{} = changeset} ->\n      {:noreply, assign_form(socket, changeset)}\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Delete\n\nBroadcast a `\"delete\"` event on the `\"messages\"` topic when we create or update a new message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\ndef handle_event(\"delete\", %{\"id\" => id}, socket) do\n  message = Chat.get_message!(id)\n\n  if message.user_id == socket.assigns.current_user.id do\n    {:ok, _} = Chat.delete_message(message)\n    PicChatWeb.Endpoint.broadcast_from(self(), \"messages\", \"delete\", message)\n    {:noreply, stream_delete(socket, :messages, message)}\n  else\n    {:noreply,\n      Phoenix.LiveView.put_flash(\n        socket,\n        :error,\n        \"You are not authorized to delete this message.\"\n      )}\n  end\nend\n```\n\n## Handle Received Event\n\nThe `handle_info/2` callback in subscribed LiveView processes will receive a [Phoenix.Socket.Broadcast](https://hexdocs.pm/phoenix/Phoenix.Socket.Broadcast.html) broadcast struct.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%Phoenix.Socket.Broadcast{\n  topic: \"messages\",\n  event: \"new\",\n  payload: %PicChat.Chat.Message{\n    __meta__: #Ecto.Schema.Metadata<:loaded, \"messages\">,\n    id: 4,\n    content: \"some content\",\n    picture: nil,\n    user_id: 1,\n    user: #Ecto.Association.NotLoaded<association :user is not loaded>,\n    inserted_at: ~N[2023-05-28 21:26:18],\n    updated_at: ~N[2023-05-28 21:26:18]\n  }\n}\n```\n\nWe can pattern match on this struct to create event handlers. Add `handle_info/2` callback functions for creating, updating, and deleting a `Message` in the stream of messages.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\ndef handle_info(%Phoenix.Socket.Broadcast{topic: \"messages\", event: \"new\", payload: message}, socket) do\n  {:noreply, stream_insert(socket, :messages, message, at: 0)}\nend\n\ndef handle_info(%Phoenix.Socket.Broadcast{topic: \"messages\", event: \"edit\", payload: message}, socket) do\n  {:noreply, stream_insert(socket, :messages, message)}\nend\n\ndef handle_info(%Phoenix.Socket.Broadcast{topic: \"messages\", event: \"delete\", payload: message}, socket) do\n  {:noreply, stream_delete(socket, :messages, message)}\nend\n```\n\n## Testing PubSub\n\nWe can test PubSub interactions by mounting multiple LiveViews and triggering events.\n\nHere are some tests we can add to `message_live_test.ex` to ensure the create, update, and delete PubSub functionality works as expected.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndescribe \"PubSub\" do\n  test \"creating a message updates subscribers\", %{conn: conn} do\n    user = user_fixture()\n    conn = log_in_user(conn, user)\n    {:ok, subscriber_live, _html} = live(conn, ~p\"/messages\")\n    {:ok, publisher_live, _html} = live(conn, ~p\"/messages/new\")\n\n    assert publisher_live\n            |> form(\"#message-form\", message: @create_attrs)\n            |> render_submit()\n\n    assert render(subscriber_live) =~ \"some content\"\n  end\n\n  test \"updating a message updates subscribers\", %{conn: conn} do\n    user = user_fixture()\n    conn = log_in_user(conn, user)\n    message = message_fixture(user_id: user.id)\n    {:ok, subscriber_live, _html} = live(conn, ~p\"/messages\")\n    {:ok, publisher_live, _html} = live(conn, ~p\"/messages/#{message}/edit\")\n\n    assert publisher_live\n            |> form(\"#message-form\", message: @update_attrs)\n            |> render_submit()\n\n    assert render(subscriber_live) =~ \"some updated content\"\n  end\n\n  test \"deleting a message updates subscribers\", %{conn: conn} do\n    user = user_fixture()\n    conn = log_in_user(conn, user)\n    message = message_fixture(user_id: user.id)\n    {:ok, subscriber_live, _html} = live(conn, ~p\"/messages\")\n    {:ok, publisher_live, _html} = live(conn, ~p\"/messages/#{message}/edit\")\n\n    assert publisher_live |> element(\"#messages-#{message.id} a\", \"Delete\") |> render_click()\n\n    refute render(subscriber_live) =~ \"some content\"\n  end\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Schools: LiveView with PubSub](https://elixirschool.com/blog/live-view-with-pub-sub/)\n* [Elixir Schools: LiveView with Channels](https://elixirschool.com/blog/live-view-with-channels)\n* [HexDocs: Phoenix Channels](https://hexdocs.pm/phoenix/channels.html#overview)\n* [HexDocs: Phoenix PubSub](https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html#content)\n* [HexDocs: Phoenix Endpoint](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish PicChat: PubSub reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: PubSub\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_image_upload.livemd\">PicChat: Image Upload</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_infinite_scroll.livemd\">PicChat: Pagination</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task37-reading-phoenix_authentication", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"Route%20specificity%20error.png\",\"type\":\"attachment\"}]} -->\n\n# Phoenix Authentication\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Authentication\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_comments.livemd\">Blog: Comments</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_authentication.livemd\">Blog: Authentication</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we scaffold an authorization system in Phoenix?\n* How do we protect a route from unauthorized access?\n\n## Overview\n\nThis is a companion reading for the [Blog: Authentication](../exercises/blog_authentication.livemd) exercise. This lesson is an overview of how to add authentication and authorization into a Phoenix application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Authentication\n\nAuthentication is the process of verifying the identity of a user or system. It typically involves providing credentials, such as a username and password or a digital certificate, and validating them against a trusted source.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Authorization\n\nAuthorization is the process of determining whether a user or system is allowed to perform a specific action or access a particular resource. It involves verifying the identity and permissions of the requester and comparing them against the access control policies of the system.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Ownership-based Authorization\n\nSome resources should only be managed by the user or groups that own them. For example, in a blog application, a user should probably only be able to edit and delete their own blog posts.\n\nTypically we prove ownership by associating the resource with the user. For example, a user would **have many** blog posts in a **one to many** relationship.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Role-based Authorization\n\nSome operations can be allowed based on user roles. For example, an **admin** user can typically perform all actions that require authorization.\n\nIf you're familiar with the app Discord, then you're likely very familiar with the role-based authorization system they use to manage permissions in specific voice and text channels.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Password Hashing\n\nPasswords are encrypted in databases to ensure the even if there were a database leak, passwords would be encrypted.\n\nBy default, the Phoenix authentication system uses [bcrypt_elixir](https://hex.pm/packages/bcrypt_elixir) to hash passwords.\n\nComputerphile has a great overview video on hashing algorithms and security.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=b4b8ktEV4Bg&ab_channel=Computerphile\\\")\",\"title\":\"Hashing Algorithms and Security - Computerphile\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=b4b8ktEV4Bg&ab_channel=Computerphile\")\n```\n\n### User Tokens\n\nThe Phoenix authentication system uses user tokens to identify users. This avoids storing confidential user information on the client, as that is not secure.\n\nThe client sends the token whenever it makes a request, and the server can use this token to identify and retrieve the user from the database. Tokens typically expire after a certain amount of time for security purposes.\n\n## Generators\n\nPhoenix provides the following [mix phx.gen.auth](https://hexdocs.pm/phoenix/mix_phx_gen_auth.html) command to generate all of the scaffolding we need for authentication in our system.\n\n```\nmix phx.gen.auth Accounts User users\n```\n\nThe auth system can be generated using controllers, or LiveView. For now, we'll select **n** when using the generator to use controllers.\n\n```\nAn authentication system can be created in two different ways:\n- Using Phoenix.LiveView (default)\n- Using Phoenix.Controller only\nDo you want to create a LiveView based authentication system? [Yn] n\n```\n\nThe generator creates a large number of files, here are a few you should familiarize yourself with:\n\n* app\n  * `accounts.ex`: The context for managing user accounts.\n  * `user.ex`: The user schema.\n  * `user_token.ex`: The user token schema.\n  * `user_notifier.ex`: The mailer module for user emails such as account confirmation and resetting passwords.\n* app web\n  * `user_confirmation_controller.ex`: controller actions for confirming a user account\n  * `user_registration_controller.ex`: controller actions for user sign up.\n  * `user_reset_password_controller.ex`: controller actions for resetting a user's password.\n  * `user_session_controller.ex`: controller actions for user log in and log out.\n  * `user_settings_controller.ex`: controller actions for managing user settings.\n  * `user_auth.ex`: Useful functions for managing users on the web side of the application. For example, `require_authenticated_user/2` ensures a user is signed in before accessing some resource.\n* tests\n  * `accounts_fixtures.ex`: fixture for creating users in tests.\n  * the `register_and_log_in_user/1` and `log_in_user/2` function in the existing `conn_case.ex` file.\n\n## Modifying Users\n\nThe Phoenix generator simply generates the scaffolding for an authentication system. We still own this part of the application and are responsible for maintaining security in our application.\n\nWe can also make changes to users, such as adding fields to the users table. For example, we could write a migration that adds a `username` field or other user information to the `users` table.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.AddUsernameToUsers do\n  use Ecto.Migration\n\n  def change do\n    alter table(:users) do\n      add :username, :string, null: false\n    end\n  end\nend\n```\n\n## Associating Resources With A User\n\nIn order to associate a resource with a user, it needs to reference a user in the database through a foreign key.\n\n```mermaid\nerDiagram\n\nPost {\n  string title\n  text content\n  date published_on\n  boolean visibility\n  id user_id\n}\n\nUser {\n  string username\n  string email\n  string password\n  string hashed_password\n  naive_datetime confirmed_at\n}\n\nUser ||--O{ Post : \"owns\"\n```\n\nHere's an example migration that would add a `user_id` to an existing `posts` table.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Repo.Migrations.AddUserIdToPosts do\n  use Ecto.Migration\n\n  def change do\n    alter table(:posts) do\n      add :user_id, references(:users, on_delete: :delete_all), null: false\n    end\n  end\nend\n```\n\nSchemas should reflect any changes made in the database.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.Posts.Post do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"posts\" do\n    field :content, :string\n    field :title, :string\n    field :visible, :boolean, default: true\n    field :published_on, :utc_datetime\n    has_many :comments, Blog.Comments.Comment\n    belongs_to :user, Blog.Accounts.User\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(post, attrs) do\n    post\n    |> cast(attrs, [:title, :content, :visible, :published_on, :user_id])\n    |> validate_required([:title, :content, :visible, :user_id])\n    |> unique_constraint(:title)\n    |> foreign_key_constraint(:user_id)\n  end\nend\n\n```\n\n## Fixing Broken Tests\n\nTypically making a required field or association in a database table breaks any tests that create those records without the field or association.\n\nTo fix tests,  it's necessary to provide the required field or association whenever creating the resource.\n\nHere's an example of a test that creates a post with an associated user.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"delete_post/1 deletes the post\" do\n  user = user_fixture()\n  post = post_fixture(user_id: user.id)\n  assert {:ok, %Post{}} = Posts.delete_post(post)\n  assert_raise Ecto.NoResultsError, fn -> Posts.get_post!(post.id) end\nend\n```\n\nWhenever making impactful changes to schema's/migrations, it's recommended to make the change when there are no other changes in git. It's also often best to fix all tests before moving on to other features to avoid potential bugs and unnecessary complexity.\n\n## Protecting Controller Actions\n\nThe generated `UserAuth` module contains two useful plugs for protecting routes. The `require_authenticated_user/2` plug ensures that a user must be signed in to access the route, and the `redirect_if_user_is_authenticated/2` plug does the opposite.\n\nWe can use these plugs when we want to protect certain routes.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requiring Authenticated User\n\nHere's an example of protecting post controller actions that only an authenticated user should be able to do.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nscope \"/\", BlogWeb do\n  pipe_through [:browser, :require_authenticated_user]\n\n  resources \"/posts\", PostController, only: [:new, :edit, :update, :create, :delete]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requiring User Owns Resource\n\nSometimes we want to protect a route based on whether or not a user owns the particular resource. For example, we probably only want to let users edit their own posts.\n\nThere are multiple ways to require that a user owns a resource. Here are a few options:\n\n* Individually protect the specific controller actions (handle auth for one action.)\n* Holistically protect several controller actions (handle auth for an entire controller.)\n* Create a custom plug and use it in the router (handle auth for multiple controllers.)\n\nHere's an example of creating a plug function in a controller that can be selectively applied to multiple routes.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Typically Goes Above Controller Actions And Below Imports/aliases\nplug :require_user_owns_post when action in [:edit, :update, :delete]\n\n# Typically Goes At The Bottom Of The File\ndefp require_user_owns_post(conn, _params) do\n  post_id = String.to_integer(conn.path_params[\"id\"])\n  post = Posts.get_post!(post_id)\n\n  if conn.assigns[:current_user].id == post.user_id do\n    conn\n  else\n    conn\n    |> put_flash(:error, \"You can only edit or delete your own posts.\")\n    |> redirect(to: ~p\"/posts/#{post_id}\")\n    |> halt()\n  end\nend\n```\n\nAlternatively, if you wanted to have different error messages for each action, you could include this authorization code in the action itself. This results in more code as each controller action handles it's own authorization, but it allows for a more specific response.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef delete(conn, %{\"id\" => id}) do\n  if conn.assigns[:current_user].id == post.user_id do\n    post = Posts.get_post!(id)\n    {:ok, _post} = Posts.delete_post(post)\n\n    conn\n    |> put_flash(:info, \"Post deleted successfully.\")\n    |> redirect(to: ~p\"/posts\")\n  else\n    conn\n    |> put_flash(:error, \"You can only delete your own posts.\")\n    |> redirect(to: ~p\"/posts/#{id}\")\n    |> halt()\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Testing Flash Messages\n\nPhoenix 1.7 deprecated the [get_flash/2](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#get_flash/2) in favor of [Phoenix.Flash.get/2](https://hexdocs.pm/phoenix/Phoenix.Flash.html#get/2). We can use this function in tests if we want to write assertions on flash messages.\n\nHere's an example of testing that a user cannot edit a resource that doesn't belong to them.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"a user cannot edit another user's post\", %{conn: conn} do\n  post_user = user_fixture()\n  other_user = user_fixture()\n  post = post_fixture(user_id: post_user.id)\n  conn = conn |> log_in_user(other_user) |> get(~p\"/posts/#{post}/edit\")\n  assert Phoenix.Flash.get(conn.assigns.flash, :error) =~ \"You can only edit or delete your own posts.\"\n  assert redirected_to(conn) == ~p\"/posts/#{post}\"\nend\n```\n\n## Route Specificity\n\nWhen we start splitting up routes into different scopes, it's possible for routes to conflict.\n\nFor example, the following two routes conflict because the wildcard `:id` would also handle the value `\"new\"`, so the second route would never trigger.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nget \"posts/:id\", PostController, :show\nget \"posts/new\", PostController, :new\n```\n\nIt's just like having a case statement where the first clause always matches.\n\n```elixir\nurl = \"/posts/new\"\n\ncase url do\n  \"/posts\" <> id -> \"show route\"\n  # this case clause will never match.\n  \"/posts/new\" -> \"new route\"\nend\n```\n\nYou might encounter weird looking errors like the following if you run into this issue.\n\n![](files/Route%20specificity%20error.png)\n\n## Accessing The Current User In The Assigns\n\nBy default, if the user is signed in, then the `:current_user` is available in the `conn.assigns`. This is set up by the `:fetch_current_user` plug generated in the router.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\npipeline :browser do\n  plug :accepts, [\"html\"]\n  plug :fetch_session\n  plug :fetch_live_flash\n  plug :put_root_layout, {BlogWeb.Layouts, :root}\n  plug :protect_from_forgery\n  plug :put_secure_browser_headers\n  plug :fetch_current_user\nend\n```\n\nWe can use the `@current_user` value in any heex template, or provide the `@current_user` to other function components if necessary.\n\nFor example, we can see the `@current_user`'s email is displayed in `root.html.heex` by default.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<li class=\"text-[0.8125rem] leading-6 text-zinc-900\">\n  <%= @current_user.email %>\n</li>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Including The User Association In Forms\n\nThe `@current_user` stored in the `conn.assigns` is important if you need to include the current user in a form. Here's an example of passing the user into a form component.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.header>\n  New Post\n  <:subtitle>Use this form to manage post records in your database.</:subtitle>\n</.header>\n\n<.post_form changeset={@changeset} action={~p\"/posts\"} current_user={@current_user} />\n\n<.back navigate={~p\"/posts\"}>Back to posts</.back>\n```\n\nThen the form component can send the user's id as part of an HTTP request in body params, URL params, or query params. Here's an example using body params.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={@changeset} action={@action}>\n  <.error :if={@changeset.action}>\n    Oops, something went wrong! Please check the errors below.\n  </.error>\n  <.input field={f[:user_id]} type=\"hidden\" value={@current_user.id} />\n  <.input field={f[:title]} type=\"text\" label=\"Title\" />\n  <.input field={f[:content]} type=\"text\" label=\"Content\" />\n  <.input field={f[:published_on]} type=\"datetime-local\" label=\"Publish On\" value={DateTime.utc_now()} />\n  <.input field={f[:visible]} type=\"checkbox\" label=\"Visible\" />\n  <:actions>\n    <.button>Save Post</.button>\n  </:actions>\n</.simple_form>\n```\n\nHowever, be mindful that accessing `@current_user` directly requires that a user must be signed in. If you are on a page where a user doesn't need to be signed in, then you can access the user safely using the access syntax.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nassigns[:current_user]\n```\n\n## Signing In A User In Tests\n\nSome tests may require that you sign in a user. Fortunately, the `ConnCase` module contains a generated `log_in_user/2` function we can use to resolve these issues.\n\nHere's an example of logging in a user for a test.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"renders form for editing chosen post\", %{conn: conn} do\n  user = user_fixture()\n  post = post_fixture(user_id: user.id)\n  # log in the user\n  conn = conn |> log_in_user(user) |> get(~p\"/posts/#{post}/edit\")\n  assert html_response(conn, 200) =~ \"Edit Post\"\nend\n```\n\n## Hiding Elements\n\nSome elements require authorization or authentication to display on the page.\n\nHere's an example of hiding an element based on if there is a current user.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= if assigns[:current_user] do %>\n  Only Authenticated Users Can See This\n<% end %>\n```\n\nHere's an example of hiding an element based on if the user owns a particular resource, in this case a `comment`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# It's Important To Verify A Map Exists Before Accessing Fields Such As `id`.\n# Otherwise If The Assigns[:current_user] Map Is `nil`, Accessing `id` Of Nil\n# Would Cause The Page To Crash.\n<%= if assigns[:current_user] && comment.user_id == assigns[:current_user].id do %>\n  <.link href={~p\"/comments/#{comment.id}\"} method=\"delete\" data-confirm=\"Are you sure?\">\n    Delete\n  </.link>\n<% end %>\n```\n\n## Preloading Nested Associations\n\n[Ecto.Query.preload/3](https://hexdocs.pm/ecto/Ecto.Query.html#preload/3) and [Ecto.Repo.preload/3](https://hexdocs.pm/ecto/Ecto.Repo.html#c:preload/3) can preload associated data if the schema includes a [has_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#has_many/3) or [belongs_to/3](https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3) association.\n\nIt's also possible to preload nested associations by providing a keyword list to the preload function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nquery = from p in Post, preload: [:user, comments: [:user]]\n```\n\nInstead of providing an atom, we can even provide another query modify how the associated results are preloaded.\n\nHere's an example that preloads post comments and sorts them by newest -> oldest. The comments themselves also preload their associated user.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncomments_query = from c in Comment, \n  order_by: [desc: c.inserted_at, desc: c.id],\n  preload: :user\n\npost_query = from p in Post, preload: [:user, comments: ^comments_query]\n\nRepo.get!(post_query, id)\n```\n\n## Further Reading\n\nWe've provided an overview of basic route-based and ownership-based authentication.\nHowever, authorization is a massive topic far beyond the scope of this course.\n\nThere is no single authorization solution, and an effective authorization implementation depends on the application's needs. Therefore, always consider who should be able to access application resources and how to protect them effectively.\n\nConsider the following resources as you continue to learn more about authorization and authentication:\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n* [Authorization in Phoenix web applications using Role Based Access Control (RBAC)](https://www.youtube.com/watch?v=6TlcVk-1Tpc)\n* [HexDocs: mix phx.gen.auth](https://hexdocs.pm/phoenix/mix_phx_gen_auth.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phoenix Authentication reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Authentication\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_comments.livemd\">Blog: Comments</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_authentication.livemd\">Blog: Authentication</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task38-reading-supervisors", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Supervisors\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Supervisors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/traffic_light_server.livemd\">Traffic Light Server</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/supervisor_drills.livemd\">Supervisor Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\n* What kinds of problems do supervisors solve?\n* How do we use supervisors to make our application fault-tolerant?\n* Why might we use each supervisor restart strategy (`:one_for_one`, `:one_for_all`, `:rest_for_one`)?\n\n## Fault Tolerance\n\nElixir and [Open Telecom Platform (OTP)](https://en.wikipedia.org/wiki/Open_Telecom_Platform) are fantastic for building highly concurrent and fault-tolerant systems which can handle runtime errors.\n\nErrors happen. We often implement specific error handling for the errors we expect. However, it's impossible to anticipate every possible error. For unexpected errors, Elixir follows a **let it crash** philosophy.\n\nTo achieve a fault-tolerant system in Elixir, we leverage concurrency and isolate our system into different processes. These processes share no memory, and a crash in one process cannot crash another.\n\nTherefore, we can let a process crash, and it will not affect the rest of our system.\n\n> it\u2019s somewhat surprising that the core tool for error handling is concurrency.\n> In the BEAM world, two concurrent processes are\n> completely separated; they share no memory, and a crash in one process can\u2019t by default compromise the execution flow of another.\n> Process isolation allows you to confine the negative effects of an error to a single process or a small group of related processes,\n> which keeps most of the system functioning normally.\n> \n> * Sasa Juric, [Elixir in Action](https://www.manning.com/books/elixir-in-action-second-edition).\n\nFor example, We can spawn a process and raise an error. Unless we explicitly link the process with `spawn_link/1`\nThe process will die and leave the parent process unaffected.\n\n```elixir\npid =\n  spawn(fn ->\n    raise \"error\"\n  end)\n\n# Allow The Process Time To Crash\nProcess.sleep(100)\n\n\"I still run.\"\n```\n\nWhen a linked process crashes, it will also crashed the process that spawned it. Uncomment the code below, and you'll see it crashes the current Livebook process. Re-comment the code when finished.\n\n```elixir\n# spawn_link(fn -> Raise \"error\" End)\n```\n\nThat means if we start a [GenServer](https://hexdocs.pm/elixir/GenServer.html) (or other process) **unsupervised** it will raise an error if it crashes.\n\n```elixir\ndefmodule UnsupervisedWorker do\n  use GenServer\n\n  def init(state) do\n    {:ok, state}\n  end\n\n  def handle_info(:crash, _state) do\n    raise \"crash!\"\n  end\nend\n```\n\nUncomment and run the following code to see it crashes the current Livebook process, then re-comment the code.\n\n```elixir\n# {:ok, pid} = GenServer.start_link(UnsupervisedWorker, [])\n# Process.send(pid, :crash, [])\n```\n\nThe same is true if we manually exit a process using [Process.exit/2](https://hexdocs.pm/elixir/Process.html#exit/2) with the `:exit` reason. Uncomment and run the following code to see it crashes the current Livebook process, then re-comment the code.\n\n```elixir\n# {:ok, pid} = GenServer.start_link(UnsupervisedWorker, [])\n# Process.exit(pid, :exit)\n```\n\nIf you would like to learn more about fault tolerance and error handling, Joe Armstrong created an incredible video on the subject.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=ZOsvgwOR6G0&ab_channel=KentComputing\\\")\",\"title\":\"Erlang Master Class 2: Video 3 - Handling errors\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=ZOsvgwOR6G0&ab_channel=KentComputing\")\n```\n\n## Supervisors\n\nInstead of crashing the parent process, we can use `Supervisors` to monitor processes and restart them when they die.\n\nThe term restart is a bit misleading. To be clear, we cannot restart a process. Restart in this case means that we kill the process and start a new one in its place. However, it's conceptually easier to think of it as restarting.\n\nWhy would we want to restart the process? Well, most technical issues are the result of state. Our system gets into a bad state and cannot recover. Turning a system on and off again clears the state and often resolves the issue. Using a [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) is like adding an automatic on/off switch to your application.\n\nA [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) monitors one or more child processes. We generally refer to these processes as **workers**.\nThe [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) can use different strategies for restarting its child workers. The `:one_for_one` strategy individually restarts any worker that dies.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nS[Supervisor]\nW1[Worker]\nW2[Worker]\nW3[Worker]\n\nS --> W1\nS --> W2\nS --> W3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere, we define a simple `Worker` process which we'll start under a supervisor.\n\n```elixir\ndefmodule Worker do\n  use GenServer\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [], [])\n  end\n\n  def init(state) do\n    {:ok, state}\n  end\nend\n```\n\nEvery supervisor is also a process. The [Supervisor.start_link/2](https://hexdocs.pm/elixir/Supervisor.html#start_link/2) function accepts a list of child processes and starts the supervisor process. We provide each child as a map with an `:id` and a `:start` signature.\n\n```elixir\nchildren = [\n  %{\n    id: :worker1,\n    start: {Worker, :start_link, [1]}\n  },\n  %{\n    id: :worker2,\n    start: {Worker, :start_link, [2]}\n  },\n  %{\n    id: :worker3,\n    start: {Worker, :start_link, [3]}\n  }\n]\n\n{:ok, supervisor_pid} = Supervisor.start_link(children, strategy: :one_for_one)\n```\n\n### Your Turn\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere, we've used the livebook-exclusive [Kino.Process.sup_tree/2](https://hexdocs.pm/kino/Kino.Process.html#sup_tree/2) function to create a visualization of the above supervision tree.\n\n```elixir\nKino.Process.sup_tree(supervisor_pid)\n```\n\nWhen we kill one of the processes under the supervision tree, it will be restarted. For demonstration purposes only, you can use the [:c.pid/3](https://www.erlang.org/doc/man/c.html#pid-3) function from erlang to manually create the `pid` from the diagram above where `727` should be a pid from the diagram above.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\npid = :c.pid(0, 727, 0)\n```\n\nThen, kill the process using [Process.exit/2](https://hexdocs.pm/elixir/Process.html#exit/2).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nProcess.exit(pid, :exit)\n```\n\nRe-evaluate the diagram above and you should see a new `Worker` process started with a different pid. Repeat this process to kill each process under the supervisor and see them restarted.\n\n```elixir\n\n```\n\n## Restart Strategies\n\nSupervisors can have different restart strategies that change the behavior of how we handle restarting child processes when one of them dies.\n\nWe've seen the above `:one_for_one` strategy. This is the most common strategy, where we restart the child process that died under the supervisor.\n\nHowever, sometimes we want different restart strategies such as `:one_for_all` and `:rest_for_one`.\n\n### One-For-One\n\nRestart only the worker that crashed.\n\n```mermaid\nflowchart TD\n    Supervisor\n    Supervisor --> P1\n    Supervisor --> P2\n    Supervisor --> P3\n    Supervisor --> ..\n    Supervisor --> Pn\n\n    classDef crashed fill:#fe8888;\n    classDef restarted stroke:#0cac08,stroke-width:4px\n\n    class P2 crashed\n    class P2 restarted\n\n```\n\nIn the diagram above, only P2 crashed, so only P2 will be restarted by the supervisor.\n\n### One-For-All\n\nRestart all of the child workers.\n\n```mermaid\nflowchart TD\n    Supervisor\n    Supervisor --> P1\n    Supervisor --> P2\n    Supervisor --> P3\n    Supervisor --> ..\n    Supervisor --> Pn\n\n    classDef crashed fill:#fe8888;\n    classDef terminated fill:#fbab04;\n    classDef restarted stroke:#0cac08,stroke-width:4px\n\n    class P2 crashed\n    class P1,P3,..,Pn terminated\n    class P1,P2,P3,..,Pn restarted\n```\n\nP2 crashed, which led to all the other child processes to be terminated, then all the child processes are restarted.\n\n### Rest-For-One\n\nRestart child workers in order after the crashed process.\n\n```mermaid\nflowchart TD\n    Supervisor\n    Supervisor --> P1\n    Supervisor --> P2\n    Supervisor --> P3\n    Supervisor --> ..\n    Supervisor --> Pn\n\n    classDef crashed fill:#fe8888;\n    classDef terminated fill:#fbab04;\n    classDef restarted stroke:#0cac08,stroke-width:4px\n\n    class P2 crashed\n    class P3,..,Pn terminated\n    class P2,P3,..,Pn restarted\n```\n\nP2 crashed, the child processes after it in the start order are terminated, then P2 and the other terminated child processes are restarted.\n\n## Restart Strategy Examples\n\nTo better understand how we can use a supervisor with different restart strategies, we're going to supervise multiple `Bomb` processes that will crash after a specified amount of time.\n\nHere, we've created a `Bomb` process that will send itself a message to cause it to crash after a specified `:bomb_time`.\n\n```elixir\ndefmodule Bomb do\n  use GenServer\n\n  def start_link(opts) do\n    GenServer.start_link(__MODULE__, opts)\n  end\n\n  @impl true\n  def init(opts) do\n    bomb_time = Keyword.get(opts, :bomb_time, 2000)\n    name = Keyword.get(opts, :name, 2000)\n\n    Process.send_after(self(), :explode, bomb_time)\n    {:ok, name}\n  end\n\n  @impl true\n  def handle_info(:explode, name) do\n    raise \"#{name} Exploded!\"\n  end\nend\n```\n\nEach `Bomb` will exist for a specified time and then crash (explode).\n\n* `Bomb 1` will explode after 2 seconds.\n* `Bomb 2` will explode after 3 seconds.\n* `Bomb 3` will explode after 5 seconds.\n\nWe'll reuse these same children in all of our examples.\n\n```elixir\nchildren = [\n  %{\n    id: :bomb1,\n    start: {Bomb, :start_link, [[name: \"Bomb 1\", bomb_time: 2000]]}\n  },\n  %{\n    id: :bomb2,\n    start: {Bomb, :start_link, [[name: \"Bomb 2\", bomb_time: 3000]]}\n  },\n  %{\n    id: :bomb3,\n    start: {Bomb, :start_link, [[name: \"Bomb 3\", bomb_time: 5000]]}\n  }\n]\n```\n\n### One For One\n\nWe'll start the three bombs using the `:one_for_one` strategy.\n\nFor the sake of example, we've increased `:max_restarts` to increase the limit of three crashes per five seconds to five crashes per five seconds.\n\nYou can go to [Supervisor Options](https://hexdocs.pm/elixir/Supervisor.html#init/2-options)\n on HexDocs for a full list of configuration options.\n\nEach bomb restarts individually without affecting the others,\nso the timeline of crashes should be:\n\n* 2 seconds: `Bomb 1` crashes.\n* 3 seconds: `Bomb 2` crashes.\n* 4 seconds: `Bomb 1` crashes.\n* 5 seconds: `Bomb 3` crashes.\n\nUncomment and run the cell below to see the timeline of crashes, then re-comment it.\n\n```elixir\n# {:ok, supervisor_pid} = Supervisor.start_link(children, strategy: :one_for_one, max_restarts: 5)\n```\n\n### One For All\n\nIf we change the restart strategy to `:one_for_all`, then all processes will be\nterminated and restarted when a single process crashes.\n\nSo the timeline of crashes will be:\n\n* 2 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 4 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 6 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 8 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 10 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n\nNotice that `Bomb2` and `Bomb3` will never explode because their timers restart.\n\nUncomment the line below to observe the timeline of crashes, then re-comment it.\n\n```elixir\n# {:ok, supervisor_pid} = Supervisor.start_link(children, strategy: :one_for_all, max_restarts: 5)\n```\n\n### Rest For One\n\nRest for one works like a row of dominoes, where only children defined after the crashed process will be restarted.\n\nIf we change the restart strategy to `:rest_for_one`, the processes will restart any\nprocesses ordered after them in the supervisor.\n\nAt first, we won't notice any change from the `:one_for_all` strategy. The\ntimeline will still be:\n\n* 2 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 4 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 6 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 8 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n* 10 seconds: `Bomb 1` crashes (`Bomb 2` and `Bomb 3` restarted)\n\nUncomment the line below to observe the timeline of crashes, then re-comment it.\n\n```elixir\n# {:ok, supervisor_pid} = Supervisor.start_link(children, strategy: :rest_for_one, max_restarts: 5)\n```\n\nHowever, if we change the order of children in the supervisor, only children after the crashed\nprocess will restart.\n\n```elixir\nchildren = [\n  %{\n    id: :bomb3,\n    start: {Bomb, :start_link, [[name: \"Bomb 3\", bomb_time: 5000]]}\n  },\n  %{\n    id: :bomb1,\n    start: {Bomb, :start_link, [[name: \"Bomb 1\", bomb_time: 2000]]}\n  },\n  %{\n    id: :bomb2,\n    start: {Bomb, :start_link, [[name: \"Bomb 2\", bomb_time: 3000]]}\n  }\n]\n```\n\nSo the timeline of crashes would be:\n\n* 2 seconds: `Bomb1` crashes (`Bomb2` restarted)\n* 4 seconds: `Bomb1` crashes (`Bomb2` restarted)\n* 5 seconds: `Bomb3` crashes (`Bomb1` and `Bomb2` restarted)\n* 7 seconds: `Bomb1` crashes (`Bomb2` restarted)\n* 9 seconds: `Bomb1` crashes (`Bomb2` restarted)\n\n```elixir\n# {:ok, Supervisor_pid} = Supervisor.start_link(children, Strategy: :rest_for_one, Max_restarts: 5)\n```\n\n### Your Turn\n\nStart **four** `Bomb` processes under a supervisor with different bomb times. Try each restart strategy `:one_for_one`, `one_for_all`, and `:rest_for_one`. Predict the crash timeline then evaluate your code. Did the result match your prediction?\n\n```elixir\n\n```\n\n## Syntax Sugar\n\nInstead of providing a map with the `:id` and `:start` keys, we can instead provide the child as a tuple. The name of the module will also be the `:id`, and the second value will be the argument passed to `start_link/1`.\n\n```elixir\nchildren = [\n  {Bomb, [name: \"Syntax Sugar Bomb\", bomb_time: 1000]}\n]\n```\n\nUncomment the following code to see the crash timeline, then re-comment it.\n\n```elixir\n# Supervisor.start_link(children, strategy: :one_for_one)\n```\n\n## Further Reading\n\n* [HexDocs: Supervisor](https://hexdocs.pm/elixir/Supervisor.html#init/2-options)\n* [Elixir Schools: Supervisor Strategies](https://elixirschool.com/blog/supervisor-strategies)\n* [Elixir Schools: OTP Supervisors](https://elixirschool.com/en/lessons/advanced/otp_supervisors)\n\n## Supervised Mix Projects\n\nSupervised mix projects use an [Application](https://hexdocs.pm/elixir/Application.html) module that defines application callbacks.\n\nThe application module is configured in `mix.exs` in the `application/0` function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef application do\n  [\n    extra_applications: [:logger],\n    mod: {MyApp.Application, []}\n  ]\nend\n```\n\nThe application module typically lives in the project folder in a `my_app/application.ex` file and contains the logic to start the application. In a supervised application, this module starts a supervision tree.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule MyApp.Application do\n  # See https://hexdocs.pm/elixir/Application.html\n  # for more information on OTP Applications\n  @moduledoc false\n\n  use Application\n\n  @impl true\n  def start(_type, _args) do\n    children = [\n      # Starts a worker by calling: RockPaperScissors.Worker.start_link(arg)\n      # {RockPaperScissors.Worker, arg}\n    ]\n\n    # See https://hexdocs.pm/elixir/Supervisor.html\n    # for other strategies and supported options\n    opts = [strategy: :one_for_one, name: MyApp.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\nend\n```\n\nWe can generate a mix project with all of the above scaffolding using the `--sup` flag, or add it manually to an existing project.\n\n```\nmix new my_app --sup\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Supervisors reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Supervisors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/traffic_light_server.livemd\">Traffic Light Server</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/supervisor_drills.livemd\">Supervisor Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task39-reading-datetime", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Dates And Times\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:timex, \"~> 3.7.11\"},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Dates And Times\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/data_traversal.livemd\">Data Traversal</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/time_converting.livemd\">Time Converting</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we represent dates and times using [Date](https://hexdocs.pm/elixir/Date.html), [Time](https://hexdocs.pm/elixir/Time.html), and [DateTime](https://hexdocs.pm/elixir/DateTime.html) structs?\n* How do we manipulate dates and times using [Date](https://hexdocs.pm/elixir/Date.html), [Time](https://hexdocs.pm/elixir/Time.html), and [DateTime](https://hexdocs.pm/elixir/DateTime.html) module functions?\n* How can we format a date/time for display purposes?\n* How do we get the current time in a particular timezone?\n\n## Overview\n\n### UTC\n\nUTC (Coordinated Universal Time) is a standardized timezone. Typically we store times in UTC and then convert UTC to a desired timezone when necessary. This ensures consistency.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Date\n\nThe [Date](https://hexdocs.pm/elixir/Date.html) module contains functionality related to calendar dates. [Date](https://hexdocs.pm/elixir/Date.html) structs store the `year`, `month`, and `day` and some other related fields.\n\n```elixir\n{:ok, date} = Date.new(2000, 10, 1)\n\nIO.inspect(date.year, label: \"year\")\nIO.inspect(date.month, label: \"month\")\nIO.inspect(date.day, label: \"day\")\n```\n\n### Time\n\nThe [Time](https://hexdocs.pm/elixir/Time.html) module contains functionality related to times. Time structs store `hour`, `minute`, `second`.\n\n```elixir\n{:ok, time} = Time.new(12, 30, 10)\n\nIO.inspect(time.hour, label: \"hour\")\nIO.inspect(time.minute, label: \"minute\")\nIO.inspect(time.second, label: \"second\")\n```\n\n### DateTime\n\n[DateTime](https://hexdocs.pm/elixir/DateTime.html) is a hybrid of [Date](https://hexdocs.pm/elixir/Date.html) and [Time](https://hexdocs.pm/elixir/Time.html), so it can represent both a calendar day, and a time of day. The [DateTime](https://hexdocs.pm/elixir/DateTime.html) module contains functionality related to datetimes. The [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct stores fields to represent both date values, and time values.\n\n```elixir\n{:ok, datetime} = DateTime.new(date, time)\n\nIO.inspect(datetime.year, label: \"year\")\nIO.inspect(datetime.month, label: \"month\")\nIO.inspect(datetime.day, label: \"day\")\nIO.inspect(datetime.hour, label: \"hour\")\nIO.inspect(datetime.minute, label: \"minute\")\nIO.inspect(datetime.second, label: \"second\")\n```\n\n### [Timex](https://github.com/bitwalker/timex)\n\nTimex is a library that makes it easier to manipulate dates/times. It also has timezone support, which Elixir does not provide out of the box.\n\nIf you're planning on frequently manipulating dates and times, or need to use multiple timezones, then Timex might be a useful library to include in future projects.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Sigils\n\nWe can create the [Date](https://hexdocs.pm/elixir/Date.html), [Time](https://hexdocs.pm/elixir/Time.html), and [DateTime](https://hexdocs.pm/elixir/DateTime.html) structs through an alternative [sigil](https://elixir-lang.org/getting-started/sigils.html) syntax using `~D[]`, `~T[]`, and `~U`.\n\n```elixir\ndate = ~D[2000-10-01]\ntime = ~T[12:30:10]\n# The Z Offset Specifies The Timezone Offset. Z Is Zero For UTC.\ndatetime = ~U[2000-10-01 12:30:10Z]\n```\n\n## Timezones\n\nTime and timezones can get very complicated. It's not within the scope of this course to delve\ndeeply into that complexity.\n\nThis reading is intended as a primer to working with dates, times, and timezones. You will\nneed to consult the documentation and do your own research to go deeper.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=-5wpm-gesOY\\\")\",\"title\":\"Time and Timezones\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=-5wpm-gesOY\")\n```\n\nGenerally, we deal with UTC (Coordinated Universal Time) which is a standardized timezone,\nand then convert UTC time to the client's timezone only when necessary.\n\nIf you work the other way around, constantly dealing with many different timezones, it's easy to make\nmistakes converting them from one to another.\n\nThere are many built-in modules for dealing with time, in addition to common external libraries such\nas [Timex](https://github.com/bitwalker/timex).\n\nGenerally, you will most commonly work with the [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct.\n\nA [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct is a snapshot of a date and time in a given timezone.\n\nYou can retrieve the current [DateTime](https://hexdocs.pm/elixir/DateTime.html) with `DateTime.utc_now/0`.\n\n```elixir\nDateTime.utc_now()\n```\n\nYou'll notice a string output similar to `~U[2022-04-27 02:13:29.306614Z]`. This is a sigil.\n\nSigils are a textual representation of data. You can find a full\nexplanation of sigils on the [Elixir Lang Sigil Getting Started Guide](https://elixir-lang.org/getting-started/sigils.html)\n\nSigils use a tilda `~` and a character for the type of data they represent. For example,\nthe date above uses the `~U` sigil to represent a UTC datetime.\n\nUnder the hood, [DateTime](https://hexdocs.pm/elixir/DateTime.html) is a struct, we can see the full data contained in the struct below.\n\n[DateTime](https://hexdocs.pm/elixir/DateTime.html) contains date information such as `:day`, `:month`, and `:year`. [DateTime](https://hexdocs.pm/elixir/DateTime.html) also contains time information such as `:hour`, `:minute`, `:second`\nand even `:microsecond`.\n\n```elixir\nMap.from_struct(DateTime.utc_now())\n```\n\n## DateTime\n\nIn order to understand [DateTime](https://hexdocs.pm/elixir/DateTime.html), we also need to consider two other structs\n[Date](https://hexdocs.pm/elixir/Date.html) and [Time](https://hexdocs.pm/elixir/Time.html).\n\nA [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct is built using a both a [Date](https://hexdocs.pm/elixir/Date.html) and a [Time](https://hexdocs.pm/elixir/Time.html) struct. [Date](https://hexdocs.pm/elixir/Date.html) represents the calendar\ndate with `:year`, `:month`, and `:day`. [Time](https://hexdocs.pm/elixir/Time.html) represents the time of day with `:hour`, `:minute`, and `:second`.\n\n```elixir\n{:ok, date} = Date.new(2022, 6, 24)\n```\n\n```elixir\n{:ok, time} = Time.new(12, 30, 0)\n```\n\n```elixir\n{:ok, datetime} = DateTime.new(date, time)\n```\n\nHere we can see the [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct contains all of the information from the `time` and `date` we created above, as\nwell as utc timezone information.\n\n```elixir\nMap.from_struct(datetime)\n```\n\n[DateTime](https://hexdocs.pm/elixir/DateTime.html) is also timezone aware unlike it's counterpart [NaiveDateTime](https://hexdocs.pm/elixir/NaiveDateTime.html). You can\nsee that [NaiveDateTime](https://hexdocs.pm/elixir/NaiveDateTime.html) is missing timezone information such as `:time_zone` and `:zone_abbr`.\n\n```elixir\n{:ok, naive_datetime} = NaiveDateTime.new(date, time)\n```\n\n```elixir\nMap.from_struct(naive_datetime)\n```\n\nAs a shorter syntax, it's common to use the `~T` sigil for the [Time](https://hexdocs.pm/elixir/Time.html) struct and the `~D` sigil for the [Date](https://hexdocs.pm/elixir/Date.html) struct.\n\n```elixir\n{:ok, datetime} = DateTime.new(~D[2022-06-24], ~T[12:30:00])\n```\n\nYou could also create the [DateTime](https://hexdocs.pm/elixir/DateTime.html) directly using the `~U` sigil.\n\n```elixir\ndatetime = ~U[2022-06-24 12:30:00Z]\n```\n\nUnder the hood, this is still the same [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct.\n\n```elixir\nMap.from_struct(datetime)\n```\n\nLike any struct or map, you can access all of these properties directly using dot notation.\n\n```elixir\ndatetime.year\n```\n\n## Display The Current Date\n\nWhen you want to display time information you can use the [Calendar](https://hexdocs.pm/elixir/Calendar.html) module's `strftime/3` function.\n\n```elixir\nCalendar.strftime(DateTime.utc_now(), \"%y-%m-%d %I:%M:%S %p\")\n```\n\nThe `strftime/3` function accepts a [Date](https://hexdocs.pm/elixir/Date.html), [Time](https://hexdocs.pm/elixir/Time.html), [DateTime](https://hexdocs.pm/elixir/DateTime.html), or [NaiveDateTime](https://hexdocs.pm/elixir/NaiveDateTime.html) and uses the\ninformation in the struct to display a formatted string.\n\nYou can use a percent `%` symbol and then one of the [accepted format options](https://hexdocs.pm/elixir/Calendar.html#strftime/3-accepted-formats)\nto display information from the given struct.\n\nFor example, you could display the current month with `%B`.\n\n```elixir\nCalendar.strftime(DateTime.utc_now(), \"%B\")\n```\n\nBy default, Elixir does not have any timezone data. You'll notice that the current DateTime is\nfor utc, not your local timezone, so the time displayed likely doesn't match your own.\n\n```elixir\nCalendar.strftime(DateTime.utc_now(), \"%c\")\n```\n\nElixir can be configured with timezone data, however it is beyond the scope of this current lesson.\n\nFor more information, you can check out the publicly available Elixir School's lesson on [Working with timezones](https://elixirschool.com/en/lessons/basics/date_time#working-with-timezones-4).\n\n## DateTime Module Functions\n\nThe [DateTime](https://hexdocs.pm/elixir/DateTime.html) module contains functions for timezone aware dates and times.\n\nHere are a few common functions to get you started.\n\n* `add/4` add time to an existing [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct.\n* `compare/2` compare two [DateTime](https://hexdocs.pm/elixir/DateTime.html) structs to see if one is before, after, or the same as another.\n* `diff/3` determine the time between two [DateTime](https://hexdocs.pm/elixir/DateTime.html) structs.\n* `new/4` create a new [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct and return an `{:ok, datetime}` tuple.\n* `new!/4` create a new [DateTime](https://hexdocs.pm/elixir/DateTime.html) struct or raise an error.\n* `utc_now/2` get the current utc [DateTime](https://hexdocs.pm/elixir/DateTime.html).\n\nVersions of these functions also exist for the [Date](https://hexdocs.pm/elixir/Date.html) module if you do not need to consider the time, but\nare only concerned about the calendar date.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nCreate a [DateTime](https://hexdocs.pm/elixir/DateTime.html) for April 19, 1938 at noon (12pm).\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nUsing sigils.\n\n```elixir\n~U[1938-04-19 12:00:00Z]\n```\n\nUsing functions.\n\n```elixir\nDateTime.new!(Date.new!(1938, 4, 19), Time.new!(12, 0, 0))\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\nIf you solved the challenge above using sigils, complete it again using functions. If you solved the challenge using functions, then complete it again using sigils.\n\nEnter your new solution below.\n\n```elixir\nDateTime.new!(~D[1938-04-18])\n```\n\nCreate a [DateTime](https://hexdocs.pm/elixir/DateTime.html) for today at the current time in universal time.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nDateTime.utc_now()\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\nUse [DateTime.add/4](https://hexdocs.pm/elixir/DateTime.html#add/4) to add one day to the current [DateTime](https://hexdocs.pm/elixir/DateTime.html). This creates a new [DateTime](https://hexdocs.pm/elixir/DateTime.html) for tomorrow at the current time.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nday_in_seconds = 60 * 60 * 24\nDateTime.add(DateTime.utc_now(), day_in_seconds)\n```\n\n</details>\n\nEnter your solution below\n\n```elixir\n\n```\n\nUse [DateTime.compare/2](https://hexdocs.pm/elixir/DateTime.html#compare/2) to compare the [DateTime](https://hexdocs.pm/elixir/DateTime.html) below with the current [DateTime](https://hexdocs.pm/elixir/DateTime.html). The `date` below should be `:lt` (less than) the current [DateTime](https://hexdocs.pm/elixir/DateTime.html).\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndate = DateTime.new!(~D[2020-01-01], ~T[12:00:00])\nDateTime.compare(date, DateTime.utc_now())\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\ndate = DateTime.new!(~D[2020-01-01], ~T[12:00:00])\n```\n\nUse [DateTime.diff/3](https://hexdocs.pm/elixir/DateTime.html#diff/3) to determine how many seconds are between `2000-01-01` and `2010-01-01`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nstart = DateTime.new!(~D[2000-01-01], ~T[12:00:00])\nfinish = DateTime.new!(~D[2010-01-01], ~T[12:00:00])\n\nDateTime.diff(finish, start)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Timex\n\nThe [Timex](https://hexdocs.pm/timex/Timex.html) external library provides a number of useful features\nfor working with dates in Elixir. It is not built-in to Elixir and needs to be installed in a project.\n\n[Timex](https://hexdocs.pm/timex/Timex.html) is not currently within the scope of this course, however we have installed [Timex](https://hexdocs.pm/timex/Timex.html) specifically\nin this livebook file only. You will not normally have access to [Timex](https://hexdocs.pm/timex/Timex.html) as the purpose of this section is to build familiarity\nwith [DateTime](https://hexdocs.pm/elixir/DateTime.html).\n\n[Timex](https://hexdocs.pm/timex/Timex.html) uses the [tzdata](https://github.com/lau/tzdata) timezone database for Elixir.\nYou can create a timezone aware [DateTime](https://hexdocs.pm/elixir/DateTime.html) using [Timex.now/1](https://hexdocs.pm/timex/Timex.html#now/1) and the name of a timezone.\n\n```elixir\nTimex.now(\"Asia/Kabul\")\n```\n\nYou can find the full list of available timezones using `Tzdata.zone_list/0`.\n\n```elixir\nTzdata.zone_list()\n```\n\nMany websites host the full list of timezones such as [timezonedb.com](https://timezonedb.com/time-zones)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUse [Timex.now/1](https://hexdocs.pm/timex/Timex.html#now/1) to create a datetime for your current timezone. Compare it with your local time\nto ensure it is correct.\n\n```elixir\n\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [DateTime](https://hexdocs.pm/elixir/DateTime.html)\n* [Date](https://hexdocs.pm/elixir/Date.html)\n* [Time](https://hexdocs.pm/elixir/Time.html)\n* [Calendar](https://hexdocs.pm/elixir/Calendar.html)\n* [Elixir Schools: Dates and Time](https://elixirschool.com/en/lessons/basics/date_time)\n* [Timex](https://github.com/bitwalker/timex)\n* [Elixir-lang: Calendar Sigils](https://elixir-lang.org/getting-started/sigils.html#calendar-sigils)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Dates And Times reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Dates And Times\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/data_traversal.livemd\">Data Traversal</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/time_converting.livemd\">Time Converting</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task40-reading-code_editors", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"auto-save.png\",\"type\":\"attachment\"},{\"name\":\"explorer_tab.png\",\"type\":\"attachment\"},{\"name\":\"initiate_liveshare.png\",\"type\":\"attachment\"},{\"name\":\"join_liveshare_url.png\",\"type\":\"attachment\"},{\"name\":\"keyboard%20shortcuts.png\",\"type\":\"attachment\"},{\"name\":\"live_share_link_copied.png\",\"type\":\"attachment\"},{\"name\":\"live_share_session_running_tab.png\",\"type\":\"attachment\"},{\"name\":\"live_share_tab.png\",\"type\":\"attachment\"},{\"name\":\"quick_open_search.png\",\"type\":\"attachment\"},{\"name\":\"recommended_extensions.png\",\"type\":\"attachment\"},{\"name\":\"search.png\",\"type\":\"attachment\"},{\"name\":\"show%20all%20commands.png\",\"type\":\"attachment\"},{\"name\":\"source_control_stage_all_files.png\",\"type\":\"attachment\"},{\"name\":\"source_control_stage_file.png\",\"type\":\"attachment\"},{\"name\":\"source_control_view.png\",\"type\":\"attachment\"},{\"name\":\"unstage_changes.png\",\"type\":\"attachment\"},{\"name\":\"view%20toggle%20terminal.png\",\"type\":\"attachment\"},{\"name\":\"workspace-trust-dialog.png\",\"type\":\"attachment\"}]} -->\n\n# Code Editors\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Code Editors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/livebook.livemd\">Livebook</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/iex.livemd\">IEx</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you open your Visual Studio Code Editor?\n* How do you manage version control from your Visual Studio Code Editor?\n* How do you start and join a LiveShare session to collaborate with other developers?\n\n## Overview\n\n### Code Editors\n\nCode editors are software applications designed for editing code.\n\nSome code editors are minimal and only edit code. Some\ncome with development tools that allow you to write, run, and test code\nall from the same application. Generally, we call these integrated development environments or **IDEs**.\n\nThere are various code editors and IDEs, each with its advantages.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Visual Studio Code\n\nVisual Studio Code (VS Code) is a code editor developed by Microsoft. It is a free, open-source, and cross-platform application that can be used to write and edit code for a variety of programming languages, including Elixir.\n\nVS Code provides a number of features that make it a powerful code editing tool, such as:\n\n* **IntelliSense**: which provides code completion and suggestions\n* **Syntax highlighting**: to make it easier to read and understand code\n* **Code debugging**: allows developers to step through code and find errors\n* **Git integration**: allows developers to easily manage code changes and collaborate with others\n* **Extensibility**: VS Code can be extended with plugins and extensions that add new features and functionality\n\nVisual Studio Code is the default recommended code editor for DockYard Academy. We've chosen this editor for a variety of reasons, including the Visual Studio Code LiveShare feature which allows multiple developers to collaborate on the same code simultaneously.\n\nSee the [Visual Studio Code documentation](https://code.visualstudio.com/docs/getstarted/userinterface) for a full explanation of how to use Visual Studio Code effectively.\n\n## Download Visual Studio Code\n\nPlease download and install [Visual Studio Code](https://code.visualstudio.com/).\n\nYou may already have a preferred editor. While highly recommended, you don't need to use Visual Studio Code.\nHowever, even if it doesn't become your daily code editor, we still recommend that you install it so that you can join and share\nLiveShare sessions with your instructor and classmates.\n\n## Open Visual Studio Code\n\nYou can either open Visual Studio Code manually or through the command line.\nIt takes some setup, but it's handy to use the `code` command in your terminal to\nopen Visual Studio Code with a specific project.\n\nWindows and Linux users should automatically have the `code` command available after installing Visual Studio Code.\nMac users can follow [these instructions](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line) to set up the `code` command.\n\nNavigate to the curriculum folder using `cd` in your command line, and then run `code .` to open Visual Studio Code\nin the current folder.\n\n```\n$ cd path/to/curriculum\n$ code .\n```\n\n## Setup Recommended Extensions\n\nWe have a list of recommended extensions for this curriculum.\n\nWith the curriculum project open in visual studio code, open the Extensions tab and search for `@recommended` to see the Workspace Recommendations.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/recommended_extensions.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe recommend you install them all.\n\n* **Phoenix Framework**: Syntax highlighting for Phoenix HEEx files.\n* **Elixir Test**: Useful commands for testing Elixir code.\n* **ElixirLS**: General Elixir support for autocomplete, syntax highlighting, and more\n* **Live Share**: Real-time collaborative development.\n* **Code Spell Checker**: Spell checking for source code. Useful for catching spelling errors.\n\nThere are lots of useful extensions provided by the community. We've tried to be minimal, so consider researching for more useful extensions beyond this list. It's amazing how a great extension can make you more productive.\n\n## Explorer\n\nThe Activity Bar contains the Explorer tab.\n\n![](files/explorer_tab.png)\n\nOpen the Explorer tab to see all the files and folders in a project.\nYou can create new files and folders from this tab.\n\nYou can also open files to use them in your editor. Be careful not to edit any of the\nfiles for this course unless directed to.\n\n## Quick Open\n\nFor large projects, it quickly becomes tedious to search through files and folders.\nInstead, you can use the **Quick Open** Command with <kbd>Ctrl</kbd>+<kbd>P</kbd> (Windows & Linux) or <kbd>CMD</kbd>+<kbd>P</kbd> (MacOS). Here\nyou can search for the name of a file and press <kbd>Enter</kbd> to view it in the editor.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/quick_open_search.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIt's important to be proficient with your code editor. There are many ways to improve productivity with your chosen code editor. We include some advice on using the editor effectively,\nbut you are the best judge of which strategies are most effective.\n\nWith that said, we recommend you practice using Quick Open instead of the Explorer. Quick Open is a much faster solution\nwhen working at scale, and you'll want to be proficient with it.\n\n## Commands\n\nVisual Studio Code has many useful commands. In addition, many extensions add additional\ncommands.\n\nPress <kbd>CTRL</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> (Windows & Linux) or <kbd>CMD</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> (MacOS) to show all commands. You'll notice that it simply\nuses Quick Open with a `>` symbol. You could also open Quick Open and then press `>`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/show%20all%20commands.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFor example, you may wish to use the autosave command to save files automatically.\n\n![](files/auto-save.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nMany commands are bound to a shortcut. Search for the `Preferences: Open Keyboard Shortcuts` command\nto view and edit your shortcuts.\n\nSpecific shortcuts are generally beyond the scope of this course, but you may wish to research more. You can also rebind any specific shortcut to customize your development experience.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/keyboard%20shortcuts.png)\n\n## Integrated Terminal\n\nVisual Studio Code comes with an integrated terminal so that you don't have to switch back\nand forth between your editor and your command line.\n\nTo learn more about the Integrated Terminal, you can read the [Integrated Terminal Documentation](https://code.visualstudio.com/docs/editor/integrated-terminal)\n\nOpen and close the integrated terminal with the `View: Toggle Terminal` command.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/view%20toggle%20terminal.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nOr you can use the <kbd>CTRL</kbd>+<kbd>\\`</kbd> command.\n\nBacktick <kbd>\\`</kbd> may feel unergonomic for a frequently used command. You may wish to rebind it\nto a more comfortable shortcut.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Multiple Terminals\n\nFrom the integrated terminal, you can manage multiple terminal windows.\n\nMultiple terminals are useful if one terminal is busy performing some constant task like running an application.\n\nFor example, when running this curriculum using the integrated terminal that terminal will be busy running the `livebook server` command. Therefore, It's useful to open a second terminal window to access the command line without stopping and starting livebook.\n\n## Search\n\nYou can use the Search tab to find content in files. Alternatively you can quickly open the\nsearch with the <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>F</kbd> (Windows & Linux) or <kbd>CMD</kbd>+<kbd>SHIFT</kbd>+<kbd>F</kbd> (MacOS) shortcut.\n\nEnter text into the search input and press <kbd>Enter</kbd> to search for some text.\n\nThe search tab is also useful for **search-and-replace**.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/search.png)\n\n## Source Control\n\nThe Source Control tab allows you to manage git source control. Instead of with the command line, you can use the UI to stage and unstage changes.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/source_control_view.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou can stage a file by hovering it and pressing the stage button <i class=\"ri-add-line\"></i>.\n\n![](files/source_control_stage_file.png)\n\nOr stage all files by hovering over **Changes** and pressing the stage all button <i class=\"ri-add-line\"></i>.\n![](files/source_control_stage_all_files.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nSimilarly you can unstage changes or a single file pressing the unstage button <i class=\"ri-subtract-line\"></i>.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/unstage_changes.png)\n\n## Live Share\n\nYou can share and join collaborative development sessions with the LiveShare tab.\n\n![](files/live_share_tab.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou can start a LiveShare session as the host, and then other developers join your session or vice versa.\n\n```mermaid\nflowchart\n  H[Host]\n  D1[Developer]\n  D2[Developer]\n  D3[Developer]\n  D4[Developer]\n  D5[Developer]\n  D1 --> H\n  D2 --> H\n  D3 --> H\n  D4 --> H\n  D5 --> H\n```\n\nTo start a LiveShare session, press the **Share** button.\n\n![](files/initiate_liveshare.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThis creates a LiveShare session and automatically copies an invitation link that will look like this:\n`https://prod.liveshare.vsengsaas.visualstudio.com/join?20A7B9A2A82856BC29CE86120852C16E23EB`\n\n![](files/live_share_link_copied.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nSend this link to other developers for them to join the session. It's a common mistake to click the link.\nInstead, to join a LiveShare session, you need to click the **Join** button in the LiveShare tab\nand enter the URL.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/join_liveshare_url.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nParticipants are displayed in the LiveShare tab.\n\nParticipants can view your terminal but can't use it without permission.\nYou can give participants access to the terminal with the **Make Read/Write** button\nby right-clicking on the terminal you want to share.\n\n<div style=\"color: white; font-weight: bold; padding: 0.5rem; background:lightcoral; margin-top: 0.5rem;\">\nDANGER: GRANTING READ/WRITE ACCESS TO YOUR TERMINAL ALLOWS OTHER PARTICIPANTS DANGEROUS ACCESS TO YOUR COMPUTER.\n</div>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/live_share_session_running_tab.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nAs a participant, to benefit from extensions and syntax highlighting, you may need to trust\nthe Workspace that you join.\n\nThe dialogue may look different than this, but you should see a similar notification appear when you\njoin the session.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/workspace-trust-dialog.png)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Code Editors reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Code Editors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/livebook.livemd\">Livebook</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/iex.livemd\">IEx</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task41-reading-apis", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# APIs\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:finch, \"~> 0.16.0\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=APIs\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/common_components.livemd\">Common Components</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/pokemon_api.livemd\">Pokemon API</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions:\n\n* What are the common HTTP request methods and what do they do?\n* How do we send a cURL request?\n* How do we send an HTTP request with an HTTP client such as Finch?\n* What is JSON and how can we parse it into an Elixir term?\n* What are Bearer Tokens and how can we use them to authenticate and authorize a request?\n* Why is it bad to expose access tokens and how can we prevent or recover from doing so?\n\n## Overview\n\nAPI stands for Application Programming Interface. In broad terms,\nan API is a way to communicate between pieces of software.\n\nGenerally, API refers to web APIs, which are programs that run on the internet. The internet is a network of interconnected machines that know how to communicate with each other.\n\nWe won't go deep into networking or how the internet works, as that is beyond the scope of this course. However, Crash Course Computer Science provides an excellent overview.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=AEaKrq3SpW8\\\")\",\"title\":\"The Internet: Crash Course Computer Science\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=AEaKrq3SpW8\")\n```\n\n### Client-Server Model\n\nThese APIs use a [client-server](https://en.wikipedia.org/wiki/Client%E2%80%93server_model) model. Servers provide a resource, and clients request a resource.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Client-server-model.svg/375px-Client-server-model.svg.png)\n\nYou use APIs every time you open your browser (Chrome, Safari, Firefox, Edge, etc.). The browser is the client, and it requests information from a server. For example, when you search for a video on YouTube, your browser communicates with YouTube servers to retrieve the video file.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### URL (Uniform Resource Locator)\n\nA URL (Uniform Resource Locator) is a string of characters that specifies the address of a resource on the internet. A URL consists of different parts, each with its own meaning:\n\n* **Protocol**: The protocol specifies how the client and server communicate, for example, HTTP, HTTPS, FTP, etc.\n\n* **Domain name**: The domain name is the address of the server that hosts the resource. For example, in the URL \"https://www.example.com\", \"www.example.com\" is the domain name.\n\n* **Path**: The path specifies the location of the resource on the server. It comes after the domain name and starts with a forward slash (\"/\"). For example, in the URL \"https://www.example.com/path/to/resource.html\", \"/path/to/resource.html\" is the path.\n\n* **Query string**: The query string contains additional parameters that modify the request or provide data to the server. It starts with a question mark (\"?\") and includes one or more key-value pairs separated by ampersands (\"&\"). For example, in the URL \"https://www.example.com/search?name=example&sort=date\", \"name=example\" and \"sort=date\" are query string parameters.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIdentify the Protocol, Domain Name, Path, and Query string (separated into separate query parameters and their values) in the following url:\n\nhttps://www.fakedomaindoesnotexist.com/fake/domain?greeting=hello&fake=true\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### HTTP Request Methods\n\n[HTTP (Hypertext Transfer Protocol)](https://developer.mozilla.org/en-US/docs/Web/HTTP) is the protocol used for transferring data on the web. [The HTTP request methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods), also known as verbs, indicate the desired action to be performed on the identified resource.\n\n```mermaid\nflowchart LR\nClient --HTTP Method--> Server\n```\n\n* **GET:** The GET method requests a representation of the specified resource. GET is the most common HTTP method and is used to retrieve data. It is a safe method, which means that it should not have any side effects on the server or the resource, and it should only retrieve data.\n\n* **POST:** The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server. It is used to create a new resource or to submit data to be processed by the resource identified by the URI.\n\n* **PUT:** The PUT method replaces all current representations of the target resource with the request payload. It is used to update a current resource with new data.\n\n* **PATCH:** The PATCH method applies partial modifications to a resource. It is used to update only a part of the current resource, rather than replacing the whole resource like PUT.\n\n* **DELETE:** The DELETE method deletes the specified resource. It is used to delete a resource identified by a URI.\n\nWhen you use a browser, you're actually using HTTP under the hood. The browser hides the details of how we use HTTP to communicate with these APIs.\n\nAs developers, we want to interact with web APIs directly using the HTTP protocol to request and send information.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Response Codes\n\nAPIs use various response codes to communicate the status of a request. These are generally called [response codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) and are grouped into five classes.\n\n1. Informational responses (100\u2013199)\n2. Successful responses (200\u2013299)\n3. Redirection messages (300\u2013399)\n4. Client error responses (400\u2013499)\n5. Server error responses (500\u2013599)\n\nFor example, you might be familiar with seeing the `404` not found response code.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Web APIs\n\nWe use web APIs to communicate with servers on the internet. These APIs provide useful functionality that would otherwise be difficult to build on our own. Here are a few example APIs.\n\n* [Stripe API](https://stripe.com/docs/api) handles Stripe payments.\n* [OpenWeatherAPI](https://openweathermap.org/) provides live weather information.\n* [JokeAPI](https://sv443.net/jokeapi/v2/#getting-started) returns a random joke.\n* [OpenAI API](https://platform.openai.com/docs/api-reference) generate text, images, and perform other AI related tasks.\n\n## cURL\n\ncURL (pronounced like \"curl\") stands for \"client for URL\". cURL is a command-line tool used to transfer data to or from a server.\n\nYou can make a simple cURL request by typing the following in your command line.\n\n```\ncurl https://www.example.com\n```\n\nIt's important to understand cURL because most APIs include documentation using examples of cURL requests. We can use these simple cURL requests to test an API or know how to send a request using our chosen Elixir API Client.\n\nHere, we use the [System](https://hexdocs.pm/elixir/System.html) module to simulate running a curl request from your command line and print the response for the sake of example. Notice it returns the HTML document of https://www.example.com.\n\n```elixir\n{response, _exit_status} = System.cmd(\"curl\", [\"https://www.example.com\"])\n\nIO.puts(response)\n```\n\n### cURL Options\n\ncURL options are used to customize and modify the behavior of curl commands. Here are some commonly used curl options:\n\n* -X: Specifies the HTTP method to be used, such as GET, POST, PUT, or DELETE.\n* -H: Specifies an HTTP header to include in the request, such as Content-Type or Authorization.\n* -d: Specifies data to include in the request body, such as form data or JSON data.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nRun the following fake curl request in your command line. The `\\` character allows us to split up a command into multiple lines.\n\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"username\":\"johndoe\",\"password\":\"password123\"}' https://www.example.com/login\n```\n\nYou should see a response similar to the following:\n\n```html\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n        <head>\n                <title>404 - Not Found</title>\n        </head>\n        <body>\n                <h1>404 - Not Found</h1>\n                <script type=\"text/javascript\" src=\"//obj.ac.bcon.ecdns.net/ec_tpm_bcon.js\"></script>\n        </body>\n</html>\n```\n\n## Authentication\n\nAPIs use different forms of authentication to check if a user is authorized to access certain resources. Typically most forms of authentication use some kind of access token to identify the user accessing the resource. Public APIs will not require any kind of access token, while private APIs will.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bearer Tokens\n\nBearer Tokens are a type of access token used to authenticate and authorize requests to access protected resources in APIs.\n\nTypically APIs allow you to create an account and receive an API key. We use this key as a bearer token that allows us to access API resources.\n\nFor example, here's an example API request to the [Open AI API](https://platform.openai.com/docs/guides/images/usage) that requires a bearer token to create an image of a siamese cat. `$OPENAI_API_KEY` would be replaced with the actual bearer token to make the request.\n\n```\ncurl https://api.openai.com/v1/images/generations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nFirst, try copy/pasting the curl request above into your command line. You should see the following error:\n\n```\n{\n  \"error\": {\n    \"code\": null,\n    \"message\": \"Invalid authorization header\",\n    \"param\": null,\n    \"type\": \"server_error\"\n  }\n}\n```\n\nThen, follow these steps to create a bearer token and make an authenticated request to generate an AI image.\n\n1. Create a free Open AI Account: https://auth0.openai.com/u/signup/\n2. Find or create an API key: https://platform.openai.com/account/api-keys\n3. Send the cURL request above in your command line. Make sure to replace `$OPENAI_API_KEY` with the api key you created.\n\nYou should see a response that looks something like this:\n\n```js\n{\n  \"created\": 1683498991,\n  \"data\": [\n    {\n      \"url\": \"https://oaidalleapiprodscus.blob.core.windows.net/private/org-xZKFBB8qReE9rPvITFyOR6WR/user-bOWL7A3HQkffCs8ssJEx4gsI/img-nCmoC73zliZ9YuUCAxQ3043K.png?st=2023-05-07T21%3A36%3A31Z&se=2023-05-07T23%3A36%3A31Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2023-05-07T17%3A44%3A05Z&ske=2023-05-08T17%3A44%3A05Z&sks=b&skv=2021-08-06&sig=ovkn87xw2l981zy62Aio3GErj7bfRF7zUL8HJulfL5s%3D\"\n    }\n  ]\n}\n```\n\nGo to the URL created in your browser to see the generated image.\n\nYou will use this Bearer token later on in this lesson. If you run out of free credits or have any other issues, request a bearer token to use from your teacher.\n\n## Finch\n\nFinch is one of many HTTP clients that allow us to send HTTP requests in Elixir.\n\nWe've chosen to teach [Finch](https://github.com/sneako/finch) instead of other popular libraries such as [HTTPoison](https://github.com/edgurgel/httpoison) or [Req](https://github.com/wojtekmach/req) because it's included by default with Phoenix 1.7 projects.\n\nTo send a request with Finch we need to start the Finch process. This is typically done in the application's supervision tree, but we'll do it here for demonstration purposes. Finch starts under a named process. We've chosen `MyApp.Finch` but this name is arbitrary and typically done for you in a Phoenix project.\n\n```elixir\nFinch.start_link(name: MyApp.Finch)\n```\n\nOnce the Finch process has started, to make a request we build the request information in a `Finch.Request` struct using [Finch.build/5](https://hexdocs.pm/finch/0.16.0/Finch.html#build/5).\n\n```elixir\nrequest = Finch.build(:get, \"https://www.example.com\")\n```\n\nThen we provide this struct to the [Finch.request/3](https://hexdocs.pm/finch/0.16.0/Finch.html#request/3) function using the name of the Finch process to send the request.\n\n```elixir\nFinch.request!(request, MyApp.Finch)\n```\n\n## Jason\n\nJSON is a popular format for storing information in a key-value structure.\n\n```javascript\n{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n}\n```\n\nElixir represents JSON as a string, not a key-value structure. For example, the above in Elixir would be:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\"\n```\n\nWe can use the popular [Jason](https://github.com/michalmuskala/jason) to encode an Elixir term into JSON and decode JSON into an Elixir term such as a map.\n\n```elixir\nJason.decode!(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\")\n```\n\n```elixir\nJason.encode!(%{\"key1\" => \"value1\", \"key2\" => \"value2\"})\n```\n\nAPIs commonly return a JSON response. For example, here we make a request to a JokeAPI that returns a JSON response.\n\n```elixir\nresponse =\n  Finch.build(:get, \"https://v2.jokeapi.dev/joke/Any?safe-mode&type=single&format=json\")\n  |> Finch.request!(MyApp.Finch)\n```\n\nThe response body is a JSON string that we need to decode. We can get the body out of the response and then use Jason to decode it into a map.\n\n```elixir\ndecoded_body = Jason.decode!(response.body)\n```\n\nNow we can work with the decoded body like any Elixir map. For example we can access the \"joke\" field.\n\n```elixir\ndecoded_body[\"joke\"]\n```\n\n## Building A Finch Request\n\nWe can build a more complex request using [Finch.build/5](https://hexdocs.pm/finch/Finch.html#build/5). It's an important skill to read documentation in cURL and convert it into an HTTP request using an HTTP client. For sake of example, we're going to convert our previous Open AI API request into a Finch request.\n\nTake the following cURL request from the Open AI documentation.\n\n```\ncurl https://api.openai.com/v1/images/generations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_TOKEN\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n```\n\nThere are a few key details we can gather from this request.\n\n* **Method**: The HTTP method of the request. Typically GET, POST, PATCH, PUT, or DELETE.\n* **Headers**: HTTP headers provide additional information about a request or response, such as the content type or authentication and are transmitted as key-value pairs.\n  * **Content-Type**: Specifies the format of the data being sent in the request body.\n  * **Authorization**: Includes authentication information in the request, proving the client has been authenticated and is authorized to access the resource.\n* **data (body)**: Contains the JSON data to be sent in the request body.\n\nWe need to take the information from the cURL request and provide it to [Finch.build/5](https://hexdocs.pm/finch/Finch.html#build/5). Here's the full spec for [Finch.build/5](https://hexdocs.pm/finch/Finch.html#build/5) that we need to provide.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nFinch.build(method, url, headers \\\\ [], body \\\\ nil, opts \\\\ [])\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Converting Our cURL Request Into Elixir Terms\n\nHere's the cURL request broken down into valid Elixir terms in the format the Finch expects.\n\nYou may replace the `$OPENAI_API_TOKEN` with a valid token to see the actual API response if you like. However, you should **never** expose your API tokens, which would happen if you store this Livebook on GitHub.\n\nTo avoid exposing your token, make sure to create a new token and revoke the token you used for this lesson: https://platform.openai.com/account/api-keys\n\n```elixir\nmethod = :post\n\nurl = \"https://api.openai.com/v1/images/generations\"\n\n# Replace The $OPEN_API_TOKEN With Your Token.\n# Make Sure To Revoke The Token Later To Avoid Publicly Exposing It.\n\nheaders = [\n  {\"Content-Type\", \"application/json\"},\n  {\"Authorization\", \"Bearer $OPENAI_API_TOKEN\"}\n]\n\nbody =\n  Jason.encode!(%{\n    prompt: \"a white siamese cat\",\n    n: 1,\n    size: \"1024x1024\"\n  })\n```\n\n### How Do We Know It's A Post Request?\n\nMost of this information is taken directly from the cURL request. However, the **Method** can be assumed as a POST request, even though it isn't specified. That's because the cURL request includes the `-d` option. a GET request cannot be sent with data, so cURL inferes that it's a post request. It also says so on the [Open AI API Reference](https://platform.openai.com/docs/api-reference/images) for image generation.\n\nIf we wanted to make this cURL request more explicit, it could be written with the `-X` option, but that's not necessary and not how many APIs will be documented.\n\n```\ncurl https://api.openai.com/v1/images/generations \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_TOKEN\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### The Request\n\nPutting all of this together, we get the following Finch request, which we can decode using Jason.\n\n```elixir\nrequest = Finch.build(method, url, headers, body) |> Finch.request!(MyApp.Finch)\n\nJason.decode!(request.body)\n```\n\n### Your Turn\n\nMake a Finch request for the following curl request from the [Open AI API Reference](https://platform.openai.com/docs/api-reference/chat/create).\n\n```\ncurl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello!\"}]\n  }'\n```\n\nDecode the response using Jason and print the response string from the Chat API using `IO.puts/2`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nWe've used the fake token `sk-1WHDb0NwRkq3mfyRVparT3BlbkFJ500axJFd8pZ2RKxGJ0x` to demonstrate how to replace `$OPENAI_API_TOKEN` with your bearer token.\n\n```elixir\nrequest =\n  Finch.build(\n    :post,\n    \"https://api.openai.com/v1/chat/completions\",\n    [\n      {\"Content-Type\", \"application/json\"},\n      {\"Authorization\", \"Bearer sk-1WHDb0NwRkq3mfyRVparT3BlbkFJ500axJFd8pZ2RKxGJ0x\"}\n    ],\n    Jason.encode!(%{\n      model: \"gpt-3.5-turbo\",\n      messages: [%{role: \"user\", content: \"Hello!\"}]\n    })\n  )\n  |> Finch.request!(MyApp.Finch)\n\ndecoded_body = Jason.decode!(request.body)\n\n[%{\"message\" => %{\"content\" => message}}] = decoded_body[\"choices\"]\n\nIO.puts(message)\n```\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish APIs reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=APIs\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/common_components.livemd\">Common Components</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/pokemon_api.livemd\">Pokemon API</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task42-reading-liveview", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# LiveView\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=LiveView\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/capstone_mock.livemd\">Capstone Project: Mock</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/liveview_follow_along_counter.livemd\">Follow Along: LiveView Counter</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we mount a LiveView on a given route in the router?\n* What is the lifecycle of a LiveView?\n* How is information stored and set in the socket?\n* How do we send messages to a LiveView and handle them?\n* How do we test a LiveView?\n\n## Overview\n\n### Phoenix LiveView\n\n[Phoenix.LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html) is an alternative to the [Model-View-Controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) pattern (sometimes called deadviews).\n\nLiveViews deviate from the typical request/response pattern where the client is responsible for initiating all interactions with a server.\n\nInstead, the establish a two-way [network socket](https://en.wikipedia.org/wiki/Network_socket) connection that allow the client and server to exchange information back and forth. This enables real-time \"live\" communication between the client and server and enables features that would be difficult to accomplish with the traditional request/response pattern.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nC1[Client]\nC2[Client]\nS1[Server]\nS2[Server]\n\nsubgraph LiveView\n  C2 <--socket--> S2\nend\n\nsubgraph Request/Response\n  C1 --request--> S1\n  S1 --response--> C1\nend\n```\n\n## LiveView Processes\n\nLiveViews are processes implemented with [GenServer](https://hexdocs.pm/elixir/GenServer.html). For every client, the server spawns a LiveView process which maintains state and can send and receive messages. The LiveView stores the state in a [socket assigns](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Socket.html) struct.\n\nPhoenix starts each LiveView Process under the application's `Superisor`. The [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) restarts the LiveView in the event of a crash.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nSupervisor\nC1[Client]\nC2[Client]\nC3[Client]\nL1[LiveView]\nL2[LiveView]\nL3[LiveView]\n\nSupervisor --> L1\nSupervisor --> L2\nSupervisor --> L3\nL1 --socket.assigns--> C1\nL2 --socket.assigns--> C2\nL3 --socket.assigns--> C3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nBy using OTP processes/supervisors, LiveViews are excellent for stateful interactions and real-time fault-taulerant systems.\n\n## LiveView Life-Cycle\n\nThere are five main steps to a LiveView connection life-cycle.\n\n1. a client makes an HTTP GET request to our server.\n2. The LiveView mounts and starts under our application's supervision tree.\n3. The LiveView sends the initial HTML response to the client.\n4. The client connects to the LiveView through a two-way socket connection.\n5. The LiveView establishes a stateful connection and re-mounts.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\n    Client->>LiveView: GET /page_url\n    LiveView-->>LiveView: mount/3\n    LiveView->>Client: render HTML\n    Client-->>LiveView: connect to socket\n    LiveView-->>LiveView: mount/3\n    LiveView-->>Client: establish stateful connection\n```\n\n## Live Route\n\nThe [live/4](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Router.html#live/4) macro defines a live view route.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nscope \"/\", AppWeb do\n  pipe_through :browser\n\n  live \"/\", ExampleLive\nend\n```\n\nUnlike Controller actions which often correspond to a single URL, A single LiveView might handle many different urls with different live_actions that alter how the LiveView renders UI in some meaningfully way.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nlive \"/new\", ExampleLive.Index, :new\nlive \"/:id/edit\", ExampleLive.Index, :edit\n```\n\n## Creating A LiveView\n\nPhoenix LiveViews define a [mount/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:mount/3)  callback that initializes the LiveView.\n\nThe [mount/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:mount/3) callback accepts three parameters\n\n1. `params` contains public information that can be set by the user such as query params and router path parameters.\n2. `session` contains session information specific to the current client. For example, this contains the [cross-site request forgery token](https://en.wikipedia.org/wiki/Cross-site_request_forgery).\n3. `socket` A [Phoenix.LiveView.Socket](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Socket.html) that contains the state of the LiveView and other socket information.\n\nPhoenix LiveViews also define a [render/1](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:render/1) callback that renders a template. The [render/1](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:render/1) callback is invoked whenever the LiveView detects new content to render and send to the client.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.MountLiveExample do\n  use AppWeb, :live_view\n\n  @impl true\n  def mount(_params, _session, socket) do\n    {:ok, socket}\n  end\n\n  @impl true\n  def render(assigns) do\n    ~H\"\"\"\n    Hello World!\n    \"\"\"\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Cross-site Request Forgery (CSRF) Token](https://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\nCross-Site Request Forgery (CSRF) is an attack where a user is tricked into performing unwanted actions on a web application they are authenticated on. CSRF tokens protect web applications from CSRF attacks. These tokens are random, unique strings that are generated by the server and included in the HTML of web pages served to users. When a user submits a request to the server, the server checks for the presence of a CSRF token in the request. If the token is not present or is invalid, the request is rejected.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{\"_csrf_token\" => \"cOO0xNX3-Ifc34aicN7UqAc5\"}\n```\n\nIn Phoenix, the Cross-site Request Forgery Token is set in `root.html.heex`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<meta name=\"csrf-token\" content={csrf_token_value()}>\n```\n\nThe token is then retrieved and stored in the LiveSocket in `assets/app.js`.\n\n```javascript\nlet csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\")\nlet liveSocket = new LiveSocket(\"/live\", Socket, {params: {_csrf_token: csrfToken}})\n```\n\n## Connected Vs Disconnected Mount\n\nThe LiveView performs a **disconnected mount** to send the initial HTML response, and then performs a **connected mount** to establish the live socket.\n\nWe can use the [connected?/1](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#connected?/1) function to check if the socket is connected to avoid performing actions twice. This is often useful for things like animations or loading data that we don't want to perform twice.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.MountLiveExample do\n  use AppWeb, :live_view\n\n  @impl true\n  def mount(_params, _session, socket) do\n    if connected?(socket) do\n      IO.puts(\"CONNECTED\")\n    else\n      IO.puts(\"DISCONNECTED\")\n    end\n    {:ok, socket}\n  end\n\n  @impl true\n  def render(assigns) do\n    ~H\"\"\"\n    Hello World!\n    \"\"\"\n  end\nend\n```\n\n## Events\n\nThe client sends messages to the LiveView typically through `phx-` bindings on HTML elements such as `phx-click` that sends a message to the LiveView when an element is clicked.\n\nThese events are handled by a [handle_event/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:handle_event/3) callback function.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.EventExampleLive do\n  use AppWeb, :live_view\n\n  @impl true\n  def mount(_params, _session, socket) do\n    {:ok, socket}\n  end\n  \n  @impl true\n  def render(assigns) do\n    ~H\"\"\"\n    <button phx-click=\"event_name\">click me!</button>\n    \"\"\"\n  end\n\n  @impl true\n  def handle_event(\"event_name\", _params, socket) do\n    # handle\n    {:noreply, socket}\n  end\nend\n```\n\nSee [Bindings](https://hexdocs.pm/phoenix_live_view/bindings.html) And [Form Bindings](https://hexdocs.pm/phoenix_live_view/form-bindings.html) for a full list of events.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Event Callbacks\n\nLiveViews are built with [GenServer](https://hexdocs.pm/elixir/GenServer.html) under the hood, so they can receive messages and handle them with the usual GenServer callback functions. See [Event Callbacks](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#callbacks) for more information.\n\n## Updating State\n\nThe using the [assign/2](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#assign/2) or [assign/3](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#assign/3) function take a socket and update the socket's state.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nassign(socket, :field, \"value\")\n# Assign/2 Makes It Easier To Update Multiple Fields In State.\nassign(socket, field1: \"value\", field2: \"value)\n```\n\nThe [mount/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:mount/3) callback defines a LiveView's initial state.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef mount(_params, _session, socket) do\n  {:ok, assign(socket, :some_field, \"initial value\")}\nend\n```\n\nEvent handlers can update a LiveViews state.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef handle_event(\"event_name\", _params, socket) do\n  {:noreply, assign(socket, :some_field, \"some value\")}\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Re-rendering Diffs\n\nWhen a LiveView's state changes, LiveView updates the page in real-time by only changing the parts that need to be changed. These changes are called **diffs** (differences) and significantly improve LiveView's performance.\n\nThis means we don't need to re-render the entire page as we often do with typical controller views.\n\n## Live Navigation\n\n### Live Action\n\nLiveView routes can be defined with a `live_action` atom. Multiple routes can be handled by the same LiveView, typically with different live actions.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nlive \"/new\", ExampleLive, :new\nlive \"/edit\", ExampleLive, :edit\n```\n\nThis live action will be bound to `socket.assigns.live_action` in the LiveView. It's often used to display different UIs in the same LiveView.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.ExampleLive do\n  use AppWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, socket}\n  end\n\n  def render(assigns) do\n    ~L\"\"\"\n    <%= if @live_action == :new do %>\n      <h1>New</h1>\n    <% end %>\n    <%= if @live_action == :edit do %>\n      <h1>Edit</h1>\n    <% end %>\n    \"\"\"\n  end\n\n  def handle_event(\"increment\", _, socket) do\n    {:noreply, assign(socket, count: socket.assigns.count + 1)}\n  end\nend\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Live Navigation\n\nLiveView allows for page navigation without fully reloading the page.\n\nYou can trigger live navigation in two ways:\n\n1. From the client: By using [Phoenix.Component.link/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1) and passing either `patch={url}` or `navigate={url}`.\n\n2. From the server: By using [Phoenix.LiveView.push_patch/2](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_patch/2) or [Phoenix.LiveView.push_navigate/2](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_navigate/2).\n\npatch and redirect/navigate serve different purposes.\n\n* **patch**: re-render the current LiveView with different parameters. This triggers the [handle_params/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:handle_params/3) callback but does not re-mount the LiveView.\n* **navigate**: redirects to a different LiveView. This will dismount the current LiveView and [mount/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:mount/3) the new LiveView.\n\nSee [HexDocs: LiveNavigation](https://hexdocs.pm/phoenix_live_view/live-navigation.html) for a full explanation.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Handle Params\n\nThe [handle_params/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:handle_params/3) callback is invoked after mount whenever a patch event occurs.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef handle_params(_params, _url, socket) do\n  {:noreply, socket}\nend\n```\n\nIt's often used to update the socket's state based on url parameters or the `live_action` provided by the router, which alters what the LiveView renders.\n\n## Forms\n\nPhoenix LiveView 18 introduced the [to_form/2](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#to_form/2) function to create a [Phoenix.HTML.Form](https://hexdocs.pm/phoenix_html/3.3.0/Phoenix.HTML.Form.html) struct that defines a form's fields.\n\nThe [to_form/2](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#to_form/2) function accepts a string-key map or a changeset for the form.\n\nForms typically send a `phx-change` event that triggers every time a field changes, and a `phx-submit` event every time the form is submitted. Typically we trigger validation on change, and create or update data in the database upon submission.\n\nHere's an example of defining a form with a `phx-submit` and a `phx-change` binding and event handler.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule AppWeb.FormExampleLive do\n  use AppWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, form: to_form(%{\"name\" => \"initial value\"}))}\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <.simple_form for={@form} phx-change=\"validate\" phx-submit=\"submit\">\n      <.input field={@form[:name]} label=\"Name\"/>\n      <:actions>\n        <.button>Submit</.button>\n      </:actions>\n    </.simple_form>\n    \"\"\"\n  end\n\n  def handle_event(\"validate\", params, socket) do\n    # typically the phx-change event is used for live validation of form data\n    {:noreply, socket}\n  end\n\n  def handle_event(\"submit\", params, socket) do\n    # socket.assigns.form preserves the form values in state\n    # this avoids clearing the form\n    {:noreply, assign(socket, form: to_form(params))}\n  end\nend\n```\n\n`params` will match the shape of the form data.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{\"name\" => \"some name\"}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Validating Data\n\nForms that use a changeset will rely on the changeset for error handling. Forms that use a `map` can provide an optional `:errors` list to the `to_form/2` function.\n\nHere's an example of providing errors to a `params` map.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nassign(socket, form: to_form(params, errors: [name: {\"Must be less than 20 characters\", []}]))\n```\n\n## LiveView Testing\n\n### Mounting A LiveView In A Test\n\n[LiveView Testing](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#content)\n\nWe can mount a LiveView in a test using the [live/2](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#live/2) macro. This mounts the LiveView process and returns the `html` and the LiveView process (`view`) in a tuple for use in the test.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, _view, html} = live(conn, \"/hello\")\n```\n\nThe rendered html used in assertions.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nassert html =~ \"Hello, World!\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Testing A LiveView\n\nAs with all tests, test modules are typically defined in a corresponding file in the `tests` folder of a phoenix application. For example a module in `lib/app_web/live/example_live.ex` would be tested in `test/app_web/live/example_live.ex`.\n\nPhoenix provides the [LiveViewTest](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html) module for testing LiveViews. Broadly speaking, these functions select elements, trigger events, and return the HTML response for assertion purposes.\n\nHere are a few commonly used functions:\n\n* [element/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#element/3) select an element.\n* [form/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#form/3) select a form element.\n* [render/1](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#render/1) render the HTML of an element or the entire view.\n* [render_click/2](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#render_click/2) return the HTML response of a LiveView after clicking an element.\n* [render_submit/2](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#render_submit/2) submit a form and return the HTML response of a LiveView after submission.\n\nWe can use these functions to simulate user interaction with a LiveView.\n\nHere's an example test for a click event, and for a form submission.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule LiveViewCounterWeb.CounterLiveTest do\n  use LiveViewCounterWeb.ConnCase, async: true\n  import Phoenix.LiveViewTest\n\n  test \"increment count\", %{conn: conn} do\n    {:ok, view, html} = live(conn, \"/\")\n    assert html =~ \"Count: 0\"\n\n    assert view\n           |> element(\"#increment-button\", \"Increment\")\n           |> render_click() =~ \"Count: 1\"\n  end\n\n  test \"increment count by form value\", %{conn: conn} do\n    {:ok, view, html} = live(conn, \"/\")\n    assert html =~ \"Count: 0\"\n\n    assert view\n           |> form(\"#increment-form\")\n           |> render_submit(%{increment_by: \"3\"}) =~ \"Count: 3\"\n  end\nend\n```\n\n`#increment-form` and `#increment` would be `id` attributes provided to HTML elements rendered by the LiveView.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef render(assigns) do\n  ~H\"\"\"\n  <h1>Counter</h1>\n  <p>Count: <%= @count %></p>\n  <.button id=\"increment-button\" phx-click=\"increment\">Increment</.button>\n  <.simple_form id=\"increment-form\" for={@form} phx-change=\"change\" phx-submit=\"increment_by\">\n    <.input type=\"number\" field={@form[:increment_by]} label=\"Increment Count\"/>\n    <:actions>\n      <.button>Increment</.button>\n    </:actions>\n  </.simple_form>\n  \"\"\"\nend\n```\n\nSee [HexDocs: Phoenix.LiveViewTesting](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#content) for more.\n\n## Phoenix.LiveView.JS\n\n[Phoenix.LiveView.JS](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html) provides functions for executing common JavaScript commands.\n\nHere's an example of using [JS.toggle/1](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#toggle/1) to hide and show some element on the page.\n\n```html\n<button phx-click={JS.toggle(to: \"#toggleable-element\")}>Hide/Show</button>\n<p id=\"toggleable-element\">This will hide and show</p>\n```\n\nWhile mostly beyond the scope of this course, JavaScript is another programming language used in web development that we sometimes rely on as Elixir/Phoenix Developers. LiveView is largely replacing the need to work with JavaScript, but there will likely always be times that we need to rely upon it.\n\nSee [MDN: JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) to learn more about JavaScript.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)\n* [Elixir Schools: LiveView](https://elixirschool.com/blog/phoenix-live-view/)\n* [HexDocs: Phoenix.HTML](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html)\n* [PragProg: Programming Phoenix LiveView](https://pragprog.com/titles/liveview/programming-phoenix-liveview/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish LiveView reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=LiveView\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/capstone_mock.livemd\">Capstone Project: Mock</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/liveview_follow_along_counter.livemd\">Follow Along: LiveView Counter</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task43-reading-testing_phoenix", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Testing Phoenix\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Testing Phoenix\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_posts.livemd\">Blog: Posts</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_search.livemd\">Blog: Search</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we generate a resource in a Phoenix application?\n* Explain Contexts, Schemas, Migrations, and Repo.\n\n## Overview\n\nThis is a companion reading for the [Blog: Search](../exercises/blog_search.livemd) exercise. This lesson is an overview of how to write tests in a Phoenix application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Phoenix Test Organization\n\nPhoenix comes with a built-in testing framework, which includes ExUnit and other testing-related libraries.\n\nTests are typically organized into different modules, depending on what you want to test. There are two primary test folders `tests/app` and `tests/app_web` where `app` is the name of our application.\n\nFor example, if we want to test a `Blog.PostController` module, we would define a `Blog.PostControllerTest` module in `tests/app_web/post_controller_test.exs`.\n\nOr if we wanted to test a `Blog.Posts` context, we would define a `Blog.PostsTest` module in `tests/app/posts_test.exs`.\n\n```mermaid\nflowchart\n\ntests --> app --> Blog.PostsTest\ntests --> app_web --> BlogWeb.PostControllerTest\n```\n\nThe `mix test` command automatically runs all `*_test.exs` files in the `tests` folder.\n\nBy default, the Phoenix generator creates default tests for us, but they often have to be modified and updated as application behavior changes, or when working with associated data structures.\n\n## Context Tests With DataCase\n\nPhoenix defines a `DataCase` module in `tests/support/data_case.ex`. DataCase is a test case that sets up a test database and provides helper functions for creating and manipulating data.\n\nThis test case is typically used for contexts tests. Here's an example test suite for a `Posts` context. Without the `DataCase` there wouldn't be a sandbox database for these context functions to act upon.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.PostsTest do\n  use Blog.DataCase\n\n  alias Blog.Posts\n\n  describe \"posts\" do\n    alias Blog.Posts.Post\n\n    import Blog.PostsFixtures\n\n    @invalid_attrs %{content: nil, subtitle: nil, title: nil}\n\n    test \"list_posts/0 returns all posts\" do\n      post = post_fixture()\n      assert Posts.list_posts() == [post]\n    end\n\n    test \"get_post!/1 returns the post with given id\" do\n      post = post_fixture()\n      assert Posts.get_post!(post.id) == post\n    end\n\n    test \"create_post/1 with valid data creates a post\" do\n      valid_attrs = %{content: \"some content\", subtitle: \"some subtitle\", title: \"some title\"}\n\n      assert {:ok, %Post{} = post} = Posts.create_post(valid_attrs)\n      assert post.content == \"some content\"\n      assert post.subtitle == \"some subtitle\"\n      assert post.title == \"some title\"\n    end\n\n    test \"create_post/1 with invalid data returns error changeset\" do\n      assert {:error, %Ecto.Changeset{}} = Posts.create_post(@invalid_attrs)\n    end\n\n    test \"update_post/2 with valid data updates the post\" do\n      post = post_fixture()\n      update_attrs = %{content: \"some updated content\", subtitle: \"some updated subtitle\", title: \"some updated title\"}\n\n      assert {:ok, %Post{} = post} = Posts.update_post(post, update_attrs)\n      assert post.content == \"some updated content\"\n      assert post.subtitle == \"some updated subtitle\"\n      assert post.title == \"some updated title\"\n    end\n\n    test \"update_post/2 with invalid data returns error changeset\" do\n      post = post_fixture()\n      assert {:error, %Ecto.Changeset{}} = Posts.update_post(post, @invalid_attrs)\n      assert post == Posts.get_post!(post.id)\n    end\n\n    test \"delete_post/1 deletes the post\" do\n      post = post_fixture()\n      assert {:ok, %Post{}} = Posts.delete_post(post)\n      assert_raise Ecto.NoResultsError, fn -> Posts.get_post!(post.id) end\n    end\n\n    test \"change_post/1 returns a post changeset\" do\n      post = post_fixture()\n      assert %Ecto.Changeset{} = Posts.change_post(post)\n    end\n  end\nend\n\n```\n\n## Controller Tests With ConnCase\n\n`ConnCase` is a test case that sets up an HTTP connection and provides helper functions for making HTTP requests and inspecting responses. This test case is typically used for testing controllers.\n\nHere's an example test suite for a `PostController`. `ConnCase` sets up the `conn` [Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) struct used when making requests. `ConnCase` also gives us access to functions defined in the [Phoenix.ConnTest](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#functions) module such as [get/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#get/3), [post/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#post/3), [put/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#put/3) and [delete/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#delete/3) used to simulate HTTP requests.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule BlogWeb.PostControllerTest do\n  use BlogWeb.ConnCase\n\n  import Blog.PostsFixtures\n\n  @create_attrs %{content: \"some content\", subtitle: \"some subtitle\", title: \"some title\"}\n  @update_attrs %{content: \"some updated content\", subtitle: \"some updated subtitle\", title: \"some updated title\"}\n  @invalid_attrs %{content: nil, subtitle: nil, title: nil}\n\n  describe \"index\" do\n    test \"lists all posts\", %{conn: conn} do\n      conn = get(conn, ~p\"/posts\")\n      assert html_response(conn, 200) =~ \"Listing Posts\"\n    end\n  end\n\n  describe \"new post\" do\n    test \"renders form\", %{conn: conn} do\n      conn = get(conn, ~p\"/posts/new\")\n      assert html_response(conn, 200) =~ \"New Post\"\n    end\n  end\n\n  describe \"create post\" do\n    test \"redirects to show when data is valid\", %{conn: conn} do\n      conn = post(conn, ~p\"/posts\", post: @create_attrs)\n\n      assert %{id: id} = redirected_params(conn)\n      assert redirected_to(conn) == ~p\"/posts/#{id}\"\n\n      conn = get(conn, ~p\"/posts/#{id}\")\n      assert html_response(conn, 200) =~ \"Post #{id}\"\n    end\n\n    test \"renders errors when data is invalid\", %{conn: conn} do\n      conn = post(conn, ~p\"/posts\", post: @invalid_attrs)\n      assert html_response(conn, 200) =~ \"New Post\"\n    end\n  end\n\n  describe \"edit post\" do\n    setup [:create_post]\n\n    test \"renders form for editing chosen post\", %{conn: conn, post: post} do\n      conn = get(conn, ~p\"/posts/#{post}/edit\")\n      assert html_response(conn, 200) =~ \"Edit Post\"\n    end\n  end\n\n  describe \"update post\" do\n    setup [:create_post]\n\n    test \"redirects when data is valid\", %{conn: conn, post: post} do\n      conn = put(conn, ~p\"/posts/#{post}\", post: @update_attrs)\n      assert redirected_to(conn) == ~p\"/posts/#{post}\"\n\n      conn = get(conn, ~p\"/posts/#{post}\")\n      assert html_response(conn, 200) =~ \"some updated content\"\n    end\n\n    test \"renders errors when data is invalid\", %{conn: conn, post: post} do\n      conn = put(conn, ~p\"/posts/#{post}\", post: @invalid_attrs)\n      assert html_response(conn, 200) =~ \"Edit Post\"\n    end\n  end\n\n  describe \"delete post\" do\n    setup [:create_post]\n\n    test \"deletes chosen post\", %{conn: conn, post: post} do\n      conn = delete(conn, ~p\"/posts/#{post}\")\n      assert redirected_to(conn) == ~p\"/posts\"\n\n      assert_error_sent 404, fn ->\n        get(conn, ~p\"/posts/#{post}\")\n      end\n    end\n  end\n\n  defp create_post(_) do\n    post = post_fixture()\n    %{post: post}\n  end\nend\n```\n\nThe `setup [:create_post]` section sometimes used in tests calls the `create_post/1` function.\n\n## Fixtures\n\nBy default, Phoenix sets up test fixtures that are used to create data. You may notice the `post_fixture/1` function in the example above.\n\nThese are merely convenience functions that allow us to create data in a test with or without supplying field values manually. Many projects choose to omit these and use context functions directly, or define their own fixtures using libraries such as [ExMachina](https://github.com/thoughtbot/ex_machina).\n\nHere's an example `PostsFixture` module that is imported in the `Blog.PostControllerTest` test example above.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule Blog.PostsFixtures do\n  def post_fixture(attrs \\\\ %{}) do\n    {:ok, post} =\n      attrs\n      |> Enum.into(%{\n        content: \"some content\",\n        subtitle: \"some subtitle\",\n        title: \"some title\"\n      })\n      |> Blog.Posts.create_post()\n\n    post\n  end\nend\n\n```\n\nThe `post_fixture/1` function uses `Enum.into/2` to merge default field values with overridden `attrs`.\n\n```elixir\nattrs = [title: \"overridden title\"]\n\nEnum.into(attrs, %{\n  content: \"some content\",\n  subtitle: \"some subtitle\",\n  title: \"some title\"\n})\n```\n\n## What Should Be Tested?\n\nIn software testing, it is important to ensure that the system works as expected and meets the user's requirements. Here are some areas that should be considered when deciding what to test:\n\n* **Core Functionality**: Ensure the main functionality for the application works as expected. For example the generated tests above cover the main CRUD actions for the system, and important features such as error handling.\n* **Previously Caught Bugs**: If possible, when fixing bugs in an application, write a test that reproduces the bug. This prevents bugs from re-emerging in a system like a game of whack-a-mole where you fix a bug and cause another by doing so.\n* **The Context**: Contexts are the interface to a resource. They allow you to focus on testing the functions in isolation, without worrying about the HTTP request/response cycle and avoid the overhead of setting up a full HTTP request/response cycle. They are generally more performant and therefore great for covering a wide variety of test cases.\n* **The Controller**: Controllers are the interface to an entire web application. They require more setup and overhead, but are therefore more comprehensive when testing a system. They are fantastic for ensuring an entire feature works as expected from the client's perspective rather than a single internal piece of an application.\n\n## Feature Example: Search\n\nTo make testing more practical, let's consider how we might test a search feature. The search will filter a list of blog posts by title in a partial and case-insensitive fashion.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Context Tests\n\nWe want to consider the **happy path** and the **edge cases** of a feature when testing.\n\n* happy path: filter is exact match\n* happy path: filter does not match\n* edge case: filter is partial match\n* edge case: filter is case-insensitive\n* edge case: filter is partial match and case-insensitive\n* edge case: filter is empty\n\nHere's an example test that successfully captures the above. It also further breaks down some of these edge cases for the sake of catching specific failures that might occur.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n`````elixir\ntest \"list_posts/1 filters posts by partial and case-insensitive title\" do\n  post = post_fixture(title: \"Title\")\n\n  # non-matching\n  assert Posts.list_posts(\"Non-Matching\") == []\n  # exact match\n  assert Posts.list_posts(\"Title\") == [post]\n  # partial match end\n  assert Posts.list_posts(\"tle\") == [post]\n  # partial match front\n  assert Posts.list_posts(\"Titl\") == [post]\n  # partial match middle\n  assert Posts.list_posts(\"itl\") == [post]\n  # case insensitive lower\n  assert Posts.list_posts(\"title\") == [post]\n  # case insensitive upper\n  assert Posts.list_posts(\"TITLE\") == [post]\n  # case insensitive and partial match\n  assert Posts.list_posts(\"ITL\") == [post]\n  # empty\n  assert Posts.list_posts(\"\") == [post]\nend\n````\n`````\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Controller Tests\n\nController tests allow use to test how our application handles HTTP actions. In this case, we might test that our application filters the list of posts when a user visits the post page http://localhost:4000/posts?title=Title with a `title` query parameter.\n\nHere's an example Controller test.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"search for posts - non-matching\", %{conn: conn} do\n  post = post_fixture(title: \"some title\")\n  conn = get(conn, ~p\"/posts\", title: \"Non-Matching\")\n  refute html_response(conn, 200) =~ post.title\nend\n\ntest \"search for posts - exact match\", %{conn: conn} do\n  post = post_fixture(title: \"some title\")\n  conn = get(conn, ~p\"/posts\", title: \"some title\")\n  assert html_response(conn, 200) =~ post.title\nend\n```\n\nWe've only included cases for the exact match and non-matching filter, but you could expand this test suite to include other edge cases.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"search for posts - partial match\", %{conn: conn} do\n  post = post_fixture(title: \"some title\")\n  conn = get(conn, ~p\"/posts\", title: \"itl\")\n  assert html_response(conn, 200) =~ post.title\nend\n```\n\nNotice each test requires more setup, so it's more verbose to cover a wider number of edge cases. In many cases, if we comprehensively unit test the context, we can be satisfied with fewer integration tests in the controller.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### What About The Form?\n\nController tests only cover HTTP actions. In the example above, we could write a controller that filters the list of posts without ever writing a form with a search input that lets the user search for posts.\n\nController tests **cannot** tests UI interactions such as submitting a form. However they can test the HTTP actions that we expect the form to trigger.\n\nTesting UI interactions such as submitting a form or clicking a button is best done using E2E (End-To-End) libraries such as [Wallaby](https://github.com/elixir-wallaby/wallaby).\n\nHere's an example form that user can use to make the GET request to search for posts.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={%{}} method={\"get\"} action={~p\"/posts\"}>\n  <.input field={f[:title]} type=\"text\" label=\"Search Posts\" />\n  <:actions>\n    <.button>Search</.button>\n  </:actions>\n</.simple_form>\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Phoenix: Introduction to Testing](https://hexdocs.pm/phoenix/testing.html)\n* [Phoenix: Testing Contexts](https://hexdocs.pm/phoenix/testing_contexts.html)\n* [Phoenix: Testing Controllers](https://hexdocs.pm/phoenix/testing_controllers.html)\n* [Phoenix: ConnTest](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Testing Phoenix reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Testing Phoenix\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_posts.livemd\">Blog: Posts</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_search.livemd\">Blog: Search</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task44-reading-booleans", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Booleans\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:visual, github: \"brooklinjazz/visual\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Booleans\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/io.livemd\">IO</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/comparison_operators.livemd\">Comparison Operators</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are booleans, and what information might they represent in a program?\n* What are the boolean operators, and what do they do?\n* What are strict vs non-strict boolean operators?\n* What are `if` statements, and how are they useful in our programs?\n\n## Booleans\n\nBooleans (BOO-LEE-ANS) are `true` and `false` values in your code. They are often useful for\nrepresenting conditions and triggering actions in your program.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntrue\nfalse\n```\n\nAs part of programming, you'll often create branching paths. Essentially there are multiple things that could happen depending on certain conditions. We often call this **control flow**.\n\nLet's take an example and say we have a program that controls a light.\nEither we can tell the light to power `on` or power `off`. In this case, `on` would be `true` and `off` would be `false`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  A[is_powered] --> true --> on\n  A[is_powered] --> false --> off\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, turn the power on in our light control program to see the light turn on! Replace `false` with `true`.\n\n<!-- livebook:{\"attrs\":{\"code\":\"power = false\",\"source\":\"content = if power, do: \\\"/images/on.png\\\", else: \\\"/images/off.png\\\"\\nKino.Image.new(File.read!(__DIR__ <> content), :png)\",\"title\":\"Power on!\"},\"chunks\":null,\"kind\":\"Elixir.Visual\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\npower = false\ncontent = if power, do: \"/images/on.png\", else: \"/images/off.png\"\nKino.Image.new(File.read!(__DIR__ <> content), :png)\n```\n\nFor more on booleans consider this video by Crash Course Computer Science.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=gI-qXk7XojA\\\")\",\"title\":\"Boolean Logic & Logic Gates\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=gI-qXk7XojA\")\n```\n\n## Boolean Operators\n\nUsing the **boolean operators** `and`, `or` and `not` we can compare and manipulate booleans.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### `and`: Check If Two Booleans Are `true`.\n\nReturns `true` if left and right-hand side are true. Returns `false` if either the left side and/or right side of the operator are `false`.\n\n```mermaid\n  flowchart LR\n  A[true] --> C\n  B[true] --> C\n  C[and] --> D[true]\n```\n\n```elixir\ntrue and true\n```\n\n```elixir\ntrue and false\n```\n\n```elixir\nfalse and true\n```\n\n```elixir\nfalse and false\n```\n\n### `or`: Check If One Or More Booleans Are True.\n\nReturns `true` if either the left side or the right side of the operator are `true`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\n  flowchart LR\n  A[false] --> C\n  B[true] --> C\n  C[or] --> D[true]\n```\n\n```elixir\ntrue or true\n```\n\n```elixir\ntrue or false\n```\n\n```elixir\nfalse or true\n```\n\n```elixir\nfalse or false\n```\n\n### `not`: Flip A Booleans Value\n\nFlips `false` -> `true` and `true` -> `false`.\n\n```elixir\nnot true\n```\n\n```elixir\nnot false\n```\n\n## Strict And Non-Strict Operators\n\n`and`, `or`, and `not` are strict boolean operators, meaning they should only be used with booleans, otherwise they will raise an error.\n\n```elixir\n1 and 1\n```\n\nSometimes we want to make logical comparison using **truthy** and **falsy** values. `nil` and `false` are falsy values, and everything else is a truthy value.\n\nWe can use non-strict boolean operators `&&` (and), `||` (or), and `!` (not) to work with truthy and falsy values.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### `&&` Check If Two Values Are Truthy.\n\nReturns the right-hand side value if the left-hand side value is truthy.\n\n```elixir\n1 && 2\n```\n\nReturns the left-hand side value if it is falsy.\n\n```elixir\nnil && 2\n```\n\n```elixir\nfalse && 2\n```\n\n### `||` Checks If One Or More Values Are Truthy.\n\nReturns the first truthy value on either the left-hand side or the right-hand side.\n\n```elixir\n2 || nil\n```\n\n```elixir\n1 || 2\n```\n\n```elixir\nnil || 2\n```\n\n### `!`: Flips The Falsy Or Truthy Value To `true` Or `false`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFlips truthy -> `false` and falsy -> `true`.\n\n```elixir\n!1\n```\n\n```elixir\n!nil\n```\n\n## When Should You Use Strict Or Non-strict Operators?\n\nYou might wonder why you shouldn't simply always use non-strict operators `&&`, `||`, and `!` since they also work with booleans.\n\n```elixir\ntrue && true\n```\n\n```elixir\nfalse || true\n```\n\n```elixir\n!true\n```\n\nThe primary reason is communication. We want our code to communicate to other developers, so it's useful to use `and`, `or`, and `not` to communicate to other developers reading our code that we are working with boolean values.\n\nGenerally, prefer `and`, `or`, and `not` with booleans, and use `&&`, `||`, and `!` with non-boolean values.\n\n## Control Flow\n\nBy comparing booleans, you can create branching paths in your code depending on certain conditions.\n\nFor example, let's say we're building a weather app. This app might send morning notifications to users\nto let them know that it's going to be a sunny day.\n\nYou might check that the user **is subscribed**, that it **is morning**, and that it\n**is sunny**. If all of these things are true, then we want to send a notification.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  A[is subscribed] --> and\n  B[is morning] --> and\n  C[is sunny] --> and\n  and --> true\n  true --> D[send notification]\n  and --> false\n  false --> E[don't send notification]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can cleverly use boolean operators to write this logic. Try changing any of the `true` values to `false` and you'll see we no longer simulate sending a notification.\n\n```elixir\nis_subscribed = true\nis_morning = true\nis_sunny = true\n\nis_subscribed and is_morning and is_sunny && \"send notification!\"\n```\n\n### `if`\n\nRather than rely on boolean operators entirely, it's more common to use specific control flow structures. For example, we can replicate the code above using [if](https://elixir-lang.org/getting-started/case-cond-and-if.html#if-and-unless) statements.\n\n```elixir\nif is_subscribed and is_morning and is_sunny do\n  \"send notification\"\nend\n```\n\n### `else`\n\n`if` statements allow use to trigger some code when some condition is truthy. We often use `if` statements in combination with `else` statements to create two separate branching paths in our code.\n\nFor example, let's say we're creating a coin flip game. The user provides a `guess` of `:heads` or `:tails`, and we have `coin` flip of `:heads` or `:tails`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nif/else --> c[coin == guess] --true--> w[You win!]\nc --false--> l[You lose!]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHere's how we could write this in code. Try changing `guess` to `:heads` to win the coin flip game.\n\n```elixir\ncoin = :heads\nguess = :tails\n\nif coin == guess do\n  \"You win!\"\nelse\n  \"You lose!\"\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir-lang: Booleans](https://elixir-lang.org/getting-started/basic-types.html#booleans)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Booleans reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Booleans\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/io.livemd\">IO</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/comparison_operators.livemd\">Comparison Operators</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task45-reading-built-in_modules", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Built-In Elixir Modules\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Built-In Elixir Modules\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/measurements.livemd\">Measurements</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/filter_values_by_type.livemd\">Filter Values By Type</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* Given you're working with a particular data type such as an integer or map, where in the Elixir documentation should you look for relevant functionality?\n* How do you safely inspect any data type?\n* What are some common built-in functions developers use the most, and how do you use them?\n\n## Overview\n\n### Reinventing The Wheel\n\nRather than re-invent the wheel, we can rely upon already built tools to solve a range of common problems. Elixir provides built-in modules we can leverage to accomplish a wide variety of behavior without building our own custom solution.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Information Overload\n\nThe standard Elixir library contains a massive number of modules and functions. It's not reasonable to expect your self to memorize all of these functions.\n\nInstead, you should aspire to learn the most common modules and functions that you use everyday, and develop enough familiarity with the standard library to know where to look on [HexDocs](https://hexdocs.pm/elixir/api-reference.html) to find the appropriate tool when you need it.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### [Kernel](https://hexdocs.pm/elixir/Kernel.html)\n\nThe Elixir [Kernel](https://hexdocs.pm/elixir/Kernel.html) module is part of the standard library in the Elixir programming language. It provides a number of basic functions for working with the underlying operating system, as well as functions that are core to Elixir.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Modules For Data Types\n\nMost common data types have an associated module which contains functionality related to that data type.\n\nFor example:\n\n* [Integer](https://hexdocs.pm/elixir/Integer.html)\n* [String](https://hexdocs.pm/elixir/String.html)\n* [List](https://hexdocs.pm/elixir/List.html)\n* [Map](https://hexdocs.pm/elixir/Map.html)\n* [Keyword](https://hexdocs.pm/elixir/Keyword.html)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Modules For Behavior\n\nElixir groups many modules into related behavior. For example, we've already seen the [Enum](https://hexdocs.pm/elixir/Enum.html) module for data-agnostic enumeration.\n\n## The Kernel Module\n\nThe [Kernel](https://hexdocs.pm/elixir/Kernel.html#functions) is the core of everything Elixir.\n\nEven the operators you've already used are simply an alternative syntax to using functions in\nthe Kernel.\n\n```elixir\nKernel.+(3, 3)\n```\n\n## Kernel.elem/2\n\nThe [Kernel.elem/2](https://hexdocs.pm/elixir/Kernel.html#elem/2) function can retrieve an element from a tuple given an index.\n\n```elixir\nKernel.elem({3, 6, 9}, 0)\n```\n\nWe can use [Kernel](https://hexdocs.pm/elixir/Kernel.html) functions with or without using the [Kernel](https://hexdocs.pm/elixir/Kernel.html) namespace.\n\n```elixir\nelem({3, 6, 9}, 0)\n```\n\n### Your Turn\n\nUse [Kernel.elem/2](https://hexdocs.pm/elixir/Kernel.html#elem/2) to retrieve `100` from the following tuple.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  tuple = {0, 4, 1, 100, 5, 7}\n  elem(tuple, 3)\n  ```\n\n</details>\n\n```elixir\ntuple = {0, 4, 1, 100, 5, 7}\n```\n\n## Checking Types\n\n[Kernel](https://hexdocs.pm/elixir/Kernel.html) contains many functions for determining a value's type such as `is_atom/1`, `is_binary/1`, `is_map/1`, and `is_integer/1`.\n\n```elixir\ntrue = Kernel.is_map(%{})\ntrue = Kernel.is_atom(:an_atom)\ntrue = Kernel.is_binary(\"\")\ntrue = Kernel.is_integer(1)\n```\n\n### Your Turn\n\nUse the [Kernel](https://hexdocs.pm/elixir/Kernel.html) module to check the types of each value in the cells below. You may have to read through the [Kernel Documentation](https://hexdocs.pm/elixir/Kernel.html) to find the appropriate functions.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  is_atom(:example)\n  is_map(%{})\n  is_binary(\"\")\n  is_integer(1)\n  is_float(1.0)\n  is_boolean(true)\n  is_list([])\n  is_tuple({})\n  ```\n\n</details>\n\nThe first cell is filled out for sake of example. The result of each cell should be `true`.\n\n```elixir\nis_atom(:example)\n```\n\n```elixir\n%{}\n```\n\n```elixir\n{}\n```\n\n```elixir\n[]\n```\n\n```elixir\ntrue\n```\n\n```elixir\n1.0\n```\n\n```elixir\n1\n```\n\n```elixir\n\"\"\n```\n\nThe [Kernel](https://hexdocs.pm/elixir/Kernel.html) is reasonably large. Remember, our goal is not to memorize every function but to develop familiarity with repeated practice.\n\n## Max And Min\n\nWe can use the [max/2](https://hexdocs.pm/elixir/Kernel.html#max/2) and [min/2](https://hexdocs.pm/elixir/Kernel.html#min/2) to return the largest (max) or smallest (min) value between two numbers.\n\n```elixir\nmax(100, 110)\n```\n\n```elixir\nmin(100, 110)\n```\n\n### Your Turn\n\nWe often use [max/2](https://hexdocs.pm/elixir/Kernel.html#max/2) and [min/2](https://hexdocs.pm/elixir/Kernel.html#min/2) to prevent a value from going above or below a value.\n\nFor example, let's say we have a `seconds` variable that represents seconds on a clock.\nWe want to prevent `seconds` from being less than `0` seconds, and more than `59` seconds.\n\nCreated a `capped_seconds` variable that uses the value of `seconds` and cannot go above `59` seconds or below `0` seconds.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  seconds = 61\n  capped_seconds = max(min(seconds, 59), 0)\n  ```\n\n</details>\n\nEnter your solution below. if `seconds` is less than `0` `capped_seconds` should be `0`. If `seconds` is greater than `59`, then `capped_seconds` should be `59`.\n\n```elixir\nseconds = 60\ncapped_seconds = nil\n```\n\n## Safe Inspection\n\nNot all values can be interpolated inside of a string. Attempting to do so results in a `protocol String.Chars not implemented` error.\n\n```elixir\nmap = %{}\n\"#{map}\"\n```\n\n`String.Chars` is a protocol for converting data types into a string. We'll learn more about protocols in a future lesson. It's enough for our purposes to know that this means the data type does not know how to be safely converted to a string.\n\nWe can use [Kernel.inspect/2](https://hexdocs.pm/elixir/Kernel.html#inspect/2) to safely convert any Elixir term into a string.\n\n```elixir\ninspect(%{})\n```\n\nWhich allows us to use values that don't implement the `String.Chars` protocol\n\n```elixir\nmap = %{}\n\"#{inspect(map)}\"\n```\n\n### Your Turn\n\nUse [Kernel.inspect/2](https://hexdocs.pm/elixir/Kernel.html#inspect/2) to safely interpolate the following variables inside of a string.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  map = %{}\n  list = [1, 2, 3]\n  tuple = {1, 2, 3}\n\n  \"#{inspect(map)} #{inspect(list)} #{inspect(tuple)}\"\n  ```\n\n</details>\n\n```elixir\nmap = %{}\nlist = [1, 2, 3]\ntuple = {1, 2, 3}\n\n\"\"\n```\n\n## The Integer Module\n\nThe [Integer](https://hexdocs.pm/elixir/Integer.html#functions) module contains functionality related to Integers.\n\nWe've already seen the [Integer](https://hexdocs.pm/elixir/Integer.html#functions) module in the [Non-Enumerables](./non_enumerables.livemd) reading material using [Integer.digits/2](https://hexdocs.pm/elixir/Integer.html#digits/2).\n\n```elixir\nInteger.digits(123_456_789)\n```\n\nAs well as [Integer.undigits/2](https://hexdocs.pm/elixir/Integer.html#undigits/2).\n\n```elixir\nInteger.undigits([1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n\n## Parsing Integers From Strings\n\nWe can use [Integer.parse/2](https://hexdocs.pm/elixir/Integer.html#parse/2) to parse an integer from a string. It returns a `{integer, rest_of_string}` tuple.\n\n```elixir\nInteger.parse(\"2\")\n```\n\nThat makes it especially useful when we have a string with non-integer input such as a newline character `\\n`.\n\n```elixir\nuser_input = \"25\\n\"\nInteger.parse(user_input)\n```\n\n### Your Turn\n\nOpen the IEx shell by running `iex` in your command line. You must have Elixir installed locally for this to work.\n\n```\n$ iex\n```\n\nThis should open the IEx Shell.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nErlang/OTP 25 [erts-13.0.2] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]\n\nInteractive Elixir (1.13.0) - press Ctrl+C to exit (type h() ENTER for help)\n\niex(1)>\n```\n\nYou can use [IO.gets/2](https://hexdocs.pm/elixir/IO.html#gets/2) to retrieve user input in this environment (this does not work in Livebook because we do not have a Livebook console)\n\nUse [Integer.parse/1](https://hexdocs.pm/elixir/Integer.html#parse/1) to convert the string input into an integer.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex(1)> IO.gets(\"Give me a number! \")\nGive me a number! 25\n\"25\\n\"\niex(2)> IO.gets(\"Give me a number! \") |> Integer.parse()\nGive me a number! 25\n{25, \"\\n\"}\n```\n\n## Integer Math Functions\n\nThe [Integer](https://hexdocs.pm/elixir/Integer.html) module includes several math-related functions such as [Integer.gcd/2](https://hexdocs.pm/elixir/Integer.html#gcd/2) (greatest common denominator), [Integer.pow/2](https://hexdocs.pm/elixir/Integer.html#pow/2), [Integer.mod/2](https://hexdocs.pm/elixir/Integer.html#mod/2), and others.\n\nLikely, you'll use the arithmetic operators and functions from the [Kernel](https://hexdocs.pm/elixir/Kernel.html) module and will rarely need to rely on these functions in the [Integer](https://hexdocs.pm/elixir/Integer.html) module so we won't go over them in greater detaill.\n\n### Your Turn\n\nUse the [Integer.gcd/2](https://hexdocs.pm/elixir/Integer.html#gcd/2) function to determine the greatest common denominator of `10` and `15`. The greatest common divisor (GCD) is the largest\npositive integer that divides both 10 and 15 evenly, so the result should be `5`.\n\n```elixir\n\n```\n\n## The String Module\n\nThe [String](https://hexdocs.pm/elixir/String.html#functions) module contains functionality related to strings.\n\nHere are a few common functions to get you started.\n\n* [String.at/2](https://hexdocs.pm/elixir/String.html#at/2) gets the value at the index of a string.\n* [String.contains?/2](https://hexdocs.pm/elixir/String.html#contains?/2) check if a string contains a value.\n* [String.capitalize/2](https://hexdocs.pm/elixir/String.html#capitalize/2) capitalize the first letter in a string and leaves the rest lowercase.\n* [String.downcase/2](https://hexdocs.pm/elixir/String.html#downcase/2) convert a string to all lowercase.\n* [String.split/3](https://hexdocs.pm/elixir/String.html#split/3) split the string into a list of words.\n* [String.trim/1](https://hexdocs.pm/elixir/String.html#trim/1) remove whitespace from a string.\n* [String.upcase/2](https://hexdocs.pm/elixir/String.html#upcase/2) convert a string to ALL CAPS.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Indexes\n\nYou can imagine a string like a list of characters. However, be warned this is only a mental model, strings are not actually implemented as lists they are implemented as binaries.\n\n```mermaid\nflowchart TB\n  subgraph Characters\n    S\n    T\n    R\n    I\n    N\n    G\n  end\n  subgraph Indexes\n    direction TB\n    S --- 0\n    T --- 1\n    R --- 2\n    I --- 3\n    N --- 4\n    G --- 5\n  end\n```\n\nNotice that the index starts with 0, not 1, just like lists.\n\nSo the character at index 1 in `\"hello\"` would be `\"e\"`.\n\n```mermaid\nflowchart TB\n  subgraph Characters\n    H\n    E\n    L1[L]\n    L2[L]\n    O\n  end\n  subgraph Indexes\n    direction TB\n    H --- 0\n    E --- 1\n    L1 --- 2\n    L2 --- 3\n    O --- 4\n  end\n```\n\n## Your Turn: String Exercises\n\nUse the [String.at/2](https://hexdocs.pm/elixir/String.html#at/2) function to get the character at index `2` of `\"hello\"`. The result should be the character `l`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.at(\"hello\", 2)\n  ```\n\n</details>\n\n```elixir\n\"hello\"\n```\n\nUse the [String.at/2](https://hexdocs.pm/elixir/String.html#at/2) function to retrieve the letter `\"o\"` in `\"hello\"`\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.at(\"hello\", 4)\n  ```\n\n</details>\n\n```elixir\n\"hello\"\n```\n\nUse the [String.contains?/2](https://hexdocs.pm/elixir/String.html#contains?/2) function to determine if `\"hello\"` contains `\"lo\"`. The result should be `true`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.contains(\"hello\", \"lo\")\n  ```\n\n</details>\n\n```elixir\n\"Hello\"\n```\n\nUse [String.capitalize/2](https://hexdocs.pm/elixir/String.html#capitalize/2) to capitalize `\"hello\"` to `\"Hello\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.capitalize(\"hello\")\n  ```\n\n</details>\n\n```elixir\n\"hello\"\n```\n\nUse [String.upcase/2](https://hexdocs.pm/elixir/String.html#upcase/2) to upcase `\"hello\"` to `\"HELLO\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.upcase(\"hello\")\n  ```\n\n</details>\n\n```elixir\n\"hello\"\n```\n\nUse [String.downcase/2](https://hexdocs.pm/elixir/String.html#downcase/2) to dowcase `\"HELLO\"` to `\"hello\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.downcase(\"HELLO\")\n  ```\n\n</details>\n\n```elixir\n\"HELLO\"\n```\n\nUse [String.split/3](https://hexdocs.pm/elixir/String.html#split/3) to split the following comma-separated list of strings into a list of words.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.split(\"have,a,great,day\", \",\")\n  ```\n\n</details>\n\n```elixir\n\"have,a,great,day\"\n```\n\nUse [String.trim/1](https://hexdocs.pm/elixir/String.html#trim/1) to remove whitespace from the `\"  hello!  \"` string.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  String.trim(\"  hello!  \")\n  ```\n\n</details>\n\n```elixir\n\"  hello!  \"\n```\n\n## The List Module\n\nThe [List](https://hexdocs.pm/elixir/List.html) module contains functionality related to lists.\n\nHere are a few common functions to get you started.\n\n* [List.delete_at/2](https://hexdocs.pm/elixir/List.html#delete_at/2) remove an element at an index in a list.\n* [List.first/2](https://hexdocs.pm/elixir/List.html#first/2) retrieve the first element in a list similar to `hd/1` or pattern matching on the head and tail of a list.\n* [List.flatten/2](https://hexdocs.pm/elixir/List.html#flatten/2) flatten nested lists within a list.\n* [List.insert_at/3](https://hexdocs.pm/elixir/List.html#insert_at/3) insert an element at a specified index within a list.\n* [List.last/2](https://hexdocs.pm/elixir/List.html#last/2) retrieve the last element in a list.\n* [List.update_at/3](https://hexdocs.pm/elixir/List.html#update_at/3) update an element at a specified index within a list.\n* [List.zip/1](https://hexdocs.pm/elixir/List.html#zip/1) combine elements from multiple lists into a single list of tuples.\n\n### Mutation\n\nRemember that in Elixir we do not mutate variables. That means the [List.delete_at/2](https://hexdocs.pm/elixir/List.html#delete_at/2), [List.insert_at/3](https://hexdocs.pm/elixir/List.html#insert_at/3) and [List.update_at/3](https://hexdocs.pm/elixir/List.html#update_at/3) functions do not mutate the original list. Instead, they create a new copy of the original list with the operation applied to it.\n\n```elixir\nlist = [1, 2, 3]\nList.delete_at(list, 1)\n```\n\nNotice the original `list` variable has not changed.\n\n```elixir\nlist\n```\n\n## Retrieving The First Element In A List\n\nWe have many different ways of retrieving the first element in a list. [List.first/2](https://hexdocs.pm/elixir/List.html#first/2) retrieves the first element in a list. We can also use [Kernel.hd/1](https://hexdocs.pm/elixir/Kernel.html#hd/1), [Enum.at/2](https://hexdocs.pm/elixir/Enum.html#at/2), or pattern matching.\n\n```elixir\nhead = List.first([1, 2, 3])\n```\n\n```elixir\n[head | _tail] = [1, 2, 3]\nhead\n```\n\n```elixir\nhd([1, 2, 3])\n```\n\n```elixir\nhead = Enum.at([1, 2, 3], 0)\n```\n\nTry pattern matching, [List.first/2](https://hexdocs.pm/elixir/List.html#first/2), [Enum.at/2](https://hexdocs.pm/elixir/Enum.html#at/2), and `hd/1` to retrieve the first element of\nthe list below.\n\n## Your Turn: List Exercises\n\nUse [List.delete_at/2](https://hexdocs.pm/elixir/List.html#delete_at/2) to remove `2` from this list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  List.delete_at([2, 1, 3], 0)\n  ```\n\n</details>\n\n```elixir\n[2, 1, 3]\n```\n\nUse [List.flatten/1](https://hexdocs.pm/elixir/List.html#flatten/1) to flatten the following list into `[1, 2, 3, 4, 5, 6, 7, 8, 9]`\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  List.flatten([1, 2, [3, 4, 5], 6, [7, [8, [9]]]])\n  ```\n\n</details>\n\n```elixir\n[1, 2, [3, 4, 5], 6, [7, [8, [9]]]]\n```\n\nUse [List.insert_at/3](https://hexdocs.pm/elixir/List.html#insert_at/3) to insert `2` into the following list to make `[1, 2, 3]`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  List.insert_at([1, 3], 1, 2)\n  ```\n\n</details>\n\n```elixir\n[1, 3]\n```\n\nUse [List.last/2](https://hexdocs.pm/elixir/List.html#last/2) to retrieve the last element `10000` in a list from `1` to `10000`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  List.last(Enum.to_list(1..10000))\n  ```\n\n  You might also use the piper operator `|>`.\n\n  ```elixir\n  1..10000 |> Enum.to_list() |> List.last()\n  ```\n\n</details>\n\n```elixir\nEnum.to_list(1..10000)\n```\n\nUse [List.update_at/3](https://hexdocs.pm/elixir/List.html#update_at/3) to subtract `2` from `4` in the following list to make `[1, 2, 3]`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  List.update_at([1, 4, 3], 1, fn elem -> elem - 2 end)\n  ```\n\n</details>\n\n```elixir\n[1, 4, 3]\n```\n\nUse [List.zip/1](https://hexdocs.pm/elixir/List.html#zip/1) to combine these two lists to make `[{\"a\", 1}, {\"b\", 2}, {\"c\", 3}]`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  letters = [\"a\", \"b\", \"c\"]\n  numbers = [1, 2, 3]\n\n  List.zip([letters, numbers])\n  ```\n\n</details>\n\n```elixir\nletters = [\"a\", \"b\", \"c\"]\nnumbers = [1, 2, 3]\n```\n\n## The Map Module\n\nThe [Map](https://hexdocs.pm/elixir/Map.html#functions) module contains functionality related to maps.\n\nHere are a few common functions to get you started.\n\n* [Map.get/3](https://hexdocs.pm/elixir/Map.html#get/3) retrieve values in a map.\n* [Map.put/3](https://hexdocs.pm/elixir/Map.html#put/3) put a value into a map.\n* [Map.keys/1](https://hexdocs.pm/elixir/Map.html#keys/1) list the keys in a map.\n* [Map.delete/2](https://hexdocs.pm/elixir/Map.html#delete/2) remove a key and value from a map.\n* [Map.merge/2](https://hexdocs.pm/elixir/Map.html#merge/2) merge two maps together.\n* [Map.update/4](https://hexdocs.pm/elixir/Map.html#update/4) and [Map.update!/3](https://hexdocs.pm/elixir/Map.html#update!/3) update a map using the existing value of the updated key.\n* [Map.values/1](https://hexdocs.pm/elixir/Map.html#values/1) list the values in a map.\n\n### Mutation\n\nOnce again, [Map](https://hexdocs.pm/elixir/Map.html) module functions do not mutate a value.\n\nFor example, if we use [Map.put/3](https://hexdocs.pm/elixir/Map.html#put/3) to put a new value in a map, the original variable is not changed. Functions return a new value rather than modifying the original one.\n\n```elixir\noriginal_map = %{}\n\nnew_map = Map.put(original_map, :key, \"value\")\n```\n\nSo the `original_map` is still an empty map `%{}`.\n\n```elixir\noriginal_map\n```\n\nAnd the `new_map` has been bound to the result of [Map.put/3](https://hexdocs.pm/elixir/Map.html#put/3).\n\n```elixir\nnew_map\n```\n\n## Your Turn: Map Exercises\n\nUse [Map.get/3](https://hexdocs.pm/elixir/Map.html#get/3) to retrieve the `\"world\"` value for the `:hello` key in the following map.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Map.get(%{hello: \"world\"}, :hello)\n  ```\n\n</details>\n\n```elixir\n%{hello: \"world\"}\n```\n\nUse [Map.put/3](https://hexdocs.pm/elixir/Map.html#put/3) to add the key `:two` with the value `2` to the following map.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Map.put(%{one: 1}, :two, 2)\n  ```\n\n</details>\n\n```elixir\n%{one: 1}\n```\n\nUse [Map.keys/1](https://hexdocs.pm/elixir/Map.html#keys/1) to retrieve the keys for the following map.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Map.keys(%{key1: 1, key2: 2, key3: 3})\n  ```\n\n</details>\n\n```elixir\n%{key1: 1, key2: 2, key3: 3}\n```\n\nUse [Map.delete/2](https://hexdocs.pm/elixir/Map.html#delete/2) to remove `:key1` from the following map.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Map.delete(%{key1: 1, key2: 2, key3: 3}, :key1)\n  ```\n\n</details>\n\n```elixir\n%{key1: 1, key2: 2, key3: 3}\n```\n\nUse [Map.merge/2](https://hexdocs.pm/elixir/Map.html#merge/2) to combine `%{one: 1}` and `%{two: 2}`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n\n  ```elixir\n  Map.merge(%{one: 1}, %{two: 2})\n  ```\n\n</details>\n\n```elixir\n\n```\n\nUse [Map.update/4](https://hexdocs.pm/elixir/Map.html#update/4) or [Map.update!/3](https://hexdocs.pm/elixir/Map.html#update!/3) to update the `:count` key in this map to be `5` plus the existing value.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n\n  ```elixir\n  Map.update(%{count: 10}, :count, 0, fn count -> count + 5 end)\n  ```\n\n</details>\n\n```elixir\n%{count: 10}\n```\n\nUse [Map.values/1](https://hexdocs.pm/elixir/Map.html#values/1) to retrieve the values `[1, 2, 3]` in the following map.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Map.values(%{key1: 1, key2: 2, key3: 3})\n  ```\n\n</details>\n\n```elixir\n%{key1: 1, key2: 2, key3: 3}\n```\n\n## The Keyword Module\n\nThe [Keyword](https://hexdocs.pm/elixir/Keyword.html#functions) module contains functionality related to keyword lists.\n\nHere are a few common functions to get you started.\n\n* [Keyword.get/3](https://hexdocs.pm/elixir/Keyword.html#get/3) retrieve values in a keyword list.\n* [Keyword.keys/1](https://hexdocs.pm/elixir/Keyword.html#keys/1) list the keys in a keyword list.\n* [Keyword.keyword?/1](https://hexdocs.pm/elixir/Keyword.html#keyword?/1) check if some data is a keyword list.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Options\n\nWe often use keyword lists to provide optional arguments to a function.\n\nFor example, [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) has [many optional arguments](https://hexdocs.pm/elixir/Inspect.Opts.html)\nIncluding `:label`.\n\n```elixir\nIO.inspect(\"world\", label: \"hello\")\n```\n\nUnder the hood, these functions may use [Keyword.get/3](https://hexdocs.pm/elixir/Keyword.html#get/3) to retrieve optional arguments or provide\ndefault arguments.\n\nIt's common to pass any number of options in a `opts` parameter, which should be the last parameter of the function.\n\n```elixir\ndefmodule MyIO do\n  def inspect(value, opts \\\\ []) do\n    label = Keyword.get(opts, :label, \"default label\")\n    \"#{label}: #{value}\"\n  end\nend\n```\n\n```elixir\nMyIO.inspect(\"world\")\n```\n\n```elixir\nMyIO.inspect(\"world\", label: \"hello\")\n```\n\n## Your Turn: Keyword Exercises\n\nUse [Keyword.get/3](https://hexdocs.pm/elixir/Keyword.html#get/3) to access the value for the `:color` key in the following keyword list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Keyword.get([color: \"red\"], :color)\n  ```\n\n</details>\n\n```elixir\n[color: \"red\"]\n```\n\nUse [Keyword.get/3](https://hexdocs.pm/elixir/Keyword.html#get/3) to access the value for the `:color` key in the following empty list. If the `:color` key does not exist, provide a default value of `\"blue\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Keyword.get([], :color, \"blue\")\n  ```\n\n</details>\n\n```elixir\n[]\n```\n\nUse the [Keyword.keys/1](https://hexdocs.pm/elixir/Keyword.html#keys/1) function to list all of the keys in the following keyword list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Keyword.keys([one: 1, two: 2, three: 3])\n  ```\n\n</details>\n\n```elixir\n[one: 1, two: 2, three: 3]\n```\n\nUse the [Keyword.keyword?/1](https://hexdocs.pm/elixir/Keyword.html#keyword?/1) function to determine if the following is a keyword list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n\n  ```elixir\n  Keyword.keyword?([key: \"value\"])\n  ```\n\n</details>\n\n```elixir\n[key: \"value\"]\n```\n\nUse the [Keyword.keyword?/1](https://hexdocs.pm/elixir/Keyword.html#keyword?/1) function to determine if an empty list is a keyword list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n  An empty list is technically a keyword list. That's because there's no difference between an empty keyword list and an empty list.\n\n  Technically, all of the elements in an empty list follow the `{:atom, value}` pattern that a keyword list enforces. Or perhaps it's better to say that no elements violate the pattern.\n\n  ```elixir\n  Keyword.keyword?([])\n  ```\n\n</details>\n\n```elixir\n[]\n```\n\nUse the [Keyword.keyword?/1](https://hexdocs.pm/elixir/Keyword.html#keyword?/1) function to determine if the following list is a keyword list.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n  A list is not a keyword list if it has any elements that don't follow the `{:atom, term}` structure.\n  ```elixir\n  Keyword.keyword?([1, 2, 3])\n  ```\n\n</details>\n\n```elixir\n[1, 2, 3]\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Hexdocs: Kernel](https://hexdocs.pm/elixir/Kernel.html)\n* [Hexdocs: Integer](https://hexdocs.pm/elixir/Integer.html)\n* [Hexdocs: String](https://hexdocs.pm/elixir/String.html)\n* [Hexdocs: List](https://hexdocs.pm/elixir/List.html)\n* [Hexdocs: Map](https://hexdocs.pm/elixir/Map.html)\n* [Hexdocs: Keyword](https://hexdocs.pm/elixir/Keyword.html)\n* [Hexdocs: Tuple](https://hexdocs.pm/elixir/Tuple.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Built-In Elixir Modules reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Built-In Elixir Modules\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/measurements.livemd\">Measurements</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/filter_values_by_type.livemd\">Filter Values By Type</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task46-reading-livebook", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Livebook\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:smart_animation, github: \"brooklinjazz/smart_animation\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Livebook\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/git.livemd\">Git</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/code_editors.livemd\">Code Editors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you evaluate LiveBook Elixir cells?\n* How do you format LiveBook Elixir cells?\n* How do you manipulate LiveBook Markdown cells?\n\n## Overview\n\n### LiveBook\n\nLivebook is an interactive and collaborative code notebook for Elixir.\nIt's commonly used as a documentation tool, and this is the first course to use it so extensively for teaching Elixir.\n\nInside these interactive notebooks, we can write formatted content (like you're reading right now) and execute Elixir code.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Markdown\n\nMarkdown is a lightweight markup language that allows you to write\nformatted content using only special symbols. It's like writing a formatted google document with only text.\n\n```markdown\n<!-- headings -->\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n\n<!-- font styles -->\n**bold**\n*italic*\n\n<!-- bullet points -->\n1. First item\n2. Second item\n3. Third item\n```\n\nYou can view the [Markdown cheat-sheet](https://www.markdownguide.org/cheat-sheet/) for\nan overview of markdown syntax.\n\nMarkdown is everywhere! It's even valid input for chat apps like Slack and Discord.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Cells\n\nLivebooks are split into **cells**. There are **markdown cells** for formatted text, and **elixir cells** for Elixir code. There are also more advanced cells that are beyond the scope of this course.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Markdown Cells\n\nAs you hover and click your cursor <i class=\"ri-cursor-fill\"></i> on a markdown cell. You'll notice each has a <span style=\"color: rgba(101,131,255,.5)\">blue</span> highlight on the left\nand some controls.\n\nYou can edit <i class=\"ri-pencil-line\"></i>, move up<i class=\"ri-arrow-up-s-line\"></i>,\nmove down <i class=\"ri-arrow-down-s-line\"></i>, and delete <i class=\"ri-delete-bin-line\"></i> cells. You can also upload images <i class=\"ri-image-add-line\"></i>.\n\nWhile completing interactive reading material and exercises, you generally do not need to use these controls. However, it's useful to be aware of them if you would like to use Livebook in your own time, or to resolve an issue if you accidentally manipulate a Livebook.\n\nDouble click on any markdown cell and you'll see the markdown editor for that cell.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Elixir Cells\n\nElixir Cells are interactive code blocks that run Elixir code. These cells can be used to test and experiment with Elixir code, and the results of the code execution are displayed directly in the notebook. We'll often use these cells to show examples, and have you complete exercises.\n\nHere you can see an Elixir cell that adds two integers.\n\n```elixir\n2 + 2\n```\n\nYou can create an Elixir cell anywhere throughout this course if you want to experiment with some Elixir code. Just be careful not to break existing code examples or affect further examples be rebinding already bound variables.\n\nTo create an Elixir cell, hover your cursor between two cells and press the `+Code` button.\n\nLivebook may change this UI, so if this is instruction is no longer accurate please speak to your instructor and/or [Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate an Elixir code cell below. Run some Elixir code such as `1 + 2` in the cell.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Livebook Shortcuts\n\nClick on the keyboard shortcuts <i class=\"ri-keyboard-box-line\"></i> icon on the sidebar to view\navailable Livebook shortcuts depending on the current mode.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Navigation Mode Vs Insert Mode\n\n**Navigation mode** is the default mode. If you are editing a Markdown cell or Elixir cell, then you are in **insert mode**.\n\nFor example, while in Navigation mode, you can evaluate every Elixir cell in a Livebook notebook by pressing <kbd>e</kbd> and then <kbd>a</kbd>.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### LiveMarkdown\n\nLivebook allows us to create `.livemd` files that power the interactive notebooks that you've read so far! `.livemd` stands for **live markdown**. Livebook persists the notebook information in the `.livemd` file.\n\nYou can see the changes made to these files in your git version control. This is often useful if you accidentally deleted part of a lesson or exercise and need to refer to the old version.\n\n## Edit A Markdown Cell\n\nHover and click on this markdown cell to see the controls. Click the <i class=\"ri-pencil-line\"></i> edit button\nto see the Markdown content inside.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<div style=\"padding: 1rem;background-color:lightgray; text-align: center;\">\n\n### Click Me Then Press Edit<i Class=\"ri-pencil-line\"></i>\n\n</div>\n\n## Evaluate An Elixir Cell\n\nElixir cells contain Elixir code. You can evaluate the cell to show the result of the code.\n\nClick on an Elixir cell and press the <i class=\"ri-play-circle-fill\"></i> Evaluate button to see the cell's output.\n\nAlternatively, you can press <kbd>CTRL</kbd>+<kbd>Enter</kbd> (Windows & Linux) or <kbd>CMD</kbd>+<kbd>Enter</kbd> (MacOS) while focused on the cell to re-evaluate it.\n\nEvaluate the cell below. You should see `10` because `5 + 5` equals `10`.\n\n```elixir\n5 + 5\n```\n\nIn Elixir, the last value will always be the return value\n\nFor example, this cell returns `10`, not `5`.\n\n```elixir\n5\n10\n```\n\nAs you complete reading material, you're expected to evaluate cells to see their output. Alternatively, you can press `ea` to evaluate every cell in a Livebook.\n\n## Evaluation Order\n\nBy default, Elixir cells evaluate in order when you run the `ea` command. Cells above\nautomatically evaluate when you evaluate a cell below.\n\nHere are two empty Elixir cells. By default, an empty cell returns `nil`.\n\n```elixir\n\n```\n\n```elixir\n\n```\n\nEvaluate the first cell and notice that the cell below becomes **Stale**.\n\nThis means that if the second cell relies on any value in the first cell, it is now outdated.\n\nIf you change a cell, **Evaluated** changes to *Evaluated\\** to indicate that the cell has changed\nsince the last time it was evaluated.\n\nEvaluate the Elixir cell below, then change `5` to `4` to see **Evaluated** change to *Evaluated\\**.\nRe-evaluate the cell to see *Evaluated\\** change to **Evaluated**.\n\n```elixir\n5\n```\n\nSometimes order of evaluation can cause issues in Exercises by using a stale version of an Elixir cell. Make sure to evaluate a code cell whenever you make a change.\n\n## Formatting\n\nYou can format Elixir code using the <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>I</kbd> (Windows & Linux) Keybinding or <kbd>SHIFT</kbd>+<kbd>OPTION</kbd>+<kbd>F</kbd> (MacOS).\n\nTry uncommenting the following code (Remove the `#` character) then press <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>I</kbd> (Windows & Linux) or <kbd>SHIFT</kbd>+<kbd>OPTION</kbd>+<kbd>F</kbd> (MacOS) to format the code.\n\nNotice that the `1 + 1` code moves to the left.\n\n```elixir\n# 1 + 1\n```\n\nIf you have not evaluated any Elixir code cells, you may see a warning.\n\n> You need to start a runtime (or evaluate a cell) to enable code formatting.\n\nEnsure you evaluate any Elixir cell before attempting to use the code format command.\n\nIf you cannot format an Elixir cell, you can use this as a clue that you have a syntax error in your code. For example, the following\ncode is invalid. Notice that you cannot use <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>I</kbd> to format the code.\n\n```elixir\n          1 +\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Livebook reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Livebook\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/git.livemd\">Git</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/code_editors.livemd\">Code Editors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task47-reading-rdbms", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Relational Database Management Systems\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:kino_db, \"~> 0.2.1\"},\n  {:postgrex, \"~> 0.16.5\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Relational Database Management Systems\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/pokemon_api.livemd\">Pokemon API</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/sql_drills.livemd\">SQL Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* Why use a database instead of the File system for long-term persistence?\n* What are the three relational database associations?\n\n## Relational Database Management Systems\n\nDatabases store long-term information in a program. There are many kinds of databases, but in Elixir we'll focus on Relational Database Management Systems (RDBMS) with PostgreSQL.\n\nHere's a great primer by Linux Academy.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=Tk1t3WKK-ZY\\\")\",\"title\":\"PostgreSQL\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=Tk1t3WKK-ZY\")\n```\n\nRelational Databases store data in tables with relationships to each other.\nYou can think of these tables as conceptually similar to rows and columns in an Excel spreadsheet. Each item in the table is called a **record**.\n\nTo demonstrate how to use Relational Databases, we will build a journaling database where many users will create private journal entries.\n\nOur journal database will have a users table that stores a user's name, email, and unique identifier (id).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n| id  | name  | email            |\n| --- | ----- | ---------------- |\n| 1   | Peter | peter@spider.web |\n| 2   | Miles | miles@spider.web |\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nOur journal database will also have an entries table. The entries table stores the entry's title, content, and unique identifier. Each entry also contains a reference to a record in the users table. This reference is a foreign key id (user id) to the user that owns the journal.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n| id  | user_id | title             | content                                         |\n| --- | ------- | ----------------- | ----------------------------------------------- |\n| 3   | 1       | Rhino Encounter   | Today, I fought Rhino.                          |\n| 4   | 2       | Multiverse Theory | Is the spider-verse a subset of the multiverse? |\n\n## PostgreSQL Getting Started\n\nPostgreSQL is a Relational Database Management System often used with Elixir.\nEnsure you [Download and Install PostgreSQL](https://www.postgresql.org/).\n\nInstalling PostgreSQL should create a `postgres` user with the password `postgres`.\nWe recommend keeping this as the default to ensure consistency with this lesson.\n\nYou can check that PostgreSQL is installed and running with the following command on Mac or Linux:\n\n```\n$ pgrep -u postgres -fa -- -D\n```\n\nIf PostgreSQL is running on your computer, you should see a similar output to the following:\n\n```\n1254 /usr/lib/postgresql/12/bin/postgres -D /var/lib/postgresql/12/main -c config_file=/etc/postgresql/12/main/postgresql.conf\n```\n\nIf you do not see any output, go to the debugging section below.\n\nWith PostgreSQL running, we can start the PostgreSQL command-line tool.\n\nFirst, switch to the `postgres` user with the following command.\n\n```\n$ sudo -i -u postgres\n```\n\nThen open the PostgreSQL command-line tool. You should see a new postgres prompt. From here, we can interact with our PostgreSQL databases.\n\n```\n$ psql\npostgres-#\n```\n\nIf you have not set a default password for `postgres` user, you can do it using `\\password` command.\n\n```\npostgres=# \\password postgres\n```\n\nClose the prompt with `\\q`.\n\n```\npostgres-# \\q\n```\n\n## Debugging\n\nUnfortunately, It's common to run into issues when setting up PostgreSQL. Every student\nhas a different environment, so it's difficult to anticipate issues you may encounter.\n\nIf you get stuck, please speak to a classmate, speak to your instructor, or [raise an issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=) on the Dockyard Academy repository. You may also attempt to debug the issue by researching the error message and finding recommendations online.\n\nWe recommend caution when running commands found on the Internet, as they can cause further issues. We also recommend you keep a journal of everything you try. This journal can help you and others identify issues and may help if you encounter the same problem in the future.\n\nIt often helps to \"turn it off and on again.\" In this case, uninstall and re-install PostgreSQL.\n\nHere, we've provided debugging instructions for some common issues.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### PostgreSQL Not Started\n\nOn Linux (Ubuntu) you can start the postgresql process with the following command.\n\n```\n$ sudo service postgresql start\n```\n\nOn macOS you can start the postgresql process with the following command.\n\n```\n$ postgres -D /usr/local/var/postgres\n```\n\nThen test if PostgreSQL is running on your computer again.\n\n```\n$ pgrep -u postgres -fa -- -D\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Role Does Not Exist\n\nPostgreSQL uses different roles to manage permissions when communicating with your PostgreSQL databases. Ensure you are using the correct `postgres` role with the following command.\n\n```\n$ sudo -i -u postgres\n```\n\nThen ensure you can start the PostgreSQL command-line tool.\n\n```\n$ psql\npostgres-#\n```\n\n## Postgres Command Line Tool (psql)\n\nWe can manually interact with our database using the `psql` command-line tool.\n\nFor the sake of simplicity, we'll switch to the postgres user to avoid any authentication issues. After this lesson, you can switch to your normal user by running `exit` from the terminal (after exiting the PostgreSQL prompt).\n\n```\n$ sudo -i -u postgres\n```\n\nCreate a database using the `createdb` command. We'll call the database `example`.\n\n```\n$ createdb example\n```\n\nRun the `psql` command to open the PostgreSQL prompt.\n\n```\n$ psql\npostgres-#\n```\n\nWe can view our databases using the `\\l` command.\n\n```\npostgres-# \\l\n```\n\nYou should see a table with your PostgreSQL databases.\n\n```sql\n                                     List of databases\n          Name           |  Owner   | Encoding | Collate |  Ctype  |   Access privileges\n-------------------------+----------+----------+---------+---------+-----------------------\n example                 | postgres | UTF8     | C.UTF-8 | C.UTF-8 |\n```\n\nWe can use the `\\c` command to connect to the `example` database.\n\n```\npostgres-# \\c example\nYou are now connected to database \"example\" as user \"postgres\".\n```\n\n## SQL\n\nNow that we're connected to the database. We can use a Structured Query Language (SQL) to read and write data to the database.\n\nFor a primer on SQL syntax, here's a great video by Danielle Th\u00e9.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=27axs9dO7AE\\\")\",\"title\":\"SQL\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=27axs9dO7AE\")\n```\n\nThe [SQL Cheatcheet](https://www.sqltutorial.org/sql-cheat-sheet/) also provides an overview of SQL syntax.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### CREATE TABLE\n\nWe will use SQL to create a users table in our example database.\nWe can create a table with the `CREATE TABLE` query, which creates a table and defines how the table stores records.\n\nCopy and past the following into the `psql` prompt.\n\n```sql\nCREATE TABLE users (\n   ID    INT              NOT NULL,\n   NAME  VARCHAR (255)    NOT NULL,\n   EMAIL VARCHAR (255)    NOT NULL,\n   PRIMARY KEY (ID)\n);\n```\n\n`INT` and `VARCHAR` are both SQL data types. Here's a full list of [SQL data types](https://www.postgresql.org/docs/current/datatype.html) supported by PostgreSQL. `INT` is conceptually the same as an integer in Elixir, and `VARCHAR` is conceptually similar to a string in Elixir.\n\n`NOT NULL` specifies that the field in the table must exist.\n\n`PRIMARY KEY` defines the `ID` field as the unique identifier for each user. Therefore, each primary key must be unique.\n\nYou can use the `\\dt` command to list the current tables in your database.\n\n```\nexample=# \\dt\n\n         List of relations\n Schema | Name  | Type  |  Owner\n--------+-------+-------+----------\n public | users | table | postgres\n```\n\nNow, we'll create the entries table, which will store journal entries that belong to users. The entries table will have a foreign key that references the users table, because each entry belongs to one user.\n\nEntry content can be any size, so we use the `TEXT` SQL type for a string of unlimited length.\n\nCopy and paste the following into the psql prompt.\n\n```sql\nCREATE TABLE entries (\n    ID INT NOT NULL,\n    TITLE VARCHAR(255) NOT NULL,\n    CONTENT TEXT NOT NULL,\n    USERID INT,\n    PRIMARY KEY (ID),\n    FOREIGN KEY (USERID) REFERENCES users(ID)\n);\n```\n\nWe should be able to view both tables with the `/dt` command.\n\n```sql\nexample=# \\dt\n          List of relations\n Schema |  Name   | Type  |  Owner\n--------+---------+-------+----------\n public | entries | table | postgres\n public | users   | table | postgres\n(2 rows)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### INSERT INTO\n\nNow that we've created these two tables let's insert some data.\nFirst, we'll make a single user in the users table using the `INSERT INTO` query.\n\n```sql\nINSERT INTO users (ID,NAME,EMAIL) VALUES (1, 'Peter', 'peter@spider.web');\n```\n\nWe'll also create an entry for this user.\n\n```sql\nINSERT INTO entries (ID,TITLE,CONTENT,USERID) VALUES (1, 'Rhino Encounter', 'Today, I Encountered Rhino.', 1);\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### SELECT\n\nWe can read the records in our table using the `SELECT` query.\n\n```sql\nSELECT * FROM users;\n```\n\nThe query above should display the following.\n\n```sql\n id | name  |      email\n----+-------+------------------\n  1 | Peter | peter@spider.web\n```\n\nWe can also see the data created in the entries table.\n\n```sql\nSELECT * FROM entries;\n```\n\nThe query above should display the following.\n\n```sql\nid |      title      |          content           | userid\n----+-----------------+----------------------------+--------\n  1 | Rhino Encounter | Today, I Encountered Rhino. |      1\n```\n\n`*` is a wildcard, meaning we want to display every field in the record.\nAlternatively, we can specify the fields we want to display.\nFor example, here's how we could retrieve only the title and the content for each entry.\n\n```sql\nSELECT TITLE,CONTENT from entries\n```\n\nThe query above should display the following.\n\n```sql\n      title      |          content\n-----------------+----------------------------\n Rhino Encounter | Today, I Encountered Rhino.\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### WHERE\n\nWe can filter our `SELECT` results using the `WHERE` query. For example,\n\n```sql\nSELECT * FROM users u WHERE u.id = 1\n```\n\nThe `u` before `WHERE` is conceptually similar to a variable bound to each user in the table.\nWe can then use [SQL Comparison Operators](https://www.sqltutorial.org/sql-comparison-operators/) such as `=` (equals) to filter the data returned from the table.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nLivebook provides [Smart Cells](https://www.youtube.com/watch?v=4hVIxyHxwK8&ab_channel=ElixirConf) which can connect to our PostgreSQL Database. For example, the following smart cell should successfully connect to your `example` database if you used the default `postgres` user.\n\n<!-- livebook:{\"attrs\":{\"database\":\"example\",\"hostname\":\"localhost\",\"password\":\"postgres\",\"port\":5432,\"type\":\"postgres\",\"username\":\"postgres\",\"variable\":\"conn\"},\"chunks\":null,\"kind\":\"Elixir.KinoDB.ConnectionCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nopts = [\n  hostname: \"localhost\",\n  port: 5432,\n  username: \"postgres\",\n  password: \"postgres\",\n  database: \"example\"\n]\n\n{:ok, conn} = Kino.start_child({Postgrex, opts})\n```\n\nOnce connected, these smart cells can make SQL queries to our database. Here you should see your users table.\n\n<!-- livebook:{\"attrs\":{\"connection\":{\"type\":\"postgres\",\"variable\":\"conn\"},\"query\":\"select * from users\",\"result_variable\":\"result2\",\"timeout\":null},\"chunks\":null,\"kind\":\"Elixir.KinoDB.SQLCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nresult2 = Postgrex.query!(conn, \"select * from users\", [])\n```\n\n### Your Turn\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUse the following SQL smart cell to create a new user in the users table. Re-evaluate the smart cell above to see the new user in the table.\n\n<!-- livebook:{\"attrs\":{\"cache_query\":true,\"connection\":{\"type\":\"postgres\",\"variable\":\"conn\"},\"query\":\"\",\"result_variable\":\"result3\",\"timeout\":null},\"chunks\":null,\"kind\":\"Elixir.KinoDB.SQLCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nresult3 = Postgrex.query!(conn, \"\", [])\n```\n\nUse the following SQL smart cell to create a new entry in the entries table, which has a foreign key to the same user you previously created.\n\n<!-- livebook:{\"attrs\":{\"connection\":{\"type\":\"postgres\",\"variable\":\"conn\"},\"query\":\"\",\"result_variable\":\"result4\",\"timeout\":null},\"chunks\":null,\"kind\":\"Elixir.KinoDB.SQLCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nresult4 = Postgrex.query!(conn, \"\", [])\n```\n\n## Relationships\n\nTables can relate to other tables through relationships.\n\nThere are three primary relationships (sometimes called associations).\n\n* one-to-one\n* one-to-many\n* many-to-many\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### One-to-one\n\nOne-to-one relationships mean that each record in one table relates to one record in another.\nFor example, we might choose to add profile pictures to our journal application. Each user would only have a single profile picture.\n\nWe describe the nature of the relationship by saying that the user **has one** profile picture, and the profile picture **belongs to** the user.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- Learn more at https://mermaid-js.github.io/mermaid -->\n\n```mermaid\ngraph TD;\n  a[User]\n  b[Profile Picture]\n  a --has one--> b\n  b --belongs to--> a\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUnder the hood, each profile picture would store a foreign key for the user.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### One-to-Many\n\nOne to many relationships means each record in one table relates to many records in another.\nFor example, a user of our journal application will have many journal entries.\n\nWe describe the nature of one-to-many relationships by saying that the user **has many** entries, and the entries **belongs to** the user.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- Learn more at https://mermaid-js.github.io/mermaid -->\n\n```mermaid\ngraph TD;\n  a[User]\n  b[Entry]\n  c[Entry]\n  d[Entry]\n  a --has many--> b\n  a --has many--> c\n  a --has many--> d\n  b --belongs to--> a\n  c --belongs to--> a\n  d --belongs to--> a\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nEach entry would store a foreign key for the user. In addition, we might create an index of each entry id to make querying faster.\n\nFor more on indexes, consider reading [indexes usage in PostgreSQL](https://www.postgresql.org/docs/current/indexes-intro.html).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Many-to-Many\n\nMany-to-many relationships mean that many records in a database relate to many other records.\nFor example, if we added social networking features to the journal application, then each user might\nhave many friends, and each of those users might also have many friends.\n\nIn this case, there would be a **many-to-many** relationship between users.\n\n## Further Reading\n\nPostgreSQL, SQL, and Relational Database Management Systems are deep topics.\n\nIn the future, you'll use [Ecto](https://hexdocs.pm/ecto/Ecto.html) as a wrapper around the database rather than interacting directly with PostgreSQL using SQL. This lesson is a primer to prepare you to use Ecto and understand what's happening under the hood.\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [SQL Tutorial Org](https://www.sqltutorial.org/)\n* [PostgreSQL Tutorial](https://www.postgresqltutorial.com/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Relational Database Management Systems reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Relational Database Management Systems\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/pokemon_api.livemd\">Pokemon API</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/sql_drills.livemd\">SQL Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task48-reading-benchmarking", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Benchmarking\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:benchee, \"~> 1.1\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Benchmarking\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/big_o_notation.livemd\">Performance</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/custom_enum_with_recursion.livemd\">Custom Enum With Recursion</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How can we benchmark our programs using `:timer` and `benchee`?\n* Why is it important to benchmark our software, rather than relying on theoretical performance with Big O Notation?\n\n## :timer\n\nOut of the box, Erlang provides a `:timer` library which contains a `tc/1` function to measure the time it takes to run a function.\nIt returns a `{time, result}` tuple.\n\n```mermaid\nflowchart LR\nFunction --> timer[:timer.tc/1] --> return[\"{timer, result}\"]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe'll use [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to simulate a slow function. [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) pauses the program's execution\nfor a number of milliseconds.\n\n```elixir\n:timer.tc(fn -> Process.sleep(1000) end)\n```\n\nThe `time` returned is measured in microseconds.\n\n`1000` microseconds equals `1` millisecond.\n`1000` milliseconds equals `1` seconds.\n\nTherefore we can divide the number of microseconds by `1000` to get milliseconds,\nand the number of milliseconds by `1000` to get seconds.\n\nYou'll notice that `:timer` is very close to accurate, but not perfectly accurate. This is\nto be expected with very small increments of time.\n\n```elixir\n{microseconds, _result} = :timer.tc(fn -> Process.sleep(1000) end)\n\nmilliseconds = microseconds / 1000\nseconds = milliseconds / 1000\nIO.inspect(microseconds, label: \"microseconds\")\nIO.inspect(milliseconds, label: \"milliseconds\")\nIO.inspect(seconds, label: \"seconds\")\n```\n\n### Your Turn\n\nIn the Elixir cell below, use `:timer.tc/1` to measure the following `slow_function`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nUsing anonymous function.\n\n```elixir\n:timer.tc(fn -> slow_function.() end)\n```\n\nPassing the function directly.\n\n```elixir\n:timer.tc(slow_function)\n```\n\n</details>\n\n```elixir\nslow_function = fn -> Process.sleep(1000) end\n```\n\n### Your Turn\n\nIn the Elixir cell below, use `:timer.tc/1` to measure the following named function.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nUsing anonymous function.\n\n```elixir\n:timer.tc(fn -> MyModule.slow_function() end)\n```\n\nUsing capture operator.\n\n```elixir\n:timer.tc(&MyModule.slow_function/0)\n```\n\n</details>\n\n```elixir\ndefmodule MyModule do\n  def slow_function do\n    Process.sleep(1000)\n  end\nend\n```\n\n## Benchee\n\n[Benchee](https://github.com/bencheeorg/benchee)\nis a popular library for measuring performance and memory consumption.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Installing Benchee\n\nExternal libraries need to be installed to use them.\n\nWe use [Mix](https://hexdocs.pm/mix/Mix.html) to install Benchee.\n\nMix is a build tool that provides tasks for creating, compiling, testing, and managing dependencies for Elixir projects.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nBenchee\nD[Dependencies]\nI[install/2]\nMix\nMix --> I\nI --> D\nD --> Benchee\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe've installed Benchee for you for this lesson, but be aware if you try to use Benchee in\nother projects it likely isn't installed.\n\nIf you want [Benchee](https://hexdocs.pm/benchee/Benchee.html) in any Livebook, you have to add it to the setup section at the top of the Livebook if it is not already available. Include [Benchee](https://hexdocs.pm/benchee/Benchee.html) in the existing [Mix.install/2](https://hexdocs.pm/mix/Mix.html#install/2) call or add one. There should only ever be a single call to [Mix.install/2](https://hexdocs.pm/mix/Mix.html#install/2).\n\nMake sure to replace `1.1` with the latest version. You can find the latest version of Benchee on [Hex](https://hex.pm/packages/benchee).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:benchee, \"~> 1.1\"},\n])\n```\n\nIn a mix project, you'll add the latest [Benchee](https://hexdocs.pm/benchee/Benchee.html) in the existing `deps/0` function in `mix.exs`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp deps do\n  [\n    {:benchee, \"~> 1.1\"}\n  ]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Usage\n\nWe can use the [Benchee.run/2](https://hexdocs.pm/benchee/Benchee.html#run/2) function to measure the performance and memory consumption of some function.\n\n```elixir\nBenchee.run(%{\n  \"example test\" => fn -> 10000 ** 10000 end\n})\n```\n\nAbove, the most important part of the output should look like the following, but with different numbers.\n\n```\nName                   ips        average  deviation         median         99th %\nexample test        154.65        6.47 ms    \u00b126.50%        6.13 ms       13.17 ms\n\nMemory usage statistics:\n\nName            Memory usage\nexample test           600 B\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe Benchee documentation explains how to read the output:\n\n> * average - average execution time/memory usage (the lower the better)\n> * ips - iterations per second, aka how often can the given function be executed within one second (the higher the better - good for graphing), only for run times\n> * deviation - standard deviation (how much do the results vary), given as a percentage of the average (raw absolute values also available)\n> * median - when all measured values are sorted, this is the middle value. More stable than the average and somewhat more likely to be a typical value you see, for the most typical value see mode. (the lower the better)\n> * 99th % - 99th percentile, 99% of all measured values are less than this - worst case performance-ish\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Using Benchee For Comparison\n\nLet's use Benchee to compare tuples and lists. Tuples are intended to be used as fixed-sized\ncontainers that are fast for accessing. Lists are collections intended for dynamic sized containers that get modified.\n\nTherefore, lists should be slow to access, and tuples should be fast to access. That's in theory, let's\nverify our assumption and prove it to be true.\n\n```elixir\nsize = 10000\nlarge_list = Enum.to_list(0..size)\nlarge_tuple = List.to_tuple(large_list)\n\nBenchee.run(%{\n  \"list\" => fn -> Enum.at(large_list, size) end,\n  \"tuple\" => fn -> elem(large_tuple, size) end\n})\n```\n\nUpon running the above, you should see an output similar to the following. You'll notice that\naccessing a list was far slower!\n\n```\nName            ips        average  deviation         median         99th %\ntuple        1.09 M        0.92 \u03bcs  \u00b12806.65%        0.80 \u03bcs           2 \u03bcs\nlist       0.0324 M       30.89 \u03bcs    \u00b193.31%       28.90 \u03bcs       67.80 \u03bcs\n\nComparison:\ntuple        1.09 M\nlist       0.0324 M - 33.58x slower +29.97 \u03bcs\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUse Benchee to compare accessing the **first** element instead of the last element as we already did above.\nYou should notice the list is faster this time, or at least close to the same speed. You'll learn why in a future lesson.\n\n```elixir\nBenchee.run(%{\n  \"access first element in list\" => fn -> nil end,\n  \"access first element in tuple\" => fn -> nil end\n})\n```\n\n### Multiple Inputs\n\nWe can use the `:inputs` option in [Benchee.run/2](https://hexdocs.pm/benchee/Benchee.html#run/2) to benchmark multiple inputs.\n\n```elixir\nBenchee.run(\n  %{\n    \"Enum.count/1\" => fn input -> Enum.count(input) end,\n    \"Kernel.length/1\" => fn input -> Kernel.length(input) end\n  },\n  inputs: [small: [1, 2, 3], medium: Enum.to_list(1..1000), large: Enum.to_list(1..100_000)]\n)\n```\n\nYou should see a benchmark for each input.\n\n```\n##### With Input Small #####\nName                      ips        average  deviation         median         99th %\nKernel.length/1        1.34 M      745.94 ns  \u00b13912.97%         500 ns        1600 ns\nEnum.count/1           1.28 M      781.60 ns  \u00b13327.02%         500 ns        2000 ns\n\nComparison: \nKernel.length/1        1.34 M\nEnum.count/1           1.28 M - 1.05x slower +35.66 ns\n\n##### With Input Medium #####\nName                      ips        average  deviation         median         99th %\nKernel.length/1      274.56 K        3.64 \u03bcs   \u00b1627.53%        3.40 \u03bcs        6.30 \u03bcs\nEnum.count/1         265.48 K        3.77 \u03bcs  \u00b11277.99%        3.50 \u03bcs        8.20 \u03bcs\n\nComparison: \nKernel.length/1      274.56 K\nEnum.count/1         265.48 K - 1.03x slower +0.124 \u03bcs\n\n##### With Input Large #####\nName                      ips        average  deviation         median         99th %\nKernel.length/1        5.30 K      188.70 \u03bcs    \u00b163.77%      157.70 \u03bcs      897.38 \u03bcs\nEnum.count/1           4.97 K      201.40 \u03bcs    \u00b175.41%      159.50 \u03bcs     1096.38 \u03bcs\n\nComparison: \nKernel.length/1        5.30 K\nEnum.count/1           4.97 K - 1.07x slower +12.70 \u03bcs\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThis is especially useful for benchmarking how larger data affects our system. It's also useful for creating different situations (i.e. worst case and best case scenarios) that may cause our system to behave differently than expected.\n\n## How To Make A Good Benchmark\n\nIt's easy for a benchmark to misrepresent the actual performance of our system.\n\nTo make our benchmarks more representative, consider the following metrics:\n\n* **variety:** Use a variety of inputs in your benchmark.\n* **size:** A system may be very fast with small amounts of data, but incredibly slow with large amounts of data. Consider using multiple different samples of data with different sizes to test where the system hits its limits.\n* **consistency**: Consider running your benchmark multiple times. Does it's performance change frequently due to edge cases?\n\nIn general, you can use benchmarks to optimize your systems and see how they perform under pressure. Consider exactly how you want to stress your system to get benchmark metrics that make the most sense for your situation.\n\nWe also want to consider what we're measuring. For example, if you read the `average` time instead of the `median`, it's easy to have outliers skew our data.\n\nFor example:\n\n> Ben Hill Griffin Stadium, the stadium at the University of Florida, holds `88,548` people. In Florida the minimum wage is `$11.00` per hour. Working an eight hour day for five days a week fifty-two weeks a year this comes out to `$22,880` a year. If every seat in the stadium was filled by someone making minimum wage, the average annual income would be `$22,880`. and the total worth would be just over two billion `$2,025,978,240` In 2021 Jeff Bezos made ~ 197 Billion -- `$197,000,000,000`. If Jeff Bezos enters the stadium the total annual income is `$199,025,978,240` and the **AVERAGE** income would be about 2.24 million -- `$2,247,636`. One large outlier can really skew the average. This is often why we use the **median**, or middle value, of a set. It's less skewed by large outliers.\n> \n> Example provided by Stephen Fowler\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Benchmarking reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Benchmarking\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/big_o_notation.livemd\">Performance</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/custom_enum_with_recursion.livemd\">Custom Enum With Recursion</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task49-reading-with", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# With\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=With\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/guards.livemd\">Guards</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/message_validation.livemd\">Message Validation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## With\n\nIn Elixir, `with` is a control structure that provides a convenient way to handle multiple expressions and pattern match on their results. It allows you to chain together a sequence of expressions and evaluate them one by one, stopping if any of them return an error or a pattern match fails.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nwith {:ok, v1} <- check1(),\n     {:ok, v2} <- check2(v1),\n     {:ok, v3} <- check3(v2),\n     {:ok, v4} <- check4(v3),\n     {:ok, _} <- check5(v4) do\n  # code that requires successful results above\nend\n```\n\nThe `with` construct simplifies error handling and makes code more readable by avoiding nested `case` statements or lengthy `if` conditions. It provides a concise way to handle a series of expressions while gracefully handling potential errors or failed pattern matches.\n\nHere's a version of the above code written using nested `case` statements to demonstrate how much more concise `with` statements can be.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ncase action1() do\n  {:ok, v1} ->\n  case action2(v1) do\n    {:ok, v2} ->\n      case action3(v2) do\n        {:ok, v3} -> \n          case action4(v3) do\n            {:ok, v4} -> \n              case check5(v4) do\n                {:ok, _} -> \n                  # code that requires successful results above.\n              end\n          end\n      end\n  end\nend\n```\n\nWe've use `{:ok, value}` tuples above, but `with` statements can pattern match on any Elixir term.\n\n```elixir\nstudent = %{name: \"Einar\", is_admin: true}\n\nwith %{name: name, is_admin: true} <- student do\n  IO.puts(\"admin #{name} is authorized.\")\nend\n```\n\n### Your Turn\n\n`with` statements can include an `else` clause for handling errors. The `else` clause can match on many different patterns.\n\nChange the value of `user` below to hit every case in the `else` clause (one at a time.)\n\n```elixir\nuser = %{name: \"Jon\", is_admin: false}\n\nwith %{name: name, is_admin: true} <- user do\n  IO.puts(\"admin #{name} is authorized.\")\nelse\n  %{is_admin: false, name: name} ->\n    IO.puts(\"#{name} is not an admin\")\n\n  %{is_admin: false} ->\n    IO.puts(\"Unknown user is not an admin\")\n\n  _ ->\n    IO.puts(\"Something went wrong!\")\nend\n```\n\n## Handling Errors\n\nSome projects use tuples to annotate which statement in a `with` expression failed.\n\nSome members of the community argue it's preferable to use custom error types instead of using `with` statements. See [Chris Keathley: Good and Bad Elixir](https://keathley.io/blog/good-and-bad-elixir.html) for more information.\n\nHowever, we want you to be aware of this pattern so that you are familiar with it if a future team you're on uses it.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nChange `value` to trigger every else clause.\n\n```elixir\nvalue = \"example\"\n\nwith {:not_binary, true} <- {:not_binary, is_binary(value)},\n     {:too_long, true} <- {:too_long, String.length(value) <= 10},\n     {:too_short, true} <- {:too_short, 2 <= String.length(value)} do\n  IO.puts(\"success\")\nelse\n  {:not_binary, _} -> IO.puts(\"value is not binary\")\n  {:too_long, _} -> IO.puts(\"value is too long\")\n  {:too_short, _} -> IO.puts(\"value is too short\")\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish With reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=With\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/guards.livemd\">Guards</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/message_validation.livemd\">Message Validation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task50-reading-worker_pools", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Worker Pools\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:poolboy, \"~> 1.5\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Worker Pools\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/queues.livemd\">Queues</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rubix_cube.livemd\">Rubix Cube</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\n### Process Bottlenecks\n\nProcess bottlenecks occur when we send too many messages to a process. For example, if we have a single GenServer in our application, each message is handled synchronously. Synchronous message handling makes it easier to reason about the behavior of a GenServer but limits the concurrency in our system.\n\nFor example, if we had an expensive operation that takes 500ms, and three clients made simultaneous requests, the last client would have to wait 1.5 seconds.\n\n```mermaid\nsequenceDiagram\n    participant Client 3\n    participant Client 2\n    participant Client 1\n    participant GenServer\n    Client 1->>GenServer: request\n    Client 2->>GenServer: request\n    Client 3->>GenServer: request\n    GenServer->>Client 1: response (500ms)\n    GenServer->>Client 2: response (1s)\n    GenServer->>Client 3: response (1.5s)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Worker Pools\n\nA worker pool is a group of processes that handle incoming tasks. When a new task arrives, one of the idle worker processes is assigned to handle it. This allows the workload to be distributed evenly among the worker processes, increasing the efficiency and scalability of the system.\n\n```mermaid\nflowchart LR\n\nCaller --> P\nsubgraph Worker Pool\n  P[Pool Manager]\n  W1[Worker 1]\n  W2[Worker 2]\n  W3[Worker 3]\n\n  P --> W1\n  P --> W2\n  P --> W3\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Concurrency Constraints\n\nWorker pools typically have a finite number of workers. A limited worker pool helps prevent **unbounded concurrency**, which can overload our system with too many concurrent tasks. In addition, once we have enough workers to ensure our CPU cores are busy with work, additional concurrency has few benefits.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Named Processes\n\nWe use named processes in this reading material. If a named process is already started and you re-evaluate a code example you may see the following error.\n\n> ** (MatchError) no match of right hand side value: {:error, {:already_started, #PID<0.265.0>}}\n> reading/worker_pools.livemd#cell:oc2mtzukw3gd7z2s5oyguox4qdpegr7a:3: PoolManager.start_link/1\n> /home/brook/dockyard/curriculum/reading/worker_pools.\n> livemd#cell:ynvusqt7eiocyatfupox6d2pqqpiwwf4:2: (file)\n> /home/brook/dockyard/curriculum/reading/worker_pools.\n> livemd#cell:ynvusqt7eiocyatfupox6d2pqqpiwwf4:1: (file)\n\nTo resolve this issue, reconnect the current runtime.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Module Names Are Atoms\n\nThroughout this reading, you will see several examples of module names without a module definition.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRegistry.start_link(name: ModuleName, keys: :duplicate)\n```\n\nKeep in mind that module names are just atoms. For these examples, we can use atoms and module names interchangeably. We often see this when providing the name for a process.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRegistry.start_link(name: :my_module_name, keys: :duplicate)\n```\n\nModule names are just syntax sugar for atoms prefaced with `:Elixir.<atom>`.\n\n```elixir\nMyModule == :\"Elixir.MyModule\"\n```\n\nModules even work with [Atom](https://hexdocs.pm/elixir/Atom.html) functions.\n\n```elixir\nAtom.to_string(MyModule)\n```\n\n### Kino.Process\n\nWe use `Kino.Process` in this material to provide sequence diagrams of processes. We'll often use the [Kino.Process.render_sequence_trace/2](https://hexdocs.pm/kino/Kino.Process.html#render_sequence_trace/2) function to display process messages in a diagram.\n\n```elixir\nKino.Process.render_seq_trace(fn ->\n  parent = self()\n  child = spawn(fn -> send(parent, :message) end)\n\n  receive do\n    :message -> \"parent #{inspect(parent)} received a message from child #{inspect(child)}\"\n  end\nend)\n```\n\n## Registry\n\n[Registry](https://hexdocs.pm/elixir/Registry.html) is a built-in module that provides a way to register and look up named processes in a distributed system. Think of it as a directory service that allows you to associate a process with a name, making it easier to locate and communicate with that process throughout your application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nRegistry\np1[Process]\np2[Process]\np3[Process]\n\nRegistry --> p1\nRegistry --> p2\nRegistry --> p3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Unique Registry\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUnique Registries register only a single process for each unique key.\n\n```mermaid\nflowchart\nR[Registry]\nK1[Key1]\nK2[Key2]\nK3[Key3]\nP1[Process1]\nP2[Process2]\nP3[Process3]\n\nR --> K1 --> P1\nR --> K2 --> P2\nR --> K3 --> P3\n```\n\n```elixir\n{:ok, _} = Registry.start_link(keys: :unique, name: :my_unique_registry)\n```\n\nWe can start a process under the Registry by calling [Registry.register/3](https://hexdocs.pm/elixir/Registry.html#register/3). We'll start a simple Agent process.\n\n```elixir\n{:ok, agent_pid} =\n  Agent.start_link(fn ->\n    Registry.register(:my_unique_registry, :agent1, nil)\n    0\n  end)\n```\n\nThen we can find the `:agent1` process in the Registry using [Registry.lookup/2](https://hexdocs.pm/elixir/Registry.html#lookup/2).\n\n```elixir\nRegistry.lookup(:my_unique_registry, :agent1)\n```\n\n### Via\n\nFor a unique Registry, we can also start a registered process without calling [Registry.register/3](https://hexdocs.pm/elixir/Registry.html#register/3) by using a [:via tuple](https://hexdocs.pm/elixir/Registry.html#module-using-in-via) in the format `{:via, Registry, {registry, key}}`.\n\n```elixir\nname = {:via, Registry, {:my_unique_registry, :agent2}}\n{:ok, agent_pid} = Agent.start_link(fn -> 0 end, name: name)\n```\n\nOur [Registry](https://hexdocs.pm/elixir/Registry.html) contains both `:agent1`, and `:agent2` now.\n\n```elixir\n[{agent1, _}] = Registry.lookup(:my_unique_registry, :agent1)\n[{agent2, _}] = Registry.lookup(:my_unique_registry, :agent2)\n\n{agent1, agent2}\n```\n\n## Duplicate Registry\n\nInstead of using a unique key for each process, we can group many processes under a single key.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nR[Registry]\nK1[Key1]\nK2[Key2]\nP1[Process]\nP2[Process]\nP3[Process]\nP4[Process]\nP5[Process]\nP6[Process]\n\nR --> K1\nK1 --> P1\nK1 --> P2\nK1 --> P3\n\nR --> K2\nK2 --> P4\nK2 --> P5\nK2 --> P6\n```\n\n```elixir\n{:ok, _} = Registry.start_link(keys: :duplicate, name: :my_duplicate_registry)\n\n# Register Multiple Processes Under The Same Key In The Registry\n\nAgent.start_link(fn ->\n  Registry.register(:my_duplicate_registry, :my_key, nil)\n  0\nend)\n\nAgent.start_link(fn ->\n  Registry.register(:my_duplicate_registry, :my_key, nil)\n  0\nend)\n\nAgent.start_link(fn ->\n  Registry.register(:my_duplicate_registry, :my_key, nil)\n  0\nend)\n\n# Lookup All Three Processes\nRegistry.lookup(:my_duplicate_registry, :my_key)\n```\n\n## Building Our Own Worker Pool\n\nNow that we understand [Registry](https://hexdocs.pm/elixir/Registry.html), we can use it to build our own worker pool.\n\nOur `Worker` will be a simple [GenServer](https://hexdocs.pm/elixir/GenServer.html) that performs a job that waits for a second and returns a response.\n\nWhen this `Worker` process starts, it will register itself under a `PoolManager` registry. While not strictly necessary, we pass in the Registry through the `opts` so we can use the same `Worker` process with multiple registry examples.\n\n```elixir\ndefmodule Worker do\n  use GenServer\n\n  def start_link(opts) do\n    GenServer.start_link(__MODULE__, opts, opts)\n  end\n\n  def init(opts) do\n    # Register the Worker under the PoolManager\n    # We've made the : Registry configurable.\n    # While not necessary, this makes our worker re-usable throughout our registry examples.\n    registry = opts[:registry] || PoolManager\n    Registry.register(registry, :workers, nil)\n\n    {:ok, 0}\n  end\n\n  def perform_job(pid) do\n    # Print the name of the worker or its pid\n    IO.inspect(Process.info(pid)[:registered_name] || pid, label: \"starting job\")\n    GenServer.call(pid, :perform_job)\n  end\n\n  def handle_call(:perform_job, _from, state) do\n    Process.sleep(1000)\n    {:reply, \"response\", state}\n  end\nend\n```\n\nWe'll also create a `PoolManager`, which starts a Registry and three `Worker` processes.\n\n```elixir\ndefmodule PoolManager do\n  def start_link(_opts) do\n    {:ok, _} = Registry.start_link(name: __MODULE__, keys: :duplicate)\n\n    # Start three workers. We've given them names for the diagrams below.\n    for n <- 1..3 do\n      {:ok, pid} = Worker.start_link(name: :\"worker#{n}\")\n    end\n  end\n\n  def schedule_job do\n    workers = Registry.lookup(__MODULE__, :workers)\n    # We grab a random worker to perform the job.\n    # While not ideal, this is a very simple scheduling implementation.\n    {pid, _value} = Enum.random(workers)\n\n    Worker.perform_job(pid)\n  end\nend\n```\n\nWe'll use [Kino.Process.render_seq_trace/2](https://hexdocs.pm/kino/Kino.Process.html#render_seq_trace/2) to demonstrate how the `PoolManager` starts the three registered `Worker` processes.\n\nThe `PoolManager.PIDPartition0` process is used under the hood by [Registry](https://hexdocs.pm/elixir/Registry.html). See [Registry.start_link/1](https://hexdocs.pm/elixir/Registry.html#start_link/1) for more.\n\n```elixir\nKino.Process.render_seq_trace(fn ->\n  PoolManager.start_link([])\nend)\n```\n\nWhen a process calls `PoolManager.schedule_job/0`, our `PoolManager` will randomly select a worker.\n\n```elixir\nKino.Process.render_seq_trace(fn ->\n  PoolManager.schedule_job()\nend)\n```\n\nThe code is synchronous for the Caller process, but if we have multiple Caller processes (such as when you have many clients in a Phoenix server), we'll see the full Benefits of the worker pool.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  C1[Client]\n  C2[Client]\n  C1 --> P\n  C2 --> P\n  subgraph Worker Pool\n    P[Pool Manager]\n    W1[Worker 1]\n    W2[Worker 2]\n    W3[Worker 3]\n\n    P --Client 1 Routed to--> W1\n    P --Client 2 Routed to --> W2\n    P --inactive--> W3\n  end\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nTo simulate multiple callers, we'll use two tasks. This will take only a second to run most of the time. However, it will take two seconds if we get unlucky and select the same worker for both tasks.\n\n```elixir\ntask1 = Task.async(fn -> PoolManager.schedule_job() end)\ntask2 = Task.async(fn -> PoolManager.schedule_job() end)\n\nTask.await_many([task1, task2])\n```\n\nWhile randomly selecting a worker is usually fine since large workloads will be evenly distributed across workers, there are more complicated scheduling techniques such as **round-robin**, where we schedule workers in order.\n\n## Supervising Our Registry\n\nTo supervise our Registry, we simply need to put our [Registry](https://hexdocs.pm/elixir/Registry.html) process and `Worker` pool processes under a supervisor.\n\nHere is a minimal example to demonstrate the concept.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nNext, we start a [Registry](https://hexdocs.pm/elixir/Registry.html) called `SupervisedPoolManager` under a [Supervisor](https://hexdocs.pm/elixir/Supervisor.html). We also manually start three `SupervisedWorker` processes for our worker pool.\n\n```elixir\nchildren = [\n  {Registry, name: SupervisedPoolManager, keys: :duplicate},\n  %{\n    id: :worker1,\n    start: {Worker, :start_link, [[name: :super_worker1, registry: SupervisedPoolManager]]}\n  },\n  %{\n    id: :worker2,\n    start: {Worker, :start_link, [[name: :super_worker2, registry: SupervisedPoolManager]]}\n  },\n  %{\n    id: :worker3,\n    start: {Worker, :start_link, [[name: :super_worker3, registry: SupervisedPoolManager]]}\n  }\n]\n\nopts = [strategy: :one_for_one, name: :registry_supervisor]\n\n{:ok, supervisor_pid} = Supervisor.start_link(children, opts)\n```\n\nWe can look up our three `SupervisedWorker` processes registered by the `SupervisedPoolManager` to ensure they have started.\n\n```elixir\nRegistry.lookup(SupervisedPoolManager, :workers)\n```\n\nWe'll use [Kino.Process.sup_tree/2](https://hexdocs.pm/kino/Kino.Process.html#sup_tree/2) to visualize the supervisor tree above for demonstration purposes.\n\n```elixir\nKino.Process.sup_tree(supervisor_pid)\n```\n\n## Supervised Worker Pool Module\n\nNow that we've seen a minimal example, we'll make a more complete implementation using a [Module Based Supervisors](https://hexdocs.pm/elixir/Supervisor.html#module-module-based-supervisors) to encapsulate our supervised Registry.\n\n```elixir\ndefmodule SupervisedPool do\n  use Supervisor\n\n  def start_link(_opts) do\n    # we've made our name configurable for demonstration purposes.\n    Supervisor.start_link(__MODULE__, [], name: __MODULE__)\n  end\n\n  @impl true\n  def init(_opts) do\n    # System.schedulers_online() returns the number of \n    # available schedulers on the current machine.\n    child_specs =\n      Enum.map(1..System.schedulers_online(), fn n ->\n        %{\n          id: :\"supervised_worker_#{n}\",\n          start: {Worker, :start_link, [[registry: SupervisedPool.Registry]]}\n        }\n      end)\n\n    children =\n      [\n        {Registry, name: SupervisedPool.Registry, keys: :duplicate}\n      ] ++ child_specs\n\n    Supervisor.init(children, strategy: :one_for_one)\n  end\nend\n```\n\nThis module starts a number of workers equal to the number of available schedulers in the current machine.\n\n```elixir\nSystem.schedulers_online()\n```\n\nWe'll start the SupervisedPool and visualize it in a [Kino](https://hexdocs.pm/kino/Kino.html) supervision tree diagram. You'll see the same number of processes under the `SupervisedPool` as you have schedulers online.\n\n```elixir\n{:ok, supervisor_pid} = SupervisedPool.start_link([])\n\nKino.Process.sup_tree(supervisor_pid)\n```\n\nWorker pools help applications run better by managing worker processes, making it easier to handle many tasks and scale our system without running into unbounded concurrency issues.\n\nIt's important to note that there exist numerous approaches to designing and implementing worker pools. While the code we've developed to construct our custom worker pool from scratch is one viable solution, there are certainly better options.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a mix application with a supervised worker pool that allows you to configure the number of workers started in the worker pool.\n\nFor example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMyApp.SupervisedPool.start_link(name: :example_pool, size: 4)\n```\n\nStart the supervised worker pool as a child of your application supervisor.\n\n## Poolboy\n\nPoolboy is a reliable alternative to implementing a custom process pool that saves us time and effort.\n\nWe can specify the following configuration for the process pool.\n\n* `:name`: The name of the pool. The scope can be either `:local`, `:global`, or `:via`.\n* `:worker_module`: The module used to create workers for the pool.\n* `:size`: The maximum number of workers allowed in the pool.\n* `:max_overflow` (optional): The maximum number of temporary workers that can be created when the pool is empty.\n* `:strategy` (optional): Determines whether workers that return to the pool should be placed first or last in the line of available workers, with two possible values: `:lifo` or `:fifo`. The default is `:lifo`.\n\n```elixir\npoolboy_config = [\n  name: {:local, :worker},\n  worker_module: Worker,\n  size: 4\n]\n```\n\nPoolboy provides a `:poolboy.child_spec/2` function we can use to start a Poolboy manager in the supervision tree of our application.\n\n```elixir\nchildren = [\n  :poolboy.child_spec(:worker, poolboy_config)\n]\n\nopts = [strategy: :one_for_one, name: :my_pool_supervisor]\n\n{:ok, supervisor_pid} = Supervisor.start_link(children, opts)\n```\n\nWe can use the `:poolboy.transaction/3` function to access one of the workers in our worker pool and perform a job.\n\n```elixir\n:poolboy.transaction(:worker, fn pid -> Worker.perform_job(pid) end, 5000)\n```\n\nDue to the `size: 4` configuration above, `4` workers will perform jobs concurrently in the worker pool. Notice that despite triggering `10` tasks, only `4` jobs occur simultaneously.\n\n```elixir\ntasks =\n  Enum.map(1..10, fn _ ->\n    Task.async(fn ->\n      :poolboy.transaction(:worker, fn pid -> Worker.perform_job(pid) end, 5000)\n    end)\n  end)\n\nTask.await_many(tasks)\n```\n\nHere, we'll use [Kino.Process.seq_trace/2](https://hexdocs.pm/kino/Kino.Process.html#seq_trace/2) to visualize the Poolboy pool manager starting three worker processes.\n\nNotice there are three `perform_job` messages. There are also several processes being used under the hood in Poolboy.\n\n```elixir\nKino.Process.render_seq_trace(fn ->\n  tasks =\n    Enum.map(1..3, fn _ ->\n      Task.async(fn ->\n        :poolboy.transaction(:worker, fn pid -> Worker.perform_job(pid) end, 5000)\n      end)\n    end)\n\n  Task.await_many(tasks)\nend)\n```\n\n### Your Turn\n\nAdd the Poolboy dependency to a mix project and start a worker pool under your application's supervision tree.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Process pools with Elixir's Registry by Andrea Leopardi](https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/)\n* [Managing processes with Poolboy in Elixir by Akash Manohar](https://hashnuke.com/2013/10/03/managing-processes-with-poolboy-in-elixir.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Worker Pools reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Worker Pools\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/queues.livemd\">Queues</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rubix_cube.livemd\">Rubix Cube</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task51-reading-lists", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"linked_list_cons_cells.png\",\"type\":\"attachment\"}]} -->\n\n# Lists\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/tuples.livemd\">Tuples</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/keyword_lists.livemd\">Keyword Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is a list, and what is the difference between a list and a tuple?\n* How do you pattern match on a list?\n\n## Lists\n\nLists store a list of other data types. Data types within a list are called **elements**.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  subgraph List\n    a[Element] --> b[Element] --> c[Element] --> d[Element]\n  end\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUse square brackets `[]` to\ncreate a list, and then separate each value with a comma `,`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[1, 2, 3]\n```\n\nLists can contain any other Elixir term, even other lists.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[\"a\", 2, \"c\", []]\n```\n\nLists are used to represent a collection of information. For example, a shopping list, a to-do list, or a list of tags on an article.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Indexes\n\nAn **index** is the position of an element in a list.\n\nIn programming, we count indexes starting at 0. Why? The short answer is,\nit relates to how computer hardware works.\n\nSo take this example list.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[\"a\", \"b\", \"c\"]\n```\n\n* `\"a\"` is at index `0`\n* `\"b\"` is at index `1`\n* `\"c\"` is at index `2`\n\n```mermaid\nflowchart\n  subgraph Index\n    0 --> 1 --> 2\n  end\n  subgraph Elements\n    a --> b --> c\n  end\n```\n\n### Your Turn\n\nIn the Elixir cell below, Create a list of your favourite foods as strings.\n\n```elixir\n\n```\n\n## List Operators\n\nList operators allow us to manipulate lists. Lists can be added together with `++` and subtracted from each other with `--`.\n\n```elixir\n[1] ++ [2]\n```\n\n```elixir\n[1, 2, 3] -- [2, 3]\n```\n\nSubtraction operations remove the leftmost elements first.\n\n```elixir\n[3, 2, 4, 3, 2] -- [3, 2]\n```\n\nList operations occur from **right to left** unlike Arithmetic Operators, which can cause some unintuitive behavior. You might think the following operation should result in an empty list `[]`, but instead it returns `[2]`.\n\n```elixir\n[1, 2] -- [1] -- [2]\n```\n\nThat's because `[1] -- [2]` evaluates first, because the operations occur from right to left.\n\n```elixir\nstep1 = [1] -- [2]\nresult = [1, 2] -- step1\n```\n\nTo avoid writing unintuitive code, you can either use brackets or split values in to variables to\nbreak up the operations into steps using the match operator.\n\n```elixir\n([1, 2] -- [1]) -- [2]\n```\n\n### Your Turn\n\nIn the Elixir cell below, add `[1, 2, 3]` and `[4, 5, 6]` together to make `[1, 2, 3, 4, 5, 6].`\n\n```elixir\n\n```\n\nIn the Elixir cell below, remove `[1]` from `[1, 1, 2, 3]` to make `[1, 2, 3]`\n\n```elixir\n\n```\n\n## Head And Tail\n\nUnder the hood, lists are implemented as **linked lists** where every element is a [cons cell](https://en.wikipedia.org/wiki/Cons) with a head and a tail.\n\nLet's take the example list `[2, 3]`.\n\nThis is actually a linked list made of two cons cells `[2 | tail]` and `[3 | tail]`.\n\nWe can see that [2, 3] is actually syntax sugar for `[2 | [3 | []]]` which uses a pipe symbol syntax `|` to join them.\n\n```elixir\n[2 | [3 | []]]\n```\n\n![](files/linked_list_cons_cells.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe won't often write lists this way, but it's useful to be aware of their internal implementation details for the sake of **prepending** elements to a list and for **pattern matching** on a list.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Prepending\n\nBecause lists are actually just cons cells joined together, we can prepend elements to a list using `[element | list]` syntax.\n\nFor example, we can prepend `1` to the list `[2, 3]` to make `[1, 2, 3]`\n\n```mermaid\nflowchart\n  1 --> l[2, 3]\n```\n\n```elixir\n[1 | [2, 3]]\n```\n\nYou can use a variable in place of a hard-coded list.\n\n```elixir\nlist = [2, 3]\n[1 | list]\n```\n\n### Your Turn\n\nIn the Elixir cell below, prepend `\"hello\"` to the list `[\"world\"]` to make `[\"hello\", \"world\"]`\n\n```elixir\n\n```\n\n## Pattern Matching Lists\n\nWe can pattern match on lists to bind elements in the list to variables.\n\n```elixir\n[one, two] = [1, 2]\n```\n\nThis poses an issue for lists though who seem to require a match for every element.\n\n```elixir\n[one] = [1, 2]\n```\n\nTo get around this, you can use the `[head | tail]` syntax for prepending elements to a list.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  subgraph Head\n  L\n  end\n  subgraph Tail\n  I\n  S\n  T\n  end\n  L -- tail --> I --> S --> T\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe **head** is the first element of the list.\n\n```elixir\n[head | _tail] = [1, 2, 3, 4, 5, 6, 7]\nhead\n```\n\nThe **tail** is rest of the elements in the list.\n\n```elixir\n[_head | tail] = [1, 2, 3, 4, 5, 6, 7]\ntail\n```\n\nYou can access multiple elements at the start of the list separated by commas `,`.\n\n```elixir\n[one, two | _tail] = [1, 2, 3, 4, 5, 6, 7]\n{one, two}\n```\n\n### Your Turn\n\nBind `1` in the following list to a variable `a` using pattern matching.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n[a, _b, _c] = [1, 2, 3]\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n[1, 2, 3]\n```\n\nBind `1` in the following list to a variable `a` using pattern matching.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n[a | _tail] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\nBind `1` and `2`, and `3` in the following list to variables `a`, `b`, and `c` using pattern matching.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n[a, b, c | _tail] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Schools: Lists](https://elixirschool.com/en/lessons/basics/collections#lists-0)\n* [Exercism: Lists](https://exercism.org/tracks/elixir/concepts/lists)\n* [Elixir Lang: Lists](https://elixir-lang.org/getting-started/basic-types.html#linked-lists)\n* [HexDocs: List](https://hexdocs.pm/elixir/List.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Lists reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/tuples.livemd\">Tuples</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/keyword_lists.livemd\">Keyword Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task52-reading-regex", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Regex\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Regex\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/strings_and_binaries.livemd\">Strings And Binaries</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/email_validation.livemd\">Email Validation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n* What are some common use cases for Regular Expressions?\n* How can we use Regular Expressions to manipulate strings?\n* How can we experiment and build Regular Expressions using [Regexr](https://regexr.com/)?\n\n## Overview\n\nRegex stands for Regular expressions. Regular expressions are a powerful way to match process strings based on patterns.\n\nWe can create a regular expression with the `~r` sigil in Elixir.\n\n```elixir\n~r/hello/\n```\n\nWe use regular expressions to find matching patterns in a string. We'll use [Regex.scan/3](https://hexdocs.pm/elixir/Regex.html#scan/3) to\nshow all of the values the regular expression matches on.\n\nFor example, the expression `~r/h/` will match the `\"h\"` character.\n\n```elixir\nRegex.scan(~r/h/, \"hello\")\n```\n\n[Regex.scan/3](https://hexdocs.pm/elixir/Regex.html#scan/3) will find all matches in a string.\n\nBelow we see that `~r/l/` matches on `\"l\"` twice in the `\"hello\"` string.\n\n```elixir\nRegex.scan(~r/l/, \"hello\")\n```\n\nWe can match exact characters or words.\n\n```elixir\nRegex.scan(~r/hello/, \"hello, world!\")\n```\n\nWe can also match patterns using special characters. For example, `\\d` will match any digit.\n\n```elixir\nRegex.scan(~r/\\d/, \"h3ll0\")\n```\n\n## Building Regular Expressions\n\nRegex differs in implementation depending on the programming language. For example, Elixir\nuses the [PCRE](http://www.pcre.org/) standard (Perl Compatible Regular Expressions).\n\nRegular expressions use special symbols to represent different patterns. Unfortunately, these patterns can become very complex and difficult to read at a glance.\n\nHowever, regular expressions are also powerful and one of the best ways to process a string.\n\nYou can experiment with regular expressions and see a regular expression reference guide on [Regexr](https://regexr.com/).\n\nHere are a few patterns to get you started.\n\n* Alphanumeric characters. i.e. `h` matches `\"h\"`, `-` matches `\"-\"`, and `1` matches `\"1\"`.\n* `\\d` digit.\n* `\\w` word character.\n* `.` non-newline character (essentially anything).\n* `\\s` whitespace character.\n\nOften capitalizing backslash characters inverts their purpose.\n\n`\\D` non-digit character.\n`\\W` non-word character.\n`\\S` non-whitespace character.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nRegex can find exact matches using non-special characters.\n\n```elixir\nRegex.scan(~r/2/, \"123\")\n```\n\n`\\d` matches any digit from `0-9`.\n\n```elixir\nRegex.scan(~r/\\d/, \"abcd123\")\n```\n\n`\\w` matches any single letter, number, or underscore.\n\n```elixir\nRegex.scan(~r/\\w/, \"abcd123\")\n```\n\n`.` matches any non-newline` \\n` character.\n\n```elixir\nRegex.scan(~r/./, \"abcd\\n123\")\n```\n\n`\\s` matches whitespaces `\" \"`.\n\n```elixir\nRegex.scan(~r/\\s/, \"a b c\")\n```\n\nBy combining these symbols, we can create more complex matches. For example, we\ncan match on a phone number in the format `999-999-9999`.\n\n```elixir\nRegex.scan(~r/\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d/, \"111-111-1111 222-222-2222 123-123-1234\")\n```\n\n### Frequency\n\nIn addition to matching character patterns, we can match frequency using the following symbols.\n\n* `*` 0 or more times.\n* `+` one or more times.\n* `?` zero or one time.\n* `{}` specify the number of times\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can find a match which repeats zero or more times with `*`.\n\n`*` uses the previous regular expression, so `1*` will match on all strings that contain `1` zero or more times. Similarly,\n`A*` would match all strings containing zero or more `A`s.\n\n```elixir\nRegex.scan(~r/1*/, \"1121\")\n```\n\n`+` will match on strings that match one or more of the previous regular expressions.\n\n```elixir\nRegex.scan(~r/1+/, \"11211\")\n```\n\n`?` functions like a conditional match, where the match may or may not exist.\nFor example, we could match `a` and `ab` with `ab?`.\n\n```elixir\nRegex.scan(~r/ab?/, \"a ab\")\n```\n\n`{}` allows us to specify a specific range of matches. `{3}` is exactly three matches. `{3,}` is\nthree or more matches. `{3,4}` is between three and four matches.\n\nFor example, we could use this to create an alternative regular expression for phone numbers.\n\n```elixir\nRegex.scan(~r/\\d{3}-\\d{3}-\\d{4}/, \"111-111-1111\")\n```\n\nOr match on all digits between 3 and 4 characters.\n\n```elixir\nRegex.scan(~r/\\d{3,4}/, \"111-111-1111\")\n```\n\n### Conditions And Ranges\n\nWe can also match on ranges of characters or use special conditions.\n\nUse `[1-9]` to match a range of digits or letters.\n\n```elixir\nRegex.scan(~r/[1-4]/, \"1234567\")\n```\n\n```elixir\nRegex.scan(~r/[a-c]/, \"abcd\")\n```\n\n* `|` match on one pattern or another.\n\n```elixir\nRegex.scan(~r/a|2/, \"abc123\")\n```\n\n* `[^a]` match on characters other than the one provided\n\n```elixir\nRegex.scan(~r/[^a]/, \"abc123\")\n```\n\n## Regex Module\n\nThe [Regex](https://hexdocs.pm/elixir/Regex.html#functions) module provides functions for processing strings using regular expressions.\n\n* `run/3` Runs the regular expression against the given string until the first match.\n* `scan/3` Scans the string for all matches.\n* `replace/4` Replaces all matches.\n* `split/3` Split the string on matches.\n* `match?/2` Return a boolean if the string contains the regular expression.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n[Regex.run/3](https://hexdocs.pm/elixir/Regex.html#run/3) will run through a regular expression until the first match.\n\n```elixir\nRegex.run(~r/\\d/, \"aa1234\")\n```\n\nAs we've already seen, [Regex.scan/3](https://hexdocs.pm/elixir/Regex.html#scan/3) runs through a regular expression finding all matches.\n\n```elixir\nRegex.scan(~r/\\d/, \"aa1234\")\n```\n\n[Regex.replace/4](https://hexdocs.pm/elixir/Regex.html#replace/4) replaces matches with a given string.\n\n```elixir\nRegex.replace(~r/Peter Parker/, \"Peter Parker is spiderman\", \"--secret--\")\n```\n\n[Regex.replace/3](https://hexdocs.pm/elixir/Regex.html#replace/3) can also accept an anonymous function to use the matched value to determine how\nto replace it.\n\n```elixir\nRegex.replace(~r/\\d/, \"12345\", fn each ->\n  \"#{String.to_integer(each) + 1}\"\nend)\n```\n\n[Regex.split/3](https://hexdocs.pm/elixir/Regex.html#split/3) splits a string on all matches the same way that [String.split/3](https://hexdocs.pm/elixir/String.html#split/3) will split a string by a specific value.\n\n```elixir\nString.split(\"one,two,three\", \",\")\n```\n\n```elixir\nRegex.split(~r/\\d/, \"one1two2three\")\n```\n\n[Regex.match/2](https://hexdocs.pm/elixir/Regex.html#match/2) checks if a string contains any match of the regular expression.\n\n```elixir\nRegex.match?(~r/\\d/, \"hello\")\n```\n\n```elixir\nRegex.match?(~r/\\d/, \"h3ll0\")\n```\n\nThe [String](https://hexdocs.pm/elixir/String.html) module provides some functions for regular expressions.\n\n* `replace/3`\n* `match?/2`\n* `split?/3`\n\nThese functions are the same as the [Regex](https://hexdocs.pm/elixir/Regex.html) module, except they take the string as the first argument to\nmake it easier to pipe functions together.\n\n```elixir\n\"1234\"\n|> String.replace(~r/\\d/, fn each -> \"#{String.to_integer(each) + 1}\" end)\n|> String.replace(~r/\\d/, fn each -> each <> \" \" end)\n```\n\n## Capture Groups\n\nYou can build capture groups with `()`. Capture groups allow you to treat multiple characters\nas a single unit.\n\nMatching on a capture group may feel unintuitive. For example, using `a(b)` instead of `ab`\nreturns multiple matches rather than a single match.\n\n```elixir\nRegex.run(~r/ab/, \"ab\")\n```\n\n```elixir\nRegex.run(~r/a(b)/, \"ab\")\n```\n\nCapture groups match separately in regular expressions.\nSo first, we capture `ab`. Then we capture `(b)`. Notice that if we create another capture group,\nwe also return values that match that group. So `(a)(b)` matches on `ab`, then `a`, then `b`.\n\n```elixir\nRegex.run(~r/(a)(b)/, \"ab\")\n```\n\nThis could be useful if you wanted to use a specific part of the regular expression when replacing\nit. For example, let's obfuscate phone numbers so that `111-111-1111` becomes `XXX-111-1111`.\n\nWe can separate the match into multiple capture groups.\n\n```elixir\nRegex.run(~r/\\d{3}-(\\d{3}-\\d{4})/, \"111-111-1111\")\n```\n\nNow we can use these capture groups in [Regex.replace/3](https://hexdocs.pm/elixir/Regex.html#replace/3).\n\n```elixir\nRegex.replace(~r/\\d{3}-(\\d{3}-\\d{4})/, \"111-111-1111\", fn full_match, capture_group ->\n  IO.inspect(full_match, label: \"match\")\n  IO.inspect(capture_group, label: \"capture group\")\n  \"XXX-\" <> capture_group\nend)\n```\n\nRegular expressions handle an arbitrary number of capture groups. For example, let's obfuscate the phone number `111-111-1111` into `111-XXX-1111`.\n\n```elixir\nRegex.replace(~r/(\\d{3}-)\\d{3}(-\\d{4})/, \"111-111-1111\", fn match, group1, group2 ->\n  IO.inspect(match, label: \"match\")\n  IO.inspect(group1, label: \"group1\")\n  IO.inspect(group2, label: \"group2\")\n  group1 <> \"XXX\" <> group2\nend)\n```\n\n### Your Turn\n\nUse [Regex.replace/3](https://hexdocs.pm/elixir/Regex.html#replace/3) to obfuscate (hide important information) in a phone number. Replace all but the first three digits with `X` so `999-999-9999` becomes `999-XXX-XXXX`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nRegex.replace(~r/(\\d{3}-)\\d{3}-\\d{4}/, \"999-999-9999\", fn _match, group1 ->\n  group1 <> \"XXX-\" <> \"XXXX\"\nend)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Options\n\nRegex allows for modifiers such as multiline (`m`) or freespacing `x`. These modifiers go after the expression i.e `~r/expression/mx`.\n\n* `m`: patterns such as start of line `^` and end of line `$` will match multiple lines instead of just the string.\n* `x`: Regular expressions can be written on multiple lines and documented.\n\n```elixir\nRegex.match?(\n  ~r/\n\\+\\d{1,3} # country code i.e. +1\n\\s        # space  \n\\(\\d{3}\\) # area code i.e. (555)\n-         # dash\n(\\d{3}    # prefix i.e. 555\n-         # dash\n\\d{4})    # line number i.e. 5555\n/x,\n  \"+1 (111)-111-1111\"\n)\n```\n\n## Lookaround\n\n### Lookahead\n\nWe can use positive lookahead `(?=)` to only match expressions followed by another.\n\nFor example, we can match all `a` characters followed by a `u` character. Notice below that only\n`au` will match, and `a` is the matched value.\n\n```elixir\nRegex.scan(~r/a(?=u)/, \"a au\")\n```\n\nWe can use negative lookahead `(?!)` to only match on expressions not followed by another.\n\nFor example, we can match on `a` characters not followed by a `u` character. Notice that\n`at` and `a` match, but not `au`.\n\n```elixir\nRegex.scan(~r/a(?!u)/, \"at a au\")\n```\n\n### Lookbehind\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nPositive and negative lookbehind (`(?<=)` and `(?<!)`) work similarly to lookahead, except they match expressions preceded by another.\n\nFor example, we can use a positive lookbehind to find `a` characters preceded by a `u` character.\nNotice that `ua` matches but not `ta` or `a`.\n\n```elixir\nRegex.scan(~r/(?<=u)a/, \"ua ta a\")\n```\n\nSimilarly, the negative lookbehind can find characters not preceded by another character.\nNotice that `a` and `ta` match, but not `ua`.\n\n```elixir\nRegex.scan(~r/(?<!u)a/, \"ua ta a\")\n```\n\nLookahead and lookbehind work with any valid regular expression.\n\nFor example, let's say we have some text\nwith several numbered bullet points, but we only want to retrieve values after the number.\n\n`(?<=\\d\\. )` lets us find expressions preceded by any digit, a period, and a space.\n\nThen `\\w+` matches one or more words on the current line.\n\n```elixir\ntext = \"\n1. one\n2. two\n3. three\n\"\n\nRegex.scan(~r/(?<=\\d\\. )\\w+/, text)\n```\n\n### Your Turn\n\nUse [Regex.replace/3](https://hexdocs.pm/elixir/Regex.html#replace/3) to convert a phone number in the format `#9999999999` into the format `999-999-9999`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nRegex.replace(~r/\\#(\\d{3})(\\d{3})(\\d{4})/, \"#9999999999\", fn _full, group1, group2, group3 -> \n  \"#{group1}-#{group2}-#{group3}\"\nend)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Further Reading\n\nThis lesson is a primer and dives into enough depth for many common use cases. However,\nRegex is a complex subject, and regular expressions can often be difficult to build and understand.\n\nWe recommend you do further research and use the available tools to learn more about regular\nexpressions as required.\n\n* [Regexr](https://regexr.com/) provides a regular expression reference guide and allows you to build and test regular expressions.\n* [Regex Module](https://hexdocs.pm/elixir/Regex.html) documentation for a full list of [Regex](https://hexdocs.pm/elixir/Regex.html) functions and advanced use.\n* [regexone.com](https://regexone.com/) for regex exercises.\n\nNot all languages use the same standard for regular expressions, so you may find information online that does not\napply to Elixir.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Regex reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Regex\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/strings_and_binaries.livemd\">Strings And Binaries</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/email_validation.livemd\">Email Validation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task53-reading-match_operator", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Match Operator\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Match Operator\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/comparison_operators.livemd\">Comparison Operators</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fun_formulas.livemd\">Fun Formulas</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are variables, and how do we use the match operator to bind them?\n* How can we gain insight into our programs and debug them?\n\n## Variable Binding\n\nThe match operator `=` is a way of binding some data to a named **variable** that we can\nuse in place of that data throughout the rest of a program.\n\nFor example, you can store the number `9` in a variable named `my_variable` and then\nuse `my_variable` in place of 9.\n\n```elixir\nmy_variable = 9\n\nmy_variable + 1\n```\n\nYou can name a variable almost anything and then use that name throughout the rest of your program. In the example above, we use `my_variable`, but you can name a variable almost anything\nas long as it doesn't break certain rules.\n\n```elixir\na_different_variable_name = 9\na_different_variable_name + 1\n```\n\nWhy is storing a value in a variable useful? Imagine you have a program that runs several calculations on a number.\nLet's say the number 8.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n8 + 7 - 8 * 10 * 8 + 8\n```\n\nIf we want to run these operations on the number 7 instead,\nthat suddenly becomes tedious to write.\n\nA variable allows us to store a value and reuse it throughout the program.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmy_number = 8\nmy_number + 7 - my_number * 10 * my_number + my_number\n```\n\nIf the desired value changes, you only need to change the variable.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmy_number = 7\nmy_number + 7 - my_number * 10 * my_number + my_number\n```\n\nVariables are also helpful for making programs more clear. There's an anti-pattern\nin programming called **magic values**. Magic values are values in a program that don't\nhave a name but are important. You'll see **magic numbers** and **magic strings**\nas common **anti-patterns**. An anti-pattern means something you should generally avoid doing\nin your programs otherwise, they become less clear and difficult to work with.\n\nFor example, imagine you're working on a program that accepts payments, and you find the following\ncode\n\n```elixir\n100 * 1.12\n```\n\nWhat is 1.12? What is 100? These are examples of **magic values**. They might be important for the code to run properly, but the programmer has provided no context on what they are. This program would be a lot clearer if we used well-named variables.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nitem_cost = 100\ntax_multiplier = 1.12\nitem_cost * tax_multiplier\n```\n\nOh! So this is a program that takes the cost of an item and adds tax to it.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Naming Variables\n\nVariable names must follow a few rules:\n\n* They must start with a letter.\n* They may contain valid alphanumeric characters.\n* They may end with predicates such as `!` or `?`.\n* They may not contain spaces.\n* They may not contain certain special characters such as `$`.\n\nIn addition to those enforced rules, it's conventional to separate words in a variable with an underscore `_` and only use lowercase letters.\n\nIf you break the rules for naming a variable, your program will crash with an error.\nMuch like naming atoms, memorizing the rules of naming variables is unimportant.\nYou will develop an intuition for if your variable name is valid or not through repeated exposure.\nIn practice, most variable names are made of only lowercase letters, underscores, and\nsometimes numbers.\n\nIn general, you should give your variables meaningful names that improve the clarity of your code.\n\nShort generic variable names are often difficult to decipher unless there's an established convention. For example, you'll often see the variable `i` to refer to an index.\n\nHere are some example variable names that do not convey meaning.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nt = \"12:00\"\nc = 10\n```\n\nInstead, prefer verbose variable names to improve the clarity of your programs.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntime = \"12:00\"\ncost = 10\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Unbound Variables\n\nUsing an unbound variable will crash your program.\n\n```elixir\na_variable_that_has_not_been_bound\n```\n\nIf you look closely at the error, you'll see `undefined function a_variable_that_has_not_been_bound/0 (there is no such import)`\n\nWhen you use an unbound variable, Elixir assumes it's a function that has\nnot been defined. You haven't covered functions yet, but you will learn more about them in future lessons.\n\nFor now, it's enough to be familiar with this error so that if you see it, you'll know\nyou're using an unbound variable.\n\n### Your Turn\n\nIn the Elixir cell below, create a variable `hello` and bind it to the value `\"world\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nhello = \"world\"\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n### Mutation\n\nUnder the hood, the values bound to variables are stored on the computer in memory.\n\nThe variable is pointing to the value in that location.\n\n```mermaid\nflowchart LR\n    variable --> location\n```\n\nFor example, a variable `hello` with the value `\"world\"` would store the string\n`\"world\"` somewhere in **memory**. **memory** is a hardware component on the computer.\nYou may have heard of **RAM** (Random Access Memory).\n\n```mermaid\nflowchart LR\n    hello --> w[\"world\"]\n```\n\nObject-Oriented Programming languages allow you to mutate the actual value in memory.\nSo when we write `hello = 4`, the data `\"world\"` mutates into `4`.\n\n```mermaid\nflowchart LR\n    hello --> w[\"4\"]\n```\n\nHowever, we do not allow mutation in a functional programming language like Elixir.\nSo instead of mutating the data, we **rebind** the variable to new data.\n\n```mermaid\nflowchart\n    w[\"world\"]\n    hello --> 4\n```\n\nThat's why we call data in Elixir **immutable**.\n\nIt may not be clear why this matters, and that's ok. For now, it's enough to\nbe aware that data is immutable, as you will have more opportunities to see the impact of\nimmutability in future lessons.\n\nHowever, we can rebind variables, so the following statement is valid.\n\n```elixir\nmy_variable = 1\n\nmy_variable = 2\n\n# Returns 2, Because We Rebound My_variable\nmy_variable\n```\n\n## Debugging\n\nOften times it's useful to debug your code by knowing what the value of variables are.\n\nWe can use `IO.inspect` to log values in our code. `IO.inspect` returns the value given to it.\n\n```elixir\nmy_value = \"hello\"\n\nIO.inspect(my_value)\n```\n\nWe can wrap a value in `IO.inspect`. So long as we do this correctly, `IO.inspect` will\nprint the value in our code without affecting it's behavior.\n\n```elixir\nmy_value = IO.inspect(\"hello\")\n\nmy_value\n```\n\n### Your Turn\n\nUse `IO.inspect` to print the `hello` variable.\n\n```elixir\nhello = \"world!\"\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir-lang: Pattern Matching](https://elixir-lang.org/getting-started/pattern-matching.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Match Operator reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Match Operator\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/comparison_operators.livemd\">Comparison Operators</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fun_formulas.livemd\">Fun Formulas</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task54-reading-ecto_changeset", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Ecto Changesets\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:ecto, \"~> 3.9.5\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Ecto Changesets\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/custom_enum_with_recursion.livemd\">Custom Enum With Recursion</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/sign_up_form.livemd\">Sign Up Form</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you validate complex structured data using Ecto?\n* Why use an Ecto.Changeset instead of writing your own validation logic?\n\n## Ecto Changesets\n\n[Ecto](https://hexdocs.pm/ecto/Ecto.html) is a library we typically use to communicate with a database. We'll learn more about databases in future lessons,\nbut for now, we'll see how Ecto helps to interact with data.\n\nIn addition to being the layer that we use to communicate with the database,\nEcto is powerful for validating data. So far, you've created structs with their own (limited) data validation.\n\nStructs are not always ideal for validating, as they only allow us to enforce keys. We then have to write functions with data validation or guards.\n\n```elixir\ndefmodule Person do\n  @enforce_keys [:name, :age]\n  defstruct @enforce_keys\n\n  def new(%{name: name, age: age}) when is_binary(name) and is_integer(age) do\n    {:ok,\n     %Person{\n       name: name,\n       age: age\n     }}\n  end\n\n  def new(_), do: {:error, :invalid_params}\nend\n```\n\nStruct creation functions typically returns an `{ok, struct}` tuple or an `{:error, message}` tuple.\n\n```elixir\n# Valid Params\n{:ok, %Person{age: 20, name: \"valid name\"}} = Person.new(%{name: \"valid name\", age: 20})\n\n# Invalid Params\n{:error, :invalid_params} = Person.new(%{name: [\"invalid name\"], age: 20})\n```\n\nAs the struct grows in complexity, this solution does not always scale well. That's because structs don't have any built-in data validation other than enforcing keys.\n\nAs an alternative, we can use [Ecto Changesets](https://hexdocs.pm/ecto/Ecto.Changeset.html) to validate data.\n\n## Changesets\n\nAn [Ecto.Changeset](https://hexdocs.pm/ecto/Ecto.Changeset.html) struct allows us to validate data and return helpful error messages when something is invalid.\n\nA changeset describes the expected shape of your data and ensures that data conforms to the desired shape.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nn[username]\nUser --> n --> s1[string]\nn --> l[less than 40 characters]\nn --> gr[greater than 3 characters]\nUser --> password --> s2[string]\npassword --> g[greater than 10 characters]\nUser --> a[accepted terms of service] --> true\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nTo create a changeset, we need to know.\n\n* the `initial_data`.\n* the expected data validation as `types`.\n* the attempted change from `params`.\n* the keys of `params` to `cast/3` into data that conforms to the changeset.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  i[initial_data]\n  t[types]\n  p[params]\n  k[keys]\n  ca[cast/3]\n  c[Ecto.Changeset]\n  i --> ca\n  t --> ca\n  p --> ca\n  k --> ca\n  ca --> c\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe use changesets to validate new data or validate a change to some already validated data.\n\nHere we use the primitive types `:string` and `:integer`. For a full list of\nthe allowable types, see the [Primitive Types](https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types) table.\n\n```elixir\ninitial_data = %{}\nparams = %{name: \"Peter\", age: 22}\ntypes = %{name: :string, age: :integer}\nkeys = [:name, :age]\n\nchangeset = Ecto.Changeset.cast({initial_data, types}, params, keys)\n```\n\nWe've now bound the `changeset` variable to an `Ecto.Changeset` struct.\n\nThe changeset contains:\n\n* **changes**: the `params` we want to update the source data.\n* **data**: the source data for the changeset.\n* **valid?**: whether or not the desired change breaks any validation.\n* **errors**: a keyword list of errors for any changes.\n* **action**: We'll ignore this for now as it is more important when working with databases. See [Changeset Actions](https://hexdocs.pm/ecto/Ecto.Changeset.html#module-changeset-actions).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  e[Ecto.Changeset]\n  a[action]\n  d[data]\n  v[valid?]\n  c[changes]\n  er[errors]\n  e --> a\n  e --> d\n  e --> v\n  e --> c\n  e --> er\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe changeset will store the errors as a keyword list, and `valid?` will be false when the parameters\nare invalid.\n\n```elixir\ninvalid_params = %{name: 2, age: \"hello\"}\ninvalid_changeset = Ecto.Changeset.cast({initial_data, types}, invalid_params, keys)\n```\n\nYou'll notice that the changeset stores `errors` in a keyword list. Both the `name` and `age` are invalid, and each stores a different error message.\n\n## Ecto Validation Functions\n\nWe can also add additional validations to the changeset. For a full list of functions, see the\n[Ecto Validation Functions](https://hexdocs.pm/ecto/Ecto.Changeset.html#validate_acceptance/3).\n\nThese validation functions change the `errors` according to what they validate.\n\n```elixir\ninitial_data = %{}\n\n# Notice We Are Missing Age.\nparams = %{name: \"Peter\"}\ntypes = %{name: :string, age: :integer}\nkeys = [:name, :age]\n\nchangeset =\n  Ecto.Changeset.cast({initial_data, types}, params, keys)\n  |> Ecto.Changeset.validate_required(:age)\n```\n\nLet's take the `User` example from above. A `User` should have a `username` between `3` and `40` characters,\na password greater than `10` characters, and should accept our `:terms_and_conditions`.\n\nHere's an example with invalid data. Notice there is a list of `errors` on the returned changeset.\n\n```elixir\ninitial_data = %{}\n\n# Intentionally Left Empty To Show Errors\nparams = %{}\ntypes = %{username: :string, password: :string, terms_and_conditions: :boolean}\nkeys = [:username, :password, :terms_and_conditions]\n\ninvalid_changeset =\n  {initial_data, types}\n  |> Ecto.Changeset.cast(params, keys)\n  |> Ecto.Changeset.validate_required([:username, :password])\n  |> Ecto.Changeset.validate_length(:username, min: 3, max: 40)\n  |> Ecto.Changeset.validate_length(:password, min: 10)\n  |> Ecto.Changeset.validate_acceptance(:terms_and_conditions)\n```\n\nHere's an example with valid params. Notice there are no `errors` on the changeset.\n\n```elixir\ninitial_data = %{}\n\nparams = %{username: \"Peter\", password: \"secret_spider\", terms_and_conditions: true}\ntypes = %{username: :string, password: :string, terms_and_conditions: :boolean}\nkeys = [:username, :password, :terms_and_conditions]\n\nvalid_changeset =\n  Ecto.Changeset.cast({initial_data, types}, params, keys)\n  |> Ecto.Changeset.validate_required([:username, :password])\n  |> Ecto.Changeset.validate_length(:username, min: 3, max: 40)\n  |> Ecto.Changeset.validate_length(:password, min: 10)\n  |> Ecto.Changeset.validate_acceptance(:terms_and_conditions)\n```\n\nTo apply changes, we can use [Ecto.Changeset.apply_changes/1](https://hexdocs.pm/ecto/Ecto.Changeset.html#apply_changes/1), which will only apply the changes if the changes are valid. Because we aren't using a database, we have to manually set the action to `:update`.\n\n```elixir\nEcto.Changeset.apply_action(valid_changeset, :update)\n```\n\nIf the changes are not valid, we will receive an error and the changeset.\n\n```elixir\nEcto.Changeset.apply_action(invalid_changeset, :update)\n```\n\nIt's common to use this pattern to create validated data or handle the error.\n\n```elixir\ncase Ecto.Changeset.apply_action(valid_changeset, :update) do\n  {:ok, data} -> data\n  {:error, message} -> message\nend\n```\n\n### Your Turn\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUse `Ecto.Changeset` to validate some parameters to create a book map.\n\nA book should have:\n\n* A required `:title` string field between `3` and `100` characters.\n* A required `:content` string field.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ninitial_data = %{}\ntypes = %{title: :string, content: :string}\nparams = %{title: \"title\", content: \"content\"}\nkeys = [:title, :content]\n\n{initial_data, types}\n|> Ecto.Changeset.cast(params, keys)\n|> Ecto.Changeset.validate_required([:title, :content])\n|> Ecto.Changeset.validate_length(:title, min: 3, max: 100)\n|> Ecto.Changeset.apply_action(:update)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Schemaless Changesets\n\nWe often store the associated changeset and validations inside of a module that defines a struct. Conventionally, the module defines a `changeset/2` function\nto create the changeset and `new/1` function to create the struct instance.\n\nThis module is called a [Schemaless Changeset](https://hexdocs.pm/ecto/Ecto.Changeset.html#module-schemaless-changesets). The Schema is a concept we'll return to when we cover Databases.\n\nFor now, know that we can rely on the [Schemaless Changeset](https://hexdocs.pm/ecto/Ecto.Changeset.html#module-schemaless-changesets) to validate data before creating an instance of the struct.\n\nHere's an example, taken by converting the `User` struct above to use a schemaless changeset.\n\n```elixir\ndefmodule User do\n  # Define the struct for User with fields :username, :password, and :terms_and_conditions\n  defstruct [:username, :password, :terms_and_conditions]\n\n  # Define the types for the fields in the struct\n  @types %{username: :string, password: :string, terms_and_conditions: :boolean}\n\n  # Define the changeset function for a User struct\n  def changeset(%User{} = user, params) do\n    # Cast the user struct and the types defined earlier with the keys from the params map\n    {user, @types}\n    |> Ecto.Changeset.cast(params, Map.keys(@types))\n    # Validate that the username and password fields are present\n    |> Ecto.Changeset.validate_required([:username, :password])\n    # Validate that the password field is at least 10 characters long\n    |> Ecto.Changeset.validate_length(:password, min: 10)\n    # Validate that the username field is between 3 and 40 characters long\n    |> Ecto.Changeset.validate_length(:username, min: 3, max: 40)\n    # Validate that the terms_and_conditions field is accepted\n    |> Ecto.Changeset.validate_acceptance(:terms_and_conditions)\n  end\n\n  # Define a new function for creating a new user\n  def new(params) do\n    # Start with an empty User struct\n    %User{}\n    # Pass the struct and the params to the changeset function\n    |> changeset(params)\n    # Apply the update action to the changeset\n    |> Ecto.Changeset.apply_action(:update)\n  end\nend\n\n# Create A New User With The Provided Parameters\nUser.new(%{username: \"Peter Parker\", password: \"secret_spider\", terms_and_conditions: true})\n```\n\n### Your Turn\n\nCreate a `Book` schemaless changeset struct. A book should have:\n\n* A required `:title` string field between `3` and `100` characters.\n* A required `:content` string field.\n* An `:author` string field.\n* An `:is_licenced` field which must always be true.\n* An `:is_published` boolean field.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Book do\n  defstruct [:title, :content]\n\n  @types %{\n    title: :string,\n    content: :string,\n    author: :string,\n    is_licenced: :boolean,\n    is_published: :boolean\n  }\n\n  def changeset(%Book{} = book, params) do\n    {book, @types}\n    |> Ecto.Changeset.cast(params, Map.keys(@types))\n    |> Ecto.Changeset.validate_required([:title, :content])\n    |> Ecto.Changeset.validate_length(:title, min: 3, max: 100)\n    |> Ecto.Changeset.validate_acceptance(:is_licenced)\n  end\n\n  def new(params) do\n    %Book{}\n    |> changeset(params)\n    |> Ecto.Changeset.apply_action(:update)\n  end\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Ecto Changesets reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Ecto Changesets\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/custom_enum_with_recursion.livemd\">Custom Enum With Recursion</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/sign_up_form.livemd\">Sign Up Form</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task55-reading-exunit", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# ExUnit\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=ExUnit\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_rock_paper_scissors.livemd\">Games: Rock Paper Scissors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_wordle.livemd\">Games: Wordle</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we effectively organize and name our tests?\n* How do we use assertions to write robust tests?\n\n## Testing\n\nWe test to ensure our code behaves as expected.\n\nAutomated tests automate the process of manually testing our code and verify our code continues to behave as expected.\n\nWithout tests, it's easy to introduce breaking changes. With tests, when something breaks, the automated test suite catches issue and facilitates debugging by providing useful feedback.\n\n> We test to increase confidence that our software does what it\u2019s\n> supposed to do. Testing gives us confidence that our code works as expected.\n> This is true for all kinds of testing, whether for automated tests performed\n> by a machine or for manual tests performed by a human.\n> \n> * [Testing Elixir](https://pragprog.com/titles/lmelixir/testing-elixir/) by Andrea Leopardi and Jeffrey Matthias\n\n## Testing Input And Output\n\nTests can be **brittle**, meaning that as you change your codebase, tests will fail frequently. Typically,\ntests are brittle because they test implementation rather than behavior.\n\nThink of behavior as the input and output of your function, and the implementation is the black box within it.\n\n```mermaid\nflowchart\n  subgraph Behavior\n    subgraph BB[Black Box]\n      Implementation\n    end\n    Input --> BB --> Output\n  end\n```\n\nOur tests should concern themselves with the behavior of our code, not the internal details. Easier said than done, however as a general rule if\nrefactoring your code (making improvements without changing behavior) breaks your tests, then you are likely testing implementation.\n\nFor now, focus on testing the **Input** of your code, and asserting on it's **Output**.\n\nFor example, if we were testing a `double/1` function that doubles a number, we would test that when given a number such as `3` it would return `6`.\n\n```mermaid\nflowchart LR\n2 --> double/1 --> 4\n```\n\n## ExUnit\n\nExUnit is a built-in test framework for Elixir.\n\nLet's look at a very minimal test.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule ExampleTest do\n  use ExUnit.Case\n\n  test \"truthy\" do\n    assert true\n  end\nend\n\nExUnit.run()\n```\n\n1. First, we start [ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html). In a mix project, this step is handled in our `test_helpers.ex` file for us. In Livebook, we have to start it manually.\n2. Next we define a test module. Generally, if we're writing tests for a specific module we'll name it `ModuleNameTest`, so tests for a module called `Greeter` would be in a `GreeterTest` module.\n3. The next line, `use ExUnit.Case`, generates some code from\n   the [ExUnit.Case](https://hexdocs.pm/ex_unit/ExUnit.Case.html) module, which gives us access to the [test/3](https://hexdocs.pm/ex_unit/ExUnit.Case.html#test/3) and [assert/1](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/1) macros as well as other testing tools.\n4. [test/3](https://hexdocs.pm/ex_unit/ExUnit.Case.html#test/3) is a macro that defines a single test. [test/3](https://hexdocs.pm/ex_unit/ExUnit.Case.html#test/3) accepts the name of the test as a string, in this case `\"truthy\"`.\n5. [assert/1](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/1) is a macro that makes a single assertion inside of the test. The test passes if it receives a truthy value and fails if it receives any falsy value.\n\nA test can contain many assertions, and a test module can have many tests.\n\n## Assertions\n\n[ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html) provides many different assertion macros from the [ExUnit.Assertion](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#functions)\nmodule. We'll focus on the following common assertions.\n\n* [assert/1](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/1) check if a value is truthy.\n* [refute/1](https://hexdocs.pm/ex_unit/1.14.1/ExUnit.Assertions.html#refute/1) check if a value is falsy.\n* [assert_raise/2](https://hexdocs.pm/ex_unit/1.14.1/ExUnit.Assertions.html#assert_raise/2) check if the code raises an error.\n\n### [assert/1](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/1)\n\nWe can use the [assert/1](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/1) macro provided by ExUnit to assert that a value is truthy. Any truthy value makes the test pass.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule AssertExampleTest do\n  use ExUnit.Case\n\n  test \"assert examples\" do\n    assert true\n    assert fn -> 2 end\n    assert []\n    assert 1\n    assert %{}\n  end\nend\n\nExUnit.run()\n```\n\n[assert/1](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/1) fails when provided a falsy value `nil` or `false`.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule FailingTest do\n  use ExUnit.Case\n\n  test \"failing test\" do\n    assert false\n  end\nend\n\nExUnit.run()\n```\n\n[assert/2](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/2) accepts a message as the second argument, which will display a message if the test fails.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule FailingTestWithMessage do\n  use ExUnit.Case\n\n  test \"failing example\" do\n    assert false, \"This message will display for a failing test.\"\n  end\nend\n\nExUnit.run()\n```\n\n### [refute/2](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#refute/2)\n\nThe [refute/2](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#refute/2) macro is the opposite of the [assert/2](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/2) macro. It checks that a value is falsy (`nil` or `false`).\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule RefuteExampleTest do\n  use ExUnit.Case\n\n  test \"refute examples\" do\n    refute false\n    refute not true\n    refute !5\n    refute is_map(4)\n  end\nend\n\nExUnit.run()\n```\n\n`refute/2` also displays a message if the test fails.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule RefuteTruthyValueTest do\n  use ExUnit.Case\n\n  test \"failing example\" do\n    refute true, \"This message will display for a failing test.\"\n  end\nend\n\nExUnit.run()\n```\n\n## Practical Assertions\n\nSince [assert/2](https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/2) tests if a value is truthy, we can use it with operators to write assertions against the output of a function.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Comparison Operators\n\nFor example, we might use comparison operators (`==`, `===`, `>=`, `>`, `<=`, `<`) to compare our received value with the expected value.\n\nLet's put this to practice with a `double/1` function.\n\n```mermaid\nflowchart LR\n2 --> d1[double/1] --> 4\n3 --> d2[double/1] --> 6\n```\n\n```elixir\ndefmodule Number do\n  def double(number) do\n    number * 2\n  end\nend\n```\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule NumberTest do\n  use ExUnit.Case\n\n  test \"double/1\" do\n    assert Number.double(2) == 4\n    assert Number.double(3) == 6\n  end\nend\n\nExUnit.run()\n```\n\n### Match Operator\n\nIt's also common to use the match operator `=` to check if the value matches a specific pattern.\n\n```elixir\nmap = %{one: 1, two: 2}\n\n%{one: _} = map\n```\n\nHere's that put to practice. Normally we shouldn't test elixir functions, but we'll use [Map.merge/2](https://hexdocs.pm/elixir/Map.html#merge/2) for the sake of example.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule MapMergeTest do\n  use ExUnit.Case\n\n  test \"merge/2\" do\n    assert %{one: _value} = Map.merge(%{one: 1}, %{two: 2})\n  end\nend\n\nExUnit.run()\n```\n\nThe test-based match operator `=~` can test if a string contains a value.\n\n```elixir\nstring = \"hello world\"\nstring =~ \"hello\"\n```\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule StringContainsTest do\n  use ExUnit.Case\n\n  test \"string contains hello\" do\n    string = \"hello world\"\n    assert string =~ \"hello\"\n  end\nend\n\nExUnit.run()\n```\n\nThere are also many built-in functions, such as `is_map`, `is_list`, `is_integer`, and more which we can use to assert some\nproperty of the value under test.\n\nThese operators and functions can combine with `assert` to make more useful assertions.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule AssertionExampleTest do\n  use ExUnit.Case\n\n  test \"practical assertions example\" do\n    # comparison operators\n    assert 2 == 2.0\n    assert 2.0 === 2.0\n    assert 1 < 2\n    assert 2 > 1\n    assert 2 >= 2\n    assert 2 <= 2\n\n    # match operator\n    assert %{one: _} = %{one: 1, two: 2}\n    assert [one: _, two: _] = [one: 1, two: 2]\n    assert {_, _, _} = {1, 2, 3}\n    assert [1 | _tail] = [1, 2, 3]\n\n    # functions\n    assert is_integer(2)\n    assert is_map(%{})\n\n    # text-based match operator\n    assert \"hello world\" =~ \"hello\"\n    assert \"hello world\" =~ ~r/\\w+/\n  end\nend\n\nExUnit.run()\n```\n\nAssertions that use an operator provide a `:left` and `:right` value for feedback.\nGenerally, `:left` should be the **received** value for the system under test, and `:right` should be the **expected** value\nfor the system under test.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n  1) test left/right == example (LeftRightExampleTest)\n     reading/exunit.livemd#cell:6\n     Assertion with == failed\n     code:  assert 4 == 5\n     left:  4\n     right: 5\n     stacktrace:\n       reading/exunit.livemd#cell:7: (test)\n```\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule LeftRightExampleTest do\n  use ExUnit.Case\n\n  test \"left/right == example\" do\n    assert 4 == 5\n  end\n\n  test \"left/right > example\" do\n    assert 4 > 5\n  end\n\n  test \"left/right =~ example\" do\n    assert \"hello world\" =~ \"non-matching pattern\"\n  end\nend\n\nExUnit.run()\n```\n\n## Test Driven Development\n\nMany developers follow a practice of **[TDD (Test Driven Development)](https://en.wikipedia.org/wiki/Test-driven_development)**, where\nthey write the test for their feature before writing the implementation.\n\nThese developers would likely claim that TDD leads to better-tested code, simpler interfaces, and other benefits. However, other developers use different approaches, and it's possible to take TDD too far or use it for the wrong situation.\n\nIt's for you to make up your own mind about TDD, and this course aspires to be unbiased. However, we do believe that it's beneficial for you to understand TDD so that it can be a tool in your toolbox should you choose to use it.\n\nTDD has three main phases, often called **Red, Green, and Refactor**.\n\n* Red: Write a failing test.\n* Green: Write the code to make the test pass.\n* Refactor: Improve and optimize your code without changing the behavior.\n\nYou will have the opportunity to practice TDD throughout this course. For a deeper dive on TDD and testing, you might consider watching this video by Ian Cooper. It's over an hour and completely optional.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=EZ05e7EMOLM\")\n```\n\n## Example-Based Testing\n\nAbove, we've demonstrated example-based testing, in that we provide a single example\nof input and output, and assume that the system under test continues to behave as expected.\n\nHowever, there are a potentially infinite number of inputs and outputs for the `Math.add/2` function.\nIs it safe to assume that a single example comprehensively tests all inputs?\n\n<!-- livebook:{\"attrs\":{\"source\":\"for int1 <- 1..3, int2 <- 1..3 do\\n  [input: int1, input: int2, output: int1 + int2]\\nend\\n|> Kino.DataTable.new()\",\"title\":\"Example Based Testing\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nfor int1 <- 1..3, int2 <- 1..3 do\n  [input: int1, input: int2, output: int1 + int2]\nend\n|> Kino.DataTable.new()\n```\n\nFor example, we can make our `NumberTest` pass with a fake solution.\n\n```elixir\ndefmodule FakeNumber do\n  def double(number) do\n    if number == 2 do\n      4\n    else\n      6\n    end\n  end\nend\n\nExUnit.start(auto_run: false)\n\ndefmodule FakeNumberTest do\n  use ExUnit.Case\n\n  test \"double/1\" do\n    assert FakeNumber.double(2) == 4\n    assert FakeNumber.double(3) == 6\n  end\nend\n\nExUnit.run()\n```\n\n### Robustness\n\nA robust test ensures the code behaves correctly under many scenarios.\nTo improve the robustness of our tests, we could write more example-based tests or more assertions in the same test.\n\n```elixir\nExUnit.start(auto_run: false)\n\ndefmodule RobustNumberTest do\n  use ExUnit.Case\n\n  test \"double/1\" do\n    # now we catch that `FakeNumber` fails many test cases.\n    assert FakeNumber.double(2) == 4\n    assert FakeNumber.double(3) == 6\n    assert FakeNumber.double(4) == 8\n    assert FakeNumber.double(5) == 10\n  end\nend\n\nExUnit.run()\n```\n\nThis is more comprehensive. However, it's still possible to fake the solution. In addition, if we continue\nthis pattern, we will write more tests than necessary, which makes our test suite longer\nand potentially harder to maintain.\n\n## Types Of Test\n\nThere are three primary types of tests.\n\n* **Unit Test**: tests that cover a single unit in isolation.\n* **Integration Tests** tests that cover the integration of multiple components.\n* **End to End (E2E)** tests that cover the whole system from start to finish.\n\nSo far, we have only seen examples of Unit Tests. In addition, the definition of a unit is\noften hotly debated in the programming community, so the lines between integration and unit tests can be blurry.\n\nWe'll have the opportunity to see various types of tests. For now, it's sufficient to be aware that there are multiple types.\n\nFor more on integration tests, consider reading [Integration Tests](https://martinfowler.com/bliki/IntegrationTest.html), a blog post by Martin Fowler.\n\nFor end-to-end testing, you can take a look at the [Wallaby](https://github.com/elixir-wallaby/wallaby) project, which can test web applications\nby simulating realistic user interactions.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Test Suite Structure\n\nWe want to have confidence in our test suite so that as we add features, refactor, and otherwise change your codebase,\nwe are not at risk of making breaking changes.\n\nThere are several schools of thought on how you should comprehensively test applications.\n\nMany developers believe the [Test Pyramid](https://martinfowler.com/articles/practical-test-pyramid.html)\ncreates a fast and comprehensive test suite with many unit tests, some integration tests, and fewer end-to-end tests.\n\nAlternatively, you might consider the [Test Trophy](https://kentcdodds.com/blog/the-testing-trophy-and-testing-classifications), which prioritizes integration tests.\n\nRather than recommend a specific pattern, we hope to introduce you to them so that you can develop\nyour own opinions and do further research.\n\n## Test Naming\n\nNaming tests is important, but also highly subjective. There are some common patterns such\nas [Given, When, Then](https://www.agilealliance.org/glossary/gwt/#q=~(infinite~false~filters~(postType~(~'page~'post~'aa_book~'aa_event_session~'aa_experience_report~'aa_glossary~'aa_research_paper~'aa_video)~tags~(~'given*20when*20then))~searchTerm~'~sort~false~sortDirection~'asc~page~1)).\n\nIn general, a good test name should capture:\n\n1. the system under test\n2. the state under test\n3. the desired behavior\n\nAll of the following would capture the desired information.\n\nIn our `Number` module example that translates to:\n\n1. The Number Module\n2. The input value (`2`)\n3. The expected output value (`4`)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"double/1 with 2 returns 4\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe might omit the desired behavior from the test name, as it is also implicitly stated by the assertions in the test. By omitting the desired behavior, we prevent the test name from becoming outdated when the desired behavior changes, at the cost of possibly reducing the immediate clarity of our test.\n\nSo the following test name could be appropriate:\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"double/1 with 2\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nRather than dogmatically recommend a pattern, we'll say that a good test name makes it easier to understand\nthe goal of the test. How you do this is up to you, and many development teams develop different patterns.\n\n## Test Organization\n\nWe can group tests into a [describe/2](https://hexdocs.pm/ex_unit/1.14.1/ExUnit.Case.html#describe/2) block. A [describe/2](https://hexdocs.pm/ex_unit/1.14.1/ExUnit.Case.html#describe/2) block organizes tests by some commonality. For example, it's common to group tests for a single function in the module under test together.\n\n```elixir\ndefmodule OrganizedNumber do\n  def double(number), do: number * 2\n  def triple(number), do: number * 3\nend\n\nExUnit.start(auto_run: false)\n\ndefmodule OrganizedNumberTest do\n  use ExUnit.Case\n\n  describe \"double/1\" do\n    test \"1 -> 2\" do\n      assert OrganizedNumber.double(1) == 2\n    end\n\n    test \"2 -> 4\" do\n      assert OrganizedNumber.double(2) == 4\n    end\n  end\n\n  describe \"triple/1\" do\n    test \"1 -> 3\" do\n      assert OrganizedNumber.triple(1) == 3\n    end\n\n    test \"2 -> 6\" do\n      assert OrganizedNumber.triple(2) == 6\n    end\n  end\nend\n\nExUnit.run()\n```\n\n## ExUnit With Mix\n\nMix projects provide some conveniences when working with [ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html).\n\nTests in a mix project are in the `test/` folder. Generally there is an equivalent file in the `test/` folder for each tested file in the `lib` folder.\n\nExUnit is started for us in the `test/test_helper.exs` file, and files in the `test/` folder automatically compile, evaluate, and execute when we run tests.\n\nWe strongly recommend the [Elixir Test](https://marketplace.visualstudio.com/items?itemName=samuel-pordeus.elixir-test) extension for Visual Studio Code as it provides a number of useful commands for running tests in Elixir.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Run Tests\n\nWe can execute all tests by running the following from the command line in the project folder.\n\n```\n$ mix test\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Run Tests In A File\n\nWe can run a single test file by providing its path.\n\n```\n$ mix test path/to/test/file.exs\n```\n\nFor example, we can run the `math_test.exs` file.\n\n```\n$ mix test test/math_test.exs\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Run Tests By Line Number\n\nWe can execute a specific test or several tests under a `describe` block by providing the line number.\n\n```\n$ mix test test/math_test.exs:5\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Test Tags\n\nWe can use `@moduletag`, `@describetag`, and `@tag` module attributes to tag our tests.\nOnce tagged, we can configure ExUnit to exclude, include, or only run tests with specific tags using [ExUnit.configure/1](https://hexdocs.pm/ex_unit/ExUnit.html#configure/1).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@tag :my_tag\ntest \"example test\" do\n  assert false\nend\n```\n\nOnce tagged, we can use the flags `--only`, `--exclude`, and `--include` to run specific tests.\n\n```\n$ mix test --exclude my_tag\n```\n\nAlternatively, we can place the [ExUnit.configure/1](https://hexdocs.pm/ex_unit/ExUnit.html#configure/1) function in `test_helpers.exs`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nExUnit.start()\nExUnit.configure(exclude: :my_tag)\n```\n\nThe `:skip` tag is excluded by default. This is useful for skipping tests.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@tag :skip\ntest \"example test\" do\n  assert false\nend\n```\n\n## Further Reading\n\nFor more on testing, consider using the following resources.\n\n* [Mix Test](https://hexdocs.pm/mix/Mix.Tasks.Test.html), for more on how you can use the `mix test` command.\n* [ExUnit](https://hexdocs.pm/ex_unit/ExUnit.html), for documentation on ExUnit.\n* [ElixirSchools: Documentation](https://elixirschool.com/en/lessons/basics/documentation), an lesson by Elixir schools on documentation and doc-testing.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish ExUnit reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=ExUnit\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_rock_paper_scissors.livemd\">Games: Rock Paper Scissors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_wordle.livemd\">Games: Wordle</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task56-reading-keyword_lists", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Keyword Lists\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Keyword Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/lists.livemd\">Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/maps.livemd\">Maps</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are keyword lists, and why might we want to store data in a key-value data structure?\n* How do we access a value in a keyword list?\n* How do we use list operators with keyword lists?\n* What is the internal representation of a keyword list in Elixir?\n\n## Keyword Lists\n\nKeyword lists are lists with keys. Each key associates with a value.\n\n```mermaid\nflowchart\n  key1: --> Value1\n  key2: --> Value2\n  key3: --> Value3\n```\n\nKeyword lists belong to a family of data types known as **associative data structures**.\nyou'll also often hear it referred to as a **key-value data structure**.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Why Use A Keyword List?\n\nKeyword lists guarantee order, and are more performant to create than maps. They are performant for small amounts of data, but less performant for large amounts of data than maps.\n\nTherefore, we want to use a keyword lists for smaller amounts of data, or when our data should be ordered.\n\nFor example, we might have a \"top five playlist\" of our favourite songs stored in a keyword list. The name could represent the song, and the value could represent the song for the artist.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[artist1: \"song 1\", artist2: \"song 2\", artist3: \"song 3\", artist4: \"song 4\", artist5: \"song 5\"]\n```\n\nHowever, for a large playlist we might choose to use a [Map](./maps.livemd) since order doesn't matter, and we need the playlist to be performant for a large amount of data. We'll cover maps in the next lesson.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Map Example\n%{\n  artist1: \"song 1\"\n  artist2: \"song 1\"\n  artist3: \"song 1\"\n  artist4: \"song 1\"\n  artist5: \"song 1\"\n  artist6: \"song 1\"\n  ...\n}\n```\n\nMost commonly, keyword lists are used to provide a list of key-value options.\n\nFor example, when we want to label some data, `IO.inspect` accepts a keyword lists of options. The `:label` option labels the data.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nIO.inspect(\"data\", [label: \"label for my data\"])\n```\n\nWhen a keyword list is inside of a function, Elixir removes the square brackets so the above becomes the following when we format it.\n\n```elixir\nIO.inspect(\"data\", label: \"label for my data\")\n```\n\nFor a full list of options for `IO.inspect`, see: [Inspect.Opts](https://hexdocs.pm/elixir/Inspect.Opts.html)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Breakdown Of Keyword Lists\n\nIn Elixir, the key is an atom, and the value can be any data structure, even another keyword list.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[key: \"value\"]\n[atom: \"anything!\"]\n[\"You can use quotes for the atom key!\": \"\"]\n[snake_case_is_convention: \"\"]\n[ButThatIsNotEnforced: \"\"]\n```\n\nKeys in a keyword list do not have to be unique.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[my_key: \"value\", my_key: \"value\"]\n```\n\nElixir allows you to work with keyword lists in this nice `[key: \"value\"]` syntax. However,\nkeyword lists are actually just a list of tuples where the first element is an atom.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[{:key, \"value\"}]\n```\n\nIn the Elixir cell below, you can see how Elixir converts lists of tuples matching the `{:atom, value}` syntax\ninto a keyword list.\n\n```elixir\n[{:key, \"value\"}, {:key, \"value\"}]\n```\n\nIf you break the convention in the keyword list, Elixir reverts to displaying\nthe keyword list as a list of tuples.\n\n```elixir\n[{}, key: \"value\"]\n```\n\nThe keyword list syntax must come at the end of a list, or we'll cause a [SyntaxError](https://hexdocs.pm/elixir/SyntaxError.html).\n\n```elixir\n[key: \"value\", \"\"]\n```\n\nList order is guaranteed, so the same is true for keyword lists.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, create a keyword list of your favourite super hero. Include their `:name` and `:secret_identity`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n[name: \"Spiderman\", secret_identity: \"Peter Parker\"]\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Accessing A Key\n\nWe can access values in a keyword list by their associated key using square bracket `[key]` syntax where `key` is the atom key.\n\n```elixir\nkeyword_list = [key: \"value\"]\n\nkeyword_list[:key]\n```\n\n### Your Turn\n\nAccess the `:hello` key in the following keyword list.\n\n```elixir\nkeyword_list = [hello: \"world\"]\n```\n\n## Keyword List Operators\n\nWe can also use `--` and `++` list operators with keyword lists.\n\n```elixir\n[one: 1, two: 2] -- [one: 1]\n```\n\nIf you add a list to a keyword list, you'll notice that the keyword list element will\nevaluate as a tuple again. Remember that keyword lists are simply lists of tuples with an atom and a value.\n\n```elixir\n[one: 1] ++ [1]\n```\n\n### Your Turn\n\nIn the Elixir cell below, use `++` to add `[one: 1]` to `[two: 2]` to make `[one: 1, two: 2]`.\n\n```elixir\n\n```\n\nRemove `[two: 2]` from `[one: 1, two: 2]` to make `[one: 1]`.\n\n```elixir\n\n```\n\n## Pattern Matching\n\nMuch like with lists, we can use pattern matching to bind values in a keyword list to variables.\n\n```elixir\n[hello: my_variable] = [hello: \"world\"]\n\nmy_variable\n```\n\nMuch like a list, we must match on the entire keyword list, otherwise we'll cause a [MatchError](https://hexdocs.pm/elixir/MatchError.html).\n\n```elixir\n[one: one] = [one: 1, two: 2]\n```\n\nSo long as we have a match for every element in the keyword list, we can use pattern matching.\n\n```elixir\n[one: one, two: two] = [one: 1, two: 2]\n```\n\nWe can use the `[head | tail]` syntax to pattern match on the tail of the keyword list to avoid this issue.\n\n```elixir\n[head | _tail] = [one: 1, two: 2]\n\nhead\n```\n\nIf we want to pattern match on the keys in the list, we need to use the tuple syntax on the left hand side of the `=` match operator.\n\n```elixir\n[{key, value}] = [key: \"value\"]\n```\n\n```elixir\nkey\n```\n\n```elixir\nvalue\n```\n\n### Your Turn\n\nBind `1` in the following keyword list to a variable `one`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n[{_, one} | _tail] = [one: 1, two: 2, three: 3, four: 4]\n```\n</details>\n\nEnter your solution below.\n\n```elixir\n[one: 1, two: 2, three: 3, four: 4]\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Lang: Keyword Lists](https://elixir-lang.org/getting-started/keywords-and-maps.html#keyword-lists)\n* [Elixir Schools: Keyword Lists](https://elixirschool.com/en/lessons/basics/collections#keyword-lists-5)\n* [HexDocs: Keyword](https://hexdocs.pm/elixir/Keyword.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Keyword Lists reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Keyword Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/lists.livemd\">Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/maps.livemd\">Maps</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task57-reading-phoenix_components", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Phoenix Components\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:ecto, \"~> 3.9.5\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Components\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_search.livemd\">Blog: Search</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_migration.livemd\">Blog: Visibility Migration</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we create a form in a Phoenix application?\n* What is a form action and how is it triggered?\n* How do we validate data and display errors in a form using changesets?\n\n## Overview\n\nThis is a companion reading for the [Blog: Visibility Migration](../exercises/blog_migration.livemd) exercise. This lesson is an overview of how to work with [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html) and the core components provided in Phoenix 1.7 applications.\n\n## Phoenix.Component\n\nThe [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#module-attributes) module allows us to define reusable function components.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule MyComponent do\n  use Phoenix.Component\n\n  def greeting(assigns) do\n    ~H\"\"\"\n    <p>hello</p>\n    \"\"\"\n  end\nend\n```\n\nCustom components can be used in any HEEx template.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.MyComponent.greeting />\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Attr\n\nThe [attr/3](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#attr/3) macro defines typed attributes for the component.\n\nAttributes are accessible through the assigns using `@` or `assigns.`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule MyComponent do\n  use Phoenix.Component\n\n  attr :name, :string\n  def greeting(assigns) do\n    ~H\"\"\"\n    <p><%= @name %></p>\n    \"\"\"\n  end\nend\n```\n\nAttributes can be configured with default values, requirements, and more. See [attr/3 options](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#attr/3-options) for more.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Slots\n\nThe [slot/3] macro defines function component slots. This makes it easier to provide re-usable parts of a component.\n\n[render_slot/2](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#render_slot/2) renders a given slot entry.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule MyComponent do\n  use Phoenix.Component\n\n  slot :header\n  slot :inner_block, required: true\n  slot :footer\n  def page(assigns) do\n    ~H\"\"\"\n    <h1>\n      <%= render_slot(@header) %>\n    </h1>\n\n    <p>\n      <%= render_slot(@inner_block) %>\n    </p>\n\n    <section>\n      <%= render_slot(@footer) %>\n    </section>\n    \"\"\"\n  end\nend\n```\n\nSlots are provided using a colon `:` in the html element name.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.page>\n  My Inner Block\n  <:header>My Header</:header>\n  <:footer>My Header</:footer>\n</.page>\n```\n\n`inner_block` is the default slot name for direct children in a component. Any HTML elements not contained in other slots will be contained in the `inner_block` slot.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Global Attributes\n\nHTML elements take a large number of optional attributes that we might want to be able to pass in without explicitly defining them.\n\nWe can use global attributes to collect these attributes. By default, the attributes accepted are those that are common to all standard HTML tags. You can find a comprehensive list of these attributes in the the [Global attributes MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nattr :rest, :global\n\ndef hello(assigns) do\n  ~H\"\"\"\n  <p {@rest}>Hello</p>\n  \"\"\"\nend\n```\n\n## Core Components\n\nComponents defined in the `core_components.ex` file in a Phoenix application are automatically imported, so they can be used without a module name.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.header>\n  Listing Posts\n  <:actions>\n    <.link href={~p\"/posts/new\"}>\n      <.button>New Post</.button>\n    </.link>\n  </:actions>\n</.header>\n```\n\nHere are the main components you'll often use:\n\n* modal\n* simple_form\n* button\n* input\n* label\n* error\n* header\n* table\n* list\n* back\n* icon\n\nThese components are not documented in the Phoenix docs, because they are defined inside of your application when you generate a Phoenix 1.7 application.\n\nSee the `core_components.ex` file in any Phoenix 1.7 application for documentation and the internal implementation details of these functions.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Simple Form\n\nThe `simple_form/1` component in `core_components.ex` defines a form we can use in a HEEx template to let the user send HTTP requests.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nattr :for, :any, required: true, doc: \"the datastructure for the form\"\nattr :as, :any, default: nil, doc: \"the server side parameter to collect all input under\"\n\nattr :rest, :global,\n  include: ~w(autocomplete name rel action enctype method novalidate target),\n  doc: \"the arbitrary HTML attributes to apply to the form tag\"\n\nslot :inner_block, required: true\nslot :actions, doc: \"the slot for form actions, such as a submit button\"\n\ndef simple_form(assigns) do\n  ~H\"\"\"\n  <.form :let={f} for={@for} as={@as} {@rest}>\n    <div class=\"mt-10 space-y-8 bg-white\">\n      <%= render_slot(@inner_block, f) %>\n      <div :for={action <- @actions} class=\"mt-2 flex items-center justify-between gap-6\">\n        <%= render_slot(action, f) %>\n      </div>\n    </div>\n  </.form>\n  \"\"\"\nend\n```\n\nForms take a changeset and an action. The action is the URL to submit the HTTP POST request to.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={@changeset} action={@action}>\n  <.error :if={@changeset.action}>\n    Oops, something went wrong! Please check the errors below.\n  </.error>\n  <.input field={f[:title]} type=\"text\" label=\"Title\" />\n  <.input field={f[:subtitle]} type=\"text\" label=\"Subtitle\" />\n  <.input field={f[:content]} type=\"text\" label=\"Content\" />\n  <:actions>\n    <.button>Save Post</.button>\n  </:actions>\n</.simple_form>\n```\n\nForms can be created without a changeset by providing an empty map. It's also possible to change the type of request to send.\n\nHere's an example of a form without a changeset that sends a GET request to the `/posts` route.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form :let={f} for={%{}} method={\"get\"} action={~p\"/posts\"}>\n  <.input field={f[:title]} type=\"text\" label=\"Search Posts\" />\n  <:actions>\n    <.button>Search</.button>\n  </:actions>\n</.simple_form>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Internal Components\n\n[Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html) also defines several internal components.\n\nFor example, the `simple_form/1` component in `core_components.ex` relies on the [form/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#form/1) component.\n\nHere are some useful components to be aware of:\n\n* [form/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#form/1)\n* [link/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1)\n\nSee [components](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#components) for more.\n\n## Phoenix.LiveView.JS\n\n[Phoenix.LiveView.JS](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html) provides JavaScript commands that allow you to perform common client-side tasks, such as adding or removing CSS classes, modifying tag attributes, and showing or hiding content. Unlike client-side hooks, JS commands are aware of changes to the web page made by the server, ensuring that updates are retained even after patches from the server.\n\nFor example, we can hide and show an element when clicking a button.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<button phx-click={JS.toggle(to: \"#toggleable\")}>TEST</button>\n<div id=\"toggleable\">Hide and Show Me</div>\n```\n\nThese JS commands can be bound to phoenix events such as `phx-click`, `phx-mounted`, and more. See [Bindings](https://hexdocs.pm/phoenix_live_view/bindings.html) for more information on these events.\n\nWhile this module belongs to `LiveView`, much of its functionality can also be used in traditional controller view.\n\n## Phoenix *HTML Modules\n\nPhoenix 1.7 replaced [Views](https://hexdocs.pm/phoenix/1.6.16/views.html) with unified function components.\n\nThe `*HTML` modules in a Phoenix application use [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html) under the hood.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule BlogWeb.PostHTML do\n  use BlogWeb, :html\n\n  embed_templates \"post_html/*\"\n\n  @doc \"\"\"\n  Renders a post form.\n  \"\"\"\n  attr :changeset, Ecto.Changeset, required: true\n  attr :action, :string, required: true\n\n  def post_form(assigns)\nend\n```\n\nTherefore, function components can be defined inside of `*HTML` modules. These function components can return HEEx using sigil `~H` in the body of the function.\n\nAlternatively, functions can omit the body to automatically delegate to a corresponding `*.html.heex` file, as seen above in `post_form/1` which would delegate to a `post_form.html.heex` file.\n\n## Phoenix.HTML\n\nThe [Phoenix.HTML](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html) project also defines html elements which use embedded Elixir syntax for elements. It's useful to be aware of this as many Phoenix projects still use this syntax, especially with Phoenix 1.6 or older.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<%= form_for @changeset, Routes.user_path(@conn, :create), fn f -> %>\n  Name: <%= text_input f, :name %>\n<% end %>\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html)\n* [Phoenix.LiveView.JS](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html)\n* [Phoenix.HTML](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phoenix Components reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Components\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_search.livemd\">Blog: Search</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_migration.livemd\">Blog: Visibility Migration</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task58-reading-guards", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Guards\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Guards\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/metric_conversion.livemd\">Metric Conversion</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/with.livemd\">With</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you use guards to prevent invalid function input?\n* How do you use guards to trigger polymorphic behavior?\n\n## Guards\n\nGuards allow you to guard your functions to only accept certain input.\n\n```mermaid\nflowchart LR\nInput --> Guard --> Function\nGuard --> f[Invalid Input] --> fc[FunctionClauseError]\n```\n\nThis prevents a function from being misused and\nprovides clearer feedback.\n\nGuards start with a `when` keyword followed by a boolean expression. For example,\n\n```elixir\ndefmodule IntegerGuardExample do\n  def double(int) when is_integer(int) do\n    int * 2\n  end\nend\n\nIntegerGuardExample.double(2)\n```\n\nThe `IntegerGuardExample` module above will only accept integers, so it will crash with a [FunctionClauseError](https://hexdocs.pm/elixir/FunctionClauseError.html) if we\nprovide it a float.\n\n```elixir\nIntegerGuardExample.double(1.5)\n```\n\nYou can use multiple guards together in the same function head. For example, we could\nuse both `is_integer/1` and `is_float/1` in the same `double/1` function.\n\n```elixir\ndefmodule MultipleGuardExample do\n  def double(value) when is_integer(value) or is_float(value) do\n    value * 2\n  end\nend\n\nMultipleGuardExample.double(1.3)\n```\n\nWhile useful for demonstration, we should realistically use the `is_number/1` guard instead.\n\n```elixir\ndefmodule NumberGuardExample do\n  def double(value) when is_number(value) do\n    value * 2\n  end\nend\n\nNumberGuardExample.double(1.3)\n```\n\nGuards must return `true` or `false` values and be pure input and output.\n\nYou can reference the [Guard Documentation](https://hexdocs.pm/elixir/master/patterns-and-guards.html#guards) for a full list.\n\n* [Comparison Operators](comparison_operators.livemd) (`==`, `!=`, `===`, `!==`, `<`, `<=`, `>`, `>=`)\n* [Boolean Operators](booleans.livemd) (`and`, `or`, `not`).\n* [Arithmetic Operators](arithmetic.livemd) (`+`, `-`, `*`, `/`)\n* Membership Operator `in`.\n* \"type-check\" functions (`is_list/1`, `is_number/1`, `is_map/1`, `is_binary/1`, `is_integer/1` etc)\n* functions that work on built-in datatypes (`hd/1`, `tail/1`, `length/1` and others)\n\n## Defguard\n\nYou can define your own custom guard with `defguard`. For example, let's say\nwe're building a rock paper scissors game which should only accept `:rock`, `:paper`, and `:scissors` as\nvalid guesses.\n\nWe could create a `is_guess/1` guard which checks that the guess is valid.\n\n```elixir\ndefmodule RockPaperScissors do\n  defguard is_guess(guess) when guess in [:rock, :paper, :scissors]\n\n  def winner(guess) when is_guess(guess) do\n    case guess do\n      :rock -> :paper\n      :scissors -> :rock\n      :paper -> :rock\n    end\n  end\nend\n\nRockPaperScissors.winner(:rock)\n```\n\nInvalid guesses will now raise a [FunctionClauseError](https://hexdocs.pm/elixir/FunctionClauseError.html).\n\n```elixir\nRockPaperScissors.winner(\"invalid guess\")\n```\n\n## Polymorphic Functions With Guards\n\nYou can also use guards in combination with multi-clause functions to\nachieve polymorphism.\n\nFor example, let's say we want the `double` function to handle strings.\nSo `double` called with `\"hello\"` would return `\"hellohello\"`.\n\n```mermaid\nflowchart LR\n  2 --> a[double] --> 4\n  hello --> b[double] --> hellohello\n```\n\nWe can use the built-in `is_binary` guard to check if the variable is a string.\nThat's because internally strings in Elixir are represented as binaries.\n\n```elixir\ndefmodule PolymorphicGuardExample do\n  def double(num) when is_number(num) do\n    num * 2\n  end\n\n  def double(string) when is_binary(string) do\n    string <> string\n  end\nend\n\nPolymorphicGuardExample.double(\"example\")\n```\n\nThere are many guards available in Elixir. If you ever need a specific guard, you can refer to the [Guards](https://hexdocs.pm/elixir/Kernel.html#guards) documentation.\n\n**Function order matters**.\n\nThe first function who's guard returns true with the provided input will execute.\n\nFor example. if you remove the `is_number/1` guard. Now the first function expects any type of input, so it will always execute instead of the `is_binary/1` version.\n\n```elixir\ndefmodule OrderingIssueExample do\n  def double(num) do\n    num * 2\n  end\n\n  def double(string) when is_binary(string) do\n    string <> string\n  end\nend\n\nOrderingIssueExample.double(\"example\")\n```\n\nYou'll notice our program crashes with an error.\nElixir also provides a handy warning to let us know that the first function clause always matches\nso the second will never execute.\n\n> **this clause for double/1 cannot match because a previous clause at line 2 always matches**.\n\nIf you move the more generic function lower, then strings will match the\n`is_binary/1` version first and our `Multiplier.double/1` function works as expected.\n\n```elixir\ndefmodule OrderFixedExample do\n  def double(string) when is_binary(string) do\n    string <> string\n  end\n\n  def double(num) do\n    num * 2\n  end\nend\n\nOrderFixedExample.double(\"example\")\n```\n\n```elixir\nOrderFixedExample.double(1)\n```\n\n```elixir\nOrderFixedExample.double(2.5)\n```\n\n### Your Turn\n\nCreate a `Say.hello/1` function which only accepts a string as it's input.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nSay.hello(\"Stephen\")\n\"Hello, Stephen!\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Say do\n  def hello(name) when is_bitstring(name) do\n    \"Hello, #{name}!\"\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Say do\n  def hello(name) do\n  end\nend\n```\n\n### Your Turn\n\nCreate a `Percent.display/1` function which accepts a number and returns a string with a percent.\nUse guards to ensure the percent is between 0 (exclusive) and 100 (inclusive)\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nPercent.display(0.1)\n\"0.1%\"\n\nPercent.display(100)\n\"100%\"\n\nPercent.display(0)\n** (FunctionClauseError) no function clause matching in Percent.display/1\n\n\nPercent.display(101)\n** (FunctionClauseError) no function clause matching in Percent.display/1\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Percent do\n  def display(percent) when 0 <= percent and percent <= 100 do\n    \"#{percent}%\"\n  end\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\ndefmodule Percent do\n  def display(percent) do\n  end\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: Guards](https://hexdocs.pm/elixir/patterns-and-guards.html#guards)\n* [HexDocs: Where to use Guards](https://hexdocs.pm/elixir/patterns-and-guards.html#where-patterns-and-guards-can-be-used)\n* [Elixir Schools: Guards](https://elixirschool.com/en/lessons/basics/functions/#guards-6)\n* [Exercism.io: Guards](https://exercism.org/tracks/elixir/concepts/guards)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Guards reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Guards\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/metric_conversion.livemd\">Metric Conversion</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/with.livemd\">With</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task59-reading-start_here", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Start Here\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Start Here\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i style=\"display: none;\" class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"\"></a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/computer_hardware.livemd\">Computer Hardware</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Welcome\n\nWelcome to DockYard Academy. We are proud to offer a fully open-source Elixir curriculum that anyone can access for free. We use this curriculum for our (paid) academy.\n\nIf you would like to be considered for a future cohort, you can signup for our [Newsletter](https://academy.dockyard.com/) to receive updates.\n\n## The DockYard Academy Way\n\nAt DockYard Academy, our mission is to provide high-quality training in Elixir. We strive to empower our students with the skills and knowledge they need to become professional web developers, equipped with the ability to build robust and scalable web applications using the powerful Elixir programming language and its associated frameworks.\n\nWe believe in providing a hands-on, practical learning experience and dedicate ourselves to preparing our students for the real-world challenges of building web applications. We foster a community of learners who are passionate about web development and who continue to learn and grow throughout their careers.\n\n## Academy Core Values\n\n* **Practicality**: We value hands-on learning experiences directly relevant to the real-world challenges of building web applications with Elixir. Instructors will provide a broader context to the material and share relevant experiences in the industry.\n* **Engagement**: Classes focus on active, engaged learning rather than passive lectures. Students will be front and center as they learn through building projects, group discussions, and collaborative problem solving.\n* **Collaboration and Community**: DockYard Academy fosters a supportive community of learners who can learn from each other and work together to achieve their goals. We believe in the importance of teamwork and strive to provide opportunities for our students to work together and learn from each other's experiences. All community members treat each other with kindness, respect, and care.\n* **Excellence**: We strive to provide our students with the highest quality education and training and hold ourselves to the highest standards of excellence in everything we do.\n* **Humility**: We encourage our students to approach their learning journey with an open mind, being open to learning from their mistakes and their peers. Students are encouraged to feel comfortable expressing confusion and lack of understanding at all times. Saying \u201cI don\u2019t know\u201d is always acceptable, especially when followed by a supportive and collaborative effort to learn and understand. Instructors and mentors will also embrace humility to create a positive and inclusive learning environment where students feel comfortable participating, learning, and providing open feedback.\n* **Student Driven**: Students drive the pace of the class. Instructors and students work together to ensure core learning outcomes are achieved by every student while simultaneously offering high-achieving students additional opportunities to go beyond the material.\n\n## Learning Outcomes\n\nDockYard Academy aims to provide students with practical, hands-on training to prepare them with the skills to find Elixir employment or start their own Elixir efforts. Graduating students should be able to demonstrate the following outcomes:\n\n1. Understand Elixir fundamentals to solve practical programming problems.\n2. Build Mix projects and manage configuration, dependencies, and tests.\n3. Understand the principles of OTP and how to build fault-tolerant concurrent systems.\n4. Use advanced Elixir syntax to write more expressive and efficient code.\n5. Build full-stack web applications with Phoenix, including routing, controllers, views, and templates.\n6. Manage Relational Databases with Ecto to model real-world data.\n7. Use LiveView to build interactive, real-time web apps with minimal JavaScript.\n8. Understand the best practices for developing robust and maintainable web applications with Elixir.\n9. Troubleshoot and solve problems that arise while building web applications and Elixir programs.\n10. Be able to find the resources needed to continue their learning journey after the course.\n\n## Lecture Schedule And Format\n\nFor the full-time course, classes run Monday to Friday from 9:30 am to 3:00 pm (Pacific Time). Students will have a ten minute break at 10:30am PT and a one-hour lunch break from noon to 1:00 pm (Pacific Time).\n\n## Meet Your Instructor\n\nHello, I'm Brooklin Myers, I'm the instructor at DockYard Academy and the content creator behind the lessons and exercises in this course. I'm also the host of the Elixir Newbie podcast and write about Elixir on the Elixir Newbie website. Since entering Elixir, I've focused on helping new developers, and DockYard Academy has been a perfect opportunity to continue that mission.\n\nAs a bootcamp graduate, I empathize with the struggle to enter the programming industry without a computer science background. With that in mind, I aspire to make technical concepts approachable for beginners. In addition, having transitioned to Elixir from JavaScript, I tailor lessons to help students from an object-oriented background transition to functional programming.\n\nIn my classes, I aspire to create a low-stress environment for a high-stress activity. Learning can be difficult, but it's easier when you have a supportive group of mentors and peers surrounding you.\n\n## Taking The Course\n\nCurrently, there are two ways to take this course.\n\n1. **Self-Led (free)**: Anyone can work through this course and complete it at their own pace.\n2. **Academy Student (paid)**: Students can join our official academy cohort to learn with an instructor, receive a certificate upon graduation, and get career support after graduation. Paid students also get access to class recordings and the DockYard Academy Discord, where they can receive support from their peers and mentors.\n\nIf you are interested in joining our next cohort, you can sign up for our [Newsletter](https://academy.dockyard.com/) or email brooklin.myers@dockyard.com to express your interest.\n\nThis curriculum was designed and developed as an instructor-led course. However, a beginner should be able to go through the concepts self-led and at their own pace. We've done our absolute best to make this material approachable, and completely self-contained.\n\nThat said, learning on your own can be challenging. To increase your chances of success, we recommend finding a mentor or a study group with other self-led students.\n\n## Troubleshooting And Support\n\nIt's common to find yourself blocked and needing help when learning new concepts. This can be especially challenging for a self-led learner. If you need support or encounter any issues with a lesson, there is a [Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=) button you can use to get support.\n\nIn addition, students paying to be in a DockYard Academy cohort get direct access to a community of peers and mentors on the DockYard Academy Discord. Post on the `#questions-and-answers` channel whenever you need support.\n\n## Setup Git And GitHub\n\nIf you have not already, we recommend you connect this project with Git and GitHub. After every lesson, we provide instructions in the **Commit Your Progress** section for how to commit your progress with Git and push your changes to GitHub.\n\nFor example, once you are finished reading, you can follow the instructions below.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Start Here reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Start Here\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i style=\"display: none;\" class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"\"></a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/computer_hardware.livemd\">Computer Hardware</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task60-reading-recursion", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"body-recursion-process-full.PNG\",\"type\":\"attachment\"},{\"name\":\"livebook_runtime.PNG\",\"type\":\"attachment\"},{\"name\":\"stack-overflow-without-tail-recursion.png\",\"type\":\"attachment\"},{\"name\":\"tail-recursion-optimized-stack.png\",\"type\":\"attachment\"}]} -->\n\n# Recursion\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Recursion\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/phone_number_parsing.livemd\">Phone Number Parsing</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fibonacci.livemd\">Fibonacci Sequence</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we use recursive functions to accomplish enumeration or traverse some data structure until it's empty?\n* What are the performance impacts of tail-recursion vs body-recursion?\n\n## Recursion\n\nRecursion is a programming technique where a function calls itself. This creates a looping effect until some exit condition is met.\n\nHere's an example of a recursive loop that counts down from some integer.\n\n```elixir\ndefmodule Recursion do\n  def loop(count) do\n    if count <= 0 do\n      IO.puts(count)\n    else\n      IO.puts(count)\n      loop(count - 1)\n    end\n  end\nend\n\nRecursion.loop(5)\n```\n\nThis calls the loop function 5 times. Under the hood, this places 5 frames on the stack.\n\nWe trigger a call to [IO.puts/2](https://hexdocs.pm/elixir/IO.html#puts/2) to show that the loop function has been called 5 times with\na different argument.\n\n```mermaid\nflowchart LR\n  a[\"loop(n)\"]\n  b[\"loop(n - 1)\"]\n  c[\"loop(n - 2)\"]\n  d[\"loop(n - 3)\"]\n  e[\"loop(n - 4)\"]\n  f[\"loop(...)\"]\n  5[\"loop(5)\"]\n  4[\"loop(4)\"]\n  3[\"loop(3)\"]\n  2[\"loop(2)\"]\n  1[\"loop(1)\"]\n  5 --> 4 --> 3 --> 2 --> 1\n  a --> b --> c --> d --> e --> f\n```\n\nComputerphile explains recursion in excellent detail.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=Mv9NEXX1VHc\\\")\",\"title\":\"Computerphile: Recursion\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=Mv9NEXX1VHc\")\n```\n\n<!-- livebook:{\"branch_parent_index\":1} -->\n\n## Endless Recursion\n\nWe should have some end condition, otherwise, this would run forever. You'll notice that\nthis Elixir cell never stops running. Under the hood it's calling `Forever.run/0` over and over.\n\n```elixir\ndefmodule Forever do\n  def run do\n    run()\n  end\nend\n\nForever.run()\n```\n\n## Stack Overflow\n\nComing from another language, you might be surprised that the endless recursion function doesn't crash\nin Elixir. In most programming languages, calling a recursive function puts too many stack frames on\nthe stack, and causes a stack overflow.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/stack-overflow-without-tail-recursion.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThat's because stack memory gets too full (overflowed) storing each stack frame of the recursive call.\n\n## Tail Recursion\n\nSince functional programming languages rely so much on recursion, Elixir (and Erlang) implement **tail-call optimization**.\n\nTail-call optimization circumvents adding new stack frames, instead, it reuses the current stack frame\nand jumps back to the top of the stack frame. This avoids additional memory consumption.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tail-recursion-optimized-stack.png)\n\n## Body Recursion\n\nKeep in mind that Elixir can only tail-call optimize your recursive function if the last thing it does is call itself. That's why it's called **tail** recursion. Otherwise, if the function calls itself in the body,\nit's called **body-recursion** and is not optimized.\n\n### Your Turn\n\nLet's prove that **body-recursion** is not optimized. First, open the runtime panel in this livebook.\nPress `s` then `r` to open the settings panel. There you can see the current memory consumption.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/livebook_runtime.PNG)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nNext, uncomment and execute the following Elixir cell that uses body recursion. It's a nonsense function\nthat doesn't do anything, however, it will infinitely call itself in the body of the function.\n\nYou'll notice the **Process** memory consumption will increase, and eventually, the cell will abort.\nYou may need to click the **Connect** button to reconnect the Elixir runtime.\n\n```elixir\n# defmodule Body do\n#   def recursion([head | tail]) do\n#     recursion(tail ++ tail) ++ [head]\n#   end\n# end\n\n# Body.recursion([1,2,3])\n```\n\nMake sure you comment out the code above, otherwise Livebook will keep disconnecting.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/body-recursion-process-full.PNG)\n\n## Using Recursion\n\nSo why is recursion useful? Well, it's how we achieve a great deal of functionality in Elixir.\nFor example, many functions in the [Enum](https://hexdocs.pm/elixir/Enum.html) module use recursion under the hood.\n\nRecursion allows us to accomplish **enumeration** by traversing through data structures. It also enables the preservation of **state** between function calls.\n\nHere's an example of a recursive function `sum/2` that traverses through a list and preserves an accumulator. It looks at every element in the list and adds it to the current accumulator to calculate the sum of all of the elements in the list. When the list is empty, it returns the final accumulator.\n\n```elixir\ndefmodule RecursiveSum do\n  def sum(list, accumulator \\\\ 0) do\n    case list do\n      [] -> accumulator\n      [head | tail] -> sum(tail, accumulator + head)\n    end\n  end\nend\n\nRecursiveSum.sum([1, 2, 3], 0)\n```\n\nWe enumerate through the list by recursively calling `sum/2` on the tail of the list and building\nan accumulator. In this case, the initial accumulator is `0`.\n\nEach element in the list adds to the accumulator. `1` + `2` + `3` = `6` so the function returns `6`.\n\n```mermaid\nflowchart LR\nsum1[\"sum([1, 2, 3], 0)\"]\nsum2[\"sum([2, 3], 1)\"]\nsum3[\"sum([3], 3)\"]\nsum4[\"sum([], 6)\"]\n\nsum1 --> sum2 --> sum3 --> sum4 --> 6\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Base Cases\n\nRecursive functions often have a **base case** (also sometimes called an **exit condition**) where they will stop running and return some value.\n\nHere's another example of the `sum/2` function, this time using multiple function clauses to separate out the base case into a separate function call that returns the accumulator.\n\n```elixir\ndefmodule BaseCaseExample do\n  def sum([], accumulator), do: accumulator\n  def sum([head | tail], accumulator), do: sum(tail, accumulator + head)\nend\n\nBaseCaseExample.sum([1, 2, 3], 0)\n```\n\n### Your Turn\n\nCreate a `CountDown` module which uses recursion to print all of the values between the provided integer and `0`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCountDown.count(5)\n```\n\nThe above would print:\n\n```\n5\n4\n3\n2\n1\n0\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule CountDown do\n  def count(0), do: IO.puts(0)\n  def count(n) do\n    IO.puts(n)\n    count(n - 1)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule CountDown do\nend\n```\n\n### Your Turn\n\nCreate a `CountBetween` module which counts up between a starting integer and a finish integer.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCountBetween.count(2, 5)\n```\n\nThe above would print:\n\n```\n2\n3\n4\n5\n```\n\nThe `CountBetween` module should handle when the start is greater than the finish.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCountBetween.count(10, 5)\n```\n\nThe above would print:\n\n```\n10\n9\n8\n7\n6\n5\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule CountBetween do\n  def count(finish, finish), do: IO.puts(finish)\n  def count(start, finish) when start < finish do\n    IO.puts(start)\n    count(start + 1, finish)\n  end\n\n    def count(start, finish) when start > finish do\n    IO.puts(start)\n    count(start - 1, finish)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule CountBetween do\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Recursion reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Recursion\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/phone_number_parsing.livemd\">Phone Number Parsing</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fibonacci.livemd\">Fibonacci Sequence</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task61-reading-maps_mapsets_keyword_lists", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Maps, Mapsets, And Keyword Lists\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Maps, Mapsets, And Keyword Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/lists_vs_tuples.livemd\">Lists Vs Tuples</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/mapset_drills.livemd\">MapSet Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* When should you use a MapSet vs a list?\n* What are the performance impacts of MapSets, Maps, and Keyword Lists?\n\n## Overview\n\nIn this lesson, we will study the internal details of Maps, MapSets, and Keyword Lists to determine when to use each data type.\n\n## Keyword Lists\n\nKeyword lists have the same properties as [Lists](lists_vs_tuples.livemd).\n\n| Operation | Time Complexity                           |\n| --------- | ----------------------------------------- |\n| Access    | $O(n)$                                    |\n| Search    | $O(n)$                                    |\n| Insertion | $O(1)$ for prepending, otherwise $O(n)$   |\n| Deletion  | $O(1)$ if first element, otherwise $O(n)$ |\n\nBecause they are simply lists of `{:atom, value}` Tuples.\n\n```elixir\n[{:key1, \"value\"}, {:key2, \"value\"}] == [key1: \"value\", key2: \"value\"]\n```\n\n## Maps\n\nMaps are a key-value data type that typically has $O(log(n))$ time for any operation involving accessing a key.\n\n| Operation | Time Complexity                                  |\n| --------- | ------------------------------------------------ |\n| Access    | $O(log(n))$                                      |\n| Search    | $O(log(n))$                                      |\n| Insertion | $O(n)$ for <= 32 elements, otherwise $O(log(n))$ |\n| Deletion  | $O(n)$ for <= 32 elements, otherwise $O(log(n))$ |\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nMaps with `32` or fewer keys are sorted lists. Therefore they have $O(n)$ performance, but this effect is negligible.\n\nNotice that the map below retains its sort order.\n\n```elixir\nmap = Map.new(1..32, fn x -> {x, \"#{x}\"} end)\n```\n\nUnder the hood, a map with `32` or fewer keys uses a sorted list.\n\nGenerally, we should avoid relying on this property. When a map grows beyond `32` keys, it loses its sorting order.\n\nNotice the map below is no longer ordered\nnow that it has `33` keys.\n\n```elixir\nmap = Map.new(1..33, fn x -> {x, \"#{x}\"} end)\n```\n\nMaps in Elixir are [Hash Array Mapped Trie (HAMT)](https://en.wikipedia.org/wiki/Hash_array_mapped_trie) structures.\n\nWe won't dive deeply into the implementation of this data structure as it is beyond the scope of this course.\n\nFor practical purposes, be aware most operations on a map will have $O(log(n))$ complexity.\n\nMaps scale better for large values when compared with lists or keyword lists, which grow linearly instead of logarithmically.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nAccessing any key in a map with a million elements is nearly instant, regardless of which key is accessed!\n\nFirst, we'll create the large map. This may take a moment.\n\n```elixir\nlarge_map = Map.new(1..10_000_000, fn x -> {x, x} end)\n```\n\nWhile creating the map took some time, reading a value should be extremely fast.\n\nEvaluate the cell below and notice how quickly we can access a value. Try changing `key` to any integer between `0` and `999_999`. Notice there is no significant affect on the speed of accessing a value.\n\n```elixir\nkey = 500_000\n\n{micro_seconds, _result} = :timer.tc(fn -> Map.get(large_map, key) end)\n\nmicro_seconds\n```\n\nOn the other hand, Lists are slow compared to Maps because they need to enumerate each element.\n\n```elixir\nlarge_list = Enum.to_list(1..1_000_000)\n```\n\nTry changing `index` to any integer between `0` and `999_999` and notice that the larger the index value, the slower it takes to access an element.\n\n```elixir\nindex = 500_000\n\n{micro_seconds, _result} = :timer.tc(fn -> Enum.at(large_list, index) end)\n\nmicro_seconds\n```\n\n## MapSets\n\n[MapSets](https://hexdocs.pm/elixir/MapSet.html) are a set data structure. They function like a list that only allows non-duplicate values.\n\n```elixir\nMapSet.new([1, 2, 3])\n```\n\nMapSets ignore duplicate values.\n\n```elixir\nMapSet.new([1, 2, 3, 3])\n```\n\nMapSets are Maps under the hood, so they inherit the same performance properties as Maps.\n\n| Operation | Time Complexity                                  |\n| --------- | ------------------------------------------------ |\n| Access    | $O(log(n))$                                      |\n| Search    | $O(log(n))$                                      |\n| Insertion | $O(n)$ for <= 32 elements, otherwise $O(log(n))$ |\n| Deletion  | $O(n)$ for <= 32 elements, otherwise $O(log(n))$ |\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe [MapSet](https://hexdocs.pm/elixir/MapSet.html) module contains functions for working with MapSets.\n\nHere's a few to get you started:\n\n* `new/1` create a new mapset.\n* `put/2` add an element into a mapset.\n* `delete/2` remove an element from a mapset.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nA MapSet can contain any value. Keep in mind that order is not\nguaranteed.\n\n```elixir\nMapSet.new([\"1\", 2, :three])\n```\n\n`put/2` adds any non-duplicate element to a mapset.\n\n```elixir\nset = MapSet.new([1, 2, 3])\nMapSet.put(set, 4)\n```\n\nDuplicates will simply be ignored.\n\n```elixir\nset = MapSet.new([1, 2, 3])\nMapSet.put(set, 2)\n```\n\n`delete/2` removes an element from a MapSet.\n\n```elixir\nset = MapSet.new([1, 2, 3])\nMapSet.delete(set, 2)\n```\n\nMapSet is enumerable. However, any [Enum](https://hexdocs.pm/elixir/Enum.html) function with a MapSet returns a list.\n\n```elixir\nMapSet.new([1, 2, 3]) |> Enum.map(fn each -> each + 1 end)\n```\n\nGenerally, Lists are overused and can often be a MapSet instead. If you have a list\nwhere there should never be duplicate elements and order is not important, it's usually more performant to use a MapSet.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a MapSet with the elements `1, 2, 3`. Use [MapSet.member?/2](https://hexdocs.pm/elixir/MapSet.html#member?/2) to check if your MapSet contains\nthe element `2`. Your answer should return `true`.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Maps, Mapsets, And Keyword Lists reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Maps, Mapsets, And Keyword Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/lists_vs_tuples.livemd\">Lists Vs Tuples</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/mapset_drills.livemd\">MapSet Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task62-reading-comparison_operators", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Comparison Operators\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comparison Operators\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/booleans.livemd\">Booleans</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/match_operator.livemd\">Match Operator</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are comparison operators, and what do they commonly compare?\n* How might we use comparison operators in our programs?\n\n## Comparison Operators\n\nComparison operators allow us to compare values.\n\nUsing comparison operators, we can check if values are equal <span style=\"background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;\">==</span>, greater than `>`, less than `<`,\ngreater than or equal <span style=\"background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;\">>=</span>, and less than or equal <span style=\"background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;\"><=</span>.\n\nComparison operators can be used on any value but are most commonly used to compare\nintegers and floats.\n\nThe result of a comparison is a boolean, either `true` or `false`.\n\nFor example, if we check that `5` equals `5`, we return `true`.\n\n```elixir\n5 == 5\n```\n\n### Remembering Greater Than And Less Than\n\n`>` greater than\n\n`<` less than\n\nTo help remember which symbol `<` or `>` means greater than or less than, you might find it helpful\nto remember that the statement is `true` if the larger number goes on the larger side.\n\nSome people find it helpful to visualize the statement as an alligator eating. And the alligator always wants\nthe biggest meal.\n\n```elixir\n# Aligator Wants Biggest Meal. The Biggest Number Is `10` So Return True.\n10 > 2\n```\n\n```elixir\n# Aligator Wants Biggest Meal. The Biggest Number Is `10`, But It Eats `2` So Return False.\n10 < 2\n```\n\n### Strictly Equals\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThere are two operators for checking equality in Elixir. `===` will check if two values\nare strictly equal in both value and type. So despite having  the same numerical value,\n`1` does not equal `1.0` because integers and floats are not the same types.\n\n```elixir\n1 === 1.0\n```\n\nHowever, if you only care about the numerical value and not the data type, you can use only\ntwo equals signs instead of three `==`\n\n```elixir\n1.0 == 1\n```\n\n### Your Turn\n\nUsing comparison operators, determine if `10 + 10 * 15` is greater than `(10 + 10) * 15`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n10 + 10 * 15 > (10 + 10) * 15\n```\n\n</details>\n\n```elixir\n\n```\n\nUsing comparisons operators, determine if `4 ** 6` is equal to `4 * 4 * 4 * 4 * 4 * 4`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n4 ** 6 == 4 * 4 * 4 * 4 * 4 * 4\n```\n\n</details>\n\n```elixir\n\n```\n\nUsing comparison operators, determine if `100 / 2` is strictly equal to `50`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n100 / 2 === 50\n```\n\n</details>\n\n```elixir\n\n```\n\n## Comparing Different Data Types\n\nYou can compare different data types to each other in the following [Sorting Order](https://hexdocs.pm/elixir/master/operators.html#term-ordering).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nnumber < atom < reference < function < port < pid < tuple < map < list < bitstring\n```\n\nYou'll notice several data types that you may not be familiar with above. Don't worry. There's no need to memorize this sorting order nor know all of these data types.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Comparisons Strings\n\nWhen comparing strings, they compare based on alphabetical order. Letters earlier\nin the alphabet are evaluated as smaller than letters later in the alphabet.\n\n```elixir\n\"a\" < \"z\"\n```\n\nCapital letters are always less than lowercase letters regardless of alphabetical order.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"Z\" < \"a\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUse comparison operators to determine if `\"hello\"` is equal to `\"hello\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n\"hello\" == \"hello\"\n```\n\n</details>\n\n```elixir\n\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: Operators](https://hexdocs.pm/elixir/operators.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Comparison Operators reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comparison Operators\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/booleans.livemd\">Booleans</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/match_operator.livemd\">Match Operator</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task63-reading-modules", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Modules\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Modules\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rock_paper_scissors.livemd\">Rock Paper Scissors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/structs.livemd\">Structs</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you define a module?\n* How do you use public vs private named functions?\n* What is scope and how does it relate to modules?\n* What is function arity?\n* How do you read module documentation and run doctests?\n\n## Modules\n\nAs you create more and more functions, it becomes necessary to organize them. That's just one of the many reasons to use a **module**. A module is more or less a \"bag of functions\". We use them to organize and group related functions together.\n\nWe use the `defmodule` keyword to define a module like so.\n\n```elixir\ndefmodule MyModule do\nend\n```\n\nDon't worry about the output `{:module, MyModule, <<70, 79, 82, 49, 0, 0, 4, ...>>, nil}`. That's just how Elixir represents modules internally, and it's not important for our understanding.\n\nLet's break down the code above.\n\n1. `defmodule` a keyword that means \"define module\".\n2. `MyModule` is the name of this module. It can be any valid name, and should be **CapitalCase** which is often called **PascalCase**.\n   you'll often hear the name of the module referred to as the **namespace** that functions are organized under.\n3. `do` a keyword that separates the module name and its internal implementation.\n4. `end` a keyword that finishes the module definition.\n\nModules define functions inside of them. Each function has a name, so they are called **named functions**.\nYou can define functions inside a module using the following syntax.\n\n```elixir\ndefmodule ModuleName do\n  def function_name do\n    \"return value\"\n  end\nend\n```\n\nLet's break down the named function above.\n\n1. `def` this means \"define function\". The function name in this example is `function_name` but it could be any valid function name.\n2. `do` a keyword that separates the function head and the function body.\n3. `\"return value\"` this is the function body. This function returns the string `\"return value\"`, but it could return any Elixir term.\n4. `end` is a keyword that ends the function definition.\n\n## Calling Named Functions\n\nTo call a named function, you use round brackets `()`.\n\n```elixir\nModuleName.function_name()\n```\n\n### Arguments And Parameters\n\nYou can provide **arguments** to a function when you call it. These arguments are bound to **parameters** in the function definition.\n\n```elixir\ndefmodule ArgsAndParamsExample do\n  def call(param) do\n    IO.inspect(param, label: \"Called with the following argument\")\n  end\nend\n\nArgsAndParamsExample.call(\"argument\")\n```\n\n### Multiple Arguments And Params\n\nYou can define multiple parameters in a function, each separated by a comma. The names of parameters follow the same naming rules as variables.\n\nWe can use `binding()` to get a keyword list of all bound values. We commonly use this to conveniently inspect our code.\n\n```elixir\ndefmodule MultiParamExample do\n  def call(param1, param2, param3) do\n    IO.inspect(binding(), label: \"Called with the following bindings\")\n  end\nend\n```\n\n### Your Turn\n\nCall the `MutliParamExample.call/3` function with different arguments.\n\n```elixir\n\n```\n\n## Internal Module Functions\n\nA module can use its own functions without using the module's name before the function.\n\n```elixir\ndefmodule InternalExample do\n  def internal do\n    IO.inspect(\"Internal was called\")\n  end\n\n  def public do\n    InternalExample.internal()\n    internal()\n    \"public finished executing\"\n  end\nend\n\nInternalExample.public()\n```\n\nThe world outside of the module must use the module name to know which function to execute.\n\n```elixir\nInternalExample.public()\n```\n\nThe module name is optional inside of the module. However, we must include the module name when using the module's function outside of the module. For example, the following will raise an error.\n\n```elixir\npublic()\n```\n\n## Private Functions\n\nModules can access other module functions.\n\n```elixir\ndefmodule Speaker do\n  def speak() do\n    \"hi there\"\n  end\nend\n\ndefmodule Listener do\n  def listen() do\n    \"I heard you say: \" <> Speaker.speak()\n  end\nend\n\nListener.listen()\n```\n\nHowever, sometimes a module must keep a function private for internal use only. It may be for security reasons or because you don't think the function should be used anywhere but internally.\nOften it communicates to other developers how to use your module.\n\nYou can create a private module function with `defp` instead of `def`. You'll notice that below the `Speaker.think/0` function is undefined to the outside world.\n\n```elixir\ndefmodule PrivateThoughts do\n  defp think() do\n    \"I really want to say hi...\"\n  end\nend\n\nPrivateThoughts.think()\n```\n\nWe use private functions internally in the module, which means that public functions could expose their values.\n\n```elixir\ndefmodule ThoughtfulSpeaker do\n  defp think() do\n    IO.inspect(\"I really want to say hi...\")\n  end\n\n  def speak() do\n    think()\n    \"hi there\"\n  end\nend\n\nThoughtfulSpeaker.speak()\n```\n\n## Callback Functions\n\nSimilar to anonymous functions, we can pass named functions as callback functions, however we have to explicitly provide the function's arity using the capture operator `&`.\n\n```elixir\ndefmodule HigherOrder do\n  def higher_order_function(callback) do\n    callback.()\n  end\nend\n\ndefmodule Callback do\n  def callback_function do\n    \"I was called!\"\n  end\nend\n\nHigherOrder.higher_order_function(&Callback.callback_function/0)\n```\n\nNotice we cannot simply pass `Callback.callback_function` as an argument.\n\n```elixir\nHigherOrder.higher_order_function(Callback.callback_function())\n```\n\nAlternatively, we can wrap the callback function in an anonymous function.\n\n```elixir\nHigherOrder.higher_order_function(fn -> Callback.callback_function() end)\n```\n\n## Namespaces\n\nYou can use modules to organize functions under a single **namespace**.\nThis allows you to create many unique namespaces with their own functions to organize\nthe functionality of your program.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  A[Namespace]\n  B[Namespace]\n  C[Namespace]\n  A1[Function]\n  A2[Function]\n  A3[Function]\n  B1[Function]\n  B2[Function]\n  B3[Function]\n  C1[Function]\n  C2[Function]\n  C3[Function]\n  A --> A1\n  A --> A2\n  A --> A3\n  B --> B1\n  B --> B2\n  B --> B3\n  C --> C1\n  C --> C2\n  C --> C3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### SubModules\n\nSometimes you need to further split the functions in a module. This can be because the module is too large, or because the module has multiple separate responsibilities and it's more clear to separate them.\n\n```mermaid\nflowchart\n  Module --> SubModule\n  SubModule --> a[Function]\n  SubModule --> b[Function]\n  SubModule --> c[Function]\n```\n\nTo create submodules, you can separate module names with a period `.`.\n\n```elixir\ndefmodule Languages.English do\n  def greeting do\n    \"Hello\"\n  end\nend\n\nLanguages.English.greeting()\n```\n\n### Your Turn\n\nCreate a submodule under the `Languages` module with a `greeting/0` function that returns a greeting in another language. You may choose the language and the name of the submodule.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ndefmodule Languages.Spanish do\n  def greeting do\n    \"Hola\"\n  end\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n### Nested Modules\n\nIt's also possible, though not very common, to define a module inside another module. This will automatically nest the namespaces.\n\n```elixir\ndefmodule NestedLanguages do\n  defmodule English do\n    def greeting do\n      \"Hello\"\n    end\n  end\n\n  defmodule Spanish do\n    def greeting do\n      \"Hola\"\n    end\n  end\nend\n```\n\n```elixir\nNestedLanguages.English.greeting()\n```\n\n```elixir\nNestedLanguages.Spanish.greeting()\n```\n\n## Module Attributes\n\nWhile modules are mostly used to group functions, we can also include **compile-time** data inside the module that our functions can all use.\n\nWe use the `@` symbol to define a compile-time module attribute.\n\n```elixir\ndefmodule Hero do\n  @name \"Spider-Man\"\n  @nemesis \"Green Goblin\"\n\n  def introduce do\n    \"Hello, my name is #{@name}!\"\n  end\n\n  def catchphrase do\n    \"I'm your friendly neighborhood #{@name}!\"\n  end\n\n  def defeat do\n    \"I #{@name} will defeat you #{@nemesis}!\"\n  end\nend\n```\n\n```elixir\nHero.introduce()\n```\n\n```elixir\nHero.catchphrase()\n```\n\n```elixir\nHero.defeat()\n```\n\nWe can use module attributes to avoid significant code repetition where many functions all need to use the same value.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nChange the module attributes for the `Hero` module above to match your favourite super hero and villain. Re-evaluate the `Hero` module, then re-evaluate each function call to see the output change.\n\n## Module Scope\n\nModules and functions close themselves to the outside world. We call this `scope`.\nModules, functions, and many other similar constructs in Elixir are [lexically scoped](https://en.wikipedia.org/wiki/Scope_(computer_science)).\n\nThat means that variables defined in one scope cannot be accessed in another scope.\n\n```mermaid\n  flowchart\n    subgraph Top Level Scope\n      A[top level variable]\n      subgraph Module Scope\n        B[module variable]\n        subgraph Function Scope\n          C[function variable]\n        end\n      end\n    end\n```\n\nNotice how the following example has an error because we cannot access the variable\n`top_level_scope`.\n\n```elixir\ntop_level_scope = 1\n\ndefmodule ModuleScope1 do\n  def function_scope do\n    top_level_scope\n  end\nend\n```\n\nThe same is true for the module scope. However, it's uncommon to bind variables in the module scope. Generally we use module attributes instead.\n\n```elixir\ndefmodule ModuleScope2 do\n  module_scope = 2\n\n  def function_scope do\n    module_scope\n  end\nend\n```\n\nTo use a variable, it must be bound in the same scope.\n\n```elixir\ntop_level_scope = \"top level scope\"\nIO.inspect(top_level_scope)\n\ndefmodule CorrectModuleScope do\n  module_scope = \"module scope\"\n  IO.inspect(module_scope)\n\n  def function_scope do\n    function_scope = \"function scope\"\n    IO.inspect(function_scope)\n  end\nend\n\nCorrectModuleScope.function_scope()\n```\n\n## Multiple Function Clauses\n\nElixir allows us to define multiple functions with the same name but that expect different parameters, either with different arity or different values.\n\n```elixir\ndefmodule MultipleFunctionClauses do\n  def my_function do\n    \"arity is 0\"\n  end\n\n  def my_function(_param1) do\n    \"arity is 1\"\n  end\n\n  def my_function(_param1, _param2) do\n    \"arity is 2\"\n  end\nend\n\nMultipleFunctionClauses.my_function(1)\n```\n\nEach function clause has a different **arity**. We can treat each function with a different arity as a completely separate function. In Elixir, we often refer to functions by their name and arity.\n\nSo above we define `MultipleFunctionClauses.my_function/0`, `MultipleFunctionClauses.my_function/1`, and `MultipleFunctionClauses.my_function/2` functions.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nCreate a `Math` module with `add/2` and `add/3` functions. Each should add all of its parameters\ntogether.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMath.add(2, 5) # 7\nMath.add(1, 2, 3) # 6\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ndefmodule Math do\n  def add(int1, int2, int3) do\n    int1 + int2 + int3\n  end\n\n  def add(int1, int2) do\n    int1 + int2\n  end\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Default Arguments\n\nYou can provide default arguments to functions using the `\\\\` syntax after the parameter\n and then the default value.\n\n```elixir\ndefmodule DefaultArgsExample do\n  def call(param \\\\ \"default argument\") do\n    param\n  end\nend\n\nDefaultArgsExample.call()\n```\n\nIf desired, you can override the default value.\n\n```elixir\nDefaultArgsExample.call(\"overridden argument\")\n```\n\nMultiple parameters can have default values.\n\n```elixir\ndefmodule MultipleDefaultArgs do\n  def all_defaults(param1 \\\\ \"default argument 1\", param2 \\\\ \"default argument 2\") do\n    binding()\n  end\n\n  def some_defaults(param1 \\\\ \"default arg 1\", param2) do\n    binding()\n  end\nend\n```\n\n```elixir\nMultipleDefaultArgs.all_defaults()\n```\n\nWe can even provide default arguments for only some parameters in the function.\n\n```elixir\nMultipleDefaultArgs.some_defaults(\"overridden argument\")\n```\n\nThis sometimes results in some confusion with the function's arity, and the number of arguments passed into the function. For example, the `MultipleDefaultArgs.some_defaults/2` function above has an arity of `2`, despite only being called with one argument.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, define a module `Greeting` module with a `hello/1` function that uses a default argument. The `hello/1` function should return `Hello name!` where `name` is some default value that you choose.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nGreeting.hello()\n\"Hello Jon!\"\n\nGreeting.hello(\"Andrew\")\n\"Hello Andrew!\"\n```\n\n```elixir\n\n```\n\n## Documentation\n\nWe can document modules using `@doc` and `@moduledoc` module attributes with a multiline string.\n\n`@moduledoc` should describe the module at a high level. `@doc` should document a single function in the module.\n\n```elixir\ndefmodule DocumentedModule do\n  @moduledoc \"\"\"\n  Documented Module\n\n  Explanation of the module\n  \"\"\"\n\n  @doc \"\"\"\n  Explanation of the documented function 1\n  \"\"\"\n  def documented_function1 do\n  end\n\n  @doc \"\"\"\n  Explanation of the documented function 1\n  \"\"\"\n  def documented_function2 do\n  end\nend\n```\n\n### Doctests\n\nOften documentation contains examples of how the code should behave. Livebook automatically runs these examples to ensure the module is working correctly.\n\nBy starting a line with `iex>` in the documentation, we declare that the code example should be executable. This represents the [IEx Shell](./iex.livemd) which we will learn more about in a future lesson.\n\nWe often use these doctests to provide test feedback for exercises. You'll want to get comfortable reading this feedback.\n\n```elixir\ndefmodule DoctestExample do\n  @moduledoc \"\"\"\n  DoctestExample\n\n  Explains doctests with examples\n  \"\"\"\n\n  @doc \"\"\"\n  Returns a personalized greeting for one person.\n\n  ## Examples\n\n    iex> DoctestExample.hello()\n    \"Hello Jon!\"\n\n    iex> DoctestExample.hello(\"Bill\")\n    \"Hello Bill!\"\n  \"\"\"\n  def hello(name \\\\ \"Jon\") do\n    \"Hello #{name}!\"\n  end\nend\n```\n\n### Failing Doctests\n\nIf the doctests fail, you'll see a failure message and explanation of why.\n\n```elixir\ndefmodule DoctestFailure do\n  @moduledoc \"\"\"\n  DoctestFailure\n\n  Explains doctest failures with examples\n  \"\"\"\n\n  @doc \"\"\"\n  Purposely fails doctest\n\n  ## Examples\n\n    iex> DoctestFailure.test()\n    \"expected return value\"\n  \"\"\"\n  def test do\n    \"actual return value\"\n  end\nend\n```\n\nThe result displays information about where the test failed, and what the expected vs actual result of the function was.\n\nYou can use this feedback to debug your exercises.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nFix the failing `DoctestFailure` module so that its doctests pass.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Crashing Doctests\n\nUnfortunately, if the doctest causes code to crash, it usually won't display nicely formatted test results. Instead, it will either crash Livebook, or cause tests not to run.\n\nIf this is the case, you either have to fix your code, or remove/comment the crashing doctest.\n\n### Your Turn\n\nUncomment the following code and evaluate the cell to see an example. Re-comment your code to avoid crashing the livebook as you continue with the lesson.\n\n```elixir\n# defmodule DoctestCrash Do\n# @moduledoc \"\"\"\n# DoctestCrash\n\n# Explains Doctest Crashes With Examples\n# \"\"\"\n\n# @doc \"\"\"\n# Purposely Crashes Doctest Using Invalid Pattern Matching\n\n# ## Examples\n\n# iex> {} = DoctestCrash.crash()\n# \"2\"\n# \"\"\"\n# def crash do\n\n# end\n# end\n```\n\n### Your Turn\n\nUse `@doc` and `@moduledoc` to document the `Math` module you previously created in this lesson.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Modules reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Modules\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rock_paper_scissors.livemd\">Rock Paper Scissors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/structs.livemd\">Structs</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task64-reading-non_enumerables", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Non-Enumerables\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Non-Enumerables\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/tic-tac-toe.livemd\">Tic-tac-toe</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/comprehensions.livemd\">Comprehensions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are some examples of non-enumerable vs enumerable data structures?\n* How do you enumerate over non-enumerable data structures?\n* How do you convert non-enumerable data structures into enumerable data structures?\n\n## Overview\n\n### Non-Enumerables\n\nNon-enumerable data types are any data type that does not implement the [Enumerable](https://hexdocs.pm/elixir/Enumerable.html) protocol. For example, integers, floats, strings, atoms, and tuples are all not enumerable.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Enumeration With Non-Enumerables\n\nTo use enumeration with a non-enumerable data type, we need to convert the data into an enumerable data type.\n\nFor example, we could convert a string `\"abc\"` into a list of characters `[\"a\", \"b\", \"c\"]` if we wanted to enumerate over each character.\n\n## Converting Non-Enumerables Into Enumerables\n\nWhile we can't enumerate over non-enumerable data types, Elixir provides many functions we can use to convert non-enumerable data types into enumerable data types.\n\n## Integers\n\nWe can use the [Integer.digits/1](https://hexdocs.pm/elixir/Integer.html#digits/1) function to convert integers to a list of digits.\n\n```elixir\nInteger.digits(123)\n```\n\n### Your Turn\n\nIn the Elixir cell below, convert the integer `4389` into a list of digits.\n\n```elixir\n\n```\n\n### Undigits\n\nWe can convert a list of digits back into a single integer using [Integer.undigits/2](https://hexdocs.pm/elixir/Integer.html#undigits/2).\n\n```elixir\nInteger.undigits([1, 2, 3])\n```\n\n## Tuples\n\nDespite being so similar to lists, tuples are not considered enumerable.\nThat's primarily because they are intended as fixed-sized containers, and any case that requires\nenumeration would likely be better served with lists.\n\nTo get around this if needed, you can convert a tuple to a list with [Tuple.to_list/1](https://hexdocs.pm/elixir/Tuple.html#to_list/1).\n\nHowever, if you find yourself doing this often, it may be a better\nchoice to start with a list instead of a tuple.\n\n```elixir\nTuple.to_list({1, 2, 3})\n```\n\nWe can then convert a list back into a tuple using [List.to_tuple/1](https://hexdocs.pm/elixir/List.html#to_tuple/1)\n\n```elixir\nList.to_tuple([1, 2, 3])\n```\n\n## Strings\n\nStrings are not enumerable.\n\n```elixir\nEnum.map(\"abc\", fn char -> char end)\n```\n\n### [String.split/3](https://hexdocs.pm/elixir/String.html#split/3)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nHowever, strings can be converted into lists using [String.split/3](https://hexdocs.pm/elixir/String.html#split/3).\n\n[String.split/3](https://hexdocs.pm/elixir/String.html#split/3) splits a string based on some value.\n\nFor example, we can split a string by every comma like so:\n\n```elixir\nString.split(\"a,b,c,d\", \",\")\n```\n\nWe can split a string into a list of characters by splitting on every empty space `\"\"` This does create an empty string at the start and the end of the list.\n\n```elixir\nString.split(\"abcde\", \"\")\n```\n\nYou can trim whitespace using the `[trim: true]` option.\n\n```elixir\nString.split(\"abcde\", \"\", trim: true)\n```\n\nBy default, [String.split/1](https://hexdocs.pm/elixir/String.html#split/1) will split the string on every space.\n\n```elixir\nString.split(\"hello world\")\n```\n\nNow your string is an enumerable list of characters.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, convert the string `\"Hello, world!\"` into a list of single characters.\n\n```elixir\n\n```\n\n### Joining Strings\n\nOnce you've applied your transformation to the list of string characters, you can rejoin them using [Enum.join/2](https://hexdocs.pm/elixir/Enum.html#join/2)\n\n```elixir\nEnum.join([\"a\", \"b\", \"c\"], \"\")\n```\n\nThe default joiner is a string, so you can omit the second argument.\n\n```elixir\nEnum.join([\"a\", \"b\", \"c\"])\n```\n\nAlternatively we can join the strings by some joining character.\n\n```elixir\nEnum.join([\"a\", \"b\", \"c\"], \"_\")\n```\n\nWe can use [String.split/3](https://hexdocs.pm/elixir/String.html#split/3) and [Enum.join/2](https://hexdocs.pm/elixir/Enum.html#join/2) in combination with each other to split strings, enumerate over them applying some transformation, and then rejoining them.\n\nHere's a simple example of replacing all characters other than spaces with `\"X\"`.\n\n```elixir\nsplit_string = String.split(\"secret information\", \"\")\n\ntransformed_list =\n  Enum.map(split_string, fn char ->\n    case char do\n      \" \" -> \" \"\n      _ -> \"X\"\n    end\n  end)\n\njoined_string = Enum.join(transformed_list)\n```\n\n### Your Turn\n\nCreate a `CharacterCount` module that can count the number of characters in a string.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule CharacterCount do\n  def count(string) do\n    string\n    |> String.split(\"\", trim: true)\n    |> Enum.count()\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule CharacterCount do\n  @moduledoc \"\"\"\n  Character Count\n  \"\"\"\n\n  @doc \"\"\"\n  Count the number of characters in a string\n\n  ## Examples\n\n      iex> CharacterCount.count(\"abc\")\n      3\n\n      iex> CharacterCount.count(\"abcd\")\n      4\n  \"\"\"\n  def count(string) do\n  end\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [DockYard Academy: Enum](./enum.livemd)\n* [Elixir Schools: Enum](https://elixirschool.com/en/lessons/basics/enum)\n* [Elixir-lang: Enumerables](https://elixir-lang.org/getting-started/enumerables-and-streams.html#enumerables)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Non-Enumerables reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Non-Enumerables\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/tic-tac-toe.livemd\">Tic-tac-toe</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/comprehensions.livemd\">Comprehensions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task65-reading-maps", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Maps\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Maps\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/keyword_lists.livemd\">Keyword Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/shopping_list.livemd\">Shopping List</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is a map? How do they differ from keyword lists?\n* How do we create a map?\n* How do we use dot notation and square bracket notation to access values in a map?\n* How do we pattern match on maps?\n\n## Maps\n\nMaps are another type of associative data structure. You can create a map using `%{}`. Maps can use almost any elixir term as a key. However, most commonly we use strings and atoms for map keys.\n\nMaps have a key and a value separated by an arrow `=>`, which is an equals symbol `=` and a greater than symbol `>`.\n\n```elixir\n# String Keys\n%{\"key\" => \"value\"}\n\n# Atom Keys\n%{:key => \"value\"}\n```\n\nmultiple key-value pairs are separated by a comma `,`.\n\n```elixir\n%{:key => \"value\", \"key\" => \"value\"}\n```\n\nMaps with only atoms as keys can use a special piece of syntax sugar that makes them more convenient to write and read. This is purely syntax sugar and does not change their behavior.\n\n```elixir\n%{key1: \"value\", key2: \"value\"}\n```\n\nMaps are the common go-to for a key-value data structure. They are more expensive in terms of performance to create than keyword lists, however they are incredibly fast to access values. Unlike keyword lists, keys in a map must be unique. Also unlike keyword lists, maps also do not guarantee key order.\n\nFor these reasons, you'll most often use maps for large amounts of data or when you want keys to be unique and do not care about order.\n\nWe often use maps to represent properties of something. For example, you might have a `user` map that represents information about a book.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%{\n  title: \"Name of the Wind\",\n  author: \"Patrick Rothfuss\",\n  description: \"\"\"\n  The Name of the Wind is a fantasy novel by Patrick Rothfuss. It is the first book in the\n  Kingkiller Chronicle series and tells the story of Kvothe, a young orphan who becomes a\n  legendarily talented musician and magician. The novel is known for its intricate\n  world-building, complex characters, and themes of power, love, and loss.\n  \"\"\"  \n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nElixir is very helpful and provides a warning to let us know we're overriding a duplicate key.\n\n```elixir\n%{duplicate_key: \"value1\", duplicate_key: \"value2\"}\n```\n\nAs mentioned earlier, maps do not guarantee key order, which is why you'll notice the returned value of the map below does not have the same order as the map returned by the Elixir cell.\n\n```elixir\n%{one: \"one\", two: \"two\", three: \"three\"}\n```\n\nMaps can have any elixir term as a key, this makes them incredibly flexible.\n\n```elixir\n%{1 => \"value\"}\n\n%{[1, 2, 3] => \"value\"}\n```\n\n## Accessing Map Values\n\nUnlike the other data types, there aren't specific map operators. To manipulate maps we\nuse a different tool called the [Map](https://hexdocs.pm/elixir/Map.html) module, which you will learn more about in a future lesson.\n\nFor now, it's enough to know that you can access values in an atom-key map using a few different methods.\n\nYou can retrieve values in a map using **map.key** notation like so. This only works for maps with\natom keys.\n\n```elixir\n%{key: \"value\"}.key\n```\n\nAlternatively, you can access the map value using square bracket notation **map[key]**.\n\n```elixir\n%{key: \"value\"}[:key]\n```\n\nBracket notation is especially useful for maps with non-atom keys.\n\n```elixir\n%{\"key\" => \"value\"}[\"key\"]\n```\n\n```elixir\n%{1 => \"value\"}[1]\n```\n\nWith **map.key** notation, your program will throw an error if your map doesn't have the expected value.\n\n```elixir\n%{}.key\n```\n\nBracket notation will return `nil` if the key doesn't exist rather than throwing an error.\n\n```elixir\n%{}[:key]\n```\n\nWe can access deeply nested values with both dot notation and bracket notation.\n\n```elixir\n%{key1: %{key2: %{key3: \"value\"}}}.key1.key2.key3\n```\n\n```elixir\n%{1 => %{2 => %{3 => \"value\"}}}[1][2][3]\n```\n\nBracket notation is especially useful for accessing deeply nested values without causing a crash\nif the value doesn't exist.\n\n```elixir\n%{}[1][2][3]\n```\n\nYou can accomplish all of the same behavior above by binding the map to a variable rather\nthan accessing values from the map directly.\n\n```elixir\nmap = %{key: \"value\"}\nmap.key\n```\n\n```elixir\nmap = %{key: \"value\"}\nmap[:key]\n```\n\n### Your Turn\n\nIn the Elixir cell below, access the `:hello` key in `map`. Retrieve the value using both **map[key]** and **map.key** notation.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n**map.key** notation.\n\n```elixir\nmap = %{hello: \"world\"}\nmap.hello\n```\n\n**map[]** notation.\n\n```elixir\nmap = %{hello: \"world\"}\nmap[:hello]\n```\n\n</details>\n\n```elixir\nmap = %{hello: \"world\"}\n```\n\n### Updating Maps\n\nYou can update values in a map using `%{initial_map | updated_values}` syntax like so.\n\n```elixir\ninitial = %{key: \"value\"}\n\n%{initial | key: \"new value\"}\n```\n\nElixir does not allow you to mutate values. That means\nthe variable `initial` is still `%{key: \"value\"}`\n\n```elixir\ninitial\n```\n\nYou can instead store a new variable for the updated map.\n\n```elixir\nupdated = %{initial | key: \"new value\"}\nupdated\n```\n\nOr rebind the existing `initial` variable.\n\n```elixir\ninitial = %{initial | key: \"new value\"}\ninitial\n```\n\nYou can only update existing atom key values in a map, otherwise it will cause an error.\n\n```elixir\ninitial = %{}\n%{initial | new_key: \"value\"}\n```\n\n### Your Turn\n\nUse a map to represent a todo item The todo map should have `:title` and `:completed` keys.\n\n* title: \"finish maps exercises\", completed: false\n\nBind your map to a `todo` variable, and update the value so `completed` is `true`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ntodo = %{title: \"finish maps exercise\", completed: false}\n\n%{todo | completed: true}\n```\n\n</details>\n\n```elixir\n\n```\n\n## Pattern Matching\n\nWe can pattern match on values inside the map.\n\n```elixir\n%{hello: my_variable} = %{hello: \"world\"}\nmy_variable\n```\n\nUnlike with keyword lists, we don't have to match on every key/value pair when pattern matching with maps.\n\n```elixir\n%{one: one} = %{one: 1, two: 2}\none\n```\n\nThis also works with non-atom key maps.\n\n```elixir\n%{\"hello\" => world} = %{\"hello\" => \"world\"}\n```\n\nWe can only pattern match on the value in the map, not the key. Keys in maps must be **literals** such as atoms, strings, tuples, etc.\n\n```elixir\n%{hello => world} = %{\"hello\" => \"world\"}\n```\n\n### Pin Operator\n\nYou'll notice that we can rebind variables using pattern matching.\n\n```elixir\nname = \"Jon\"\n\n%{name: name} = %{name: \"Bill\"}\n\nname\n```\n\nIf instead of re-binding the variable, we want to use the literal value of the variable, we can use the pin operator `^`.\n\n```elixir\nname = \"Jon\"\n\n%{name: ^name} = %{name: \"Bill\"}\n\nname\n```\n\nThe above causes a [MatchError](https://hexdocs.pm/elixir/MatchError.html) because the left side and right side do not match. It's the same as if we had written the following.\n\n```elixir\n%{name: \"Jon\"} = %{name: \"Bill\"}\n```\n\nWe might use this to confirm our map matches some shape.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nBind `2` and `4` in the following map to variables `two` and `four`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n%{two: two, four: four} = %{one: 1, two: 2, three: 3, four: 4}\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n%{one: 1, two: 2, three: 3, four: 4}\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Schools: Maps](https://elixirschool.com/en/lessons/basics/collections#maps-6)\n* [Exercism: Maps](https://exercism.org/tracks/elixir/concepts/maps)\n* [Elixir Lang: Pattern Matching](https://elixir-lang.org/getting-started/pattern-matching.html)\n* [Elixir Lang: Maps](https://elixir-lang.org/getting-started/keywords-and-maps.html#maps)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Maps reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Maps\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/keyword_lists.livemd\">Keyword Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/shopping_list.livemd\">Shopping List</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task66-reading-task", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Task\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Task\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_supervised_score_tracker.livemd\">Games: Supervised Score Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/task_supervisor.livemd\">Task Supervisor</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we use tasks to leverage concurrency?\n* How do we use tasks to send one-off fire-and-forget jobs?\n\n## Task\n\nWe've already seen we can use [Kernel.spawn/1](https://hexdocs.pm/elixir/Kernel.html#spawn/1) or `Kernal.spawn_link/1` to spawn a process that performs some work and then dies.\n\n```elixir\nspawn_pid =\n  spawn(fn ->\n    IO.puts(\"Job Started\")\n    # simulating expensive process\n    Process.sleep(1000)\n    IO.puts(\"Job Ended\")\n  end)\n```\n\nWhen we want to execute some code in a process, we shouldn't use [Kernel.spawn/1](https://hexdocs.pm/elixir/Kernel.html#spawn/1) or [Kernel.spawn_link/1](https://hexdocs.pm/elixir/Kernel.html#spawn_link/1) directly. Instead, we should rely on the [Task](https://hexdocs.pm/elixir/Task.html) module. The [Task](https://hexdocs.pm/elixir/Task.html) module allows us to spawn a process, perform some work in that process, then end the process when our work is finished.\n\n[Task](https://hexdocs.pm/elixir/Task.html) is also OTP-compliant, meaning it conforms to certain OTP conventions that improve error handling, and allow them to start under a supervisor.\n\n## Fire-and-Forget\n\nWe can use [Task.start/1](https://hexdocs.pm/elixir/Task.html#start/1) to create a new short-lived process that dies when it's function executes. This is a **fire-and-forget** process which does not block the caller process or return a response.\n\n```elixir\n{:ok, task_pid} = Task.start(fn -> IO.puts(\"task ran!\") end)\n\nIO.puts(\"Parent keeps running\")\nProcess.sleep(100)\nProcess.alive?(task_pid) || IO.puts(\"task is dead\")\n```\n\n## Awaiting Task Response\n\nWith [Task](https://hexdocs.pm/elixir/Task.html), we can use `async/1` and `await/1` to spawn a process, perform some calculation, and the retrieve the value when it's finished.\n\n```elixir\ntask =\n  Task.async(fn ->\n    # simulating expensive calculation\n    Process.sleep(1000)\n    \"response!\"\n  end)\n\nTask.await(task)\n```\n\nWe can run two computations concurrently by separating them into two different [Task](https://hexdocs.pm/elixir/Task.html) processes.\nHere, we're simulating a clock tick-tocking every second in two separate processes to demonstrate the run in parallel.\n\n```elixir\ntask1 =\n  Task.async(fn ->\n    IO.inspect(\"tick\", label: \"task 1\")\n    Process.sleep(2000)\n    IO.inspect(\"tick\", label: \"task 1\")\n    Process.sleep(1000)\n    \"tick\"\n  end)\n\ntask2 =\n  Task.async(fn ->\n    Process.sleep(1000)\n    IO.inspect(\"tock\", label: \"task 2\")\n    Process.sleep(2000)\n    IO.inspect(\"tock\", label: \"task 2\")\n    \"tock\"\n  end)\n\nTask.await(task1) |> IO.inspect(label: \"Task 1 Response\")\nTask.await(task2) |> IO.inspect(label: \"Task 2 Response\")\n```\n\nA computer with a multi-core processor can perform these concurrent computations in parallel, which may make our program faster. In reality, it's a bit more complicated than this, but this is a reasonable mental model for now to understand why concurrency is useful for improving performance.\n\nHere we use the **par** boxes to demonstrate operations happening in parallel.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\n  par \n    ParentProcess ->> Task1: spawns\n    ParentProcess ->> Task2: spawns\n  end\n  par\n    Task1 ->> Task1: performs work\n    Task2 ->> Task2: performs work\n  end\n  Task1 ->> ParentProcess: return awaited result\n  Task2 ->> ParentProcess: return awaited result\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n[Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) returns a [Task](https://hexdocs.pm/elixir/Task.html) struct, not a pid. The [Task](https://hexdocs.pm/elixir/Task.html) struct\ncontains information about who the parent (`:owner`) process is, the task's pid (`:pid`), and a reference (`:ref`) used to monitor if the task crashes.\n\n```elixir\nTask.async(fn -> nil end)\n```\n\nTo demonstrate the performance value of concurrency, let's say we have two computations which each take `1` second, it would normally take us `2` seconds\nto run these tasks synchronously.\n\n```elixir\ncomputation1 = fn -> Process.sleep(1000) end\ncomputation2 = fn -> Process.sleep(1000) end\n\n{microseconds, _result} =\n  :timer.tc(fn ->\n    computation1.()\n    computation2.()\n  end)\n\n# Expected To Be ~2 Seconds\nmicroseconds / 1000 / 1000\n```\n\nBy running these computations in parallel, we can theoretically reduce this time to `1` second instead of `2`.\n\n> Note, if your computer does not have multiple cores, then it will still take `2` seconds rather than the expected `1` second.\n\n```elixir\ncomputation1 = fn -> Process.sleep(1000) end\ncomputation2 = fn -> Process.sleep(1000) end\n\n{microseconds, _result} =\n  :timer.tc(fn ->\n    task1 = Task.async(fn -> computation1.() end)\n    task2 = Task.async(fn -> computation2.() end)\n\n    Task.await(task1)\n    Task.await(task2)\n  end)\n\n# Expected To Be ~1 Second\nmicroseconds / 1000 / 1000\n```\n\n### Your Turn\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.await/1](https://hexdocs.pm/elixir/Task.html#await/1) to demonstrate the performance benefits between synchronous\nexecution and parallel execution.\n\nYou may consider using [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to simulate an expensive computation.\n\n```elixir\n\n```\n\n## Awaiting Many Tasks\n\nWhen working with many parallel tasks, we can use enumeration to spawn many tasks.\n\n```elixir\ntasks =\n  Enum.map(1..5, fn each ->\n    Task.async(fn ->\n      Process.sleep(1000)\n      each * 2\n    end)\n  end)\n```\n\nThen we can also use enumeration to `await/1` each task.\n\n```elixir\nEnum.map(tasks, fn task -> Task.await(task) end)\n```\n\nAlternatively, you can use the convenient `Taskl.await_many/1` function instead.\n\n```elixir\ntasks =\n  Enum.map(1..5, fn each ->\n    Task.async(fn ->\n      Process.sleep(1000)\n      each * 2\n    end)\n  end)\n\nTask.await_many(tasks)\n```\n\n## Timeouts\n\n[Task.await/1](https://hexdocs.pm/elixir/Task.html#await/1) pauses the current execution to wait until a task has finished. However, it\nwill not wait forever. By default, [Task.await/1](https://hexdocs.pm/elixir/Task.html#await/1) and [Task.await_many/1](https://hexdocs.pm/elixir/Task.html#await_many/1) will wait for five seconds for\nthe task to complete. If the task does not finish, it will raise an error.\n\n```elixir\ntask = Task.async(fn -> Process.sleep(6000) end)\n\nTask.await(task)\n```\n\nIf we want to wait for more or less time, we can override the default value. `await/2` and `await_many/2` accept\na timeout value as the second argument to the function.\n\n```elixir\ntask = Task.async(fn -> Process.sleep(6000) end)\n\nTask.await(task, 7000)\n```\n\n```elixir\ntask1 = Task.async(fn -> Process.sleep(6000) end)\ntask2 = Task.async(fn -> Process.sleep(6000) end)\n\nTask.await_many([task1, task2], 7000)\n```\n\n### Your Turn\n\nIn the Elixir cell below, spawn a task which takes one second to complete.\n`await/2` the task and alter the timeout value to be one second. Awaiting the task should crash.\n\n```elixir\n\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: Task](https://hexdocs.pm/elixir/Task.html)\n* [ElixirSchools: Task](https://elixirschool.com/en/lessons/intermediate/concurrency#tasks-5)\n* [Exercism: Task](https://exercism.org/tracks/elixir/concepts/tasks)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Task reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Task\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_supervised_score_tracker.livemd\">Games: Supervised Score Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/task_supervisor.livemd\">Task Supervisor</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task67-reading-agents_and_ets", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# State: Agent And ETS\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=State: Agent And ETS\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/book_changeset.livemd\">Book Changeset</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/agent_journal.livemd\">Agent Journal</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* Why would you use an Agent instead of a GenServer?\n* Why might you use `:ets` instead of an Agent?\n* Why and how could you implement a cache?\n\n## State\n\nState allows us to persist a value during the runtime of our application. We've seen how we can start a [GenServer](https://hexdocs.pm/elixir/GenServer.html) process which stores and manipulates its internal state.\n\nNow we're going to learn about managing state using [Agent](https://hexdocs.pm/elixir/Agent.html)s and [ETS (Erlang Term Storage)](https://elixir-lang.org/getting-started/mix-otp/ets.html)\n\n## Agents\n\n[Agent](https://hexdocs.pm/elixir/Agent.html)s are a wrapper around state. They are less fully-featured and simpler than a [GenServer](https://hexdocs.pm/elixir/GenServer.html). Unlike [GenServer](https://hexdocs.pm/elixir/GenServer.html)s, they do not send and receive messages. Instead, the [Agent](https://hexdocs.pm/elixir/Agent.html) module provides functions such as [Agent.get/3](https://hexdocs.pm/elixir/Agent.html#get/3) and [Agent.update/3](https://hexdocs.pm/elixir/Agent.html#update/3) to get and update the [Agent](https://hexdocs.pm/elixir/Agent.html) process's state.\n\n```elixir\n{:ok, counter_pid} = Agent.start_link(fn -> 0 end)\n```\n\n```elixir\nAgent.update(counter_pid, fn state -> state + 1 end)\n```\n\n```elixir\nAgent.get(counter_pid, fn state -> state end)\n```\n\nOften, we'll put Agent functions into a module to abstract how state is stored and manipulated and only expose the desired functionality.\n\n```elixir\ndefmodule Counter do\n  use Agent\n\n  def start_link(_opts) do\n    Agent.start_link(fn -> 0 end)\n  end\n\n  def increment(pid) do\n    Agent.update(pid, fn state -> state + 1 end)\n  end\n\n  def get_count(pid) do\n    Agent.get(pid, fn state -> state end)\n  end\nend\n\n{:ok, counter_pid} = Counter.start_link([])\n\n:ok = Counter.increment(counter_pid)\n:ok = Counter.increment(counter_pid)\n2 = Counter.get_count(counter_pid)\n```\n\nAnything you can accomplish with an [Agent](https://hexdocs.pm/elixir/Agent.html), you could instead accomplish with a [GenServer](https://hexdocs.pm/elixir/GenServer.html). However, using an [Agent](https://hexdocs.pm/elixir/Agent.html) is more lightweight and effective if all you need is to manage state.\n\n## Erlang Term Storage (ETS)\n\nWe can use [ETS](https://elixir-lang.org/getting-started/mix-otp/ets.html)\ntables for a convenient in-memory cache. `:ets` is a library provided by Erlang\nthrough the `:ets` module.\n\nWhile an [Agent](https://hexdocs.pm/elixir/Agent.html) is a simple solution for an in-memory cache best for small loads or non-concurrent operations, an `:ets` table generally\nperforms better and can support concurrent read and write operations.\n\nGenerally, We can use `:ets` for a more performant in-memory key-value store.\n\n`:ets` tables are much like a [GenServer](https://hexdocs.pm/elixir/GenServer.html) except designed explicitly for in-memory key-value storage.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nsubgraph ETS\n  Process[Process] --> State\n  State --> KV[Key Value Storage]\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nLivebook allows us to view the `:ets` process as a table. Let's start a new `:ets` table called\n`:example_table`.\n\n```elixir\ntable = :ets.new(:example_table, [])\n```\n\nWe can then insert values into the table with `:ets.insert/2`. We insert\nvalues as `{key, value}` tuples.\n\nThe key and the value can be nearly any value, but we'll often use an atom for the key.\n\n### Your Turn\n\nTry changing the `:key` and `value` to see that the `:ets` table will store any key-value pair.\nHowever, the `:ets` table will only store one value for a given key.\n\n```elixir\n:ets.insert(table, {:hello, \"hi\"})\n```\n\n```elixir\nkw_list = :ets.lookup(table, :key)\n\nvalue = kw_list[:key]\n```\n\n### Named Tables\n\n`:ets` tables can be created with a `:named_table` option. This allows us to create\nthe table and refer to them without the variable bound to their pid.\n\n```elixir\n:ets.new(:my_table, [:named_table])\n```\n\nNow we can insert values to the table using the atom name\n`:my_table` instead of the PID.\n\n```elixir\n:ets.insert(:my_table, {:key, \"value\"})\n```\n\nThe same goes for looking up values.\n\n```elixir\n:ets.lookup(:my_table, :key)\n```\n\n### Your Turn\n\nIn the Elixir cell below, create a `:super_heros` `:ets` table.\nYou should be able to insert super hero's and their\nsecret identities.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n:ets.insert(:super_heros, {\"Spider Man\", \"Peter Parker\"})\n```\n\n```elixir\n\n```\n\n## ETS Configuration\n\n`:ets` Tables are configured with a **Table Type** and an **Access Control**.\n\n**Table Types**\n\n* `:set` (default). One value per unique key.\n* `:ordered_set` One value per unique key, ordered by Elixir terms.\n* `:bag` Many values per key, but only one instance of each value per key.\n* `:duplicate_bag` Many values per key with duplicates allowed.\n\n**Access Control**\n\n* `:protected` (default) Read from all process. Write allowed only for the parent process.\n* `:public` Read/Write available from all processes.\n* `:private` Read/Write allowed only for the parent process.\n\nBy default, `:ets` tables use the `:set` and `:protected` configuration values. So we may include or exclude them when starting an `:ets` table, and it does not have any effect.\n\n```elixir\ndefault_table = :ets.new(:default_table, [:set, :protected])\n:ets.insert(default_table, {:key, \"value\"})\n\n# We Return The Default Table To Display The Table In Livebook.\ndefault_table\n```\n\nWith `:protected` access control, the `:ets` raises an [ArgumentError](https://hexdocs.pm/elixir/ArgumentError.html) if another process attempts to write to it.\n\nUncomment and execute this code. Notice that the child process crashes.\n\n```elixir\n# Task.start(fn ->\n# :ets.insert(default_table, {:new_key, \"new value\"})\n# End)\n```\n\nHowever, reading from other processes is allowed.\n\n```elixir\nTask.start(fn ->\n  :ets.lookup(default_table, :key) |> IO.inspect(label: \"lookup result\")\nend)\n```\n\n**:public**\n\nA public table can be read and written from any process, so the following no longer crashes.\n\n```elixir\npublic = :ets.new(:public_example, [:public])\n\nTask.start(fn ->\n  :ets.insert(public, {:key, \"value\"})\nend)\n\n# We Return The Public Table To Display It In Livebook.\npublic\n```\n\n**:bag**\n\nA `:bag` table type allows for multiple keys but not the same value under the same key.\n\n```elixir\nbag = :ets.new(:bag_example, [:bag])\n\n:ets.insert(bag, {:key, \"duplicate value\"})\n:ets.insert(bag, {:key, \"duplicate value\"})\n:ets.insert(bag, {:key, \"non-duplicate value\"})\n\n# We Return The Bag Table To Display It In Livebook.\nbag\n```\n\n```elixir\n:ets.lookup(bag, :key)\n```\n\n**:duplicate_bag**\n\n`:duplicate_bag` allows for duplicate keys with the same value.\n\n```elixir\nbag = :ets.new(:bag_example, [:duplicate_bag])\n\n:ets.insert(bag, {:key, \"duplicate value\"})\n:ets.insert(bag, {:key, \"duplicate value\"})\n:ets.insert(bag, {:key, \"non-duplicate value\"})\n\n# We Return The Bag Table To Display It In Livebook.\nbag\n```\n\n### Your Turn\n\nIn the Elixir cell below, use the `:ordered_set` and `:private` configuration values to make\nan ordered and private `:ets` table.\n\nDemonstrate that the table will not allow read/write operations to the `:ets` table\nfrom another process.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntable = :ets.new(:example, [:private, :ordered_set])\n\n# Writing From The Owner Process Is Allowed.\n:ets.insert(table, {:key, \"value\"})\n\n# The Following Will Cause A Crash.\nspawn(fn ->\n  :ets.insert(table, {:key, \"value\"})\nend)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Race Conditions\n\nConcurrency is a powerful tool, but it introduces a new class of bugs.\nFor example, **race conditions** are a common problem.\n\nA race condition occurs when events of operations occur in an unexpected order.\n\nBelow we have an `:ets` table, which stores a count. Two tasks read the current count and then increment it. We use `Process.sleep(100)` to simulate a time-consuming computation, then insert a new count.\n\nIf these tasks were synchronous, we would expect the count to increment twice and return two. However, when both of these operations are concurrent, both tasks read the count when it's zero, then increment the count to one. They then save the resulting count in the `:ets` table. As a result, the count is one rather than the expected value of two. This is a classic issue you'll often run into when working with concurrency.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\nETS Table->>ETS Table: sets count = 0\n    ETS Table->>Task 1: reads count (0)\n    ETS Table->>Task 2: reads count (0)\n    Task 1->>ETS Table: sets count = 1\n    Task 2->>ETS Table: sets count = 1\n```\n\n```\nactivate Child Process\nChild Process-->>Parent Process: pid\ndeactivate Child Process\n```\n\n```elixir\ntable = :ets.new(:concurrent, [:public])\n\n:ets.insert(table, {:count, 0})\n\nincrement_task1 =\n  Task.async(fn ->\n    [count: count] = :ets.lookup(table, :count)\n    Process.sleep(100)\n    :ets.insert(table, {:count, count + 1})\n  end)\n\nincrement_task2 =\n  Task.async(fn ->\n    [count: count] = :ets.lookup(table, :count)\n    Process.sleep(100)\n    :ets.insert(table, {:count, count + 1})\n  end)\n\nTask.await(increment_task1)\nTask.await(increment_task2)\n\ntable\n```\n\nFor an overview of race conditions and how large systems deal with many concurrent operations, there is an excellent video by Tom Scott.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=RY_2gElt3SA\")\n```\n\n## Caches\n\nA cache allows us to store data to avoid computing values.\n\nWe commonly use caches to avoid performance-demanding functions or re-retrieving external resources.\n\n```mermaid\nflowchart LR\ninput --> e[expensive computation] --> output\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nA cache can store the expected output for a given input to a function for quicker access.\n\n```mermaid\nflowchart\ninput --> cache --cached value--> output\ncache --no cached value --> e[expensive computation] --> output\n```\n\nSome caches are smart and save newly computed values in the cache to avoid recomputing the same value.\n\nOther caches may be static or infrequently changing data that occasionally updates in the background.\n\nLet's take a slow implementation of the fibonacci sequence $fib(n) = fib(n - 1) + fib(n-2)$ as an example. Currently, `Fib` will recompute many of the same inputs. In the example below, we print every computation of `fib(n)`. Notice that many of the same inputs repeat.\n\n```elixir\ndefmodule SlowFib do\n  def of(0), do: 0\n  def of(1), do: 1\n\n  def of(n) do\n    IO.puts(\"Computing fib(#{n})\")\n    of(n - 1) + of(n - 2)\n  end\nend\n\nSlowFib.of(10)\n```\n\nWe can improve performance by saving each input/output in a cache so we don't have to re-compute the same values over and over. You can think of this cache as a table of inputs and outputs. For each input, we store the computed output rather than re-performing the calculation.\n\n<!-- livebook:{\"attrs\":{\"source\":\"defmodule Fib do\\n  def get(n) do\\n    sequence =\\n      Stream.unfold({1, 1}, fn {a, b} ->\\n        {a, {b, a + b}}\\n      end)\\n      |> Enum.take(n)\\n\\n    [0 | sequence]\\n  end\\nend\\n\\nFib.get(150)\\n|> Enum.with_index()\\n|> Enum.map(fn {value, index} -> %{input: index, output: value} end)\\n|> Kino.DataTable.new()\",\"title\":\"Fib Cache\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\ndefmodule Fib do\n  def get(n) do\n    sequence =\n      Stream.unfold({1, 1}, fn {a, b} ->\n        {a, {b, a + b}}\n      end)\n      |> Enum.take(n)\n\n    [0 | sequence]\n  end\nend\n\nFib.get(150)\n|> Enum.with_index()\n|> Enum.map(fn {value, index} -> %{input: index, output: value} end)\n|> Kino.DataTable.new()\n```\n\nFor any already computed input, the cache will return the cached output. This significantly improves our performance at the cost of memory and initial setup time.\n\nHowever, be aware that caching can lead to issues and should be well considered. The cache permanently takes up memory in your program, so there's a considerable memory cost. Often it's best to consider how you can improve the performance of your application rather than immediately reaching for a cache.\n\nFor example, a slow Fibonacci function with a cache is no replacement for a fast Fibonacci function!\n\nThere are many ways to implement a cache. For example [GenServer](https://hexdocs.pm/elixir/GenServer.html), [Agent](https://hexdocs.pm/elixir/Agent.html), and `:ets` all expose state which could be used as a cache. We can even use module attributes for simple static caches.\n\nHere's an example cache using [Agent](https://hexdocs.pm/elixir/Agent.html) which can get and set values.\n\n```elixir\ndefmodule AgentCache do\n  use Agent\n\n  def start_link(opts \\\\ []) do\n    Agent.start_link(fn -> %{} end, opts)\n  end\n\n  def get(pid, input) do\n    Agent.get(pid, fn state -> state[input] end)\n  end\n\n  def set(pid, input, output) do\n    Agent.update(pid, fn state -> Map.put(state, input, output) end)\n  end\nend\n```\n\nWe can use this cache to store values during the runtime of our application. For example, here's how we can use this cache with our `Fib` module. Notice we no longer re-compute already cached values.\n\n```elixir\n# Named Process Simplifies Accessing The Cache.\nAgentCache.start_link(name: :fib_cache)\n# Resetting Cache To Preserve The Example.\nAgent.update(:fib_cache, fn state -> %{} end)\n\ndefmodule CachedFib do\n  def of(0), do: 0\n  def of(1), do: 1\n\n  def of(n) do\n    cached_value = AgentCache.get(:fib_cache, n)\n\n    if cached_value do\n      cached_value\n    else\n      IO.puts(\"Computing fib(#{n})\")\n      result = of(n - 1) + of(n - 2)\n      AgentCache.set(:fib_cache, n, result)\n      result\n    end\n  end\nend\n\nCachedFib.of(100)\n```\n\n### Your Turn\n\nCompare the `SlowFib` module with the `CachedFib` module. What value of `n` can they both handle before they are no longer performant?\n\nDepending on your computer, we recommend you don't use `SlowFib` with a value larger than `25` or so otherwise you might crash this Livebook!\n\nHowever, `CachedFib` should handle larger numbers.\n\n```elixir\n\n```\n\n### Your Turn\n\nUse [GenServer](https://hexdocs.pm/elixir/GenServer.html) to create a cache.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule GenServerCache do\n  use GenServer\n\n  def start_link(opts) do\n    GenServer.start_link(__MODULE__, [], opts)\n  end\n\n  def get(pid, key) do\n    GenServer.call(pid, {:get, key})\n  end\n\n  def set(pid, key, value) do\n    GenServer.call(pid, {:set, key, value})\n  end\n\n  @impl true\n  def init(_opts) do\n    {:ok, %{}}\n  end\n\n  @impl true\n  def handle_call({:get, key}, _from, state) do\n    {:reply, state[key], state}\n  end\n\n  def handle_call({:set, key, value}, _from, state) do\n    {:reply, :ok, Map.put(state, key, value)}\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule GenServerCache do\n  use GenServer\nend\n```\n\n### Your Turn\n\nUse `:ets` to create a cache.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule ETSCache do\n  def new(opts \\\\ []) do\n    :ets.new(:cache, opts)\n  end\n\n  def set(ref, key, value) do\n    :ets.insert(ref, {key, value})\n  end\n\n  def get(ref, key) do\n    case :ets.lookup(ref, key) do\n      [{_key, value}] -> value\n      _ -> nil\n    end\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule ETSCache do\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir Lang: Agent](https://elixir-lang.org/getting-started/mix-otp/agent.html)\n* [HexDocs: Agent](https://hexdocs.pm/elixir/Agent.html)\n* [Elixir Schools: ETS](https://elixirschool.com/en/lessons/storage/ets).\n* [Elixir Lang: ETS](https://elixir-lang.org/getting-started/mix-otp/ets.html).\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish State: Agent And ETS reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=State: Agent And ETS\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/book_changeset.livemd\">Book Changeset</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/agent_journal.livemd\">Agent Journal</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task68-reading-arithmetic", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Arithmetic\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:visual, github: \"brooklinjazz/visual\"},\n  {:smart_animation, github: \"brooklinjazz/smart_animation\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Arithmetic\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/comments.livemd\">Comments</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/strings.livemd\">Strings</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What are integers and floats?\n* What are arithmetic operators?\n* What is the order of operations, and how can you alter it using round brackets `()`?\n\n## Overview\n\n**Arithmetic** is a branch of mathematics that involves the manipulation of numbers.\nOften functional programming languages like Elixir get a reputation for requiring advanced math skills.\nThe same goes for programming in general, but especially functional programming.\n\nLet's dispel that myth. While some programming fields require\nadvanced math skills, many do not. Generally, web development only requires simple arithmetic\n(adding, subtracting, dividing, multiplying, etc), and even then, we let the computers do most\nof the heavy lifting!\n\nRest assured, this will not be a math course, nor will most real-world applications demand advanced math knowledge.\n\nComputers were originally built to perform computations that humans could not perform easily or\nat all. So out of the box, we can perform mathematical calculations.\n\nHumans have been building [mathematical machines](https://www.cs.uah.edu/~rcoleman/Common/History/History.html)\nfor ages and the computers that run our programs are by far the most powerful!\n\n## Integers\n\nIntegers are whole numbers, including negative numbers.\n\n```mermaid\nflowchart LR\n... --> -5 --> -4 --> -3 --> -2 --> -1 --> 0 --> 1 --> 2 --> 3 --> 4 --> 5 --> 6[...]\n```\n\nYou can use integers directly in your programs.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n1\n1023\n1235460\n-1\n-100\n-123512\n```\n\nOften you'll use integers for representing ages, days, years, cash values, and more.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, replace `1` the biggest integer you can think of (until you get bored).\n\nWe'll show you how many digits the number has when you re-evaluate the Elixir cell.\n\nIf you've used any other programming language, you might be surprised! Integers\nin Elixir are unbounded, meaning they have no maximum size.\n\nContrast that with a language like JavaScript which has a maximum safe integer size of `9007199254740991`.\nElixir makes that look tiny!\n\n<!-- livebook:{\"attrs\":{\"code\":\"biggest_integer = 1\",\"source\":\"Kino.Markdown.new(~s(\\ninteger: #{biggest_integer}\\\\n\\ndigits: #{biggest_integer |> Integer.digits() |> Enum.count()}\\n))\",\"title\":\"Biggest Integer Visual\"},\"chunks\":null,\"kind\":\"Elixir.Visual\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nbiggest_integer = 1\nKino.Markdown.new(~s(\ninteger: #{biggest_integer}\\n\ndigits: #{biggest_integer |> Integer.digits() |> Enum.count()}\n))\n```\n\nYou can see unbounded integers in action in the following animation. Watch how the number of digits constantly\ngrows! Move on to the next section when you're satisfied that integers are truly unbounded.\n\nTo avoid distorting your screen we use mathematical notation $10^{n}$ after 80 digits.\n\n<!-- livebook:{\"attrs\":{\"source\":\"SmartAnimation.new(1..100_000_000, fn i ->\\n  max = 10 ** 80\\n  integer_display = (10 ** i < max && 10 ** i) || \\\"$10^{#{i}}$\\\"\\n\\n  Kino.Markdown.new(\\\"\\\"\\\"\\n  integer: #{integer_display}\\\\n\\n  digits: #{Integer.digits(10 ** i) |> Enum.count()}\\n  \\\"\\\"\\\")\\nend)\",\"title\":\"Animation Source: (Hidden: instructors Only)\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nSmartAnimation.new(1..100_000_000, fn i ->\n  max = 10 ** 80\n  integer_display = (10 ** i < max && 10 ** i) || \"$10^{#{i}}$\"\n\n  Kino.Markdown.new(\"\"\"\n  integer: #{integer_display}\\n\n  digits: #{Integer.digits(10 ** i) |> Enum.count()}\n  \"\"\")\nend)\n```\n\n## Floats\n\n**Floats** refer to **floating-point numbers**.\n\nFloats are used to represent decimal numbers in your program like `1.22`, `2.3`, `1.0`, and even `0.0`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\n  ... --> -0.0001 --> -0.001 --> -0.01 --> -0.1 --> 0.0 --> 0.1 --> 0.01 --> 0.001 --> 0.0001 --> a[...]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou can use floats directly in your program just like with integers.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n0.0\n3.5\n12123.123123123\n```\n\nFloats can have varying **precision**. The precision of a float is the number of digits\nafter the decimal point.\n\nFor example, the precision of the float `1.2` is one. the precision of the float `1.22` is two.\n\nYou'll often use floats for representing percentages.\nFor example, you might want to represent a progress bar as a percentage.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, try changing the float `percentage` to any float between `0.0` and `100.0`\nand see how the loading bar changes! Replace `50.0` with your answer and reevaluate the cell.\n\n<!-- livebook:{\"attrs\":{\"code\":\"percentage = 50.0\",\"source\":\"Kino.Markdown.new(~s(\\n  <div style=\\\\\\\"height: 20px; width: 100%; background-color: grey\\\\\\\">\\n  <div style=\\\\\\\"height: 20px; width: #{percentage}%; background-color: green; color: white;\\\\\\\">#{percentage}%</div>\\n  </div>\\n))\",\"title\":\"Loading Bar Visual\"},\"chunks\":null,\"kind\":\"Elixir.Visual\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\npercentage = 50.0\nKino.Markdown.new(~s(\n  <div style=\\\"height: 20px; width: 100%; background-color: grey\\\">\n  <div style=\\\"height: 20px; width: #{percentage}%; background-color: green; color: white;\\\">#{percentage}%</div>\n  </div>\n))\n```\n\n### Floating-Point Errors\n\nTake great care when performing calculations with floats.\n\nComputers are limited to how precise they can be when representing floating-point numbers.\nTherefore, it's possible to have unexpected results!\n\nFor example, what do you think `1.2 + 1.4` returns? Probably `2.6` right? Nope!\nYou'll see the actual answer is `2.5999999999999996` in the Elixir cell below.\n\n```elixir\n1.2 + 1.4\n```\n\nWhy do computers have these errors? Well that requires a fairly in-depth understanding of\nhow the computer hardware works under the hood. For our purposes it's enough to be aware that it happens.\n\nIf you are curious, Computerphile has an excellent video on why\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=PZRI1IfStY0\")\n```\n\nDue to these errors, **do not use floats to represent money** even though it might seem\nintuitive to translate `$1.29` into `1.29`.\n\nInstead, you'll often use integers to represent pennies so `$1.29` becomes `129`.\n\nAlternatively, the [Money library](https://github.com/elixirmoney/money)\nprovide utilities for working with money.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, enter some floating-point addition that returns an unexpected result.\n\n```elixir\n\n```\n\n## Arithmetic Operators\n\nUsing **arithmetic operators**, we can add `+`, subtract `-`, multiply `*` and divide `/`.\nWe also have two special arithmetic operators, `div/2` for integer division and `rem/2` for\nremainder.\n\nArithmetic operators manipulate both positive and negative integers and floats.\n\nAs previously mentioned in the lesson on floats, arithmetic operations on\nfloats may result in floating-point errors.\n\n## Addition\n\n```elixir\n7 + 5\n```\n\nYou can create entire equations by writing operators one after the other. So long as there is a\nvalid number (integer or float) on the operator's left and right hand side.\n\n```elixir\n4 + 3 + 2 + 1\n```\n\nThe following code will crash because there is a dangling `+` operator. The error says [TokenMissingError](https://hexdocs.pm/elixir/TokenMissingError.html) and `expression is incomplete` because we did not complete the mathematical expression. Whenever our code crashes,\nElixir lets you know why with an error message.\n\n```elixir\n2 +\n```\n\nAs mentioned, adding floats together may result in floating point errors, so only use them\nwhen a small amount of innaccuracy isn't an issue.\n\n```elixir\n1.2 + 1.4\n```\n\nYou can use floats and integers together in arithmetic expressions.\n\n```elixir\n1.2 + 4\n```\n\n```elixir\n1.5 + 3.5 + 3 + 4.1 + 9\n```\n\nYou can also add negative and positive numbers together.\nAdding a negative number is the same as subtracting a positive number.\n\n```elixir\n8 + -9\n```\n\nAdding negative numbers might feel unintuitive, so it's rare\nto write code like this, but it's useful to know you can.\n\n### Your Turn\n\nIn the Elixir cell below, add two massive numbers together that you couldn't do in your head.\n\n```elixir\n\n```\n\n## Subtraction\n\nWe can subtract numbers with the minus `-` operator.\n\n```elixir\n20 - 12\n```\n\nLike with addition, we can subtract floats and integers in any combination.\n\n```elixir\n2.5 - 10\n```\n\n```elixir\n10 - 2.5 - 2.1\n```\n\nFloating-point errors can still occur.\n\n```elixir\n1.3 - 1.2\n```\n\nSubtracting a negative is the same as adding a positive.\n\n```elixir\n10 - -1\n```\n\n### Your Turn\n\nIn the Elixir cell below, subtract two massive numbers together.\n\n```elixir\n\n```\n\n## Multiplication\n\nComputers can efficiently multiply numbers. Under the hood, multiplication is just\nrepeated addition. For example, `5 * 5` is `5 + 5 + 5 + 5 + 5`.\n\n```elixir\n10 * 10\n```\n\nMultiplication can still result in floating-point errors.\n\n```elixir\n2.2 * 2.1\n```\n\nYou can multiply integers and floats both positive and negative in combination, like with addition and subtraction.\n\n```elixir\n2 * 30 * -2 * 1.4\n```\n\n### Your Turn\n\nIn the Elixir cell below, multiply two massive numbers together.\n\n```elixir\n\n```\n\n## Division\n\nWe can also divide numbers. However, in Elixir there are two operators for division.\nThere is the `/` operator, which will always return a `float`, and the `div` operator,\nwhich will always return an `integer` (rounded down).\n\n```elixir\n10 / 5\n```\n\n`div` is a function. You will learn more about functions in the future.\nFor now, it's enough to know that `div` allows you to take two numbers and divide them.\n\n```elixir\ndiv(10, 5)\n```\n\nRemember that `div` always rounds values down, so `1.5` becomes `1`.\n\n```elixir\ndiv(3, 2)\n```\n\nThere's a limit to how precise numbers can be in any computer program, so you should always\ntake care when using fractions that don't divide evenly. You can also run into the same\nfloating-point calculation issues discussed in the floats lesson.\n\nFor example, notice that `10 / 3` is `3.3333333333333335`.\n\n```elixir\n10 / 3\n```\n\n### Your Turn\n\nIn the Elixir cell below, divide `223` by `71` using `/` to get a nice slice of **pi**. Your answer\nshould be close to `3.14`.\n\n```elixir\n\n```\n\nDivide `100` by `3` using `div`. Your answer should be `33`.\n\n```elixir\n\n```\n\n## Exponents\n\nThe exponent operator in Elixir is `**`.\n\nThat means that `10 ** 2` is 10 to the power of 2. Mathematically that's the same as `10 * 10`.\n\n`10 ** 3` means `10 * 10 * 10`. If you would like a more in-depth explanation of exponents, there's\na video by Khan Academy.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=XZRQhkii0h0\\\")\",\"title\":\"Introduction To Exponents\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=XZRQhkii0h0\")\n```\n\n```elixir\n10 ** 2\n```\n\n### Your Turn\n\nIn the Elixir cell below, Use the `**` operator to determine `10` to the power of `214`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n10 ** 214\n```\n\n</details>\n\n```elixir\n\n```\n\n## BEDMAS\n\nCalculations in Elixir follow the **BEDMAS** order of operations.\n**BEDMAS** stands for brackets, exponents, division, multiplication, addition, and subtraction.\n\nThat means that the following will evaluate 5 * 2 before 5 + 5.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n5 + 5 * 2\n```\n\nSo it first evaluates into.\n\n```elixir\n5 + 10\n```\n\nTo get the result of 15.\n\n```elixir\n15\n```\n\nHere's the same statement in an Elixir cell so that you can confirm the result is 15.\n\n```elixir\n5 + 5 * 2\n```\n\nHad it been evaluated from left to right, the result would have been 20.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n5 + 5 * 2\n10 * 2\n20\n```\n\nYou might notice the **B** in BEDMAS stands for brackets. You can use brackets in your program\noverride the order of operations.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n(5 + 5) * 2\n(10) * 2\n20\n```\n\nHere's the same statement in an Elixir cell for you to confirm its result is 20.\n\n```elixir\n(5 + 5) * 2\n```\n\n### Your Turn\n\nIn the Elixir cell below,\nUse brackets `()` to alter the return value of the expression below to be `200` instead of `110`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\n(10 + 10) * 10\n```\n\n</details>\n\n```elixir\n10 + 10 * 10\n```\n\n## Remainder\n\nA remainder is the amount left when you divide one number by the other.\nFor example, if you divide `5` by `2`, the remainder is `1`.\n\nThat's because `2` goes into `5` twice and leaves a remainder of `1`.\n\nIf you're not familiar with remainders, here's a video by Khan Academy.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=P1qyjdh_sIw\\\")\\n\",\"title\":\"Introduction to Remainders\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=P1qyjdh_sIw\")\n```\n\n```elixir\nrem(5, 2)\n```\n\nIn programming, we can use remainders to check if a number is evenly divisible by a number.\nFor example, a number is even if `rem(number, 2)` equals `0`.\n\n```elixir\nrem(6, 2)\n```\n\nWhere as an odd number will have a remainder of `1`.\n\n```elixir\nrem(5, 2)\n```\n\nYou'll also use remainders to cycle through numbers but then reset back to 0 when you hit\na limit. You don't need to know how to do this yet, but it will be helpful in future lessons.\n\nHere we have an animation to show the remainder of a growing number divided by 10 to help you\nvisualize this effect.\n\n<!-- livebook:{\"attrs\":{\"source\":\"SmartAnimation.new(1..100_000_000, fn i ->\\n  Kino.Markdown.new(\\\"\\\"\\\"\\n  ```elixir\\n  rem(#{i}, 10) = #{rem(i, 10)}\\n  ```\\n  \\\"\\\"\\\")\\nend)\",\"title\":\"Animation Source (Hidden: instructors Only)\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n````elixir\nSmartAnimation.new(1..100_000_000, fn i ->\n  Kino.Markdown.new(\"\"\"\n  ```elixir\n  rem(#{i}, 10) = #{rem(i, 10)}\n  ```\n  \"\"\")\nend)\n````\n\n### Your Turn\n\nFind the remainder of `10` divided by `3` using `rem/2`.\n\n```mermaid\nflowchart\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nstyle 1 fill:lightgreen\nstyle 2 fill:lightgreen\nstyle 3 fill:lightgreen\nstyle 4 fill:lightyellow\nstyle 5 fill:lightyellow\nstyle 6 fill:lightyellow\nstyle 7 fill:lightcoral\nstyle 8 fill:lightcoral\nstyle 9 fill:lightcoral\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nrem(10, 3)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Elixir-lang: Basic Arithmetic](https://elixir-lang.org/getting-started/basic-types.html#basic-arithmetic)\n* [ElixirSchool: Integers](https://elixirschool.com/en/lessons/basics/basics/#integers-4)\n* [Exercism: Integers](https://exercism.org/tracks/elixir/concepts/integers)\n* [Exercism: Floats](https://exercism.org/tracks/elixir/concepts/floating-point-numbers)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Arithmetic reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Arithmetic\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/comments.livemd\">Comments</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/strings.livemd\">Strings</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task69-reading-command_line", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Command Line\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/computer_hardware.livemd\">Computer Hardware</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/git.livemd\">Git</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you use your command line to navigate the file system?\n* How do you use your command line to manipulate (create and remove) folders and files?\n\n## Overview\n\nWe use the command line to interact with our computer through a text interface rather than through a Graphical User Interface (GUI).\n\nMany programs only run through the command line. Generally, we call these **Command-Line Applications**, **CLI Applications** (for Command Line Interface), or just **CLIs**.\n\nThe command line will differ depending on your operating system (Windows, macOS, GNU/Linux). Thus, we will include the commands\nspecific instructions for each operating system.\n\nEach operating system uses a different program for its command line. Follow the instructions for your operating system to open your command line.\n\n* **Windows**: Open the start menu with the <kbd>Win <i class=\"ri-windows-fill\"></i></kbd> key. Search for Command Prompt. Ensure you run in administrator mode to avoid permission issues.\n* **macOS or GNU/Linux**: Open the Terminal App <kbd>Ctrl+Alt+T</kbd>\n* **macOS** Click the Launchpad icon in the Dock or open the Launchpad with <kbd>Command + Space</kbd>. Type Terminal in the search field, then click the Terminal program.\n\nFor an overview of the Command-Line Interface, we recommend this excellent video by Crash Course Computer Science.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\\\")\",\"title\":\"Command Line Interfaces\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\")\n```\n\n### Current Working Directory\n\nYour command line should display the **current working directory**. You'll often see `$` represent\nthe current working directory in tutorials. Omit the `$` when entering text into your command line.\n\nFor example, on Windows 11, mine is:\n\n```sh\nC:\\Users\\brook>\n```\n\n### Your Turn\n\nOpen the command line on your computer and enter the `whoami` command to see your current user.\n\nYou should see a similar output.\n\n```sh\n$ whoami\nyour_user_name\n```\n\n## Running Elixir Files\n\nWith [Elixir installed](https://elixir-lang.org/install.html) we can use the command line to execute an Elixir file ending in `.ex` or `.exs`.\n\nElixir treats both file extensions similarly. However, we generally use `.exs` files for scripts.\n\nLet's create an Elixir script. First, create a `script.exs` file with the following content. This prints a `\"Hello, world!\"` message in your console.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nIO.puts(\"Hello, world!\")\n```\n\nThen execute the file from the command line. Any Elixir code inside of the file will execute.\n\n```\n$ elixir script.exs\nHello, world!\n```\n\n## Permissions (sudo)\n\nSome commands require permissions to enter. You should see an error in the command line\nif the command requires permissions.\n\nIn **Windows** you often need to run the Command Prompt\nor Powershell in administrator mode.\n\nFor **macOS & GNU/Linux** you can preface commands with **sudo**. You'll be prompted for your computer's\npassword. You'll notice that `whoami` returns a different value (probably `root`).\n\nRoot is the superuser account in macOS and GNU/Linux.\n\n```sh\n$ sudo whoami\nroot\n```\n\n## List Files & Folders\n\nOur computer stores **files** and **folders**. The terms **folder** and **directory** are interchangeable.\n\nWe use the following commands to list files and folders.\n\n* **Windows**: `dir`\n* **macOS or GNU/Linux**: `ls`\n\nmacOS and GNU/Linux hide specific files. For example, files\nstarting with `.` are automatically hidden.\n\nYou can see hidden files with `ls -a`.\n\n```sh\n$ ls -a\n```\n\nOn **Windows**, all files and folders should display by default.\n\n```sh\nC:\\> dir\n```\n\n### Your Turn\n\nUse the command line the files and folders in the current working directory. If you are\non macOS or GNU/Linux, use both `ls` and `ls -a` to see the difference.\n\n## Create Files\n\nYou can create a file using the following commands\n\n* **macOS & GNU/Linux**: `touch`\n* **Windows**: `echo`\n\n**macOS & GNU/Linux** Allow you to enter `touch` with the name of a file.\n\n```sh\n$ touch ./example_file.txt\n```\n\n**Windows** requires you to enter the content into (`>`) the file.\n\n```sh\nC:\\> echo example content > ./example_file.txt\n```\n\nOn **Windows**, you can use `type nul` to create an empty file.\n\n```sh\nC:\\> echo type nul > ./example_file.txt\n```\n\n`./` represents the current working directory. You can generally omit it.\n\nHere are the same commands without the `./`.\n\n```sh\n$ touch example_file.txt\n$ echo example content > example_file.txt\n```\n\n### Your Turn\n\nUsing the command line, create a file called `test.txt`.\n\nOn **macOS & GNU/Linux** run:\n\n```sh\n$ touch test.txt\n```\n\nOn **Windows** run:\n\n```sh\nC:\\> type nul > text.txt\n```\n\n## Create Folders\n\nYou can create a folder with `mkdir` on every operating system. It's short for **make directory**.\n\n### Your Turn\n\nUsing the command line, create an `example` folder using `mkdir`.\n\n```sh\n$ mkdir example\n```\n\nThen use the command line\nto create a file called `in_example.txt` inside of the `example` folder.\n\nOn **macOS or GNU/Linux**, enter:\n\n```sh\n$ touch example/in_example.txt\n```\n\nOn **Windows** enter:\n\n```sh\nC:\\> echo type nul > example/in_example.txt\n```\n\n## Navigating The File System\n\nYou can navigate the file system with `cd` on every operating system.\n\nYou navigate through files and folders the same way you would click through the file explorer.\n\nEnter `cd` with the path of the folder to navigate to it. The folder must exist.\n\n```sh\n$ cd example_folder\n$ cd first_folder/second_folder/third_folder\n```\n\nYou can navigate up folders using `../`. You can go up any number of folders by repeating `../`.\n\n```sh\n$ cd ../\n$ cd ../../../\n```\n\nLet's walk through an example with several nested folders like so.\n\n```sh\n/top\n  /folder_a\n    /folder_b\n      /folder_c\n  /folder_1\n    /folder_2\n      /folder_3\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe use `cd` to navigate between these folders and set the current working directory.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\ntop --> folder_1 --> folder_2 --> folder_3\ntop --> folder_a --> folder_b --> folder_c\nstyle top fill:lightgreen\n```\n\nFor example, we can `cd folder_1/folder_2/` to set the current working directory to `folder_2`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\ntop_level_folder --> folder_1 --> folder_2 --> folder_3\ntop_level_folder --> folder_a --> folder_b --> folder_c\nstyle folder_2 fill:lightgreen\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nAnd use `cd ../../folder_a/folder_b/folder_c` to set the current working directory to `folder_c`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\ntop_level_folder --> folder_1 --> folder_2 --> folder_3\ntop_level_folder --> folder_a --> folder_b --> folder_c\nstyle folder_c fill:lightgreen\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUsing the command line, go into the `example` folder you created earlier. List all of the files in the folder using `ls` or `dir`. You should\nsee the `in_example.txt` file from the previous exercise.\n\n```sh\n$ cd example\n```\n\n## Remove Files\n\nYou can remove files using the following commands.\n\n* **macOS & GNU/Linux**: `rm`\n* **Windows**: `del`\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUsing the command line, delete the `in_example.txt` file from the previous exercise.\n\nOn **macOS & GNU/Linux** run:\n\n```sh\n$ rm example/in_example.txt\n```\n\nOn **Windows** run:\n\n```sh\nC:\\> del example/in_example.txt\n```\n\n## Remove Folders\n\nYou can remove folders using the following commands.\n\n* **macOS & GNU/Linux**: `rm -rf`\n* **Windows**: `rmdir`\n\n### Your Turn\n\nRemove the `example` folder from the previous exercise.\n\nOn **macOS & GNU/Linux** run:\n\n```sh\n$ rm -rf example\n```\n\nOn **Windows** run:\n\n```sh\nC:\\> rmdir example\n```\n\n## Reading Files\n\nYou can read file contents with the following commands.\n\n* **macOS & GNU/Linux**: `cat`\n* **Windows**: `type`.\n\n### Your Turn\n\nCreate a new file `read_example.txt` with some text content.\nYou can use `echo` on every operating system to create a file with some content. However,\n`type nul` only works on **Windows**.\n\nrun:\n\n```sh\n$ echo content > read_example.txt\n```\n\nThen read the content.\n\nOn **macOS & GNU/Linux** run:\n\n```sh\n$ cat read_example.txt\n```\n\nOn **Windows** run:\n\n```sh\nC:\\> type read_example.txt\n```\n\n## Tab Completion\n\nTo save time, you can generally use the <kbd>Tab</kbd> button to autocomplete a command or filename.\n\n### Your Turn\n\nUsing the command line, create a new folder called `tab_to_folder`.\n\n```sh\n$ mkdir tab_to_folder\n```\n\nNavigate to the folder using autocompletion. Start typing `tab` then use the <kbd>Tab</kbd> key to autocomplete the folder name.\n\n```sh\n$ cd tab_to_folder\n```\n\n## With Great Power\n\nThe command line is powerful. Therefore the command line is\nalso dangerous. For example, a simple command can delete every file on your computer.\n\nOpen the dropdown below to see the command. You should **never** run it.\n\n<details style=\"background-color: lightcoral; color: white; padding: 1rem;\">\n<summary>DANGER DO NOT RUN</summary>\nrm -rf *\n</details>\n\nSo be careful about running commands on your command line.\n\n## Summary\n\nThis lesson is a brief primer on the command line. Here's a quick summary of the key takeaways.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n**macOS & GNU/Linux**\n\n* list files and folders: `ls` and `ls -a`.\n* create files: `touch`.\n* create folders: `mkdir`.\n* navigate: `cd`.\n* remove files: `rm`.\n* remove folders: `rm -rf`.\n* read file contents: `cat`.\n\n**Windows**\n\n* list files and folders: `dir`.\n* create files: `echo`.\n* create folders: `mkdir`.\n* navigate: `cd`.\n* remove files: `del`.\n* remove folders: `rmdir`.\n* read file contents: `type`.\n\nYou can now handle everyday command-line tasks! Expect to learn more about the command line as you encounter more programming challenges.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Command Line reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/computer_hardware.livemd\">Computer Hardware</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/git.livemd\">Git</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task70-reading-processes", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Processes\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Processes\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/file_search.livemd\">File Search</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/process_drills.livemd\">Process Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do processes send and receive messages?\n* What is state and why might we use it in our programs?\n\n## Processes\n\n> In Elixir, all code runs inside processes.\n> Processes are isolated from each other, run concurrent to one another\n> and communicate via message passing. Processes are not only the basis for concurrency in Elixir,\n> but they also provide the means for building distributed and fault-tolerant programs.\n> \n> * [Elixir Documentation](https://elixir-lang.org/getting-started/processes.html#:~:text=In%20Elixir%2C%20all%20code%20runs,distributed%20and%20fault%2Dtolerant%20programs.)\n\nFor an introduction to processes, how they work under the hood, and why that matters, we recommend the exceptional talk by Sasa Juric: \"The Soul of Erlang.\"\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=JvBT4XBdoUE\\\")\",\"title\":\"The Soul of Erlang and Elixir \u2022 Sasa Juric \u2022 GOTO 2019\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=JvBT4XBdoUE\")\n```\n\nSo all Elixir code runs inside of a process.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  subgraph Process\n    E[Elixir Code]\n  end\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nProcesses are isolated from each other and communicate via message passing.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\n    Process1 ->> Process2: message\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nProcesses can store state and allow us to have in-memory persistence.\n\n```mermaid\nflowchart\n  subgraph Process\n    State\n  end\n```\n\nPerhaps without realizing it, you've been using processes for some time now. Each Elixir cell in livebook is a process. It even has a **pid** (personal identifier) that we can see with `self()`.\n\n```elixir\nself()\n```\n\nWe can `send/2` and `receive/1` messages between processes by using their **pid**. Likewise, a process can send its `self()` a message.\n\n```elixir\nsend(self(), \"message\")\n\nreceive do\n  \"message\" -> \"received\"\nend\n```\n\nThe left-hand side of the receive expression can pattern match on any value.\nIt's much like a `case` statement.\n\n```elixir\nsend(self(), {:hello, \"world\"})\n\nreceive do\n  {:hello, payload} -> payload\nend\n```\n\nWe can `spawn/1` a new process and get its pid.\n\n```mermaid\nsequenceDiagram\n    Parent Process->>Child Process: spawns\n    activate Child Process\n    Child Process-->>Parent Process: pid\n    deactivate Child Process\n```\n\n```elixir\nspawn(fn -> nil end)\n```\n\nA process accepts a callback function and ends when that callback function completes.\nA process is **alive** and then it **dies**.\n\n```mermaid\nflowchart LR\nspawn --> Process --> Alive --> cn[Callback Function] --> Dead\n```\n\nWe can use the [Process](https://hexdocs.pm/elixir/Process.html) module for functionality\nrelated to processes. We'll use the `alive?/1` function to show that the process is alive before executing its callback function. [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) pauses the execution of the process that it is called in.\n\n```elixir\npid = spawn(fn -> IO.puts(\"I was called\") end)\n\nProcess.alive?(pid) && IO.puts(\"I am alive!\")\n```\n\nWe can use [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to pause the execution and show that the spawned process dies\nafter it is called.\n\n```elixir\npid = spawn(fn -> IO.puts(\"I was called\") end)\n\nProcess.sleep(100)\n\nProcess.alive?(pid) || IO.puts(\"I am dead :(\")\n```\n\nProcesses are isolated from each other. That means that when a child process raises an error, it will not crash the parent process. Instead, it will only log an error.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\n    Parent Process->>Child Process: spawns\n    activate Child Process\n    Child Process-->>Parent Process: pid\n    Child Process->>Child Process: raise\n    activate Child Process\n    Child Process->>Parent Process: logs termination\n    deactivate Child Process\n    Child Process->>Child Process: dies\n    deactivate Child Process\n```\n\n```elixir\nspawn(fn -> raise \"oops\" end)\n\"the above crashes, but I will keep running.\"\n```\n\nIf this is not desirable behavior, we can link processes together so that if one dies, the other will\ncrash.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nsequenceDiagram\n    Parent Process->>Child Process: spawns link\n    activate Child Process\n    Child Process-->>Parent Process: pid\n    Child Process->>Child Process: raise\n    activate Child Process\n    Child Process->>Parent Process: raise\n    deactivate Child Process\n    Child Process->>Child Process: dies\n    Parent Process->>Parent Process: raise\n    deactivate Child Process\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can either `spawn_link/1`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\npid1 = spawn_link(fn -> raise \"oops\" end)\n\"I will not run, because the above crashes\"\n```\n\nOr manually link a process with [Process.link/1](https://hexdocs.pm/elixir/Process.html#link/1).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\npid1 = spawn(fn -> raise \"oops\" end)\nProcess.link(pid1)\n\"I will not run, because the above crashes\"\n```\n\n### Your Turn\n\nSpawn a linked process and crash this Elixir cell below.\nComment out your solution when complete to avoid continuously crashing the livebook!\n\n```elixir\n\n```\n\n## Message Passing\n\nBy spawning two processes, they can communicate back and forth with `send/2` and `receive/1`.\nLet's spawn a process in one cell and send a message in another.\n\n```mermaid\nflowchart LR\nsubgraph P1[Process 1]\n  pid -->\n  receive\nend\n\nsubgraph Process 2\n  P2 --> send --> pid\nend\n```\n\n```elixir\npid1 =\n  spawn(fn ->\n    receive do\n      \"message\" -> IO.puts(\"received!\")\n    end\n  end)\n```\n\nEvaluate the cell above to create a process waiting to receive a message, then evaluate\nthe cell below to send that process a message. You'll notice the [IO.puts/1](https://hexdocs.pm/elixir/IO.html#puts/1) logs in the cell below.\n\nAs soon as the spawned process receives a message, it dies. You'll notice you can only send\nand receive a single message. You can re-evaluate the cell above and the cell below to\nrepeat the example.\n\n```elixir\nsend(pid1, \"message\")\n```\n\n### Your Turn\n\nIn the Elixir cell below, spawn a new process and send it a message `{:hello, \"world\"}`.\n`IO.puts` the message's payload where `\"world\"` is the payload.\n\n```elixir\n\n```\n\n## State\n\nSo far, we spawn a process that receives a single message and then dies.\n\n```mermaid\nflowchart LR\n  P1[Process] --send-->\n  P2[Process2] --> receive --dies--> P2\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can also create a process that can receive many messages by leveraging a recursive\nfunction.\n\nThis recursive function will continue to call receive indefinitely, so the process should\nkeep receiving messages and stay alive.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nProcess --> loop --> receive --> loop\n```\n\n```elixir\ndefmodule ServerProcess do\n  def loop do\n    IO.puts(\"called #{Enum.random(1..10)}\")\n\n    receive do\n      \"message\" -> loop()\n    end\n  end\nend\n\nserver_process = spawn(fn -> ServerProcess.loop() end)\n```\n\nWe've used [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) to show that the process continues to loop and receive messages.\n\n```elixir\nsend(server_process, \"message\")\n```\n\nWith a slight modification of the `ServerProcess`, we can store state!\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nServerProcess --initial state--> loop --state--> receive --new state--> loop\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe'll store the state as an integer to create a counter.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nCounterProcess --> loop --0--> receive --1--> loop\n```\n\n```elixir\ndefmodule CounterProcess do\n  def loop(state \\\\ 0) do\n    IO.inspect(state, label: \"counter\")\n\n    receive do\n      :increment -> loop(state + 1)\n    end\n  end\nend\n\ncounter_process = spawn(fn -> CounterProcess.loop() end)\n```\n\nTry evaluating the cell below over and over again. Notice that the counter value increments!\nWe now have stateful processes!\n\n```elixir\nsend(counter_process, :increment)\n```\n\nStateful processes are short-term in-memory persistence. We can create a stateful process\nto store some value for the duration of the program.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nModify the `Counter` module below so it can receive a `:decrement` message to decrement the current count.\n\n```elixir\ndefmodule Counter do\n  def loop(state \\\\ 0) do\n    IO.inspect(state, label: \"counter\")\n\n    receive do\n      :increment -> loop(state + 1)\n    end\n  end\nend\n\ncounter_process = spawn(fn -> Counter.loop() end)\n```\n\nYou should be able to send a `:decrement` message to a spawned `Counter`. Uncomment and evaluate the code below to test your solution.\n\n```elixir\n# send(counter_process, :decrement)\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Processes reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Processes\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/file_search.livemd\">File Search</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/process_drills.livemd\">Process Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task71-reading-streams", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Streams\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:benchee, \"~> 1.1\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Streams\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/battle_map.livemd\">Battle Map</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/file.livemd\">File</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Learning Outcomes\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do you use streams to avoid memory impact or executing more instructions than necessary?\n* When might you use [Enum](https://hexdocs.pm/elixir/Enum.html) vs [Stream](https://hexdocs.pm/elixir/Stream.html)?\n\n## Enum Vs Stream\n\nCurrently, we typically use the [Enum](https://hexdocs.pm/elixir/Enum.html) module to work with collections.\nThe [Enum](https://hexdocs.pm/elixir/Enum.html) module uses [**eager evaluation**](https://en.wikipedia.org/wiki/Eager_evaluation). That means any\ninstruction we provide is immediately executed. This requires each element in the enumeration to be stored in\nmemory during execution.\n\n```elixir\n1..10\n|> Enum.map(fn each -> each * 2 end)\n|> Enum.filter(fn each -> each <= 10 end)\n|> Enum.take(4)\n```\n\nEach [Enum](https://hexdocs.pm/elixir/Enum.html) function stores a copy of the the enumerable it creates and executes sequentially as seen in this diagram.\n\n<!-- livebook:{\"attrs\":{\"source\":\"box = fn value, color ->\\n  \\\"<div style='height: 3rem; width: 3rem; background-color: #{color}; display: flex; color: white; justify-content: center; align-items: center;'>#{value}</div>\\\"\\nend\\n\\nget_color = fn in_memory ->\\n  if in_memory, do: \\\"green\\\", else: \\\"lightgray\\\"\\nend\\n\\nKino.animate(1000, 1, fn _, row ->\\n  md =\\n    Kino.Markdown.new(\\\"\\\"\\\"\\n    <div style=\\\"display: grid; grid-template-columns: max-content repeat(10, 3rem);gap: 1rem;\\\">\\n      <p>1..10:</p>#{Enum.map(1..10, fn index -> box.(index, get_color.(row >= 0)) end)}\\n      <p>Enum.map</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(row >= 1)) end)}\\n      <p>Enum.filter</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(index <= 5 and row >= 2)) end)}\\n      <p>Enum.take</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(index <= 4 and row >= 3)) end)}\\n    </div>\\n\\n    \\\"\\\"\\\")\\n\\n  {:cont, md, rem(row + 1, 4)}\\nend)\",\"title\":\"Enum Memory Usage\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nbox = fn value, color ->\n  \"<div style='height: 3rem; width: 3rem; background-color: #{color}; display: flex; color: white; justify-content: center; align-items: center;'>#{value}</div>\"\nend\n\nget_color = fn in_memory ->\n  if in_memory, do: \"green\", else: \"lightgray\"\nend\n\nKino.animate(1000, 1, fn _, row ->\n  md =\n    Kino.Markdown.new(\"\"\"\n    <div style=\"display: grid; grid-template-columns: max-content repeat(10, 3rem);gap: 1rem;\">\n      <p>1..10:</p>#{Enum.map(1..10, fn index -> box.(index, get_color.(row >= 0)) end)}\n      <p>Enum.map</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(row >= 1)) end)}\n      <p>Enum.filter</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(index <= 5 and row >= 2)) end)}\n      <p>Enum.take</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(index <= 4 and row >= 3)) end)}\n    </div>\n\n    \"\"\")\n\n  {:cont, md, rem(row + 1, 4)}\nend)\n```\n\nWhile the operation above is a bit contrived for the sake of simplifying the example, you may notice that by the end of the execution the [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) function only needs four elements.\n\nIt's a waste of resources to execute every operation on every element. It would be far more performant if we could instead build up a series of functions and run them one by one only when needed.\n\nBy using Streams and Lazy evaluation, we can massively improve memory usage as seen in the animation below.\n\n<!-- livebook:{\"attrs\":{\"source\":\"box = fn value, color ->\\n  \\\"<div style='height: 3rem; width: 3rem; background-color: #{color}; display: flex; color: white; justify-content: center; align-items: center;'>#{value}</div>\\\"\\nend\\n\\nget_color = fn in_memory ->\\n  if in_memory, do: \\\"green\\\", else: \\\"lightgray\\\"\\nend\\n\\nKino.animate(500, {1, 1}, fn _, {column, row} = position ->\\n  md =\\n    Kino.Markdown.new(\\\"\\\"\\\"\\n    <div style=\\\"display: grid; grid-template-columns: max-content repeat(10, 3rem);gap: 1rem;\\\">\\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index, get_color.(row == 1 and column == index)) end)}\\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(row == 2 and column == index)) end)}\\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(row == 3 and column == index)) end)}\\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(column > index || (row == 4 and column == index))) end)}\\n    </div>\\n    \\\"\\\"\\\")\\n\\n  next_position =\\n    case position do\\n      {4, 4} -> {1, 1}\\n      {column, 4} -> {column + 1, 1}\\n      {column, row} -> {column, row + 1}\\n    end\\n\\n  {:cont, md, next_position}\\nend)\",\"title\":\"Stream Memory Usage\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nbox = fn value, color ->\n  \"<div style='height: 3rem; width: 3rem; background-color: #{color}; display: flex; color: white; justify-content: center; align-items: center;'>#{value}</div>\"\nend\n\nget_color = fn in_memory ->\n  if in_memory, do: \"green\", else: \"lightgray\"\nend\n\nKino.animate(500, {1, 1}, fn _, {column, row} = position ->\n  md =\n    Kino.Markdown.new(\"\"\"\n    <div style=\"display: grid; grid-template-columns: max-content repeat(10, 3rem);gap: 1rem;\">\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index, get_color.(row == 1 and column == index)) end)}\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(row == 2 and column == index)) end)}\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(row == 3 and column == index)) end)}\n      <p>In Memory:</p>#{Enum.map(1..10, fn index -> box.(index * 2, get_color.(column > index || (row == 4 and column == index))) end)}\n    </div>\n    \"\"\")\n\n  next_position =\n    case position do\n      {4, 4} -> {1, 1}\n      {column, 4} -> {column + 1, 1}\n      {column, row} -> {column, row + 1}\n    end\n\n  {:cont, md, next_position}\nend)\n```\n\nWe can't accomplish this with the [Enum](https://hexdocs.pm/elixir/Enum.html) module, however we can with [Stream](https://hexdocs.pm/elixir/Stream.html).\n[Streams](https://hexdocs.pm/elixir/Stream.html) are composable, lazy enumerables.\n**Lazy** means they execute on each element in the stream one by one. **Composable**\nmeans that we build up functions to execute on each element in the stream.\n\nNotice that the following does not execute, it instead builds up future work to execute and returns a [Stream](https://hexdocs.pm/elixir/Stream.html) data structure with a list of functions to apply.\n\n```elixir\n1..10\n|> Stream.map(fn each -> each * 2 end)\n|> Stream.filter(fn each -> each <= 10 end)\n|> Stream.take(4)\n```\n\nThe Stream stores the enumerable, and the list of functions to call on it. The Stream will only evaluate\nwhen it's called with any eager function from the [Enum](https://hexdocs.pm/elixir/Enum.html) module. For example,\n\n```elixir\n1..10\n|> Stream.map(fn each -> each * 2 end)\n|> Stream.filter(fn each -> each <= 10 end)\n|> Stream.take(4)\n|> Enum.to_list()\n```\n\nWe can see this more clearly if we use [IO.puts/1](https://hexdocs.pm/elixir/IO.html#puts/1) to trigger a side effect. Notice we're not printing anything.\n\n```elixir\nStream.each(1..10, &IO.puts/1)\n```\n\n[IO.puts/1](https://hexdocs.pm/elixir/IO.html#puts/1) is only called when we run the stream with [Stream.run/1](https://hexdocs.pm/elixir/Stream.html#run/1) or when we use an [Enum](https://hexdocs.pm/elixir/Enum.html) function.\n\n```elixir\n1..10\n|> Stream.each(&IO.puts/1)\n|> Stream.run()\n```\n\n```elixir\n1..10\n|> Stream.each(&IO.puts/1)\n|> Enum.to_list()\n```\n\nAs the collection grows, the performance benefits become more clear. Let's compare the same\nfunctionality from the [Stream](https://hexdocs.pm/elixir/Stream.html) module and the [Enum](https://hexdocs.pm/elixir/Enum.html) module.\n\n<!-- livebook:{\"branch_parent_index\":1} -->\n\n## Performance Comparison\n\n```elixir\nBenchee.run(\n  %{\n    \"enum\" => fn ->\n      1..200\n      |> Enum.map(fn each -> each * 2 end)\n      |> Enum.filter(fn each -> each <= 10 end)\n      |> Enum.take(4)\n    end,\n    \"stream\" => fn ->\n      1..200\n      |> Stream.map(fn each -> each * 2 end)\n      |> Stream.filter(fn each -> each <= 10 end)\n      |> Stream.take(4)\n      |> Enum.to_list()\n    end\n  },\n  memory_time: 2\n)\n```\n\nWhile the exact results may vary, you should notice that the stream runs faster and consumes less memory.\n\n```\nName             ips        average  deviation         median         99th %\nstream      172.86 K        5.79 \u03bcs   \u00b1418.69%           4 \u03bcs       18.50 \u03bcs\nenum          9.64 K      103.76 \u03bcs    \u00b121.83%       98.70 \u03bcs      190.13 \u03bcs\n\nComparison: \nstream      172.86 K\nenum          9.64 K - 17.94x slower +97.97 \u03bcs\n\nMemory usage statistics:\n\nName      Memory usage\nstream         8.54 KB\nenum         181.20 KB - 21.22x memory usage +172.66 KB\n\n**All measurements for memory usage were the same**\n\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nIn the Elixir cell below, try refactoring this code using the [Stream](https://hexdocs.pm/elixir/Stream.html) module.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n1..100\n|> Enum.map(fn each -> div(each, 2) end)\n|> Enum.map(fn each -> each * 3 end)\n|> Enum.filter(fn each -> rem(each, 2) === 0 end)\n```\n\n```elixir\n\n```\n\n## Stream Gotchas\n\nWhile the Stream module can improve performance, it's worth mentioning that it's not a silver bullet.\nFor example, a single `Stream.map` is not faster than `Enum.map`.\n\n```elixir\n{stream_time, _result} = :timer.tc(fn -> Stream.map(1..1000, &(&1 * 2)) |> Enum.to_list() end)\n{enum_time, _result} = :timer.tc(fn -> Enum.map(1..1000, &(&1 * 2)) end)\n\n%{stream_time: stream_time, enum_time: enum_time}\n```\n\nThat's because we only gain performance benefits when sequential execution on each element in the\ncollection reduces the amount of computation and/or memory necessary.\n\nNotice how when we string\nmultiple maps together, the [Enum](https://hexdocs.pm/elixir/Enum.html) module is still just as fast or even faster than the [Stream](https://hexdocs.pm/elixir/Stream.html) module.\n\n```elixir\nstream_fn = fn ->\n  1..1000\n  |> Stream.map(&(&1 * 2))\n  |> Stream.map(&(&1 * 2))\n  |> Stream.map(&(&1 * 2))\n  |> Enum.to_list()\nend\n\nenum_fn = fn -> 1..1000 |> Enum.map(&(&1 * 2)) |> Enum.map(&(&1 * 2)) |> Enum.map(&(&1 * 2)) end\n\n{stream_time, _result} = :timer.tc(stream_fn)\n{enum_time, _result} = :timer.tc(enum_fn)\n\n%{stream_time: stream_time, enum_time: enum_time}\n```\n\nIn terms of improving performance, Streams will generally provide the greatest benefits when operations reduce the number of elements in the enumerable. Whenever optimizing, use benchmarks to verify your assumptions rather than relying on theoretical performance gains.\n\n## Stream\n\nAs you've seen, Streams generate elements one by one and can improve performance.\nThey are often beneficial when working with large data as they only consume the amount of data\nnecessary for each operation. On the other hand, [Enum](https://hexdocs.pm/elixir/Enum.html) will create an entire copy of\nthe collection for each intermediate step.\n\n```mermaid\nflowchart\n  subgraph Enum\n    direction LR\n    E1[Enum] --> EO1[Operation] --> L1[Collection] --> EO2[Operation] --> L2[Collection]\n  end\n  subgraph Stream\n    S1[Stream] --> SE1[Enum] --> SO1[Operation] --> SR[Collection]\n  end\n```\n\nStream provides many equivalent functions that we'll find on the Enum module. You've\nalready seen `map/2`, `filter/2`, and `take/2`.\n\nWe also have access to equivalent functions such as `with_index/1`, `drop/2`, `chunk_every/2`, and `each/2`.\nWe've used pattern matching here to demonstrate each has similar behavior.\n\n```elixir\n[{\"a\", 0}, {\"b\", 1}, {\"c\", 2}] = Enum.with_index([\"a\", \"b\", \"c\"])\n[{\"a\", 0}, {\"b\", 1}, {\"c\", 2}] = Stream.with_index([\"a\", \"b\", \"c\"]) |> Enum.to_list()\n\n[\"b\", \"c\"] = Enum.drop([\"a\", \"b\", \"c\"], 1)\n[\"b\", \"c\"] = Stream.drop([\"a\", \"b\", \"c\"], 1) |> Enum.to_list()\n\n[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]] = Enum.chunk_every(1..10, 2)\n[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]] = Stream.chunk_every(1..10, 2) |> Enum.to_list()\n```\n\n### Streams As Generators\n\nHowever, Streams are more than a performant alternative to Enum.\nStreams are also used to generate a (potentially infinite) amount of data.\n\nStreams only execute necessary computation, so we can have a theoretically\ninfinite stream such as `1,2,3,1,2,3,1,2,3....` continue forever. However, we'll only ever generate the necessary number of elements.\n\n```mermaid\nflowchart LR\n1 --> 2 --> 3 --> 1\n```\n\nHere's that shown using [Stream.cycle/2](https://hexdocs.pm/elixir/Stream.html#cycle/2), which cycles through an enumerable.\n\n```elixir\nStream.cycle([1, 2, 3])\n|> Enum.take(10)\n```\n\n### Lazy Evaluation\n\nWe've been using lazy evaluation for a while now! Ranges only create each element in the list when necessary, so we can create a massive range without any noticeable performance impact.\n\nWhen we use that massive range with an [Enum](https://hexdocs.pm/elixir/Enum.html) operation, then we pay the computational price!\n\n```elixir\n{creation_time, _result} = :timer.tc(fn -> 1..10_000_000 end)\n{execution_time, _result} = :timer.tc(fn -> Enum.to_list(1..10_000_000) end)\n\n%{creation_time: creation_time, execution_time: execution_time}\n```\n\n### Stream.iterate/2\n\nWe can use [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) to iterate over an accumulator.\nFor example, we could start at `0`, and then add `1` to it for every iteration.\n\n```mermaid\nflowchart LR\n  1 --> 2 --> 3 --> 4 --> 5\n  n1[n] --> n2[n + 1] --> n3[n + 2] --> n4[n + 3] --> n5[n + 4]\n```\n\n```elixir\nStream.iterate(0, fn accumulator -> accumulator + 1 end) |> Enum.take(5)\n```\n\nThe initial value of the accumulator will be `0`. The next value of the accumulator will\nbe `accumulator + 1` which is `0 + 1`. This pattern continues to create `[1, 2, 3, 4, 5]`.\n\n```mermaid\nflowchart LR\nAccumulator --> Function --> A2[Next Accumulator] --> Function\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou could build more complicated sequences this way too. For example, there is\nsuch a thing as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\nAlso known as the simplest math problem that no one can solve.\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=094y1Z2wpJg\")\n```\n\nThe Collatz Conjecture states that if you take any number and apply the following two\nrules:\n\n1. If the number is odd, multiply the number by three and add 1\n2. If the number is even, divide by two.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nEventually, no matter the starting number, the sequence should infinitely repeat `4, 2, 1`.\n\n```mermaid\nflowchart LR\ninteger --> even\ninteger --> odd\n  even --> a[x / 2]\n  odd --> b[3x + 1]\n  a --> 4\n  b --> 4\n  4 --> 2 --> 1\n```\n\nFor example, let's take the number `5` to see how it quickly repeats `4, 2, 1`\n\n```mermaid\nflowchart LR\n  5 -- 5 * 3 + 1 --> 16 --16 / 2--> 8 -- 8 / 2 --> 4 -- 4 / 2--> 2 -- 2 / 2 --> 1\n  -- 1 * 3 + 1--> a[4] --4 / 2--> b[2] --2 / 2--> c[1]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nUse `Stream.iterate` to implement the collatz conjecture given a `starting_integer` such as `20` as the initial accumulator.\n\n1. If the number is odd, multiply the number by three and add 1\n2. If the number is even, divide by two.\n\nUse [Enum.take_while/2](https://hexdocs.pm/elixir/Enum.html#take_while/2) to generate elements from the stream until it returns `4` to prove it eventually repeats `4`, `2`, `1`, forever. Try changing your `starting_integer` to provide this for larger numbers.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nstarting_integer = 20\n\nStream.iterate(starting_integer, fn int ->\n  if rem(int, 2) == 0 do\n    div(int, 2)\n  else\n    int * 3 + 1\n  end\nend)\n|> Enum.take_while(fn integer -> integer != 4 end)\n```\n\n</details>\n\n```elixir\n\n```\n\n### Stream.unfold/2\n\nWhile [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) treats the accumulator as the value, `unfold/2` separates the accumulator and\nthe return value. So you can accumulate, and then generate a separate value from the accumulator.\n\n```mermaid\nflowchart LR\n  Accumulator --> Function --> Value\n  Function --> Accumulator\n```\n\n```elixir\nStream.unfold(5, fn accumulator ->\n  value = \"value: #{accumulator}\"\n  next_accumulator = accumulator + 1\n  {value, next_accumulator}\nend)\n|> Enum.take(5)\n```\n\nYou can use [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) with [Enum.to_list/2](https://hexdocs.pm/elixir/Enum.html#to_list/2) so long as you specify when the stream should end.\nOtherwise, the stream would be infinite and run forever. To specify when the stream should end, you return `nil`.\n\nYou could do this with a separate function head, or some other control flow.\n\n```elixir\nStream.unfold(0, fn\n  10 ->\n    nil\n\n  accumulator ->\n    value = \"value: #{accumulator}\"\n    next_accumulator = accumulator + 1\n    {value, next_accumulator}\nend)\n|> Enum.to_list()\n```\n\n### Your Turn\n\nUse [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) to generate a list of cubed numbers. Use [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to take the first `20` cubed numbers.\n\nI.e. $1^3, 2^3, 3^3, 4^3, ...$ which would be `[1, 8, 27 , 64]` and so on.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\n1\n|> Stream.unfold(fn int ->\n  {int ** 3, int + 1}\nend)\n|> Enum.take(20)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Streams reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Streams\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/battle_map.livemd\">Battle Map</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/file.livemd\">File</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task72-reading-big_o_notation", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"big_o_notation_graph.png\",\"type\":\"attachment\"}]} -->\n\n# Performance\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:vega_lite, \"~> 0.1.6\"},\n  {:kino_vega_lite, \"~> 0.1.8\"},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n\ndefmodule Factorial do\n  def of(0), do: 1\n\n  def of(n) when n > 0 do\n    Enum.reduce(1..n, &*/2)\n  end\nend\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Performance\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fibonacci_challenge.livemd\">Fibonacci Sequence</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/benchmarking.livemd\">Benchmarking</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How does Big O Notation ($O(n), O(n^2), etc$) describe the performance of our application as data $n$ grows?\n* Why is Big O Notation useful, how do you think you'll use it to describe your programs in the future?\n\n## Big O Notation\n\nAs programmers, we are generally more concerned with how performance grows in our\nprogram as data becomes larger.\n\nWe use **Big $$O$$ Notation** to communicate about how performance changes based on the size\nof the data.\n\n* **$$O(1)$$**: Constant Time\n* **$$O(log (n))$$**: Logarithmic Time\n* **$$O(n)$$**: Linear Time\n* **$$O(n^2)$$**: Quadratic Time (Polynomial Time)\n* **$$O(2^n)$$**: Exponential Time\n* **$$O(n!)$$**: Factorial Time\n\nHere's a video by Tom Scott for an introductory overview.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=RGuJga2Gl_k\\\")\",\"title\":\"Big O Complexity\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=RGuJga2Gl_k\")\n```\n\nAs you work with larger amounts of data, different big $O$ complexities grow faster than others.\nSee the graph below for a general ranking.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![Big O Notation](files/big_o_notation_graph.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe should try to be aware of the performance costs and memory costs of both the\ncode that your write, and the built-in functionality you use, especially when working with large\namounts of data.\n\nThis will inspire both how you write code, and which data structures you choose for particular situations.\n\n## Constant Complexity\n\nDid you know that a [carrier pigeon can be faster than the internet](https://www.bbc.com/news/technology-11325452)?\nIt's true, and it's related to the nature of constant growth.\n\nSome operations take the same amount of time to execute no matter how much data is involved.\nFor example, a pigeon will travel some distance of kilometers in approximately the same time\nevery attempt. If you strap a USB stick to the pigeon, it can carry (within reason) any\namount of data to it's destination in a constant amount of time.\n\nSo a while it makes a great headline about slow internet speed, it's actually a\nmathematical guarantee that for some size of data, a pigeon will be faster than the internet.\n\nWe can see the nature of how a constant travel time for some amount of data always intersects with the\nexpected internet speed in the graph below.\n\n<!-- livebook:{\"attrs\":{\"source\":\"size = 600\\n\\nwidget =\\n  VegaLite.new(width: size, height: size)\\n  |> VegaLite.mark(:line)\\n  |> VegaLite.encode_field(:x, \\\"data\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:y, \\\"time\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:color, \\\"type\\\", title: \\\"Linear Growth\\\", type: :nominal)\\n  |> Kino.VegaLite.new()\\n\\ninit = 1\\nmax = 200\\n\\ninternet = for n <- init..max, do: %{data: n, time: n, type: \\\"Internet\\\"}\\npigeon = for n <- init..max, do: %{data: n, time: 100, type: \\\"Pigeon\\\"}\\n\\nKino.VegaLite.push_many(widget, internet)\\nKino.VegaLite.push_many(widget, pigeon)\\nwidget\",\"title\":\"Pigeon Beats The Internet Graph\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nsize = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"data\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"time\", type: :quantitative)\n  |> VegaLite.encode_field(:color, \"type\", title: \"Linear Growth\", type: :nominal)\n  |> Kino.VegaLite.new()\n\ninit = 1\nmax = 200\n\ninternet = for n <- init..max, do: %{data: n, time: n, type: \"Internet\"}\npigeon = for n <- init..max, do: %{data: n, time: 100, type: \"Pigeon\"}\n\nKino.VegaLite.push_many(widget, internet)\nKino.VegaLite.push_many(widget, pigeon)\nwidget\n```\n\n## Linear Complexity\n\nLinear growth adds the same number of calculations for each element in the collection.\nFor example, reading a book would (assuming a consistent reading speed) be linear complexity.\nIf you take two minutes to read every page, you add an additional two minute for every page.\n\n* With 1 page it takes 2 minute\n* With 2 pages it takes 4 minutes\n* With 3 pages it takes 6 minutes\n* With 4 pages it takes 8 minutes\n\nIn programming terms, for each additional item added to the collection, the computer needs to\nperform approximately the same number of additional calculations.\n\nPlotted onto a graph you would expect that as we increase the number of elements, time grows in a constant line upward.\n\n<!-- livebook:{\"attrs\":{\"source\":\"size = 600\\n\\nwidget =\\n  VegaLite.new(width: size, height: size)\\n  |> VegaLite.mark(:line)\\n  |> VegaLite.encode_field(:x, \\\"number of elements\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:y, \\\"time\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:color, \\\"type\\\", title: \\\"Linear Growth\\\", type: :nominal)\\n  |> Kino.VegaLite.new()\\n\\nlinear = for n <- 1..100, do: %{\\\"number of elements\\\": n, time: n, type: \\\"O(n)\\\"}\\n\\nKino.VegaLite.push_many(widget, linear)\\nwidget\",\"title\":\"Linear Complexity Graph\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nsize = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"number of elements\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"time\", type: :quantitative)\n  |> VegaLite.encode_field(:color, \"type\", title: \"Linear Growth\", type: :nominal)\n  |> Kino.VegaLite.new()\n\nlinear = for n <- 1..100, do: %{\"number of elements\": n, time: n, type: \"O(n)\"}\n\nKino.VegaLite.push_many(widget, linear)\nwidget\n```\n\n## Polynomial Complexity\n\nRather than grow linearly, polynomial complexity grows to some power.\nFor example, nested loops typically result in polynomial complexity.\n\nThat's because for every element in the first enumerable, we enumerate through every element in\nthe second enumerable.\n\n```mermaid\nflowchart\nA[1] --> B[1]\nA[1] --> C[2]\nA[1] --> D[3]\n\nA1[2] --> B1[1]\nA1[2] --> C1[2]\nA1[2] --> D1[3]\n\nA2[3] --> B2[1]\nA2[3] --> C2[2]\nA2[3] --> D2[3]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nTry changing `number` to `2`, `3`, and `4`. Notice how it creates more lists, with more\nelements for each increase in number.\n\n```elixir\nnumber = 1\n\nEnum.map(1..number, fn _ ->\n  Enum.to_list(1..number)\nend)\n```\n\n* With 1 element it creates 1 element\n* With 2 elements it creates 4 elements\n* With 3 elements it creates 9 elements\n* With 4 elements it creates 16 elements\n\nIn other words, it creates $n^2$ elements. We can see how this grows in the following table.\n\n<!-- livebook:{\"attrs\":{\"source\":\"Enum.map(1..1000, fn each ->\\n  %{\\n    \\\"# of elements\\\": each,\\n    result: each ** 2,\\n    notation: \\\"#{each}**2\\\",\\n    equation: \\\"#{each} * #{each}\\\"\\n  }\\nend) |> Kino.DataTable.new()\",\"title\":\"n<sup>2</sup> Complexity\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nEnum.map(1..1000, fn each ->\n  %{\n    \"# of elements\": each,\n    result: each ** 2,\n    notation: \"#{each}**2\",\n    equation: \"#{each} * #{each}\"\n  }\nend)\n|> Kino.DataTable.new()\n```\n\nIf you nest a third enumeration it becomes $n^3$.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\nA1[1]\n\nA11[1]\nA12[2]\nA13[3]\n\nA1 --> A11\nA1 --> A12\nA1 --> A13\n\nA111[1]\nA112[2]\nA113[3]\n\nA11 --> A111\nA11 --> A112\nA11 --> A113\n\nA121[1]\nA122[2]\nA123[3]\n\nA12 --> A121\nA12 --> A122\nA12 --> A123\n\nA131[1]\nA132[2]\nA133[3]\n\nA13 --> A131\nA13 --> A132\nA13 --> A133\n\nB1[1]\n\nB11[1]\nB12[2]\nB13[3]\n\nB1 --> B11\nB1 --> B12\nB1 --> B13\n\nB111[1]\nB112[2]\nB113[3]\n\nB11 --> B111\nB11 --> B112\nB11 --> B113\n\nB121[1]\nB122[2]\nB123[3]\n\nB12 --> B121\nB12 --> B122\nB12 --> B123\n\nB131[1]\nB132[2]\nB133[3]\n\nB13 --> B131\nB13 --> B132\nB13 --> B133\n\nC1[1]\n\nC11[1]\nC12[2]\nC13[3]\n\nC1 --> C11\nC1 --> C12\nC1 --> C13\n\nC111[1]\nC112[2]\nC113[3]\n\nC11 --> C111\nC11 --> C112\nC11 --> C113\n\nC121[1]\nC122[2]\nC123[3]\n\nC12 --> C121\nC12 --> C122\nC12 --> C123\n\nC131[1]\nC132[2]\nC133[3]\n\nC13 --> C131\nC13 --> C132\nC13 --> C133\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nTry changing `number` to `2`, `3`, and `4`. Notice how it creates $n^3$ elements.\n\n```elixir\nnumber = 3\n\nEnum.map(1..number, fn _ ->\n  Enum.map(1..number, fn _ ->\n    Enum.to_list(1..number)\n  end)\nend)\n```\n\nWe can see how $n^3$ grows in the following table.\n\n<!-- livebook:{\"attrs\":{\"source\":\"Enum.map(1..1000, fn each ->\\n  %{\\n    \\\"# of elements\\\": each,\\n    result: each ** 3,\\n    notation: \\\"#{each}**3\\\",\\n    equation: \\\"#{each} * #{each} * #{each}\\\"\\n  }\\nend) |> Kino.DataTable.new()\",\"title\":\"n<sup>3</sup> Complexity\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nEnum.map(1..1000, fn each ->\n  %{\n    \"# of elements\": each,\n    result: each ** 3,\n    notation: \"#{each}**3\",\n    equation: \"#{each} * #{each} * #{each}\"\n  }\nend)\n|> Kino.DataTable.new()\n```\n\nPlotted onto a graph, we can see that polynomial complexity results in an upward curve, and\nthe size of the power significantly increases the growth.\n\n<!-- livebook:{\"attrs\":{\"source\":\"size = 600\\n\\nwidget =\\n  VegaLite.new(width: size, height: size)\\n  |> VegaLite.mark(:line)\\n  |> VegaLite.encode_field(:x, \\\"number of elements\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:y, \\\"time\\\", type: :quantitative)\\n  |> VegaLite.transform(groupby: [\\\"color\\\"], extent: [2500, 6500])\\n  |> VegaLite.encode_field(:color, \\\"type\\\", title: \\\"Polonomial Growth\\\", type: :nominal)\\n  |> Kino.VegaLite.new()\\n\\ninit = 1\\nmax = 5\\n\\nn2 = for n <- init..max, do: %{\\\"number of elements\\\": n, time: n ** 2, type: \\\"n^2\\\"}\\nn3 = for n <- init..max, do: %{\\\"number of elements\\\": n, time: n ** 3, type: \\\"n^3\\\"}\\nn4 = for n <- init..max, do: %{\\\"number of elements\\\": n, time: n ** 4, type: \\\"n^4\\\"}\\n\\nKino.VegaLite.push_many(widget, n2)\\nKino.VegaLite.push_many(widget, n3)\\nKino.VegaLite.push_many(widget, n4)\\nwidget\",\"title\":\"Polynomial Complexity Graph\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nsize = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"number of elements\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"time\", type: :quantitative)\n  |> VegaLite.transform(groupby: [\"color\"], extent: [2500, 6500])\n  |> VegaLite.encode_field(:color, \"type\", title: \"Polonomial Growth\", type: :nominal)\n  |> Kino.VegaLite.new()\n\ninit = 1\nmax = 5\n\nn2 = for n <- init..max, do: %{\"number of elements\": n, time: n ** 2, type: \"n^2\"}\nn3 = for n <- init..max, do: %{\"number of elements\": n, time: n ** 3, type: \"n^3\"}\nn4 = for n <- init..max, do: %{\"number of elements\": n, time: n ** 4, type: \"n^4\"}\n\nKino.VegaLite.push_many(widget, n2)\nKino.VegaLite.push_many(widget, n3)\nKino.VegaLite.push_many(widget, n4)\nwidget\n```\n\n## Exponential Complexity\n\nIn exponential growth, some constant grows by an additional power for each element added to the collection.\n\nLet's take cracking a password as an example. We can assume a password can only be made from\nintegers `0` to `9`.\n\n```mermaid\nflowchart LR\n0---1---2---3---4---5---6---7---8---9\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nAs the number of digits in the password increases, the number of combinations grows by a power\nof `2`.\n\n* With 1 digit it makes 10 attempts\n* With 2 digits it makes 100 attempts\n* With 3 digits it makes 1000 attempts\n* With 4 digits it makes 10000 attempts\n\nIn other words, it executes $$10^n$$ attempts. Now often you'll see exponential complexity\nrepresented as $2^n$  or $C^n$ where `2` or `C` represents some constant value. In the case of a password cracker, it would\nbe `10`.\n\n<!-- livebook:{\"attrs\":{\"source\":\"Enum.map(1..100, fn each ->\\n  %{\\n    \\\"# of elements\\\": each,\\n    result: 10 ** each,\\n    equation: \\\"100 ** #{each}\\\"\\n  }\\nend) |> Kino.DataTable.new()\",\"title\":\"Exponential Growth Table\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nEnum.map(1..100, fn each ->\n  %{\n    \"# of elements\": each,\n    result: 10 ** each,\n    equation: \"100 ** #{each}\"\n  }\nend)\n|> Kino.DataTable.new()\n```\n\n<!-- livebook:{\"attrs\":{\"source\":\"size = 600\\n\\nwidget =\\n  VegaLite.new(width: size, height: size)\\n  |> VegaLite.mark(:line)\\n  |> VegaLite.encode_field(:x, \\\"x\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:y, \\\"y\\\", type: :quantitative)\\n  |> VegaLite.transform(groupby: [\\\"color\\\"], extent: [2500, 6500])\\n  |> VegaLite.encode_field(:color, \\\"type\\\", title: \\\"Exponential Growth\\\", type: :nominal)\\n  |> Kino.VegaLite.new()\\n\\ninit = 1\\nmax = 10\\n\\nexponential = for n <- init..max, do: %{x: n, y: 10 ** n, type: \\\"2^n\\\"}\\n\\nKino.VegaLite.push_many(widget, exponential)\\nwidget\",\"title\":\"Exponential Complexity Graph\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nsize = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"x\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"y\", type: :quantitative)\n  |> VegaLite.transform(groupby: [\"color\"], extent: [2500, 6500])\n  |> VegaLite.encode_field(:color, \"type\", title: \"Exponential Growth\", type: :nominal)\n  |> Kino.VegaLite.new()\n\ninit = 1\nmax = 10\n\nexponential = for n <- init..max, do: %{x: n, y: 10 ** n, type: \"2^n\"}\n\nKino.VegaLite.push_many(widget, exponential)\nwidget\n```\n\n## Factorial Complexity\n\nCertain functions enumerate through every possible permutation of the input. As\nyou can imagine this is computationally expensive. For each element, the\nfunction needs to enumerate through every remaining element.\n\nFor example, if you needed to calculate every permutation of a number, that would require\na factorial function.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  a[123]\n  a --> b[1]\n  a --> c[2]\n  a --> d[3]\n  b --> b1[2] --> 123\n  b --> b2[3] --> 132\n  c --> c1[1] --> 213\n  c --> c2[3] --> 231\n  d --> d1[1] --> 312\n  d --> d2[2] --> 321\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Your Turn\n\nTry adding elements to the `list` and notice how it creates $n!$ permutations of the list.\n\n```elixir\ndefmodule Permutations do\n  def of([]) do\n    [[]]\n  end\n\n  def of(list) do\n    for h <- list, t <- of(list -- [h]), do: [h | t]\n  end\nend\n\nlist = [1, 2, 3]\nPermutations.of(list)\n```\n\n* With 1 element it creates 1 permutation\n* With 2 elements it creates 2 permutations\n* With 3 elements it creates 6 permutations\n* With 4 elements it creates 24 permutations\n* With 5 elements it creates 120 permutations\n\nIn other words, it creates $$n!$$ permutations. where $n!$ is a shorthand for\n\n$n! = n * (n-1) * (n-2) * ... * 1$\n\nFor example $5!$ is $5 * 4 * 3 * 2 * 1$.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFactorial complexity grows incredibly fast, as you can see according to this graph and corresponding\ndata table.\n\n<!-- livebook:{\"attrs\":{\"source\":\"size = 600\\n\\nwidget =\\n  VegaLite.new(width: size, height: size)\\n  |> VegaLite.mark(:line)\\n  |> VegaLite.encode_field(:x, \\\"x\\\", type: :quantitative)\\n  |> VegaLite.encode_field(:y, \\\"y\\\", type: :quantitative)\\n  |> VegaLite.transform(groupby: [\\\"color\\\"], extent: [2500, 6500])\\n  |> VegaLite.encode_field(:color, \\\"type\\\", title: \\\"Factorial Growth\\\", type: :nominal)\\n  |> Kino.VegaLite.new()\\n\\nfactorial = for n <- 1..5, do: %{x: n, y: Factorial.of(n), type: \\\"n!\\\"}\\n\\nKino.VegaLite.push_many(widget, factorial)\\nwidget\",\"title\":\"Factorial Complexity Graph\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nsize = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"x\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"y\", type: :quantitative)\n  |> VegaLite.transform(groupby: [\"color\"], extent: [2500, 6500])\n  |> VegaLite.encode_field(:color, \"type\", title: \"Factorial Growth\", type: :nominal)\n  |> Kino.VegaLite.new()\n\nfactorial = for n <- 1..5, do: %{x: n, y: Factorial.of(n), type: \"n!\"}\n\nKino.VegaLite.push_many(widget, factorial)\nwidget\n```\n\n<!-- livebook:{\"attrs\":{\"source\":\"defmodule Calculate do\\n  def factorial(1), do: 1\\n  def factorial(n), do: n * factorial(n - 1)\\nend\\n\\nEnum.map(1..10, fn each ->\\n  equation =\\n    Enum.map_join(each..1, fn\\n      ^each -> \\\"#{each}\\\"\\n      n -> \\\" * #{n}\\\"\\n    end)\\n\\n  %{\\\"# of elements\\\": each, result: Calculate.factorial(each), equation: equation}\\nend)  |> Kino.DataTable.new()\",\"title\":\"Factorial Complexity Table\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\ndefmodule Calculate do\n  def factorial(1), do: 1\n  def factorial(n), do: n * factorial(n - 1)\nend\n\nEnum.map(1..10, fn each ->\n  equation =\n    Enum.map_join(each..1, fn\n      ^each -> \"#{each}\"\n      n -> \" * #{n}\"\n    end)\n\n  %{\"# of elements\": each, result: Calculate.factorial(each), equation: equation}\nend)\n|> Kino.DataTable.new()\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Performance reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Performance\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fibonacci_challenge.livemd\">Fibonacci Sequence</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/benchmarking.livemd\">Benchmarking</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task73-reading-phoenix_deployment", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"book_search_deployment_ci.png\",\"type\":\"attachment\"},{\"name\":\"book_search_deployment_fly_api_token.png\",\"type\":\"attachment\"},{\"name\":\"book_search_deployment_fly_dashboard_monitoring.png\",\"type\":\"attachment\"}]} -->\n\n# Phoenix Deployment\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Deployment\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_home_page.livemd\">Blog: Home Page</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_deployment.livemd\">Blog: Deployment</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* What is Fly, and how do we use it to deploy applications?\n* What is CI/CD and how do we set it up?\n\n## Overview\n\nThis is a companion reading for the [Blog: Deployment](../exercises/blog_deployment.livemd) exercise. This lesson is an overview of how to work with deployment in a Phoenix application. See the `example_projects/blog` project folder to contextualize the examples found throughout this lesson.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Software Deployment\n\nSoftware deployment is the process of making new or updated software available for users to use. This involves preparing the software for release, testing it to ensure it is working correctly, and installing it on the target systems. Deployment can be a complex process, especially for large and distributed systems, but automation tools and practices can help to streamline and simplify it.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### DevOps\n\nDevOps is a software engineering culture and practice that aims to bring together the development and operations teams in an organization. It aims to increase collaboration and communication between these teams, and to automate the process of building, testing, and deploying software.\n\nThe goal of DevOps is to enable organizations to rapidly and reliably deliver software changes, while also ensuring that these changes are of high quality and do not cause disruptions to users. By adopting DevOps practices, organizations can improve the speed and efficiency of their software development and delivery process, and increase the reliability and stability of their systems.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### CI/CD\n\nContinuous integration and continuous delivery (CI/CD) is a software development practice that aims to automate the process of building, testing, and deploying software. It involves integrating code changes into a shared repository frequently, and using automation to build, test, and deploy the software automatically.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Hosting Platforms\n\nA hosting platform is a service that helps you host and deploy your web applications and websites. It provides the necessary infrastructure and resources, such as servers, storage, and networking, as well as tools and features for building, deploying, and managing your apps. These tools may include support for various programming languages, database management, and monitoring and analytics.\n\nThere are several different deployment platforms for Phoenix Applications including [Gigalixir](https://hexdocs.pm/phoenix/gigalixir.html), [Fly.io](https://hexdocs.pm/phoenix/fly.html), and [Heroku](https://hexdocs.pm/phoenix/heroku.html).\n\nWhile it's beyond the scope of this course, it's also possible to handle our own deployment by running a Phoenix application on a production machine. See [Introduction to Deployment](https://hexdocs.pm/phoenix/deployment.html) and [Deploying with Releases](https://hexdocs.pm/phoenix/releases.html) for more information.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Docker\n\nDocker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package.\n\nWith Docker, developers can build and test applications in their own isolated environments, and then easily share them with others. This makes it easier to collaborate and ensures that applications will run the same way in different environments.\n\nDocker uses images to create containers. An image is a file that contains all the necessary components to run a specific application or service. When an image is run, Docker creates a new container from the image and runs the application or service inside the container.\n\nDocker also provides a centralized registry, called [Docker Hub](https://hub.docker.com/_/elixir), where users can store and share their own images. This makes it easy to share and distribute applications, as all the necessary components are packaged together in a single image.\n\nFly.io uses a [Dockerfile](https://fly.io/docs/reference/builders/#dockerfile) to deploy your Phoenix application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### GitHub Actions\n\nGitHub Actions are a feature of GitHub that allows you to automate tasks (called \"workflows\") that are triggered by certain events in your repository. You can use GitHub Actions to build, test, and deploy your code, or to automate other tasks that are related to your repository.\n\nTo use GitHub Actions, you create a workflows folder in your repository. Files in this folder defines the steps that should be taken when the workflow is triggered, and can be written in [YAML](https://en.wikipedia.org/wiki/YAML). You can configure your workflow to run whenever certain events occur in your repository, such as when you push code to the repository, when you open a pull request, or when you release a new version of your software.\n\nGitHub Actions makes it easy to automate many different types of tasks, including testing and deploying applications.\n\n## Deploy On Fly.io\n\nFollow the Phoenix [Deploying on Fly.io](https://hexdocs.pm/phoenix/fly.html) guide to deploy the project.\n\nInstall the command-line interface for the Fly.io platform [here](https://fly.io/docs/hands-on/install-flyctl/).\n\nSignUp for a fly account.\n\n```\n$ fly auth signup\n```\n\nThen run the following command to configure Fly.io with the app.\n\n```\n$ fly launch\n```\n\nYou will be prompted with a few steps. Select the following options or use your best judgement if the steps have changed:\n\n```\n? Choose an app name (leave blank to generate one): replace-this-with-your-app-name\n? Choose a region for deployment: pick-the-default-or-select-your-region\n? Would you like to set up a Postgresql database now? Yes\n? Select configuration: Development - Single node, 1x shared CPU, 256MB RAM, 1GB disk\n? Scale single node pg to zero after one hour? Yes\n? Would you like to set up an Upstash Redis database now? No\n? Would you like to deploy now? Yes\n```\n\nDeploy the app if you did not select `Yes` above.\n\n```\n$ fly deploy\n```\n\nCheck that your application is deployed.\n\n```\n$ fly status\n```\n\nThe result of `fly status` should say that your application is deployed. Here's an example output:\n\n```\nApp\n  Name     = cohort2-blog                                        \n  Owner    = personal                                            \n  Hostname = cohort2-blog.fly.dev                                \n  Image    = cohort2-blog:deployment-01H0MA281RDD100YXFR6G8111M  \n  Platform = machines                                            \n\nMachines\nPROCESS ID              VERSION REGION  STATE   CHECKS  LAST UPDATED         \napp     148e272fe71038  1       ord     started         2023-05-17T07:35:47Z\napp     918599ef745d98  1       ord     started         2023-05-17T07:36:00Z\n```\n\nIf you encounter any issues, try re-running the deployment steps, or speak with your classmates/teacher for help. You can also get support on the [fly community forum](https://community.fly.io/).\n\nOnce your deployment is working, open the application in your browser.\n\n```\n$ fly open\n```\n\nYour application should automatically open in the browser. If not, you may need to click the link provided by the `fly open` command.\n\n## Seeding Production With The IEx Shell\n\nTo seed the database, we can access the [IEx](https://hexdocs.pm/iex/IEx.html) shell of our production application using the following command. Replace `app_name` with the application's name.\n\n```\n$ fly ssh establish\n$ fly ssh issue --agent\n$ fly ssh console\n# App/bin/app_name Remote\n```\n\nSee the following guide if you have any issues: [IEX into your running app](https://fly.io/docs/elixir/getting-started/iex-into-running-app/).\n\nFrom this IEx shell, we have access to all of our modules in production.\n\nFor example, you could create an blog post like so:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> Blog.Posts.create_post(%{title: \"my first post\", content: \"some content\", visible: true, published_at: DateTime.utc_now()}) \n```\n\nExit the IEx shell using <kbd>CTRL</kbd>+<kbd>C</kbd> <kbd>CTRL</kbd>+<kbd>C</kbd>. Then exit the console by typing `exit` and pressing enter.\n\n```\n# Exit\n```\n\n## Continuous Integration With GitHub Actions\n\nGitHub allows us to define `.yml` files in a `.github/workflows` folder that will be automatically run on certain steps of the GitHub pipeline.\n\nCreate a `.github/workflows/continuous-integration.yml` file with the following content inside of a project folder to run tests on every pull-request made to the project.\n\n```yaml\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      db:\n        image: postgres:11\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    name: run tests\n    steps:\n      - uses: actions/checkout@v3\n      - uses: erlef/setup-beam@v1\n        with:\n          otp-version: '25.2'\n          elixir-version: '1.14.2'\n      - run: mix deps.get\n      - run: mix test\n```\n\nThis file sets triggers our workflow to run our tests on every pull request. It also sets up a Postgres database for our tests. If you make a PR on a project with these continuous integration tests you'll see the following UI.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/book_search_deployment_ci.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThis is a nice simple workflow for any project. For a more advanced setup see [Fly: GitHub Actions for Elixir CI](https://fly.io/phoenix-files/github-actions-for-elixir-ci/).\n\n## Continuous Deployment With GitHub Actions\n\nContinuous deployment is the act of automatically deploying your application when you merge pull-requests, typically into the `main` branch of your project.\n\nIn order to authorize deployment from a GitHub action, we need a Fly.io token. You can run the following to get a Fly.io token.\n\n```\nfly auth token\n```\n\nYou can add this token in your GitHub repository from the `Settings` section. Name the token `FLY_API_TOKEN`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/book_search_deployment_fly_api_token.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThen you can create `.github/workflows/continuous-deployment.yml` file with the following content. Notice this uses the secret token you just configured.\n\n```\nname: Fly Deploy\non:\n  push:\n    branches:\n      - main\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - run: flyctl deploy --remote-only\n```\n\nAfter creating this file and making a PR, you should notice that the changes automatically deploy to your production application.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Troubleshooting\n\nStudents using HTTPS instead of SSH for GitHub requests may encounter they need an HTTPS token with the `workflow` scope. If you encounter this issue you can find instructions on creating a token here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token.\n\n## Fly Dashboard\n\nFly provides some tools for managing and monitoring your application on the [Fly Dashboard](https://fly.io/dashboard).\n\nFor example, you can select your application from the Dashboard and go to **Monitoring** to see your application logs. This is useful for debugging purposes when encountering bugs in production.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/book_search_deployment_fly_dashboard_monitoring.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nYou can also set up metrics with Fly using tools such as [Prometheus](https://fly.io/docs/reference/metrics/#prometheus-on-fly), however that is beyond the scope of this lesson.\n\n## Error Reporting\n\nError reporting tools such as [Honeybadger](https://hexdocs.pm/honeybadger/0.6.2/readme.html) and [Sentry](https://docs.sentry.io/platforms/elixir/) allow you to monitor your application and receive notifications when users encounter errors.\n\nThis is beyond the scope of this lesson, but you should be aware of these services.\n\n## Using JS Libraries\n\nWe often want to include JavaScript libraries in our projects. Here are a few popular libraries you might have reason to use:\n\n* [mermaid.js](https://mermaid.js.org/): various diagrams such as entity-relationship diagrams, sequence diagrams, etc.\n* [monaco-editor](https://github.com/microsoft/monaco-editor): a fully-featured code editor.\n* [tone.js](https://tonejs.github.io/): a Web Audio framework for creating interactive music in the browser.\n* [LaTeX.js](https://latex.js.org/) mathematical notation.\n* [Alpine.js](https://alpinejs.dev/) a lightweight js framework.\n\nThere are a few different ways to include JavaScript projects in your application.\n\n* scripts using a CDN\n* downloading the assets in vendor.js and import them in app.js\n* install the package using npm (node package manager)\n\nPhoenix includes a [section on managing assets](https://hexdocs.pm/phoenix/asset_management.html#third-party-js-packages) for more information.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### CDN\n\nHere's an example of installing mermaid using a CDN. This would be included in the `head` section of `root.html.heex`.\n\n```html\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true, theme: 'dark' });\n</script>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Vendor\n\nHere's an example of installing [tone.js] by downloading a [js file](https://github.com/Tonejs/Tone.js/releases/tag/14.7.39) that would go in `assets/vendor/tone.js` then importing the file in `app.js`.\n\n```javascript\nimport * as Tone from \"../vendor/tone.js\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### NPM\n\nHere's how you could install the `monaco-editor` in your project by running an `npm` command in the `assets` folder.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ npm install monaco-editor --save\n```\n\nThe import the monaco-editor in `app.js`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nimport * as monaco from 'monaco-editor';\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### NPM With Fly\n\nBy default, the Fly Dockerfile [does not include npm](https://community.fly.io/t/elixir-alpinejs-on-fly-fail-to-install/5542).\n\nYou can modify your Dockerfile to include the following to deploy to Fly with npm available for JavaScript libraries. Make sure not to duplicate any instructions in the Dockerfile.\n\n```\n# Initial Setup\n$ mix deps.get --only prod\n$ MIX_ENV=prod mix compile\n\n# Install / Update JavaScript Dependencies\n$ npm install --prefix ./assets\n\n# Compile Assets\n$ npm run deploy --prefix ./assets\n$ mix phx.digest\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [GitHub Actions](https://github.com/features/actions)\n* [HexDocs: Deploying on Fly.io](https://hexdocs.pm/phoenix/fly.html#content)\n* [Fly.io: IEx into your running app](https://fly.io/docs/elixir/getting-started/iex-into-running-app/)\n* [Fly.io: Continuous deployment with github actions](https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/)\n* [GitHub: erlef/setup-beam](https://github.com/erlef/setup-beam)\n* [Fly.io: Metrics](https://fly.io/docs/reference/metrics/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phoenix Deployment reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Deployment\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_home_page.livemd\">Blog: Home Page</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_deployment.livemd\">Blog: Deployment</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task74-reading-pic_chat_image_upload", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# PicChat: Image Upload\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Image Upload\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_authentication.livemd\">PicChat: Authentication</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_pub_sub.livemd\">PicChat: PubSub</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we allow image uploads in a Phoenix LiveView or LiveComponent?\n* How do we create a file input with an image preview for image/file uploads?\n* How do we consume uploaded files and save them locally or externally?\n* How can we enable drag and drop for file/image uploads?\n\n## PicChat: Image Uploads\n\nOver the next several lessons, we're going to build a `PicChat` application where users can create messages with uploaded pictures. This lesson will focus on uploading images with messages.\n\nPhoenix LiveView supports [File Uploads](https://hexdocs.pm/phoenix_live_view/uploads.html). To handle image uploads we need to:\n\n1. Use [allow_upload/3](https://hexdocs.pm/phoenix_live_view/0.18.1/Phoenix.LiveView.html#allow_upload/3) to store file upload information in the socket.\n2. Use [live_file_input/3](https://hexdocs.pm/phoenix_live_view/0.18.1/Phoenix.Component.html#live_file_input/1) to create a file input for uploading images.\n3. Use [consume_uploaded_entries](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#consume_uploaded_entries/3) to consume the uploaded image files stored in temp storage and save them in some permanent storage such as the filesystem or [Amazon S3](https://aws.amazon.com/s3/)\n\nWe'll also modify the messages table/schema to store the path of the picture in a `:picture` field and display the picture on the index and show pages.\n\n## Migration And Schema\n\n### Create A Migration\n\nIn order to store pictures on each message, we'll add a `:picture` field that will store the source of the image such as a path or URL.\n\nCreate a new migration.\n\n```\nmix ecto.gen.migration add_picture_to_messages\n```\n\nIn the generated migration file, add a `:picture` column to our existing `:messages` table.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef change do\n  alter table(:messages) do\n    add :picture, :text\n  end\nend\n```\n\nRun migrations.\n\n```\nmix ecto.migrate\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Modify The Schema\n\nOur schema should reflect the data in our database, so let's add a `picture` field.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChat.Chat.Message do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"messages\" do\n    field :content, :string\n    # added picture field\n    field :picture, :string\n    belongs_to :user, PicChat.Accounts.User\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(message, attrs) do\n    message\n    # added :picture to casted fields\n    |> cast(attrs, [:content, :user_id, :picture])\n    |> validate_required([:content])\n  end\nend\n```\n\n## Allow Uploads\n\nUse [allow_upload/3](https://hexdocs.pm/phoenix_live_view/0.18.1/Phoenix.LiveView.html#allow_upload/3) in the form component. This causes the LiveView to automatically store `:picture` upload information in an `@uploads` field on the socket assigns.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Form_component.ex\n@impl true\ndef update(%{message: message} = assigns, socket) do\n  changeset = Chat.change_message(message)\n\n  {:ok,\n    socket\n    |> assign(assigns)\n    |> assign_form(changeset)\n    |> allow_upload(:picture, accept: ~w(.jpg .jpeg .png), max_entries: 1)\n  }\nend\n```\n\n## Live File Input\n\nCreate a [live_file_input/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#live_file_input/1) in the message form.\n\nWe've added the optional attribute `phx-drop-target` supports drag and drop for image uploads and used [live_img_preview/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#live_img_preview/1) to display a preview of the uploaded image.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Form.html.heex\n<.simple_form\n  for={@form}\n  id=\"message-form\"\n  phx-target={@myself}\n  phx-change=\"validate\"\n  phx-submit=\"save\"\n  phx-drop-target={@uploads.picture.ref}\n>\n  <.input field={@form[:content]} type=\"text\" label=\"Content\" />\n  <.live_file_input upload={@uploads.picture} />\n  <%= for entry <- @uploads.picture.entries do %>\n    <.live_img_preview entry={entry} width=\"75\" />\n  <% end %>\n  <.input field={@form[:user_id]} type=\"hidden\" value={@current_user.id} />\n  <:actions>\n    <.button phx-disable-with=\"Saving...\">Save Message</.button>\n  </:actions>\n</.simple_form>\n```\n\n## Consume Upload Entries\n\nConsume the uploaded entries when we save a message and copy them to the filesystem for long term persistence. Note that is is not an ideal solution. Ideally we would upload these files to a storage system such as [Amazon S3](https://aws.amazon.com/s3/) but that is beyond the scope of this lesson.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Form_component.ex\n@impl true\ndef handle_event(\"save\", %{\"message\" => message_params}, socket) do\n  file_uploads =\n    consume_uploaded_entries(socket, :picture, fn %{path: path}, entry ->\n      ext = \".\" <> get_entry_extension(entry)\n      # The `static/uploads` directory must exist for `File.cp!/2`\n      # and PicChat.static_paths/0 should contain uploads to work,.\n      dest = Path.join(\"priv/static/uploads\", Path.basename(path <> ext))\n      File.cp!(path, dest)\n      {:ok, ~p\"/uploads/#{Path.basename(dest)}\"}\n    end)\n\n  message_params = Map.put(message_params, \"picture\", List.first(file_uploads))\n  save_message(socket, socket.assigns.action, message_params)\nend\n\ndefp get_entry_extension(entry) do\n  [ext | _] = MIME.extensions(entry.client_type)\n  ext\nend\n```\n\nMake sure to create a `priv/static/uploads` folder, and add `uploads` to `PicChat.static_paths/0` in `pic_chat_web.ex`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Pic_chat_web.ex\ndef static_paths, do: ~w(assets uploads fonts images favicon.ico robots.txt)\n```\n\n## Display Images\n\nDisplay pictures on the message index page by adding a column to the table component.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<:col :let={{_id, message}} label=\"Picture\"><img src={message.picture}/></:col>\n```\n\nDisplay the picture on the show page by adding it to the list items.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<:item title=\"Picture\"><img src={@message.picture} /></:item>\n```\n\n## Live Image Preview\n\nWe can add an image preview with [live_image_preview]\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Added To Form_component.ex\n<.live_file_input upload={@uploads.picture} />\n<%= for entry <- @uploads.picture.entries do %>\n  <.live_img_preview entry={entry} width=\"75\" />\n<% end %>\n```\n\n## Tests\n\nTo ensure our migration and schema work, it would be wise to write a test.\n\nModify your existing `create_message/1 with valid data creates a message` test in `chat_test.exs` to ensure we can create a message with a picture.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntest \"create_message/1 with valid data creates a message\" do\n  user = user_fixture()\n  valid_attrs = %{content: \"some content\", user_id: user.id, picture: \"images/picture.png\"}\n\n  assert {:ok, %Message{} = message} = Chat.create_message(valid_attrs)\n  assert message.content == \"some content\"\n  assert message.user_id == user.id\n  assert message.picture == \"images/picture.png\"\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [Sophie DeBenedetto: How to Do Live Uploads in Phoenix LiveView](https://blog.appsignal.com/2021/10/12/how-to-do-live-uploads-in-phoenix-liveview.html)\n* [HexDocs: Phoenix LiveView Uploads](https://hexdocs.pm/phoenix_live_view/uploads.html)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish PicChat: Image Upload reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Image Upload\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/pic_chat_authentication.livemd\">PicChat: Authentication</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_pub_sub.livemd\">PicChat: PubSub</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task75-reading-pic_chat_messages", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# PicChat: Messages\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Messages\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/math_game.livemd\">Math Game</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_authentication.livemd\">PicChat: Authentication</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How does the live action in the router interact with `handle_params/3` in `MessageLive.Index` to render UI for the `:index`, `:new`, and `:edit` actions?\n* Explain the LiveComponent LifeCycle.\n\n## PicChat: Messages\n\nOver the next several lessons, we're going to build a `PicChat` application where users can create messages with uploaded pictures. This lesson will focus on creating the `Messages` resource with just text content.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Initialize The Project\n\nInitialize the `pic_chat` phoenix project.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmix phx.new pic_chat\n```\n\nCreate the database.\n\n```\nmix ecto.create\n```\n\nUse the [LiveView Generators](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Live.html) to generate all of the LiveView boilerplate needed to manage a `Messages` resource.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmix phx.gen.live Chat Message messages content:text\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Routes\n\nAdd the routes for the generated resource.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Router.ex\nscope \"/\", PicChatWeb do\n  pipe_through :browser\n\n  get \"/\", PageController, :home\n  live \"/messages\", MessageLive.Index, :index\n  live \"/messages/new\", MessageLive.Index, :new\n  live \"/messages/:id/edit\", MessageLive.Index, :edit\n\n  live \"/messages/:id\", MessageLive.Show, :show\n  live \"/messages/:id/show/edit\", MessageLive.Show, :edit\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Order Messages\n\nEnsure messages are ordered from newest -> oldest. We order by both the `inserted_at` and the `id` fields to ensure consistent ordering for messages created at the same time.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Chat.ex\ndef list_messages do\n  Message\n  |> from(order_by: [desc: :inserted_at, desc: :id])\n  |> Repo.all()\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Notify Parent\n\nWe'll also have to modify how we notify the parent LiveView when we save a message, as streams will append messages by default, but we want to prepend them. See []\n\nChange the calls to `notify_parent` in `form_component.ex` to handle `:edit` and `:new` separately rather than using the `:saved` event for both.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Save_message :edit\nnotify_parent({:edit, message})\n\n# Save_message :new\nnotify_parent({:new, message})\n```\n\nThen add a separate handler for each in the parent LiveView.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Index.ex\n@impl true\ndef handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do\n  # prepends the new message\n  {:noreply, stream_insert(socket, :messages, message, at: 0)}\nend\n\n@impl true\ndef handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do\n  # updates the new message in its current position\n  {:noreply, stream_insert(socket, :messages, message)}\nend\n```\n\nThat's it! The rest of this lesson will focus on understanding what the generators built for us and the changes we've added.\n\n## Building Understanding\n\nThe generators have done a lot for us, but it's important we understand what was generated.\n\nHere's a broad view of our application's new `MessageLive.Index` LiveView and how it ultimately renders the HTML response for the following routes:\n\n* http://localhost:4000/messages\n* http://localhost:4000/messages/new\n* http://localhost:4000/messages/:id/edit\n\n```mermaid\nsequenceDiagram\n  autonumber\n  participant R as Router\n  participant L as MessageLive.Index\n  participant FC as MessageLive.FormComponent\n\n  R->>L: GET \"/messages\" (live_action = :index, :new, or :edit)\n  L --> L: disconnected mount/3\n  L --> L: connected mount/3\n  L --> L: handle_params/3\n  L --> L: apply_action/3\n  L --> L: render/3 index.html.heex\n  L->> FC: live_component (:new and :edit only)\n  FC --> FC : mount/1\n  FC --> FC : update/2\n  FC --> FC : render/1 form_component.html.heex\n```\n\nWe're going to dive deeper into each part of the application. If you're taking the official DockYard Academy course your teacher is going to walk you through this process.\n\n## LiveView\n\nWe're going to breakdown the `MessageLive.Index` liveview found in `live/message_live/index.ex` to better understand how LiveView works with Ecto, and what the LiveView generators provide for us as scaffolding.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChatWeb.MessageLive.Index do\n  use PicChatWeb, :live_view\n\n  alias PicChat.Chat\n  alias PicChat.Chat.Message\n\n  @impl true\n  def mount(_params, _session, socket) do\n    {:ok, stream(socket, :messages, Chat.list_messages())}\n  end\n\n  @impl true\n  def handle_params(params, _url, socket) do\n    {:noreply, apply_action(socket, socket.assigns.live_action, params)}\n  end\n\n  defp apply_action(socket, :edit, %{\"id\" => id}) do\n    socket\n    |> assign(:page_title, \"Edit Message\")\n    |> assign(:message, Chat.get_message!(id))\n  end\n\n  defp apply_action(socket, :new, _params) do\n    socket\n    |> assign(:page_title, \"New Message\")\n    |> assign(:message, %Message{})\n  end\n\n  defp apply_action(socket, :index, _params) do\n    socket\n    |> assign(:page_title, \"Listing Messages\")\n    |> assign(:message, nil)\n  end\n\n  @impl true\n  def handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do\n    {:noreply, stream_insert(socket, :messages, message, at: 0)}\n  end\n\n  @impl true\n  def handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do\n    {:noreply, stream_insert(socket, :messages, message)}\n  end\n\n  @impl true\n  def handle_event(\"delete\", %{\"id\" => id}, socket) do\n    message = Chat.get_message!(id)\n    {:ok, _} = Chat.delete_message(message)\n\n    {:noreply, stream_delete(socket, :messages, message)}\n  end\nend\n```\n\nWhen the LiveView first loads, it calls the `mount/3` function to assign a list of messages in the socket.\n\nThen, `handle_params/3` delegates to the `apply_action/3` function to assign more data to the socket depending on whether or not the live action is `:index`, `:edit`, or `:new`:\n\n* The `page_title` is different for each page. It controls the text displayed at the top of the browser tab.\n* The `:new` page creates a `Message` struct for the new message form.\n* The `:edit` page retrieves an existing `Message` based on the `\"id\"` url param.\n* `handle_info/3` receives a message from the form_component to insert a `Message` into the list of messages.\n* `handle_event/3` deletes a message.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Stream\n\nPhoenix 1.7 and LiveView 1.18 Introduced the [stream/4](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream/4), [stream_insert/4](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream_insert/4), and [stream_delete/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream_delete/3) functions.\n\nPreviously, messages would have been stored in a list and the user would append and remove elements from the list.\n\nNow, the list of messages is instead treated as a stream, a more performant alternative to a list does not store data on the server but only stores the data on the client. This is ideal when dealing with large amounts of data.\n\nStreams are stored in `@streams` in the socket for a given key.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef mount(_params, _session, socket) do\n  {:ok, stream(socket, :messages, Chat.list_messages())}\nend\n```\n\nElements are inserted into or removed from the stream.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do\n  # prepends the new message\n  {:noreply, stream_insert(socket, :messages, message, at: 0)}\nend\n\n@impl true\ndef handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do\n  # updates the new message in its current position\n  {:noreply, stream_insert(socket, :messages, message)}\nend\n\n@impl true\ndef handle_event(\"delete\", %{\"id\" => id}, socket) do\n  message = Chat.get_message!(id)\n  {:ok, _} = Chat.delete_message(message)\n\n  {:noreply, stream_delete(socket, :messages, message)}\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Rendering Messages\n\nStreams are rendered in the template using a key in the `@streams` field from the assigns.\nThe `phx-update=\"stream\"` attribute configures the parent container to support stream operations. Elements in the stream are typically rendered using a comprehension.\n\nHere's a simplified example.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<section id=\"messages\" phx-update=\"stream\">\n  <article\n    :for={{dom_id, message} <- @streams.messages}\n    id={dom_id}\n  >\n    <%= message.content %>\n  </article>\n</section>\n```\n\nA table of messages is rendered in the corresponding template file `index.html.heex`. This table relies on [Phoenix.LiveView.JS](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html) for various actions such as navigation and pushing events to the server.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.table\n  id=\"messages\"\n  rows={@streams.messages}\n  row_click={fn {_id, message} -> JS.navigate(~p\"/messages/#{message}\") end}\n>\n  <:col :let={{_id, message}} label=\"Content\"><%= message.content %></:col>\n  <:action :let={{_id, message}}>\n    <div class=\"sr-only\">\n      <.link navigate={~p\"/messages/#{message}\"}>Show</.link>\n    </div>\n    <.link patch={~p\"/messages/#{message}/edit\"}>Edit</.link>\n  </:action>\n  <:action :let={{id, message}}>\n    <.link\n      phx-click={JS.push(\"delete\", value: %{id: message.id}) |> hide(\"##{id}\")}\n      data-confirm=\"Are you sure?\"\n    >\n      Delete\n    </.link>\n  </:action>\n</.table>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Modals\n\nA modal containing the `FormComponent` live component is rendered for the `:new` and `:edit` live actions.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.modal :if={@live_action in [:new, :edit]} id=\"message-modal\" show on_cancel={JS.patch(~p\"/messages\")}>\n  <.live_component\n    module={PicChatWeb.MessageLive.FormComponent}\n    id={@message.id || :new}\n    title={@page_title}\n    action={@live_action}\n    message={@message}\n    patch={~p\"/messages\"}\n  />\n</.modal>\n```\n\n## LiveComponent\n\n[Phoenix.LiveComponent](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html) encapsulates the behavior of a LiveView (state, message handling, displaying html) into reusable components within other LiveViews.\n\nWe use the [Phoenix.Component.live_component/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#live_component/1) to render a LiveComponent. The `id` and `module` attributes are required. Other attributes are bound to the socket assigns. LiveComponents do not inherit socket values from their parent, so **socket values must be explicitly provided**.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.live_component\n  module={PicChatWeb.MessageLive.FormComponent}\n  id={@message.id || :new}\n  title={@page_title}\n  action={@live_action}\n  message={@message}\n  patch={~p\"/messages\"}\n/>\n```\n\nWe're going to break down the `MessageLive.FormComponent` to better understand LiveComponents.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChatWeb.MessageLive.FormComponent do\n  use PicChatWeb, :live_component\n\n  alias PicChat.Chat\n\n  @impl true\n  def render(assigns) do\n    ~H\"\"\"\n    <div>\n      <.header>\n        <%= @title %>\n        <:subtitle>Use this form to manage message records in your database.</:subtitle>\n      </.header>\n\n      <.simple_form\n        for={@form}\n        id=\"message-form\"\n        phx-target={@myself}\n        phx-change=\"validate\"\n        phx-submit=\"save\"\n      >\n        <.input field={@form[:content]} type=\"text\" label=\"Content\" />\n        <:actions>\n          <.button phx-disable-with=\"Saving...\">Save Message</.button>\n        </:actions>\n      </.simple_form>\n    </div>\n    \"\"\"\n  end\n\n  @impl true\n  def update(%{message: message} = assigns, socket) do\n    changeset = Chat.change_message(message)\n\n    {:ok,\n     socket\n     |> assign(assigns)\n     |> assign_form(changeset)}\n  end\n\n  @impl true\n  def handle_event(\"validate\", %{\"message\" => message_params}, socket) do\n    changeset =\n      socket.assigns.message\n      |> Chat.change_message(message_params)\n      |> Map.put(:action, :validate)\n\n    {:noreply, assign_form(socket, changeset)}\n  end\n\n  def handle_event(\"save\", %{\"message\" => message_params}, socket) do\n    save_message(socket, socket.assigns.action, message_params)\n  end\n\n  defp save_message(socket, :edit, message_params) do\n    case Chat.update_message(socket.assigns.message, message_params) do\n      {:ok, message} ->\n        notify_parent({:edit, message})\n\n        {:noreply,\n         socket\n         |> put_flash(:info, \"Message updated successfully\")\n         |> push_patch(to: socket.assigns.patch)}\n\n      {:error, %Ecto.Changeset{} = changeset} ->\n        {:noreply, assign_form(socket, changeset)}\n    end\n  end\n\n  defp save_message(socket, :new, message_params) do\n    case Chat.create_message(message_params) do\n      {:ok, message} ->\n        notify_parent({:new, message})\n\n        {:noreply,\n         socket\n         |> put_flash(:info, \"Message created successfully\")\n         |> push_patch(to: socket.assigns.patch)}\n\n      {:error, %Ecto.Changeset{} = changeset} ->\n        {:noreply, assign_form(socket, changeset)}\n    end\n  end\n\n  defp assign_form(socket, %Ecto.Changeset{} = changeset) do\n    assign(socket, :form, to_form(changeset))\n  end\n\n  defp notify_parent(msg), do: send(self(), {__MODULE__, msg})\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### LiveComponent Life-Cycle\n\nThe LiveComponent life-cycle is similar to a LiveView with some important differences.\n\n```mermaid\nsequenceDiagram\n    LiveView-->>LiveComponent: render/1\n    LiveComponent-->>LiveComponent: mount/1\n    LiveComponent-->>LiveComponent: update/2\n    LiveComponent-->>LiveComponent: render/1\n```\n\nUnlike a LiveView, we don't typically retrieve data in the `mount/1` callback. Instead, the parent LiveView usually provides the component with any initial data it needs. The LiveComponent then calls the `update/2` callback anytime the LiveComponent is re-rendered (usually if the data provided by the parent LiveView changes).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef update(%{message: message} = assigns, socket) do\n  changeset = Chat.change_message(message)\n\n  {:ok,\n    socket\n    |> assign(assigns)\n    |> assign_form(changeset)}\nend\n```\n\nSee [LiveComponent life-cycle](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html#module-life-cycle) for more information.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Sending/Receiving Process Messages\n\nBy default, a LiveComponent sends messages to the parent. We can use the `phx-target={@myself}` attribute on an element to instead send messages to the LiveComponent itself.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.simple_form\n  for={@form}\n  id=\"message-form\"\n  phx-target={@myself}\n  phx-change=\"validate\"\n  phx-submit=\"save\"\n>\n  <.input field={@form[:content]} type=\"text\" label=\"Content\" />\n  <:actions>\n    <.button phx-disable-with=\"Saving...\">Save Message</.button>\n  </:actions>\n</.simple_form>\n```\n\nThese messages are then handled in the LiveComponent rather than the parent LiveView.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef handle_event(\"save\", %{\"message\" => message_params}, socket) do\n  save_message(socket, socket.assigns.action, message_params)\nend\n```\n\nThe `FormComponent` also provides an example of sending the parent LiveView process a message when a new `Message` is created.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp notify_parent(msg), do: send(self(), {__MODULE__, msg})\n```\n\nThis is handled in the parent LiveView to update the stream of `Message` structs.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@impl true\ndef handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do\n  {:noreply, stream_insert(socket, :messages, message, at: 0)}\nend\n\n@impl true\ndef handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do\n  {:noreply, stream_insert(socket, :messages, message)}\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Assign_form\n\nThe `FormComponent` uses an `assign_form/2` helper function to assign the `Phoenix.HTML.Form` struct in the socket.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp assign_form(socket, %Ecto.Changeset{} = changeset) do\n  assign(socket, :form, to_form(changeset))\nend\n```\n\nThis form is used to initialize form data and display errors. Observe the `:error` case when creating a new message. The `assign_form/2` function works with the changeset to display errors.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp save_message(socket, :new, message_params) do\n  case Chat.create_message(message_params) do\n    {:ok, message} ->\n      notify_parent({:new, message})\n\n      {:noreply,\n        socket\n        |> put_flash(:info, \"Message created successfully\")\n        |> push_patch(to: socket.assigns.patch)}\n\n    {:error, %Ecto.Changeset{} = changeset} ->\n      {:noreply, assign_form(socket, changeset)}\n  end\nend\n```\n\n## LiveView Testing\n\nThe `MessageLiveTest` module found in `test/pic_chat_web/live/message_live_test.ex` demonstrates how to mount a LiveView, simulate user interactions, and assert on the behavior and response of the LiveView.\n\nRead through the `MessageLiveTest` module to better understand patterns for testing LiveViews.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule PicChatWeb.MessageLiveTest do\n  use PicChatWeb.ConnCase\n\n  import Phoenix.LiveViewTest\n  import PicChat.ChatFixtures\n\n  @create_attrs %{content: \"some content\"}\n  @update_attrs %{content: \"some updated content\"}\n  @invalid_attrs %{content: nil}\n\n  defp create_message(_) do\n    message = message_fixture()\n    %{message: message}\n  end\n\n  describe \"Index\" do\n    setup [:create_message]\n\n    test \"lists all messages\", %{conn: conn, message: message} do\n      {:ok, _index_live, html} = live(conn, ~p\"/messages\")\n\n      assert html =~ \"Listing Messages\"\n      assert html =~ message.content\n    end\n\n    test \"saves new message\", %{conn: conn} do\n      {:ok, index_live, _html} = live(conn, ~p\"/messages\")\n\n      assert index_live |> element(\"a\", \"New Message\") |> render_click() =~\n               \"New Message\"\n\n      assert_patch(index_live, ~p\"/messages/new\")\n\n      assert index_live\n             |> form(\"#message-form\", message: @invalid_attrs)\n             |> render_change() =~ \"can&#39;t be blank\"\n\n      assert index_live\n             |> form(\"#message-form\", message: @create_attrs)\n             |> render_submit()\n\n      assert_patch(index_live, ~p\"/messages\")\n\n      html = render(index_live)\n      assert html =~ \"Message created successfully\"\n      assert html =~ \"some content\"\n    end\n\n    test \"updates message in listing\", %{conn: conn, message: message} do\n      {:ok, index_live, _html} = live(conn, ~p\"/messages\")\n\n      assert index_live |> element(\"#messages-#{message.id} a\", \"Edit\") |> render_click() =~\n               \"Edit Message\"\n\n      assert_patch(index_live, ~p\"/messages/#{message}/edit\")\n\n      assert index_live\n             |> form(\"#message-form\", message: @invalid_attrs)\n             |> render_change() =~ \"can&#39;t be blank\"\n\n      assert index_live\n             |> form(\"#message-form\", message: @update_attrs)\n             |> render_submit()\n\n      assert_patch(index_live, ~p\"/messages\")\n\n      html = render(index_live)\n      assert html =~ \"Message updated successfully\"\n      assert html =~ \"some updated content\"\n    end\n\n    test \"deletes message in listing\", %{conn: conn, message: message} do\n      {:ok, index_live, _html} = live(conn, ~p\"/messages\")\n\n      assert index_live |> element(\"#messages-#{message.id} a\", \"Delete\") |> render_click()\n      refute has_element?(index_live, \"#messages-#{message.id}\")\n    end\n  end\n\n  describe \"Show\" do\n    setup [:create_message]\n\n    test \"displays message\", %{conn: conn, message: message} do\n      {:ok, _show_live, html} = live(conn, ~p\"/messages/#{message}\")\n\n      assert html =~ \"Show Message\"\n      assert html =~ message.content\n    end\n\n    test \"updates message within modal\", %{conn: conn, message: message} do\n      {:ok, show_live, _html} = live(conn, ~p\"/messages/#{message}\")\n\n      assert show_live |> element(\"a\", \"Edit\") |> render_click() =~\n               \"Edit Message\"\n\n      assert_patch(show_live, ~p\"/messages/#{message}/show/edit\")\n\n      assert show_live\n             |> form(\"#message-form\", message: @invalid_attrs)\n             |> render_change() =~ \"can&#39;t be blank\"\n\n      assert show_live\n             |> form(\"#message-form\", message: @update_attrs)\n             |> render_submit()\n\n      assert_patch(show_live, ~p\"/messages/#{message}\")\n\n      html = render(show_live)\n      assert html =~ \"Message updated successfully\"\n      assert html =~ \"some updated content\"\n    end\n  end\nend\n```\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)\n* [HexDocs: LiveComponent](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html)\n* [Elixir Schools: LiveView](https://elixirschool.com/blog/phoenix-live-view/)\n* [PragProg: Programming Phoenix LiveView](https://pragprog.com/titles/liveview/programming-phoenix-liveview/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish PicChat: Messages reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Messages\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/math_game.livemd\">Math Game</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_authentication.livemd\">PicChat: Authentication</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task76-reading-capstone_project_guide", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Capstone Project Guide\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone Project Guide\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/group_project_blog_presentation.livemd\">Group Project: Presentation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/capstone_github_project.livemd\">Capstone GitHub Project</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Capstone Project\n\nThe capstone project is the final project for the DockYard Academy Course. This project is an opportunity to apply the skills and knowledge you have learned throughout this course to a real-world problem of your choosing.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requirements\n\nYour capstone project should incorporate the following features:\n\n* Use Phoenix LiveView and PubSub to build a real-time distributed feature.\n* Use Ecto to connect to a database and manage one or more associations (one-to-one, one-to-many, many-to-many).\n* Interact with an external API, library, or service.\n* Use authentication to authorize users.\n\nIf you have a project idea that deviates from these requirements but still adequately demonstrates what you have learned in this course, then speak with your instructor to request approval.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Presentation\n\nStudents will present their capstone project publicly to the Elixir community. During your presentation, we recommend you:\n\n* Summarize the technologies (languages, frameworks, APIs, services, etc.) used in the project.\n* Demonstrate the main features of your project.\n* Share a particularly challenging or compelling piece of code.\n* Any features you would like to add to the project if you were to expand it after the academy.\n\nYou will have ten minutes to present your project and five minutes to answer audience questions. Consider timing yourself and practice your transitions from feature to feature to prepare.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Capstone Project Guide reading\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone Project Guide\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/group_project_blog_presentation.livemd\">Group Project: Presentation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/capstone_github_project.livemd\">Capstone GitHub Project</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task77-exercises-blog_comments", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Comments\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Comments\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_one_to_many_associations.livemd\">One-To-Many Associations</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_authentication.livemd\">Phoenix Authentication</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog: Comments\n\nYou're going to create a `comments` for blog posts on your existing [Blog](./group_project_blog.livemd) project.\n\n```mermaid\nerDiagram\n\nComment {\n  text content\n  id post_id\n}\n```\n\n### Requirements\n\n* Migration & Schema\n  * Create a comments table with a `content` field of type `:text`.\n  * Posts should **have many** comments (one-to-many), and comments should **belong to** a post.\n* Functionality\n  * Display comments on each post\n  * Create a comment for a post through a form on the post show page.\n  * (Bonus): Delete Comments\n  * (Bonus): Edit Comments\n* Tests\n  * Write Context and Controller tests to ensure the post page displays comments on the post.\n  * Write Context and Controller tests to ensure a comment can be created for a given post.\n  * All tests should pass. You may need to modify old tests to ensure they continue to pass.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Comments exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Comments\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_one_to_many_associations.livemd\">One-To-Many Associations</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_authentication.livemd\">Phoenix Authentication</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task78-exercises-timer", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Timer\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timer\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/stack_server.livemd\">Stack Server</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/testing_genservers.livemd\">Testing GenServers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Timer\n\nYou're going to create a `Timer` GenServer.\n\n### Requirements\n\n* The initial timer state starts as an integer `0` number of seconds.\n* After spawning, the `Timer` should send itself a message every second to increment the timer.\n* Create the `start_link/1` and `get_time/1` client API functions to start the timer and retrieve the current time.\n* Define any necessary server callbacks.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, pid} = Timer.start_link([])\nTimer.get_time(pid)\n0\nProcess.sleep(1500)\nTimer.seconds(pid)\n1\n```\n\nKeep in mind, we cannot guarantee perfect timing when sending messages on an interval, and that is not the purpose of this exercise.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Timer do\n  use GenServer\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def get_time(timer_pid) do\n    GenServer.call(timer_pid, :get_time)\n  end\n\n  @impl true\n  def init(_opts) do\n    schedule_timer()\n    {:ok, 0}\n  end\n\n  @impl true\n  def handle_info(:increment, state) do\n    schedule_timer()\n    {:noreply, state + 1}\n  end\n\n  @impl true\n  def handle_call(:get_time, _from, state) do\n    {:reply, state, state}\n  end\n\n  defp schedule_timer do\n    Process.send_after(self(), :increment, 1000)\n  end\nend\n```\n\n</details>\n\nImplement the `Timer` module as documented below.\n\n```elixir\ndefmodule Timer do\n  @moduledoc \"\"\"\n  iex> {:ok, pid} = Timer.start_link([])\n  iex> Timer.seconds(pid)\n  0\n  iex> Process.sleep(1200)\n  iex> Timer.seconds(pid)\n  1\n  \"\"\"\n  use GenServer\n\n  def start_link(_opts) do\n  end\n\n  def get_time(timer_pid) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Timer exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timer\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/stack_server.livemd\">Stack Server</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/testing_genservers.livemd\">Testing GenServers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task79-exercises-phoenix_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Phoenix Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/phoenix_follow_along_counter_app.livemd\">Follow Along: Phoenix Counter App</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/group_project_blog.livemd\">Group Project: Blog</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Phoenix Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for the [Phoenix](../reading/phoenix_1.7.livemd) framework. Follow the instructions for each drill and complete them as quickly as you can.\n\n## Hello World\n\nCreate a hello world and replace any existing content on the `\"/\"` route with \"Hello World\".\n\n```\n$ mix phx.new hello_world --no-ecto\n```\n\n## Random Number\n\nCreate a random number web app that generates a random number between `1` and `100` on the `\"/random_number\"` route.\n\n```\n$ mix phx.new random_number --no-ecto\n```\n\n## Phoenix Navigation\n\nCreate a Phoenix application with three pages:\n\n* Home\n* About\n* Projects\n\nCreate a simple navigation bar at the top of every page that lets you navigate to each page.\n\n## Counter\n\nRecreate the counter found in the [Follow Along: Counter](../exercises/phoenix_follow_along_counter_app.livemd) exercise without referring to the exercise material (as much as possible).\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phoenix Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/phoenix_follow_along_counter_app.livemd\">Follow Along: Phoenix Counter App</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/group_project_blog.livemd\">Group Project: Blog</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task80-exercises-custom_assertions", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Custom Assertions\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Assertions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/meta_math.livemd\">MetaMath</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/queues.livemd\">Queues</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Custom Assertions\n\nCreate a `CustomAssertion.assert` macro which provides test feedback in the format:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"\"\"\nAssertion with `==` failed.\n\nleft: 1\nright: 2\n\"\"\"\n```\n\nYour solution should work with the `==`, `>`, `<`, `<=`, `>=`, and `===` operators.\n\nPrint a `\"Success\"` message if the assertion passes.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nIf we want to have full control over the result, one solution would be to use multiple function heads (or any means of control flow) for each operator. However, if we don't have custom messages for each operator, we can cleverly use the `apply/3` function to keep our solution minimal.\n\n```elixir\ndefmodule CustomAssertion do\n  @success \"Success!\"\n\n  def check(operator, left, right) do\n    if apply(Kernel, operator, [left, right]) do\n      @success\n    else\n      \"\"\"\n      Assertion with #{operator} failed.\n      left: #{left}\n      right: #{right}\n      \"\"\"\n    end\n  end\n\n  defmacro assert({operator, _meta, [left, right]}) do\n    quote do\n      CustomAssertion.check(unquote(operator), unquote(left), unquote(right))\n    end\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule CustomAssertion do\n  defmacro assert({operator, _meta, [left, right]}) do\n  end\nend\n```\n\nYour solution should be able to display failure messages for the following assertions.\n\n```elixir\nrequire CustomAssertion\n\nCustomAssertion.assert(1 == 2) |> IO.puts()\nCustomAssertion.assert(1 === 2) |> IO.puts()\nCustomAssertion.assert(1 > 2) |> IO.puts()\nCustomAssertion.assert(1 >= 2) |> IO.puts()\nCustomAssertion.assert(2 < 1) |> IO.puts()\nCustomAssertion.assert(2 <= 1) |> IO.puts()\n```\n\nYour solution should display success messages for the following assertions.\n\n```elixir\nrequire CustomAssertion\n\nCustomAssertion.assert(1 == 1) |> IO.puts()\nCustomAssertion.assert(1 === 1) |> IO.puts()\nCustomAssertion.assert(2 > 1) |> IO.puts()\nCustomAssertion.assert(1 >= 1) |> IO.puts()\nCustomAssertion.assert(1 < 2) |> IO.puts()\nCustomAssertion.assert(1 <= 1) |> IO.puts()\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Custom Assertions exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Assertions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/meta_math.livemd\">MetaMath</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/queues.livemd\">Queues</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task81-exercises-measurements", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Measurements\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Measurements\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/named_number_lists.livemd\">Named Number Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/built-in_modules.livemd\">Built-In Elixir Modules</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Measurements\n\nYou are going to make a utility module for working with measurements.\nThis exercise was inspired by [Advent of Code 2021](https://adventofcode.com/), which is a fantastic resource for learning about Elixir through practical problems.\n\n<details style=\"background-color: lightgreen; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Measurements do\n  def increments(measurements) do\n    measurements\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.map(fn [x, y] -> y - x end)\n  end\n\n  def increased(measurements) do\n    measurements\n    |> increments()\n    |> Enum.count(&(&1 > 0))\n  end\n\n  def increased_by(measurements) do\n    measurements\n    |> increments()\n    |> Enum.filter(&(&1 > 0))\n    |> Enum.sum()\n  end\n\n  def average(measurements) do\n    div(Enum.sum(measurements), Enum.count(measurements))\n  end\nend\n```\n</details>\n\nImplement the `Measurements` module according to the documented function examples.\n\n```elixir\ndefmodule Measurements do\n  @doc \"\"\"\n  Given a list of measurements as integers, determine the increment between each integer.\n\n  ## Examples\n\n    iex> Measurements.increments([100, 150, 120, 130])\n    [50, -30, 10]\n\n    iex> Measurements.increments([10, 20, 10, 40])\n    [10, -10, 30]\n  \"\"\"\n  def increments(measurements) do\n  end\n\n  @doc \"\"\"\n  Given a list of measurements as integers, determine how many have increased.\n  Each positive change since the previous integer in the list should count as an increase.\n\n  ## Examples\n\n    iex> Measurements.increased([1, 1, 2, 3, 1])\n    2\n\n    iex> Measurements.increased([1, 2, 1])\n    1\n\n    iex> Measurements.increased([3, 1, 2])\n    1\n  \"\"\"\n  def increased(measurements) do\n  end\n\n  @doc \"\"\"\n  Given a list of measurements as integers, sum the amount they have increased by.\n  Only positive increments are taken into account.\n\n  ## Examples\n\n    iex> Measurements.increased_by([100, 150, 120, 130])\n    60\n\n    iex> Measurements.increased_by([10, 20, 10, 40])\n    40\n  \"\"\"\n  def increased_by(measurements) do\n  end\n\n  @doc \"\"\"\n  Find the average of a list of numbers.\n  You can calculate average as sum of integers / length of list.\n\n  ## Examples\n\n    iex> Measurements.average([4, 5, 6])\n    5.0\n\n    iex> Measurements.average([2, 10])\n    6.0\n  \"\"\"\n  def average(measurements) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Measurements exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Measurements\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/named_number_lists.livemd\">Named Number Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/built-in_modules.livemd\">Built-In Elixir Modules</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task82-exercises-rpg_dialogue", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# RPG Dialogue\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=RPG Dialogue\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rock_paper_scissors_lizard_spock.livemd\">Rock Paper Scissors Lizard Spock</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/pokemon_battle.livemd\">Pokemon Battle</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\nIn this exercise, you will create dialogue for an RPG (Role Playing Game).\n\nTo generate this dialogue define a `Character` struct with a `:name`, `:class`, and `:weapon` keys. Enforce that the `:name` key must have a value.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nclassDiagram\n  class Character {\n    name*: string\n    class: string\n    weapon: string\n  }\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ndefmodule Character do\n  @enforce_keys [:name]\n  defstruct @enforce_keys ++ [:class, :weapon]\n  \n  def introduce(character) do\n    \"My name is #{character.name}.\"\n  end\n\n  def attack(character) do\n    \"I attack with my #{character.weapon}!\"\n  end\n\n  def class(character) do\n    \"I am a #{character.class}\"\n  end\n\n  def war_cry(character) do\n    \"My name is #{character.name} and I am a #{character.class}!\"\n  end\n\n  def defeat(character1, character2) do\n    \"My name is #{character1.name} and I have defeated the #{character2.class} #{character2.name}!\"\n  end\nend\n```\n\n</details>\n\nThen implement the `Character` functions to generate dialogue according to the documented examples below.\n\n```elixir\ndefmodule Character do\n  @moduledoc \"\"\"\n  Character\n\n  Defines a character struct, and functions for creating character dialogue.\n\n  iex> %Character{name: \"Frodo\", weapon: \"Sting\"}\n  %Character{name: \"Frodo\", weapon: \"String\", class: nil}\n\n  The :name key is required. But cannot be tested by doctests\n  \"\"\"\n  defstruct []\n\n  @doc \"\"\"\n  Introduce the character by name.\n\n  ## Examples\n    \n    iex> Character.introduce(%Character{name: \"Gimli\"})\n    \"My name is Gimli.\"\n\n    iex> Character.introduce(%Character{name: \"Aragorn\"})\n    \"My name is Aragorn.\"\n  \"\"\"\n  def introduce(character) do\n  end\n\n  @doc \"\"\"\n  Declare a character attack.\n\n  ## Examples\n\n    iex> Character.attack(%Character{name: \"Gimli\", weapon: \"axe\"})\n    \"I attack with my axe!\"\n\n    iex> Character.attack(%Character{name: \"Aragorn\", weapon: \"sword\"})\n    \"I attack with my sword!\"\n  \"\"\"\n  def attack(character) do\n  end\n\n  @doc \"\"\"\n  Declare a character's class.\n\n  ## Examples\n\n    iex> Character.class(%Character{name: \"Gimli\", class: \"warrior\"})\n    \"I am a warrior.\"\n\n    iex> Character.class(%Character{name: \"Aragorn\", class: \"ranger\"})\n    \"I am a ranger.\"\n  \"\"\"\n  def class(character) do\n  end\n\n  @doc \"\"\"\n  Declare a character's name and class in a war cry.\n\n  ## Examples\n\n    iex> Character.war_cry(%Character{name: \"Gimli\", class: \"warrior\"})\n    \"My name is Gimli and I am a warrior!\"\n\n    iex> Character.war_cry(%Character{name: \"Aragorn\", class: \"ranger\"})\n    \"My name is Aragorn and I am a ranger!\"\n  \"\"\"\n  def war_cry(character) do\n  end\n\n  @doc \"\"\"\n  Declare that one character has defeated another.\n\n  ## Examples\n\n    iex> Character.defeat(%Character{name: \"Gimli\"}, %Character{name: \"Aragorn\", class: \"ranger\"})\n    \"My name is Gimli and I have defeated the ranger Aragorn!\"\n\n    iex> Character.defeat(%Character{name: \"Aragorn\"}, %Character{name: \"Gimli\", class: \"warrior\"})\n    \"My name is Aragorn and I have defeated the warrior Gimli!\"\n  \"\"\"\n  def defeat(character1, character2) do\n  end\nend\n```\n\n### Bonus: Character Instances\n\nBind three variables `aragorn`, `gandalf`, and `gimli` to an instance of a `Character` struct with the following information.\n\n```mermaid\nclassDiagram\n  class aragorn {\n    name: \"Aragorn\"\n    class: \"ranger\"\n    weapon: \"sword\"\n  }\n  class gandalf {\n    name: \"Gandalf\"\n    class: \"wizard\"\n    weapon: \"staff\"\n  }\n  class gimli {\n    name: \"Gimli\"\n    class: \"warrior\"\n    weapon: \"axe\"\n  }\n```\n\nYou may use these three structs to test your `Character` functions.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\naragorn = %Character{name: \"Aragorn\", class: \"ranger\", weapon: \"sword\"}\ngandalf = %Character{name: \"Gandalf\", class: \"wizard\", weapon: \"staff\"}\ngimli = %Character{name: \"Gimli\", class: \"warrior\", weapon: \"axe\"}\n\n# Example Testing\nCharacter.introduce(aragorn)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish RPG Dialogue exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=RPG Dialogue\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rock_paper_scissors_lizard_spock.livemd\">Rock Paper Scissors Lizard Spock</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/pokemon_battle.livemd\">Pokemon Battle</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task83-exercises-task_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Task Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Task Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/task_supervisor.livemd\">Task Supervisor</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/concurrent_word_count.livemd\">Concurrent Word Count</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Task Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for [Tasks](../reading/task.livemd). Follow the instructions for each drill and complete them as quickly as you can.\n\n## Task.await/2\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.await/2](https://hexdocs.pm/elixir/Task.html#await/2) to spawn a task process that returns any response.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.async(fn -> :ok end)\n\nTask.await(task)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.await/2](https://hexdocs.pm/elixir/Task.html#await/2) to spawn a task process that sleeps for six seconds. It should cause a timeout error.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.async(fn -> Process.sleep(6000) end)\n\nTask.await(task)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.await/2](https://hexdocs.pm/elixir/Task.html#await/2) to spawn a task process that sleeps for six seconds. Provide a timeout value to [Task.await/2](https://hexdocs.pm/elixir/Task.html#await/2) so that it properly awaits the response.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.async(fn -> Process.sleep(6000) end)\n\nTask.await(task, 7000)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Task.yield/2\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.yield/2](https://hexdocs.pm/elixir/Task.html#yield/2) to spawn a task process that returns any response.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.async(fn -> :ok end)\n\nTask.yield(task)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.yield/2](https://hexdocs.pm/elixir/Task.html#yield/2) to spawn a task process that sleeps for six seconds and returns any response. Notice that the yield is `nil`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.async(fn -> Process.sleep(6000) end)\n\nTask.yield(task)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.yield/2](https://hexdocs.pm/elixir/Task.html#yield/2) to spawn a task process that sleeps for six seconds and returns any response. Provide a timeout value to [Task.yield/2](https://hexdocs.pm/elixir/Task.html#yield/2) so that it properly returns the response.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.async(fn -> Process.sleep(6000) end)\n\nTask.yield(task, 7000)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1), [Task.yield/2](https://hexdocs.pm/elixir/Task.html#yield/2), and [Task.shutdown/2](https://hexdocs.pm/elixir/Task.html#shutdown/2) to spawn a task process that sleeps for six seconds. Shutdown the task process if it does not yield any value after five seconds.\n\nUse `IO.puts/2` to prove that the task was shutdown.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask =\n  Task.async(fn ->\n    Process.sleep(6000)\n    IO.puts(\"NOT RAN\")\n  end)\n\nif !Task.yield(task) do\n  Task.shutdown(task)\nend\n```\n\n</details>\n\n```elixir\n\n```\n\n## Task.await_many/2\n\nUse [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1) and [Task.await_many/2](https://hexdocs.pm/elixir/Task.html#await_many/2) to spawn two task processes that both return a random number from `1..10`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask1 = Task.async(fn -> Enum.random(1..10) end)\ntask2 = Task.async(fn -> Enum.random(1..10) end)\n\nTask.await_many([task1, task2])\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2), [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1), and [Task.await_many/2](https://hexdocs.pm/elixir/Task.html#await_many/2) to spawn one hundred task processes that all return a random integer from `1..100`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntasks = Enum.map(1..100, fn _ -> Task.async(fn -> Enum.random(1..100) end) end)\n\nTask.await_many(tasks)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2), [Task.async/1](https://hexdocs.pm/elixir/Task.html#async/1), [String.upcase/2](https://hexdocs.pm/elixir/String.html#upcase/2), and [Task.await_many/2](https://hexdocs.pm/elixir/Task.html#await_many/2) to concurrently capitalize every string in the list `[\"apple\", \"pear\", \"peaches\"]`\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nlist = [\"apple\", \"pear\", \"peaches\"]\n\ntasks = Enum.map(list, fn word -> Task.async(fn -> String.upcase(word) end) end)\n\nTask.await_many(tasks)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Task.Supervisor\n\nStart a [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) with a child `Task.Supervisor` process named `MyTaskSupervisor`. Use a `:one_for_one` strategy. You will use `MyTaskSupervisor` in all of the examples below that need a task supervisor.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  {Task.Supervisor, name: MyTaskSupervisor}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse `Task.Supervisor.async/3` and [Task.await/2](https://hexdocs.pm/elixir/Task.html#await/2) to start a supervised task process that returns a random number after sleeping for two seconds.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask = Task.Supervisor.async(MyTaskSupervisor, fn ->\n  Process.sleep(2000)\n  Enum.random(1..10)\nend)\n\nTask.await(task)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2), `Task.Supervisor.async/3` and [Task.await_many/2](https://hexdocs.pm/elixir/Task.html#await_many/2) to start one hundred supervised task processes that returns a random number.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntasks = Enum.map(1..100, fn _ ->\n  Task.Supervisor.async(MyTaskSupervisor, fn -> Enum.random(1..10) end)\nend)\n\nTask.await_many(tasks)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse `Task.Supervisor.start_child/3` to start a `:temporary` task that crashes after five seconds. `:temporary` is already the default `:restart` option.\n\nUse [Supervisor.which_children/1](https://hexdocs.pm/elixir/Supervisor.html#which_children/1) after six seconds to demonstrate that a `:temporary` process is not restarted.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask =\n  Task.Supervisor.start_child(MyTaskSupervisor, fn ->\n    Process.sleep(5000)\n    raise \"error\"\n  end)\n\nProcess.sleep(6000)\nSupervisor.which_children(MyTaskSupervisor)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse `Task.Supervisor.start_child/3` with the `restart: :transient` option to start a `:transient` task that crashes after one second.\n\nUse `IO.inspect/2` and `self/0` to demonstrate that the process is restarted, and that the `pid` has changed.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ntask =\n  Task.Supervisor.start_child(\n    MyTaskSupervisor,\n    fn ->\n      IO.inspect(self(), label: \"Process restarted\")\n      Process.sleep(1000)\n      raise \"error\"\n    end,\n    restart: :transient\n  )\n```\n\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Task Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Task Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/task_supervisor.livemd\">Task Supervisor</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/concurrent_word_count.livemd\">Concurrent Word Count</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task84-exercises-phoenix_follow_along_counter_app", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"counter_count_page.png\",\"type\":\"attachment\"}]} -->\n\n# Follow Along: Phoenix Counter App\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Follow Along: Phoenix Counter App\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/web_servers.livemd\">Web Servers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/phoenix_drills.livemd\">Phoenix Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Follow Along Tutorial: Build A Counter Application\n\nWe're going to build a `Counter` application to learn the basics of phoenix. Users will click a button that increments a count on the page.\n\nIf you have not already, ensure you follow the [Phoenix Installation Guide](https://hexdocs.pm/phoenix/installation.html) to setup Phoenix 1.7 onto your system.\n\nFor reference, see the completed `curriculum/demos/counter` application.\n\n## Initialize The Phoenix Project\n\n### Create A Phoenix Project\n\nRun the following in the `curriculum/projects/` folder to create a mix project without Ecto using the `--no-ecto` flag.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ mix phx.new counter --no-ecto\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Start The Server\n\nStart the server, which you can visit on http://localhost:4000.\n\n```\n$ mix phx.server\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Troubleshooting\n\nIt's common to encounter issues when starting Phoenix for the first time. For example, typically, students run into problems with [Postgres](https://www.postgresql.org/).\n\nLinux users will often encounter an issue where the `postgresql` service is not running. You can solve this problem with the following command.\n\n```\n$ sudo service postgresql start\n```\n\nAlternatively, you may have a permissions issue where the PostgreSQL user does not have the default username and password. You can resolve this by ensuring there is a `postgres` user with a `postgres` password.\n\nWhile not a magic solution, the following may solve your problem.\n\n```\n$ sudo -u postgres psql -c \"ALTER USER postgres PASSWORD 'postgres';\"\n$ sudo server postgresql restart\n```\n\nThese are two very common issues, however you may encounter an unexpected error. Please speak with your instructor if you encounter any issues to get support.\n\n## Returning A Response\n\nTo return a response when the user visits a page, we need to do the following.\n\n1. Create the route.\n2. Create the controller.\n3. Create the component.\n4. Create the template.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The Route.\n\nIn `lib/counter_web/router.ex` modify the existing scope with the following. We're going to replace the `PageController` boilerplate that Phoenix generates.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nscope \"/\", CounterWeb do\n  pipe_through :browser\n\n  get \"/\", CounterController, :count\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The Controller\n\nCreate a `lib/counter_web/controllers/counter_controller.ex` file with the following content.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule CounterWeb.CounterController do\n  use CounterWeb, :controller\n\n  def count(conn, _params) do\n    render(conn, :count, count: 0)\n  end\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The Component\n\nCreate a `lib/counter_web/controllers/counter_html.ex` file with the following content.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule CounterWeb.CounterHTML do\n  use CounterWeb, :html\n\n  embed_templates \"counter_html/*\"\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The Template\n\nCreate a `lib/counter_web/controllers/counter_html/count.html.heex` file with the following content.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<h1 class=\"text-4xl\">The current count is: <%= @count %></h1>\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nVisit http://localhost:4000 and you should see our counter initialized to `0`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/counter_count_page.png)\n\n## Connect The Counter\n\nWe can use [query parameters](https://en.wikipedia.org/wiki/Query_string) to control the counter's value.\n\nModify the controller in `counter_web/controllers/counter_controller.ex` to use the `params` parameter to set the count.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule CounterWeb.CounterController do\n  use CounterWeb, :controller\n\n  def count(conn, params) do\n    render(conn, :count, count: params[\"count\"] || 0)\n  end\nend\n```\n\nVisit http://localhost:4000?count=1 and the count should be set by the query parameter.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Increment The Count\n\nNow to increment the count, we have to send a get request with the incremented count as part of the url.\n\nTo send a get request from the browser, we can use the [Phoenix.Component.link/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1) component.\n\nAdd the link to the template in `counter_web/controllers/counter_html/count.html.heex`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<h1 class=\"text-4xl\">The current count is: <%= @count %></h1>\n\n<.link\n  navigate={~p\"/?count=#{@count + 1}\"}\n  class=\"inline-block p-4 mt-4 text-2xl rounded-full bg-cyan-500 hover:bg-cyan-400\"\n>\n  Increment\n</.link>\n```\n\n## Count Form\n\nLet's connect the counter to a form. We're going to enter a value in a number input, and increment the count by that value.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The Form\n\nCreate the form in `counter_web/controllers/counter_html/count.html.heex`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n<.form :let={f} for={%{}} action={~p\"/\"}>\n  <.input type=\"number\" field={f[:increment_by]} value={1} />\n  <.input type=\"hidden\" field={f[:count]} value={@count} />\n  <.button class=\"mt-2\">Increment</.button>\n</.form>\n```\n\nThis form sends a POST request to the `\"/\"` route with the count and the increment by value.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The `post` Route\n\nModify the scope in our `router.ex` file to handle the POST request sent by the form.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nscope \"/\", CounterWeb do\n  pipe_through :browser\n\n  get \"/\", CounterController, :count\n  post \"/\", CounterController, :increment\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create The Controller `increment/2` Action\n\nAdd an `increment/2` action in the `counter_web/controllers/counter_controller.ex` controller file. We'll need to send the current count and the value to increment by in the params.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndef increment(conn, params) do\n  current_count = String.to_integer(params[\"count\"])\n  increment_by = String.to_integer(params[\"increment_by\"])\n  render(conn, :count, count: current_count + increment_by)\nend\n```\n\n## Further Reading\n\nFor more on Phoenix, consider the following resources.\n\n- [Phoenix HexDocs](https://hexdocs.pm/phoenix/Phoenix.html)\n- [Plug HexDocs](https://hexdocs.pm/plug/readme.html)\n- [Phoenix a Web Framework for the New Web \u2022 Jos\u00e9 Valim \u2022 GOTO 2016](https://www.youtube.com/watch?v=bk3icU8iIto&ab_channel=GOTOConferences)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Follow Along: Phoenix Counter App exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Follow Along: Phoenix Counter App\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/web_servers.livemd\">Web Servers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/phoenix_drills.livemd\">Phoenix Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task85-exercises-guessing_games", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Guessing Games\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Guessing Games\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/mad_libs.livemd\">Mad Libs</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/atoms.livemd\">Atoms</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Guess The Word\n\nCreate a word guessing game. Manually bind a `guess` and an `answer`. Return `\"Correct\"` if the guess is equal to the answer, and otherwise return `\"Incorrect.\"`\n\nEnsure your solutions works for both an incorrect and correct player guess.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n  ```elixir\n  guess = \"hello\"\n  answer = \"hello\"\n\n  guess == answer && \"Correct!\" || \"Incorrect.\"\n  ```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Bonus: Guess The Random Word\n\nWe can use [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) to pick a random value from a list.\n\n```elixir\nEnum.random([\"hello\", \"hi\", \"howdy\"])\n```\n\nArmed with this knowledge, you're going to create a word guessing game.\n\n* Bind a variable `guess` to the player's guess as a string.\n* Bind a variable `answer` to a random word (you may create a list of random words to choose from)\n* If the `guess` matches the answer, return `\"Correct!\"`, otherwise return `\"Incorrect.\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n  ```elixir\n  guess = \"hello\"\n  answer = Enum.random([\"hello\", \"hi\", \"howdy\"])\n\n  guess == answer && \"Correct!\" || \"Incorrect.\"\n  ```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Bonus: Guess The Number\n\nWe can generate a random integer between two values by providing a range to [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1).\n\n```elixir\nEnum.random(1..10)\n```\n\nNow let's build a number guessing game\n\n* Bind a variable `answer` to a random integer between `1` and `10`.\n* Bind a variable `guess` to the player's guess.\n* If the `guess` equals `answer`, return `\"Correct!\"`.\n* If the `guess` is lower than the answer, return `\"Too low!\"`.\n* If the `guess` is higher than the answer, return `\"Too high!\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n\n  `cond` allows us to handle several different conditions.\n\n  ```elixir\n  guess = Enum.random(1..10)\n  answer = 7\n\n  cond do\n    guess == answer -> \"Correct!\"\n    guess < answer -> \"Too low!\"\n    guess > answer -> \"Too high!\"\n  end\n  ```\n\n  However, we can also solve this problem using purely boolean operators.\n\n  ```elixir\n  guess = Enum.random(1..10)\n  answer = 7\n\n  guess == answer && \"Correct\" || guess < answer && \"Too low!\" || guess > answer && \"Too high!\"\n  ```\n\n  We can optionally simplify the solution by omitting the last condition. However, this could lead to unhandled bugs.\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Guessing Games exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Guessing Games\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/mad_libs.livemd\">Mad Libs</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/atoms.livemd\">Atoms</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task86-exercises-score_tracker", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Score Tracker\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Score Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/genserver_drills.livemd\">GenServer Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/stack_server.livemd\">Stack Server</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Score Tracker\n\nYou're going to create a `ScoreTracker` [GenServer](https://hexdocs.pm/elixir/GenServer.html) which is a generic score tracker.\n\n### Requirements\n\n* The initial score starts as `0`.\n* Handle an asynchronous `{:add_points, amount}` message to increment the score state.\n* Handle a synchronous `:current_score` message to retrieve the current score.\n* Create the `start_link/1`, `current_score/1`, and `add_points/2` Client API functions as documented below.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, pid} = ScoreTracker.start_link([])\n:ok = ScoreTracker.add_points(pid, 10)\n10 = ScoreTracker.current_score(pid)\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule ScoreTracker do\n  use GenServer\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def add_points(score_tracker_pid, amount) do\n    GenServer.cast(score_tracker_pid, {:add_points, amount})\n  end\n\n  def get_score(score_tracker_pid) do\n    GenServer.call(score_tracker_pid, :current_score)\n  end\n\n  @impl true\n  def init(_opts) do\n    {:ok, 0}\n  end\n\n  @impl true\n  def handle_cast({:add_points, points}, state) do\n    {:noreply, state + points}\n  end\n\n  @impl true\n  def handle_call(:current_score, _from, state) do\n    {:reply, state, state}\n  end\nend\n```\n\n</details>\n\nImplement the `ScoreTracker` module below.\n\n```elixir\ndefmodule ScoreTracker do\n  @moduledoc \"\"\"\n  iex> {:ok, pid} = ScoreTracker.start_link([])\n  iex> ScoreTracker.add_points(pid, 10)\n  :ok\n  iex> ScoreTracker.current_score(pid)\n  10\n  \"\"\"\n  use GenServer\n\n  # Client API\n\n  def start_link(_opts) do\n  end\n\n  def add_points(score_tracker_pid, amount) do\n  end\n\n  def current_score(score_tracker_pid) do\n  end\n\n  # Server API\n\n  def init(_init_arg) do\n  end\n\n  def handle_cast({:add_points, amount}, state) do\n  end\n\n  def handle_call(:current_score, _from, state) do\n  end\nend\n```\n\n## Bonus: Multiplayer Score Tracker\n\nCreate a `MultiplayerScoreTracker` which can track scores for multiple named players.\n\n### Requirements\n\n* The initial score starts as a map `%{}`.\n* Handle an asynchronous `{:add_points, player_name, amount}` message to increment the score state.\n* Handle a synchronous `{:current_score, player_name}` message to retrieve the current score.\n* Handle a synchronous `:all_scores` message to retrieve a map of all scores.\n* Create the `start_link/1`, `current_score/2`, and `add_points/3`, and `all_scores/1` Client API functions as documented below. For sake of practice, you will be required to define any necessary handlers.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, pid} = MultiplayerScoreTracker.start_link([])\n\n:ok = MultiplayerScoreTracker.add_points(pid, :player1, 10)\n:ok = MultiplayerScoreTracker.add_points(pid, :player1, 20)\n:ok = MultiplayerScoreTracker.add_points(pid, :player2, 20)\n\n%{\n  player1: 30,\n  player2: 20\n} = MultiplayerScoreTracker.all_scores(pid)\n\n30 = MultiplayerScoreTracker.current_score(pid, :player1)\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule MultiplayerScoreTracker do\n  use GenServer\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def add_points(multiplayer_score_tracker_pid, player_name, amount) do\n    GenServer.cast(multiplayer_score_tracker_pid, {:add_points, player_name, amount})\n  end\n\n  def all_scores(multiplayer_score_tracker_pid) do\n    GenServer.call(multiplayer_score_tracker_pid, :all_scores)\n  end\n\n  def current_score(multiplayer_score_tracker_pid, player_name) do\n    GenServer.call(multiplayer_score_tracker_pid, {:current_score, player_name})\n  end\n\n  @impl true\n  def init(_opts) do\n    {:ok, %{}}\n  end\n\n  @impl true\n  def handle_cast({:add_points, player_name, amount}, state) do\n    {:noreply, Map.update(state, player_name, amount, fn current -> current + amount end)}\n  end\n\n  @impl true\n  def handle_call(:all_scores, _from, state) do\n    {:reply, state, state}\n  end\n\n  @impl true\n  def handle_call({:current_score, player_name}, _from, state) do\n    {:reply, state[player_name], state}\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule MultiplayerScoreTracker do\n  @moduledoc \"\"\"\n  iex> {:ok, pid} = MultiplayerScoreTracker.start_link([])\n  iex> :ok = MultiplayerScoreTracker.add_points(pid, :player1, 10)\n  iex> :ok = MultiplayerScoreTracker.add_points(pid, :player1, 20)\n  iex> :ok = MultiplayerScoreTracker.add_points(pid, :player2, 20)\n  iex> MultiplayerScoreTracker.all_scores(pid)\n  %{\n    player1: 30,\n    player2: 20\n  }\n  iex> MultiplayerScoreTracker.current_score(pid, :player1)\n  30\n  \"\"\"\n  use GenServer\n\n  def start_link(_opts) do\n  end\n\n  def add_points(multiplayer_score_tracker_pid, player_name, amount) do\n  end\n\n  def all_scores(multiplayer_score_tracker_pid) do\n  end\n\n  def current_score(multiplayer_score_tracker_pid, player_name) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Score Tracker exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Score Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/genserver_drills.livemd\">GenServer Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/stack_server.livemd\">Stack Server</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task87-exercises-capstone_mock", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Capstone Project: Mock\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone Project: Mock\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/capstone_entity_relationship_diagram.livemd\">Capstone Project: Entity-Relationship Diagram</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/liveview.livemd\">LiveView</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Capstone Project: Mock\n\nUse [figma](https://www.figma.com/), pen & paper, or some other tool to design your capstone project.\n\nInclude a link to your figma mock on your `README.md` or upload the photos directly to your capstone GitHub repository.\n\n### Requirements\n\n* Create a simple mock of your capstone project to help you consider the layout of content. This does not need to be a fully-styled mock, just a simple \"sticks and boxes\" layout.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Capstone Project: Mock exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone Project: Mock\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/capstone_entity_relationship_diagram.livemd\">Capstone Project: Entity-Relationship Diagram</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/liveview.livemd\">LiveView</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task88-exercises-command_line_family_tree", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Command Line Family Tree\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line Family Tree\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/iex.livemd\">IEx</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/github_engineering_journal.livemd\">Github Engineering Journal</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Command Line Family Folders\n\nUse the command line to create a `family` folder with the following folder and file structure.\n\n```\n/family\n  /Saida\n    /Aelia\n      /Urbano\n      /Petal\n    /Hagir\n      /Leandro\n      /Helen\n```\n\nNext, create a file for each folder that represents that person's family status. It's better that you do\nthis **after** creating the folder structure above to get more practice moving between folders.\n\n```\n/family\n  /Saida\n    child.txt\n    /Aelia\n      parent.txt\n      /Urbano\n        grandparent.txt\n      /Petal\n        grandparent.txt\n    /Hagir\n      parent.txt\n      /Leandro\n        grandparent.txt\n      /Helen\n        grandparent.txt\n```\n\n> Names were generated using [behindthename.com](https://www.behindthename.com/random/random.php?number=1&sets=1&gender=both&surname=&all=yes.)\n\n<!-- livebook:{\"attrs\":{},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Command Line Family Tree exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line Family Tree\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/iex.livemd\">IEx</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/github_engineering_journal.livemd\">Github Engineering Journal</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task89-exercises-blog_deployment", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Deployment\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Deployment\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_deployment.livemd\">Phoenix Deployment</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_custom_feature.livemd\">Blog: Custom Feature</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Deploy\n\nUse [Fly.io](https://fly.io/) to deploy your [Blog](group_project_blog.livemd) project.\n\n<div style=\"background-color: lightcoral; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;\">\nAt the time of writing, Fly.io allows you to have two free apps. Keep this in mind if you choose to deploy other projects that it may affect your ability to deploy your blog or capstone project.\n</div>\n\n## CI/CD\n\n### Setup Continuous Integration\n\nUse GitHub Actions to setup a CI system that will automatically run tests whenever you make a PR to the `Blog` project.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Setup Continuous Deployment System\n\nUse GitHub Actions to setup a CD system with Fly.io that will automatically deploy your project whenever you merge a PR to the `main` branch.\n\n## Optional Bonus Features\n\nThe following are completely optional features you might add to learn more about deployment and CI/CD.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Production Seeds\n\nCreate a module that will seed your production database with data. Open the IEx shell in your production application and use the module to seed your production database.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Formatting And Warnings CI Check\n\nAdd the following steps to your CI process.\n\nCode formatting:\n\n```\nRun mix format --check-formatted\n```\n\nCheck warnings as errors:\n\n```\nmix compile --warnings-as-errors\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Credo CI Check\n\nAdd [Credo](https://hexdocs.pm/credo/Credo.html) to your project and configure it with your continuous integration system.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Dialyzer CI Check\n\nAdd [Dialyzer](https://github.com/jeremyjh/dialyxir) to your project and configure it with your continuous integration system.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Deployment exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Deployment\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_deployment.livemd\">Phoenix Deployment</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/blog_custom_feature.livemd\">Blog: Custom Feature</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task90-exercises-message_validation", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Message Validation\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Message Validation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/with.livemd\">With</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/user_validation.livemd\">User Validation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Message Validation\n\nYou're going to use guards to create a `Message` module that only allows messages in the form of a string or a `Message` struct with a `:body` field to be sent. Sending a message simply returns a string of the message prepended with `\"Sent: \"`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMessage.send(\"hello!\")\n\"Sent: hello!\"\n\nMessage.send(%Message{body: \"hi!\"})\n\"Sent: hi!\"\n```\n\nInvalid messages should raise a [FunctionClauseError](https://hexdocs.pm/elixir/FunctionClauseError.html).\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMessage.send(123)\n** (FunctionClauseError) no function clause matching in Message.send/1    \n    \n    The following arguments were given to Message.send/1:\n    \n        # 1\n        123\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Message do\n  defstruct [:body]\n  def send(message) when is_binary(message) do\n    \"Sent: \" <> message\n  end\n\n  def send(message) when is_binary(message.body) do\n    \"Sent: \" <> message.body\n  end\nend\n```\n\n</details>\n\nImplement the `Message` module as documented below.\n\n```elixir\ndefmodule Message do\n  @moduledoc \"\"\"\n  Send messages between users.\n  Returns a string of the message if provided valid input.\n\n  ## Examples\n\n    iex> Message.send(\"hello!\")\n    \"Sent: hello!\"\n\n    iex> Message.send(%Message{body: \"hi!\"})\n    \"Sent: hi!\"\n\n    iex> Message.send(123)\n    ** (FunctionClauseError) no function clause matching in Message.send/1\n  \"\"\"\n  defstruct [:body]\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Message Validation exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Message Validation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/with.livemd\">With</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/user_validation.livemd\">User Validation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task91-exercises-math_game", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Math Game\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Math Game\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/liveview_follow_along_counter.livemd\">Follow Along: LiveView Counter</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_messages.livemd\">PicChat: Messages</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Math Game\n\nBuild a mental math game using LiveView.\n\nThe game should:\n\n* Prompt the user with a random math addition question: i.e. `2 + 3`.\n* Have a text input the user can enter their answer into.\n* Have a button users can submit their answer with.\n* Track the score of the user, and increment the score with each correct answer.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Math Game exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Math Game\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/liveview_follow_along_counter.livemd\">Follow Along: LiveView Counter</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/pic_chat_messages.livemd\">PicChat: Messages</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task92-exercises-document_tools", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Document Tools\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Document Tools\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/file_system_todo_app.livemd\">File System Todo</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/file_search.livemd\">File Search</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Document Tools\n\nYou're going to create a `Document` module which provides some convenient function for working with text files.\n\nOnce you have a working solution, consider how you can optimize it to reduce how much of a file you load into memory.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Document do\n  def word_count(file_name) do\n    File.stream!(file_name)\n    |> Stream.map(fn line ->\n      line |> String.split(\" \", trim: true) |> Enum.count()\n    end)\n    |> Enum.sum()\n  end\n\n  def line_count(file_name) do\n    file = File.open!(file_name)\n    count = count_lines(file)\n    File.close(file)\n    count\n  end\n\n  defp count_lines(file, count \\\\ 0) do\n    case IO.read(file, :line) do\n      :eof -> count\n      _ -> count_lines(file, count + 1)\n    end\n  end\n\n  def add_line_numbers(file_name) do\n    lined_content =\n      File.stream!(file_name)\n      |> Stream.with_index()\n      |> Stream.map(fn {line, index} -> \"#{index + 1}. #{line}\" end)\n      |> Enum.join(\"\")\n\n    File.write!(file_name, lined_content)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Document do\n  @moduledoc \"\"\"\n  Documentation for `Document` module.\n  \"\"\"\n\n  @doc ~S\"\"\"\n  Count the number of words in a document.\n\n  ## Examples\n\n      Any sequence of characters separated by a space will be considered a word.\n\n      iex> File.write(\"word_count.txt\", \"one two three\")\n      iex> Document.word_count(\"word_count.txt\")\n      3\n\n      Ensure your solution ignores newline characters.\n\n      iex> File.write(\"word_count.txt\", \"one\\ntwo\\nthree\")\n      iex> Document.word_count(\"word_count.txt\")\n      3\n  \"\"\"\n  def word_count(file_name) do\n  end\n\n  @doc ~S\"\"\"\n  Count the number of words in a document.\n\n  ## Examples\n\n      iex> File.write(\"line_count.txt\", \"line1\\nline2\\nline3\\n\")\n      iex> Document.line_count(\"line_count.txt\")\n      3\n  \"\"\"\n  def line_count(file_name) do\n  end\n\n  @doc ~S\"\"\"\n  Add line numbers formatted as \"X. rest of line\" to an existing file.\n\n  ## Examples\n\n      iex> File.write(\"add_line_numbers.txt\", \"one\\ntwo\\nthree\")\n      iex> Document.add_line_numbers(\"add_line_numbers.txt\")\n      iex> File.read!(\"add_line_numbers.txt\")\n      \"1. one\\n2. two\\n3. three\"\n  \"\"\"\n  def add_line_numbers(file_name) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Document Tools exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Document Tools\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/file_system_todo_app.livemd\">File System Todo</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/file_search.livemd\">File Search</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task93-exercises-games_wordle", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games: Wordle\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Wordle\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/exunit.livemd\">ExUnit</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/documentation_and_static_analysis.livemd\">Documentation And Static Analysis</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Games: Wordle\n\n### Requirements\n\nIn your existing [Games](./games.livemd) project, you're going to create a Wordle game.\n\nWordle is a popular game where players get six attempts to guess a word.\nThey are given feedback clues to guess the word.\n\n* **Green** if the letter is in the word and in the correct spot.\n* **Yellow** if the letter is in the word but in the incorrect spot.\n* **Gray** if the letter is not in the word.\n\nFor example for the word \"TOAST\" the guess \"TARTS\" would be\n\n```mermaid\nflowchart LR\nstyle 1 fill:green\nstyle 2 fill:yellow\nstyle 3 fill:gray\nstyle 4 fill:yellow\nstyle 5 fill:yellow\n\n1[T] --- 2[A] --- 3[R] --- 4[T] --- 5[S]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Tests\n\nYou're going to create a full test suite for the wordle game. Write (at least) the following test cases\n\n* All green\n* All yellow\n* All grey\n* some green, yellow, and grey\n\n> **Bonus: Edge Case**: same letter is all 3 colors\n> \n> ```elixir\n> Games.Wordle.feedback(\"XXXAA\", \"AAAAY\") == [:yellow, :grey, :grey, :green, :grey]\n> ```\n> \n> Handle greens first, then fill out yellows in order. The remaining characters are grey.\n> \n> Be warned, this is a **hard** bonus challenge that significantly increases the complexity of the solution. Consider solving the exercise without this edge-case first.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Feedback/0\n\nYou should be able to start your project by running the following from the `game` folder in\nthe command line.\n\n```\niex -S mix\n```\n\nGiven an answer and a guess, your `Games.Wordle` module will provide feedback as a list of color atoms `:green`, `:yellow`, and `:grey`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n                         #answer   #guess\niex> Games.Wordle.feedback(\"aaaaa\", \"aaaaa\")\n[:green, :green, :green, :green, :green]\n\niex> Games.Wordle.feedback(\"aaaaa\", \"aaaab\")\n[:green, :green, :green, :green, :grey]\n\niex> Games.Wordle.feedback(\"abdce\", \"edcba\")\n[:yellow, :yellow, :yellow, :yellow, :yellow]\n\n# If There Are Duplicate Characters In The Guess Prioritize Exact Matches.\niex> Games.Wordle.feedback(\"aaabb\", \"xaaaa\")\n[:grey, :green, :green, :yellow, :grey]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Play\n\nUse the IEx shell to start a game of Wordle. This should prompt the user to guess a five letter word.\n\n```\niex> Games.Wordle.play()\nEnter a five letter word:  \n```\n\nRandomly generate a word for the wordle game. You might randomly retrieve a word from a list of words such as `[\"toast\", \"tarts\", \"hello\", \"beats\"]`.\n\nRetrieve user input and provide feedback based on their guess. For example, this would be the output if the word `toast` were randomly generated.\n\n```\nEnter a five letter word: tarts\n[:green, :yellow, :grey, :yellow, :yellow]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bonus: Six Guesses\n\nAfter six guesses, the player should lose the game if they do not get the correct answer.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bonus: Color Feedback\n\nUse [IO.ANSI](https://hexdocs.pm/elixir/IO.ANSI.html) to provide actual colored feedback.\n\n```elixir\nIO.puts(IO.ANSI.green() <> \"green\")\nIO.puts(IO.ANSI.yellow() <> \"yellow\")\nIO.puts(IO.ANSI.light_black() <> \"grey\")\n```\n\nMake sure you reset the color.\n\n```elixir\nIO.puts(IO.ANSI.green() <> \"green\" <> IO.ANSI.reset() <> \" reset color\")\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games: Wordle exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Wordle\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/exunit.livemd\">ExUnit</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/documentation_and_static_analysis.livemd\">Documentation And Static Analysis</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task94-exercises-process_mailbox", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Process Mailbox\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Process Mailbox\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/process_drills.livemd\">Process Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/genservers.livemd\">GenServers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Process Mailbox\n\nUsing [spawn/1](https://hexdocs.pm/elixir/Kernel.html#spawn/1), [send/2](https://hexdocs.pm/elixir/Kernel.html#send/2), and `receive` You're going to create a `Mailbox` process which recursively sends and receives messages.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Spawn The Mailbox\n\nThe `Mailbox` should recursively loop and wait to receive a message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmaibox_process = spawn(fn -> Mailbox.loop() end)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Send Mail\n\nSend the mailbox process a `{:send, message}` message and it should store the message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nsend(mailbox_process, {:send, \"You've got mail!\"})\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Read Mail\n\nSend the mailbox process a {:read, from_pid} message and it should send the most recent message back to the sender and remove it from the mailbox.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nsend(mailbox_process, {:read, self()})\n\nreceive do\n  message -> message \nend\n# Returns \"You've Got Mail!\"\n```\n\nIf there are no messages, send an `:empty` message back.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nsend(mailbox_process, {:read, self()})\n\nreceive do\n  message -> message \nend\n# Returns :empty\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Mailbox do\n  def loop(state \\\\ []) do\n    receive do\n      {:send, message} ->\n        IO.inspect(message)\n        loop([message | state])\n\n      {:read, from_pid} ->\n        case state do\n          [head | tail] ->\n            send(from_pid, head)\n            loop(tail)\n\n          [] ->\n            send(from_pid, :empty)\n            loop([])\n        end\n    end\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Mailbox do\n  @moduledoc \"\"\"\n  Documentation for `Mailbox`\n  \"\"\"\n\n  @doc \"\"\"\n  Recursively loop and receive messages.\n  This doctest will timeout if there is no implementation.\n\n  ## Examples\n\n      iex> mailbox_process = spawn(fn -> Mailbox.loop() end)\n      iex> send(mailbox_process, {:send, \"Hello!\"})\n      iex> send(mailbox_process, {:read, self()})\n      iex> receive do\n      ...>  message -> message \n      ...> end\n      \"Hello!\"\n  \"\"\"\n  def loop(state \\\\ []) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Process Mailbox exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Process Mailbox\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/process_drills.livemd\">Process Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/genservers.livemd\">GenServers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task95-exercises-naming_numbers", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Naming Numbers\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Naming Numbers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/control_flow.livemd\">Control Flow</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rock_paper_scissors.livemd\">Rock Paper Scissors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Naming Numbers\n\nIn the Elixir cell below, create a function `naming_numbers` which accepts a\nsingle digit integer and returns its string representation. So `1` would become `\"one\"`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n   0 --> zero\n   1 --> one\n   2 --> two\n   3 --> three\n   4 --> four\n   5 --> five\n   6 --> six\n   7 --> seven\n   8 --> eight\n   9 --> nine\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nnaming_numbers.(1)\n\"one\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Solution Example</summary>\n\n  ```elixir\n  naming_numbers = fn integer ->\n    case integer do\n      0 -> \"zero\"\n      1 -> \"one\"\n      2 -> \"two\"\n      3 -> \"three\"\n      4 -> \"four\"\n      5 -> \"five\"\n      6 -> \"six\"\n      7 -> \"seven\"\n      8 -> \"eight\"\n      9 -> \"nine\"\n    end\n  end\n  ```\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Numbering Names\n\nIn the Elixir cell below, create a function `numbering_names` which accepts a\nnumber's name and returns its string representation. So `\"one\"` would become `1`.\n\nIn addition to accepting lowercase name, also accept uppercase names so `\"One\"` would become `1`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n  zero --> 0\n  one --> 1\n  two --> 2\n  three --> 3\n  four --> 4\n  five --> 5\n  six --> 6\n  seven --> 7\n  eight --> 8\n  nine --> 9\n```\n\n```mermaid\nflowchart\n  Zero --> 0\n  One --> 1\n  Two --> 2\n  Three --> 3\n  Four --> 4\n  Five --> 5\n  Six --> 6\n  Seven --> 7\n  Eight --> 8\n  Nine --> 9\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Solution Example</summary>\n\n\n  We can brute force the solutione using case.\n\n  ```elixir\n  numbering_names = fn int_str ->\n    case int_str do\n      \"zero\" -> 0\n      \"one\" -> 1\n      \"two\" -> 2\n      \"three\" -> 3\n      \"four\" -> 4\n      \"five\" -> 5\n      \"six\" -> 6\n      \"seven\" -> 7\n      \"eight\" -> 8\n      \"nine\" -> 9\n      \"Zero\" -> 0\n      \"One\" -> 1\n      \"Two\" -> 2\n      \"Three\" -> 3\n      \"Four\" -> 4\n      \"Five\" -> 5\n      \"Six\" -> 6\n      \"Seven\" -> 7\n      \"Eight\" -> 8\n      \"Nine\" -> 9\n    end\n  end\n  ```\n\n  Or use [String.downcase/2](https://hexdocs.pm/elixir/String.html#downcase/2) to make the solutione more concise.\n  This has the added benefit of handling mixed case such as `\"ZeRO\"`.\n\n  ```elixir\n  numbering_names = fn int_str ->\n    case String.downcase(int_str) do\n      \"zero\" -> 0\n      \"one\" -> 1\n      \"two\" -> 2\n      \"three\" -> 3\n      \"four\" -> 4\n      \"five\" -> 5\n      \"six\" -> 6\n      \"seven\" -> 7\n      \"eight\" -> 8\n      \"nine\" -> 9\n    end\n  end\n  ```\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Naming Numbers exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Naming Numbers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/control_flow.livemd\">Control Flow</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rock_paper_scissors.livemd\">Rock Paper Scissors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task96-exercises-github_engineering_journal", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Github Engineering Journal\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Github Engineering Journal\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/command_line_family_tree.livemd\">Command Line Family Tree</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/github_collab.livemd\">Github Collab</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Engineering Journal\n\nYou're going to create an engineering journal and connect it with GitHub.\n\n> It's a great habit to keep an engineering journal. You can use your engineering journal to track how you solve problems and what you work on. It's also excellent practice with Git, GitHub, and markdown.\n\n### Requirements\n\n* Create a local project called `engineering_journal`\n* Use [Obsidian](https://obsidian.md/), [Foam](https://github.com/foambubble/foam), an alternative markdown-based journal, or just plain markdown files to create content in your journal.\n* Use `Git` to stage and commit one or more journal entries.\n* Connect your `engineering_journal` project with GitHub and push your changes.\n\nWe highly recommending continuing to use this journal to track what you learn about Elixir.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Github Engineering Journal exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Github Engineering Journal\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/command_line_family_tree.livemd\">Command Line Family Tree</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/github_collab.livemd\">Github Collab</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task97-exercises-games_menu", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games: Menu\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Menu\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/executables.livemd\">Executables</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/advanced_pattern_matching.livemd\">Advanced Pattern Matching</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Games: Menu\n\nConfigure your existing [Games](./games.livemd) project as an escript.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmix escript.build\n$ ./games\n```\n\n### Requirements\n\n* Player can select a game to play (guessing game, rock paper scissors, wordle)\n* Players are re-prompted to select a game to play after finishing a game.\n* Player can stop the program by typing \"stop\" instead of selecting a game.\n\n```\nWhat game would you like to play?\n1. Guessing Game\n2. Rock Paper Scissors\n3. Wordle\n\nenter \"stop\" to exit\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games: Menu exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Menu\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/executables.livemd\">Executables</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/advanced_pattern_matching.livemd\">Advanced Pattern Matching</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task98-exercises-itinerary", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Itinerary\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Itinerary\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/time_converting.livemd\">Time Converting</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/timeline.livemd\">Timeline</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Itinerary\n\nYou are building a day planning application. Users will provide the time it takes to complete an activity in minutes and you will determine if there is enough time to fit the activity between two [DateTime](https://hexdocs.pm/elixir/DateTime.html)s.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Itinerary do\n  def has_time?(start, finish, minutes) do\n    DateTime.diff(finish, start) >= minutes * 60\n  end\nend\n```\n\n</details>\n\nImplement the `Itinerary` module as documented.\n\n```elixir\ndefmodule Itinerary do\n  @doc \"\"\"\n  Given a number of minutes, determine if there is enough time \n  between two `DateTimes` to fit an activity lasting a number of minutes.\n\n  ## Examples\n\n    iex> Itinerary.has_time?(~U[2020-01-01 12:00:00Z], ~U[2020-01-01 12:01:00Z], 1)\n    true\n    \n    iex> Itinerary.has_time?(~U[2020-01-01 12:00:00Z], ~U[2020-01-01 12:10:00Z], 10)\n    true\n\n    iex> Itinerary.has_time?(~U[2020-01-01 07:00:00Z], ~U[2020-01-01 08:00:00Z], 60)\n    true\n\n    iex> Itinerary.has_time?(~U[2020-01-01 12:00:00Z], ~U[2020-01-01 12:30:00Z], 31)\n    false\n\n    iex> Itinerary.has_time?(~U[2020-01-01 07:00:00Z], ~U[2020-01-01 08:00:00Z], 61)\n    false\n    \n  \"\"\"\n  def has_time?(start, finish, minutes) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Itinerary exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Itinerary\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/time_converting.livemd\">Time Converting</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/timeline.livemd\">Timeline</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task99-exercises-book_changeset", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Book Changeset\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:ecto, \"~> 3.9.5\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Book Changeset\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/sign_up_form.livemd\">Sign Up Form</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/agents_and_ets.livemd\">State: Agent And ETS</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Book Changeset\n\nYou're going to create a `Book` schemaless changeset struct. A book should have:\n\n* A required `:title` field between `3` and `100` characters.\n* A required `:content` string field.\n* A `:published_on` date field.\n* A `:category` field which must be either `\"action\"`, `\"fiction\"`, or `\"mystery\"` (you may choose to add more categories if you wish)\n* A `:books_sold` integer which must be `0` or above.\n* A `:publisher_email` field which must be in the format `name@domain.extension`\n* An `:author` string field.\n* An `:has_license` field which must always be true.\n* A `:price` integer field which must be above `0`.\n\nFor example, creating a book with the following invalid fields would return an `{:error, changeset}` tuple similar to the following.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nBook.new(%{category: \"invalid\", email: \"invalid\", books_sold: -1, price: -1})\n{:error,\n #Ecto.Changeset<\n   action: :update,\n   changes: %{books_sold: -1, category: \"invalid\", price: -1},\n   errors: [\n     price: {\"must be greater than %{number}\",\n      [validation: :number, kind: :greater_than, number: 0]},\n     has_license: {\"must be accepted\", [validation: :acceptance]},\n     books_sold: {\"must be greater than or equal to %{number}\",\n      [validation: :number, kind: :greater_than_or_equal_to, number: 0]},\n     category: {\"is invalid\", [validation: :inclusion, enum: [\"action\", \"fiction\", \"mystery\"]]},\n     title: {\"can't be blank\", [validation: :required]},\n     content: {\"can't be blank\", [validation: :required]}\n   ],\n   data: #Book<>,\n   valid?: false\n >}\n\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nRead the [Ecto.Changeset](https://hexdocs.pm/ecto/Ecto.Changeset.html) documentation.\nThere, you'll find all of the `validate*` functions necessary for each field. For example, [Ecto.Changeset.validate_change/3](https://hexdocs.pm/ecto/Ecto.Changeset.html#validate_change/3) allows you to create custom validation.\n\nYou can also refer to the [primitive types](https://hexdocs.pm/ecto/Ecto.Schema.html#module-primitive-types) documentation for the list of allowed field types.\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Book do\n  @types %{\n    title: :string,\n    content: :string,\n    published_on: :date,\n    category: :string,\n    books_sold: :integer,\n    publisher_email: :string,\n    author: :string,\n    has_license: :boolean,\n    price: :integer\n  }\n\n  @keys Map.keys(@types)\n  \n  defstruct @keys\n\n  def changeset(%__MODULE__{} = user, params \\\\ %{}) do\n    {user, @types}\n    |> Ecto.Changeset.cast(params, @keys)\n    |> Ecto.Changeset.validate_required([:title, :content])\n    |> Ecto.Changeset.validate_length(:title, min: 3, max: 100)\n    |> Ecto.Changeset.validate_inclusion(:category, [\"action\", \"fiction\", \"mystery\"])\n    |> Ecto.Changeset.validate_number(:books_sold, greater_than_or_equal_to: 0)\n    |> Ecto.Changeset.validate_change(:publisher_email, fn :publisher_email, publisher_email ->\n      if Regex.match?(~r/\\w+@\\w+\\.\\w+/, publisher_email) do\n        []\n      else\n        [email: \"invalid email\"]\n      end\n    end)\n    |> Ecto.Changeset.validate_acceptance(:has_license)\n    |> Ecto.Changeset.validate_number(:price, greater_than: 0)\n  end\n\n  def new(params) do\n    %__MODULE__{}\n    |> changeset(params)\n    |> Ecto.Changeset.apply_action(:update)\n  end\nend\n```\n\n</details>\n\nYou should rely on Ecto Changesets and your own custom validation to validate the book information. Enter your solution below.\n\n```elixir\ndefmodule Book do\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Book Changeset exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Book Changeset\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/sign_up_form.livemd\">Sign Up Form</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/agents_and_ets.livemd\">State: Agent And ETS</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task100-exercises-meta_math", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# MetaMath\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=MetaMath\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/metaprogramming.livemd\">Metaprogramming</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/custom_assertions.livemd\">Custom Assertions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## MetaMath\n\nYou're creating a math game. Players will be given math questions in the format `\"2 + 2\"`.\n\nThe string can contain multiple operations in any order such as `\"2 + 10 * 23 - 10\"`\n\nYou need to determine the correct result to check with the player's answer.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMath.correct?(\"2 + 2\", 4) # true \nMath.correct?(\"2 + 2\", 5) # false\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Math do\n  def correct?(equation, player_answer) do\n    {result, _bindings} = Code.eval_string(equation)\n    result == player_answer\n  end\nend\n```\n\n</details>\n\nImplement the `Math` module as documented.\n\n```elixir\ndefmodule Math do\n  @doc \"\"\"\n  Determine if a player's answer matches the result of the math expression in the string.\n\n  iex> Math.correct?(\"1 + 1\", 2)\n  true\n  iex> Math.correct?(\"1 + 1\", 4)\n  false\n  iex> Math.correct?(\"1 - 1\", 0)\n  true\n  iex> Math.correct?(\"10 + 14 * 4 - 2\", 64)\n  true\n  \"\"\"\n  def correct?(equation, player_answer) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish MetaMath exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=MetaMath\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/metaprogramming.livemd\">Metaprogramming</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/custom_assertions.livemd\">Custom Assertions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task101-exercises-stack_server", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Stack Server\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stack Server\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/score_tracker.livemd\">Score Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/timer.livemd\">Timer</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Stack\n\nYou're going to create a `Stack` [GenServer](https://hexdocs.pm/elixir/GenServer.html).\n\nA stack is a common data structure similar to a list, however a stack can only **push** elements onto the top of the stack, and **pop** elements from the top of the stack.\n\n### Requirements\n\n* The initial stack state starts as an empty list `[]`.\n* Create the `push/2`, `pop/1`, and `start_link/1` functions as documented below.\n* Define the necessary server callbacks that update the stack's state.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, pid} = Stack.start_link([])\n\n# Asynchronous\n:ok = Stack.push(pid, 1)\n:ok = Stack.push(pid, 2)\n:ok = Stack.push(pid, 3)\n\n# Synchronous\n3 = Stack.pop(pid)\n2 = Stack.pop(pid)\n1 = Stack.pop(pid)\nnil = Stack.pop(pid)\n```\n\n```elixir\ndefmodule Stack do\n  @moduledoc \"\"\"\n  iex> {:ok, pid} = Stack.start_link([])\n  iex> :ok = Stack.push(pid, 1)\n  iex> Stack.pop(pid)\n  1\n  iex> Stack.pop(pid)\n  nil\n  \"\"\"\n\n  use GenServer\n\n  def start_link(_opts) do\n  end\n\n  def push(stack_pid, element) do\n  end\n\n  def pop(stack_pid) do\n  end\n\n  # Define the necessary Server callback functions:\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Stack Server exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stack Server\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/score_tracker.livemd\">Score Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/timer.livemd\">Timer</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task102-exercises-group_project_blog_presentation", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Group Project: Presentation\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Group Project: Presentation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_custom_feature.livemd\">Blog: Custom Feature</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/capstone_project_guide.livemd\">Capstone Project Guide</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Requirements\n\nLook back to the requirements for the [Blog](group_project_blog.livemd) project and ensure all of your features match the stated requirements. Speak with your instructor if you would like clarity on anything.\n\n## Presentation\n\nGroups will present their projects to the rest of the class. In your presentation include the following:\n\n* An overview of the project and how it works\n* Highlight one aspect of the code that was particularly challenging or engaging. Show code examples.\n* Features that you would be interested in expanding upon or any bugs/issues you would like to solve if you had the time.\n\nThe presentation will be done informally to the rest of the class to mimic how you would present a feature internally on a development team. During and after each presentation (time permitting) students will engage in group discussion to learn from eachother's experiences.\n\nThere is no time limit, but typically these types of internal presentations last around `15` minutes.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Group Project: Presentation exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Group Project: Presentation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_custom_feature.livemd\">Blog: Custom Feature</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/capstone_project_guide.livemd\">Capstone Project Guide</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task103-exercises-capstone_entity_relationship_diagram", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Capstone Project: Entity-Relationship Diagram\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone Project: Entity-Relationship Diagram\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/capstone_github_project.livemd\">Capstone GitHub Project</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/capstone_mock.livemd\">Capstone Project: Mock</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Capstone Project: Entity Relationship Diagram\n\nIn the `README.md` of your capstone project, create an entity-relationship diagram with mermaid.\n\nHere's an example Entity-Relationship Diagram that describes the data and associations in the blog project.\n\n```mermaid\nerDiagram\nUser {\n  string username\n  string email\n  string password\n  string hashed_password\n  naive_datetime confirmed_at\n}\n\nPost {\n    string title\n    text content\n    date published_on\n    boolean visibility\n}\n\nCoverImage {\n    text url\n    id post_id\n}\n\nComment {\n  text content\n  id post_id\n}\n\nTag {\n    string name\n}\n\nUser |O--O{ Post: \"\"\nPost }O--O{ Tag: \"\"\nPost ||--O{ Comment: \"\"\nPost ||--|| CoverImage: \"\"\n```\n\nSee https://mermaid.js.org/syntax/entityRelationshipDiagram.html for the syntax.\n\n### Requirements\n\n* Document the entities and their fields.\n* Document the associations (many-to-one, many-to-many, one-to-one).\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Capstone Project: Entity-Relationship Diagram exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone Project: Entity-Relationship Diagram\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/capstone_github_project.livemd\">Capstone GitHub Project</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/capstone_mock.livemd\">Capstone Project: Mock</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task104-exercises-custom_enum_with_reduce", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Custom Enum With Reduce\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Enum With Reduce\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/number_finder.livemd\">Number Finder</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/data_traversal.livemd\">Data Traversal</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Custom Enum With Reduce\n\nYou're going to use [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) and/or [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) to re-implement several of the [Enum](https://hexdocs.pm/elixir/Enum.html) module's functions. Only implement these functions for **lists**.\n\n<details style=\"background-color: lightgreen; padding: 1rem;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule CustomEnum do\n  def reverse(list) do\n    Enum.reduce(list, [], fn each, acc -> [each | acc] end)\n  end\n\n  def map(list, callback_function) do\n    Enum.reduce(list, [], fn each, acc ->\n      [callback_function.(each) | acc]\n    end)\n    |> Enum.reverse()\n  end\n\n  def filter(list, callback_function) do\n    Enum.reduce(list, [], fn each, acc ->\n      if callback_function.(each) do\n        [each | acc]\n      else\n        acc\n      end\n    end)\n    |> Enum.reverse()\n  end\n\n  def sum(list) do\n    Enum.reduce(list, 0, fn each, acc -> acc + each end)\n  end\n\n  def join(list_of_strings) do\n    Enum.reduce(list_of_strings, \"\", fn str, acc -> acc <> str end)\n  end\nend\n```\n\n</details>\n\nImplement the `CustomEnum` module according to the documentation below.\n\n```elixir\ndefmodule CustomEnum do\n  @moduledoc \"\"\"\n  Documentation for `CustomEnum`.\n  Re-implement common [Enum](https://hexdocs.pm/elixir/Enum.html) functions using [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) or [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3).\n  \"\"\"\n\n  @doc \"\"\"\n  Reverse a list\n\n  ## Examples\n\n    iex> CustomEnum.reverse([1, 2, 3])\n    [3, 2, 1]\n\n    iex> CustomEnum.reverse([4, 5, 6, 7])\n    [7, 6, 5, 4]\n  \"\"\"\n  def reverse(list) do\n  end\n\n  @doc \"\"\"\n  Map over a list\n\n  ## Examples\n\n    iex> CustomEnum.map([1, 2, 3], fn integer -> integer * 2 end)\n    [2, 4, 6]\n\n    iex> CustomEnum.map([5, 4, 3], fn integer -> is_integer(integer) end)\n    [true, true, true]\n  \"\"\"\n  def map(list, callback_function) do\n  end\n\n  @doc \"\"\"\n  Filter elements in a list. Keep elements that return `true` when called with the\n  provided callback function.\n\n  ## Examples\n\n    iex> CustomEnum.filter([1, 2, \"3\"], fn int -> is_integer(int) end)\n    [1, 2]\n\n    iex> CustomEnum.filter([1, \"2\", \"3\"], fn char -> is_bitstring(char) end)\n    [\"2\", \"3\"]\n  \"\"\"\n  def filter(list, callback_function) do\n  end\n\n  @doc \"\"\"\n  Sum a list of integers.\n\n  ## Examples\n\n    iex> CustomEnum.sum([1, 2, 3])\n    6\n\n    iex> CustomEnum.sum([1, 1, 1])\n    3\n  \"\"\"\n  def sum(list_of_integers) do\n  end\n\n  @doc \"\"\"\n  Join a list of strings together.\n\n  ## Examples\n\n    iex> CustomEnum.join([\"A\", \"B\", \"C\"])\n    \"ABC\"\n\n    iex> CustomEnum.join([\"Hello\", \",\", \" \", \"World\", \"!\"])\n    \"Hello, World!\"\n  \"\"\"\n  def join(list_of_strings) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Custom Enum With Reduce exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Enum With Reduce\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/number_finder.livemd\">Number Finder</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/data_traversal.livemd\">Data Traversal</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task105-exercises-phone_number_parsing", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Phone Number Parsing\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phone Number Parsing\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rollable_expressions.livemd\">Rollable Expressions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/recursion.livemd\">Recursion</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Phone Number Parsing\n\nYou have been provided a large string of phone numbers. The problem is, each phone number does\nnot follow a standard format.\n\nYou have been asked to convert them from the non standardized format into a standard format.\n\nPhone numbers will be given in the following formats:\n\n* `1231231234`\n* `123 123 1234`\n* `(123)-123-1234`\n* `(123) 123 1234`\n* `(123)123-1234`\n\nYou need to convert them into the format `123-123-1234`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ntext = \"\"\"\n1231231234\n123 123 1234\n(123)-123-1234\n(123) 123 1234\n(123)123-1234\n\"\"\"\nPhoneNumber.parse(text)\n\"\"\"\n123-123-1234\n123-123-1234\n123-123-1234\n123-123-1234\n123-123-1234\n\"\"\"\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nConsider using regular expressions with digits and capture groups to replace\nphone number expressions in the string.\n\nYou can replace expressions one at a time, rather than all at once.\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule PhoneNumber\n  def parse(string) do\n    replacement = \"\\\\1-\\\\2-\\\\3\"\n\n    string\n    |> String.replace(~r/(\\d{3})(\\d{3})(\\d{4})/, replacement)\n    |> String.replace(~r/(\\d{3}) (\\d{3}) (\\d{4})/, replacement)\n    |> String.replace(~r/\\((\\d{3})\\)-(\\d{3})-(\\d{4})/, replacement)\n    |> String.replace(~r/\\((\\d{3})\\) (\\d{3}) (\\d{4})/, replacement)\n    |> String.replace(~r/\\((\\d{3})\\)(\\d{3})-(\\d{4})/, replacement)\n  end\nend\n```\n\n</details>\n\nImplement the `PhoneNumber` module as documented below.\n\n```elixir\ndefmodule PhoneNumber do\n  @moduledoc \"\"\"\n  Documentation for `PhoneNumber`\n  \"\"\"\n\n  @doc \"\"\"\n  Parse phone numbers and convert them to XXX-XXX-XXXX format.\n\n  ## Examples\n\n    iex> PhoneNumber.parse(\"1231231234\")\n    \"123-123-1234\"\n\n    iex> PhoneNumber.parse(\"123 123 1234\")\n    \"123-123-1234\"\n\n    iex> PhoneNumber.parse(\"(123)-123-1234\")\n    \"123-123-1234\"\n\n    iex> PhoneNumber.parse(\"(123) 123 1234\")\n    \"123-123-1234\"\n\n    iex> PhoneNumber.parse(\"(123)123-1234\")\n    \"123-123-1234\"\n\n    iex> PhoneNumber.parse(\"1231231234 4564564567\")\n    \"123-123-1234 456-456-4567\"\n  \"\"\"\n  def parse(string) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Phone Number Parsing exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phone Number Parsing\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rollable_expressions.livemd\">Rollable Expressions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/recursion.livemd\">Recursion</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task106-exercises-stream_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Stream Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stream Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/file.livemd\">File</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/file_drills.livemd\">File Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Stream Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for [Streams](../reading/streams.livemd). Follow the instructions for each drill and complete them as quickly as you can.\n\n## Stream.map/2\n\nUse [Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2) to double elements in a range from `1..10`, then use [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to convert the resulting stream into a list `[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]`\n\n```elixir\n\n```\n\nUse [Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2) and [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to sum a list of tuple pairs `[{1, 1}, {2, 2}, {3, 3}]` into `[2, 4, 6]`.\n\n```elixir\n\n```\n\n## Stream.filter/2\n\nUse [Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2) and [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to filter even numbers from a range `1..10` to return `[2, 4, 6, 8, 10]`.\n\n```elixir\n\n```\n\nUse [Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2) and [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to filter numbers greater than `5` from a range `1..10` to return `[6, 7, 8, 9, 10]`.\n\n```elixir\n\n```\n\n## Stream.cycle/1\n\nUse [Stream.cycle/1](https://hexdocs.pm/elixir/Stream.html#cycle/1) with [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate the list `[1, 2, 3, 1, 2, 3, 1, 2, 3]`.\n\n```elixir\n\n```\n\nUse [Stream.cycle/1](https://hexdocs.pm/elixir/Stream.html#cycle/1) with [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate the list `[\"a\", \"b\", \"a\", \"b\"]`\n\n```elixir\n\n```\n\n## Stream.iterate/2\n\nUse [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of numbers from `1` to `10`.\n\n```elixir\n\n```\n\nUse [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of negative numbers from `0` to `-10`.\n\n```elixir\n\n```\n\nUse [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of `2` to increasing powers by multiplying the accumulator by two. i.e. $2^1$, $2^2$, $2^3$, $2^4$.\n\n```elixir\n\n```\n\n## Stream.unfold/2\n\nUse [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of `10` cubed numbers. i.e. $1^3, 2^3, 3^3$\n\n```elixir\n\n```\n\nUse [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of `5` integers as strings. `[\"1\", \"2\", \"3\", \"4\", \"5\"]`.\n\n```elixir\n\n```\n\nUse [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of integers from `1` to `10` divided by `2`.\n\n```elixir\n\n```\n\n## Stream.chunk_every/2\n\nUse [Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2) with [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to chunk `[1, 1, 2, 2, 3, 3]` into `[[1, 1], [2, 2], [3, 3]]`\n\n```elixir\n\n```\n\nUse [Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2) to chunk `[1, 1, 1, 2, 2, 2]` into `[[1, 1, 1], [2, 2, 2]]`\n\n```elixir\n\n```\n\nUse [Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2) to chunk `[1, 2, 2, 1, 4, 4]` into pairs, then use [Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2) to sum the pairs together to make `[3, 3, 8]`.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Stream Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Stream Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/file.livemd\">File</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/file_drills.livemd\">File Drills</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task107-exercises-liveview_follow_along_counter", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Follow Along: LiveView Counter\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Follow Along: LiveView Counter\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/liveview.livemd\">LiveView</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/math_game.livemd\">Math Game</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Review Questions\n\nUpon completing this lesson, a student should be able to answer the following questions.\n\n* How do we mount a LiveView on a given route in the router?\n* What is the lifecycle of a LiveView?\n* How is information stored and set in the socket?\n* How do we send messages to a LiveView and handle them?\n\n## Follow Along: Counter\n\nWe're going to build a `LiveViewCounter` application to learn more about LiveView. Users will click a button that increments the count on the page.\n\nYou're also going to create a form with text input that can increment the count by a specific amount.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Scaffold Application\n\nFirst, let's create a new `LiveViewCounter` Phoenix application.\n\n```\n$ mix phx.new live_view_counter --no-ecto\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Start The Server\n\nWe can start the server normally.\n\n```\n$ mix phx.server\n```\n\nThe server should automatically reload every time we change our code. If you are a Linux user, you may have to install [inotify-tools](https://hexdocs.pm/phoenix/installation.html#inotify-tools-for-linux-users).\n\n## Define Live Route\n\nThe [Phoenix.Router](https://hexdocs.pm/phoenix/Phoenix.Router.html) uses the [Phoenix.LiveView.Router.live/4](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Router.html#live/4) macro to define the route handled by the [Phoenix.LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html).\n\nLet's replace the default index route with a LiveView. We haven't yet created the `CounterLive` LiveView, but we'll do that next.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Counter_web/router.ex\nscope \"/\", LiveViewCounterWeb do\n  pipe_through :browser\n\n  live \"/\", CounterLive, :counter\nend\n```\n\n## Create A LiveView\n\n### CounterLive\n\nNow, create a new `live_view_counter_web/live` folder. This folder will store our LiveViews. In the folder, create a `live_view_counter_web/live/counter_live.ex` with the following content.\n\nThe `~H` is a sigil used to define a HEEX (HTML + EEx) template. Remember that [sigils](https://elixir-lang.org/getting-started/sigils.html) are a textual way of working with data in Elixir.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule LiveViewCounterWeb.CounterLive do\n  use LiveViewCounterWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, socket}\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <h1>Counter</h1>\n    \"\"\"\n  end\nend\n```\n\n## Display The Count\n\nStore the initial count in the socket and display it on the page using the embedded Elixir syntax.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule LiveViewCounterWeb.CounterLive do\n  use LiveViewCounterWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, :count, 0)}\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <h1>Counter</h1>\n    <p>Count: <%= @count %></p>\n    \"\"\"\n  end\nend\n```\n\n## Increment The Count\n\nTo increment this count, we'll make a button the user can click. This button will trigger a `phx-click` event with the `\"increment\"` message. This event is then handled by a corresponding handler, which increments the count in state.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule LiveViewCounterWeb.CounterLive do\n  use LiveViewCounterWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, :count, 0)}\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <p>Count: <%= @count %></p>\n    <.button id=\"increment-button\" phx-click=\"increment\">Increment</.button>\n    \"\"\"\n  end\n\n  def handle_event(\"increment\", _, socket) do\n    {:noreply, assign(socket, count: socket.assigns.count + 1)}\n  end\nend\n```\n\n## Increment Count Form\n\nHere's a simple form that submits the value provided and increments the count by that value.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule LiveViewCounterWeb.CounterLive do\n  use LiveViewCounterWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, count: 0, form: to_form(%{\"increment_by\" => 1}))}\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <h1>Counter</h1>\n    <p>Count: <%= @count %></p>\n    <.button id=\"increment-button\" phx-click=\"increment\">Increment</.button>\n    <.simple_form id=\"increment-form\" for={@form} phx-submit=\"increment_by\">\n      <.input type=\"number\" field={@form[:increment_by]} label=\"Increment Count\"/>\n      <:actions>\n        <.button>Increment</.button>\n      </:actions>\n    </.simple_form>\n    \"\"\"\n  end\n\n  def handle_event(\"increment\", _, socket) do\n    {:noreply, assign(socket, count: socket.assigns.count + 1)}\n  end\n\n  def handle_event(\"increment_by\", params, socket) do\n    {:noreply,\n     assign(socket,\n       count: String.to_integer(params[\"increment_by\"]) + socket.assigns.count\n     )}\n  end\nend\n```\n\n## Increment Count Form Validation\n\nThis form demonstrates using both a `phx-change` and `phx-submit` event to validate the count and display errors. if the data is valid, then the count is incremented by the amount in the forms `:increment_by` field.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefmodule LiveViewCounterWeb.CounterLive do\n  use LiveViewCounterWeb, :live_view\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, count: 0, form: to_form(%{\"increment_by\" => 1}))}\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <h1>Counter</h1>\n    <p>Count: <%= @count %></p>\n    <.button id=\"increment-button\" phx-click=\"increment\">Increment</.button>\n    <.simple_form id=\"increment-form\" for={@form} phx-change=\"change\" phx-submit=\"increment_by\">\n      <.input type=\"number\" field={@form[:increment_by]} label=\"Increment Count\"/>\n      <:actions>\n        <.button>Increment</.button>\n      </:actions>\n    </.simple_form>\n    \"\"\"\n  end\n\n  def handle_event(\"increment\", _, socket) do\n    {:noreply, assign(socket, count: socket.assigns.count + 1)}\n  end\n\n  def handle_event(\"change\", params, socket) do\n    socket =\n      case Integer.parse(params[\"increment_by\"]) do\n        :error ->\n          assign(socket,\n            form: to_form(params, errors: [increment_by: {\"Must be a valid integer\", []}])\n          )\n\n        _ ->\n          assign(socket, form: to_form(params))\n      end\n\n    {:noreply, socket}\n  end\n\n  def handle_event(\"increment_by\", params, socket) do\n    socket =\n      case Integer.parse(params[\"increment_by\"]) do\n        :error ->\n          assign(socket,\n            form: to_form(params, errors: [increment_by: {\"Must be a valid integer\", []}])\n          )\n\n        {int, _rest} ->\n          assign(socket, count: socket.assigns.count + int)\n      end\n\n    {:noreply, socket}\n  end\nend\n\n```\n\n## Tests\n\nHere are some simple test examples for testing the increment button and the increment form in our LiveView. They aren't comprehensive, but they provide a good skeleton for you to understand the basics of LiveView testing.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Test/live_view_counter_web/live/counter_live_test.exs\ndefmodule LiveViewCounterWeb.CounterLiveTest do\n  use LiveViewCounterWeb.ConnCase, async: true\n  import Phoenix.LiveViewTest\n\n  test \"increment count\", %{conn: conn} do\n    {:ok, view, html} = live(conn, \"/\")\n    assert html =~ \"Count: 0\"\n\n    assert view\n           |> element(\"#increment-button\", \"Increment\")\n           |> render_click() =~ \"Count: 1\"\n  end\n\n  test \"increment by count\", %{conn: conn} do\n    {:ok, view, html} = live(conn, \"/\")\n    assert html =~ \"Count: 0\"\n\n    assert view\n           |> form(\"#increment-form\")\n           |> render_submit(%{increment_by: \"3\"}) =~ \"Count: 3\"\n  end\nend\n\n```\n\n## Finishing Touches\n\nMake sure all tests pass. Remove any unnecessary boilerplate generated by Phoenix such as the page controller and page controller tests.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bonus: Your Turn\n\nMake the count automatically increment every second.\n\n## Further Reading\n\nConsider the following resource(s) to deepen your understanding of the topic.\n\n* [HexDocs: LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)\n* [HexDocs: Phoenix.HTML](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html)\n* [Elixir Schools: LiveView](https://elixirschool.com/blog/phoenix-live-view/)\n* [PragProg: Programming Phoenix LiveView](https://pragprog.com/titles/liveview/programming-phoenix-liveview/)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Follow Along: LiveView Counter exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Follow Along: LiveView Counter\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/liveview.livemd\">LiveView</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/math_game.livemd\">Math Game</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task108-exercises-file_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# File Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/stream_drills.livemd\">Stream Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/save_game.livemd\">Save Game</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## File Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for the [File](../reading/file.livemd) module. Follow the instructions for each drill and complete them as quickly as you can.\n\n## File\n\nUse [File.ls/1](https://hexdocs.pm/elixir/File.html#ls/1) to list all of the files/folders in the current path.\n\n```elixir\n\n```\n\nUse [File.ls/1](https://hexdocs.pm/elixir/File.html#ls/1) to list all of the files/folders in the parent directory of the current path.\n\n```elixir\n\n```\n\nUse [File.mkdir/1](https://hexdocs.pm/elixir/File.html#mkdir/1) to create a directory called `drills`.\n\n```elixir\n\n```\n\nUse [File.dir?/2](https://hexdocs.pm/elixir/File.html#dir?/2) to check that `drills` is a folder.\n\n```elixir\n\n```\n\nUse [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create an empty file called `drills.txt`.\n\n```elixir\n\n```\n\nUse [File.exists?/2](https://hexdocs.pm/elixir/File.html#exists?/2) to check that the `drills.txt` file exists.\n\n```elixir\n\n```\n\nUse [File.dir?/2](https://hexdocs.pm/elixir/File.html#dir?/2) to check that `drills.txt` is not a folder.\n\n```elixir\n\n```\n\nUse [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create a filed called `hello.txt` with the content `\"world\"`.\n\n```elixir\n\n```\n\nUse [File.read/1](https://hexdocs.pm/elixir/File.html#read/1) to read the content of the `hello.txt` file.\n\n```elixir\n\n```\n\nUse [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create an empty file in the `drills` folder you previously created.\n\n```elixir\n\n```\n\nUse [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create an `error/no_entity.txt` file that should return `{:error, :enoent}` because the `error` folder does not exist.\n\n```elixir\n\n```\n\nUse [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create a file `multi-line.txt` with a multi-line string.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmultiline_string = \"\"\"\nline 1\nline 2\nline 3\nline 4\nline 5\n\"\"\"\n```\n\n```elixir\n\n```\n\nUse [File.read/1](https://hexdocs.pm/elixir/File.html#read/1) to read `multi-line.txt`.\n\n```elixir\n\n```\n\nUse [File.stream!/3](https://hexdocs.pm/elixir/File.html#stream!/3) to read each line of `multi-line.txt` and convert it to a list of lines using [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1).\n\n```elixir\n\n```\n\nUse [File.stream!/3](https://hexdocs.pm/elixir/File.html#stream!/3) and [Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2) to filter in lines from `multi-line.txt` that contain numbers less than `3`.\n\nUse [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to re-write `multi-line.txt` with only the filtered lines.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n\"\"\"\nline 1\nline 2\nline 3\n\"\"\"\n```\n\n```elixir\n\n```\n\nUse [File.open/2](https://hexdocs.pm/elixir/File.html#open/2), [IO.binread/2](https://hexdocs.pm/elixir/IO.html#binread/2), and [File.close/1](https://hexdocs.pm/elixir/File.html#close/1) to read the first line of `multi-line.txt`. Print the value.\n\n```elixir\n\n```\n\nUse [File.mkdir_p/1](https://hexdocs.pm/elixir/File.html#mkdir_p/1) to create:\n\n* `\"parent/sub_a/\"`\n* `\"parent/sub_b\"`\n* `\"parent/sub_c\"`\n\n```elixir\n\n```\n\nUse [File.write!/3](https://hexdocs.pm/elixir/File.html#write!/3) to create six empty files:\n\n* `\"parent/sub_a/file.txt\"`\n* `\"parent/sub_a/file\"`\n* `\"parent/sub_b/file.txt\"`\n* `\"parent/sub_b/file\"`\n* `\"parent/sub_c/file.txt\"`\n* `\"parent/sub_c/file\"`\n\n```elixir\n\n```\n\nUse [File.ls!/1](https://hexdocs.pm/elixir/File.html#ls!/1) to find all of the files/folders inside of the `parent` folder.\n\n```elixir\n\n```\n\n## Path\n\nUse [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) to join `\"/parent/\"` and `\"/child/\"`\n\n```elixir\n\n```\n\nUse [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) to join `\"parent\"` and `\"child\"`\n\n```elixir\n\n```\n\nUse [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) to join `\"folder\"` and `\"file.txt\"`.\n\n```elixir\n\n```\n\nUse [Path.absname/1](https://hexdocs.pm/elixir/Path.html#absname/1) to convert the current path `\".\"` to an absolute path.\n\n```elixir\n\n```\n\nUse [Path.dirname/1](https://hexdocs.pm/elixir/Path.html#dirname/1) to find the directory name of `\"folder/subfolder/file.txt\"`\n\n```elixir\n\n```\n\nUse [Path.dirname/1](https://hexdocs.pm/elixir/Path.html#dirname/1) to find the directory name of `\"file.txt\"`.\n\n```elixir\n\n```\n\nUse [Path.wildcard/2](https://hexdocs.pm/elixir/Path.html#wildcard/2) to find all files in a nested folder `\"parent/*\"` that end in a `.txt` extension. You should see your three `file.txt` files created earlier.\n\n```elixir\n\n```\n\nUse [File.rm_rf/1](https://hexdocs.pm/elixir/File.html#rm_rf/1) to delete all folders created by this exercise.\n\n<div style=\"background-color: lightcoral; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;\">\nCAUTION: DO NOT DELETE IMPORTANT FILES ON YOUR COMPUTER.\n</div>\n\n```elixir\n\n```\n\nUse [File.rm/1](https://hexdocs.pm/elixir/File.html#rm/1) to delete any remaining files created by this exercise.\n\n<div style=\"background-color: lightcoral; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;\">\nCAUTION: DO NOT DELETE IMPORTANT FILES ON YOUR COMPUTER.\n</div>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish File Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/stream_drills.livemd\">Stream Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/save_game.livemd\">Save Game</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task109-exercises-fizzbuzz", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# FizzBuzz\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=FizzBuzz\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/enum.livemd\">Enum</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/named_number_lists.livemd\">Named Number Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## FizzBuzz\n\nIn the Elixir cell below create a Module `FizzBuzz` with a function `run/1` which takes in a **range**.\n\nEnumerate through the integers and return a new list where\n\n* integers divisible by `3` are replaced with `fizz`\n* integers divisible by `5` are replaced with `buzz`\n* integers divisible by `3` and `5` are replaced with `fizzbuzz`\n* integers not matching the above stay the same.\n\nFor example,\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nFizzBuzz.run(1..15)\n[1, 2, \"fizz\", 4, \"buzz\", \"fizz\", 7, 8, \"fizz\", \"buzz\", 11, \"fizz\", 13, 14, \"fizzbuzz\"]\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n  ```elixir\n  defmodule FizzBuzz do\n    def run(range) do\n      Enum.map(range, fn int ->\n        cond do\n          rem(int, 3) == 0 and rem(int, 5) == 0 -> \"fizzbuzz\"\n          rem(int, 3) == 0 -> \"fizz\"\n          rem(int, 5) == 0 -> \"buzz\"\n          true -> int\n        end\n      end)\n    end\n  end\n\n  FizzBuzz.run(1..100)\n  ```\n</details>\n\nEnter your solution below.\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=QPZ0pIK_wsc&ab_channel=TomScott\\\")\",\"title\":\"FizzBuzz\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=QPZ0pIK_wsc&ab_channel=TomScott\")\n```\n\n```elixir\ndefmodule FizzBuzz do\n  @doc \"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n    iex> FizzBuzz.run(1..15)\n    [1, 2, \"fizz\", 4, \"buzz\", \"fizz\", 7, 8, \"fizz\", \"buzz\", 11, \"fizz\", 13, 14, \"fizzbuzz\"]\n\n    iex> FizzBuzz.run(10..15)\n    [\"buzz\", 11, \"fizz\", 13, 14, \"fizzbuzz\"]\n  \"\"\"\n  def run(range) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish FizzBuzz exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=FizzBuzz\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/enum.livemd\">Enum</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/named_number_lists.livemd\">Named Number Lists</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task110-exercises-battle_map", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"archer_attack.png\",\"type\":\"attachment\"},{\"name\":\"barbarian_attack.png\",\"type\":\"attachment\"},{\"name\":\"battle_map.png\",\"type\":\"attachment\"},{\"name\":\"wizard_attack.png\",\"type\":\"attachment\"}]} -->\n\n# Battle Map\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Battle Map\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/math_with_protocols.livemd\">Math With Protocols</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/streams.livemd\">Streams</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\nYou're developing a 2D tactical combat game.\n\nCharacters in your game fight on a grid of potentially infinite size.\n![](files/battle_map.png)\n\n## Character Attack\n\nYou're going to use **protocols** create a `Character.can_attack?/3` function\nthat expects the following:\n\n1. A `Barbarian` or `Wizard` struct.\n2. The player's coordinate `{x, y}`\n3. An enemy's coordinate `{x, y}`\n\nIt should then return a boolean.\n\nHere's the `Character` protocol as well as the `Barbarian` and `Wizard` struct you're going to use.\n\n**Do not modify this code:**\n\n```elixir\ndefprotocol Character do\n  def can_attack?(character, origin, target)\nend\n\ndefmodule Wizard do\n  defstruct []\nend\n\ndefmodule Barbarian do\n  defstruct []\nend\n```\n\n## Barbarian\n\nA <b style=\"color: red;\">Barbarian</b> can attack in 2 square radius.\n\nYou should be able to check if a character can attack a coordinate `{x, y}` given their\nstarting location in `{x, y}`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCharacter.can_attack?(%Barbarian{}, {4, 4}, {6, 6})\ntrue\n```\n\n![](files/barbarian_attack.png)\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefimpl Character, for: Barbarian do\n  def can_attack?(_character, {init_x, init_y}, {x, y}) do\n    x_diff = init_x - x\n    y_diff = init_y - y\n\n    abs(x_diff) <= 2 && abs(y_diff) <= 2\n  end\nend\n```\n\n</details>\n\n```elixir\n# Implementation Goes Here:\n\n# You May Use The Following Test Suite To Validate Your Solution.\nExUnit.start(auto_run: false)\n\ndefmodule BarbarianTests do\n  use ExUnit.Case\n\n  describe \"Barbarian\" do\n    test \"can attack within two squares of current position\" do\n      for x <- 2..6, y <- 2..6 do\n        assert Character.can_attack?(%Barbarian{}, {4, 4}, {x, y})\n      end\n    end\n\n    test \"cannot attack beyond two squares of current position\" do\n      refute Character.can_attack?(%Barbarian{}, {4, 4}, {1, 1})\n      refute Character.can_attack?(%Barbarian{}, {4, 4}, {7, 7})\n      refute Character.can_attack?(%Barbarian{}, {4, 4}, {7, 1})\n      refute Character.can_attack?(%Barbarian{}, {4, 4}, {1, 7})\n    end\n\n    test \"logic is not hardcoded to the {4, 4} position\" do\n      refute Character.can_attack?(%Barbarian{}, {3, 3}, {6, 6})\n    end\n  end\nend\n\nExUnit.run()\n```\n\n## Wizard\n\nA <b style=\"color: purple;\">Wizard</b> can attack in straight or diagonal lines of any length.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCharacter.can_attack?(%Wizard{}, {4, 4}, {6, 6})\ntrue\n```\n\n![](files/wizard_attack.png)\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefimpl Character, for: Wizard do\n  def can_attack?(_character, {init_x, init_y}, {x, y}) do\n    x_diff = init_x - x\n    y_diff = init_y - y\n\n    init_x == x || init_y == y || abs(x_diff) == abs(y_diff)\n  end\nend\n```\n\n</details>\n\nCreate a `Wizard` implementation for the `Character` protocol.\n\n```elixir\n# Implementation Goes Here:\n\n# You May Use The Following Test Suite To Validate Your Solution.\nExUnit.start(auto_run: false)\n\ndefmodule WizardTests do\n  use ExUnit.Case\n\n  describe \"Wizard\" do\n    test \"can attack in eight directions\" do\n      # up, up-right, right, down-right, down, down-left, left, up-left\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {4, 5})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {5, 5})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {5, 4})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {5, 3})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {4, 3})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {3, 3})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {3, 4})\n      assert Character.can_attack?(%Wizard{}, {4, 4}, {3, 5})\n    end\n\n    test \"cannot attack invalid squares\" do\n      refute Character.can_attack?(%Wizard{}, {4, 4}, {6, 5})\n      refute Character.can_attack?(%Wizard{}, {4, 4}, {2, 5})\n      refute Character.can_attack?(%Wizard{}, {4, 4}, {3, 2})\n      refute Character.can_attack?(%Wizard{}, {4, 4}, {6, 3})\n    end\n  end\nend\n\nExUnit.run()\n```\n\n## Custom Character (BONUS)\n\nCreate your own customer character with an attack pattern than you decide on. It should not\nmatch the existing characters.\n\nFor example, you might create an `Archer` who can only attack in a 3 radius square.\n\n![](files/archer_attack.png)\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCharacter.can_attack?(%Archer{}, {4, 4}, {7, 7})\ntrue\n```\n\nImplement your custom character below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Battle Map exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Battle Map\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/math_with_protocols.livemd\">Math With Protocols</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/streams.livemd\">Streams</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task111-exercises-caesar_cypher", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Caesar Cypher\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Caesar Cypher\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/email_validation.livemd\">Email Validation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rollable_expressions.livemd\">Rollable Expressions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Caesar Cypher\n\nYou're going to create a Caesar Cypher. A cypher alters characters in order to make secret messages. The Caesar cypher is a substitution cypher named after the Roman emperor Julius Caesar.\n\nA Caesar cypher shifts characters by some key. For example, if the key is `1` then each character shifts over by one, so `\"a\"` becomes `\"b\"`, `\"b\"` becomes `\"c\"` and so on.\n\nCreate a `CaesarCypher.encode/1` function which shifts each letter in a string by a key. The default key should be `1`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCaesarCypher.encode(\"abcdefghijklmnopqrstuvwxyz\")\n\"bcdefghijklmnopqrstuvwxyza\"\n```\n\nYou only need to handle **lowercase letters**.\n\n### Any Key\n\nCreate a `CaesarCypher.encode/2` function which encodes the string by a provided key. For example, if the key is `2` then each letter shifts over by two, so `\"a\"` becomes `\"c\"`, `\"b\"` becomes `\"d\"` and so on.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nCaesarCypher.encode(\"abcdefghijklmnopqrstuvwxyz\", 2)\n\"cdefghijklmnopqrstuvwxyzab\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule CaesarCypher do\n def encode(string) do\n    encode(string, 1)\n  end\n\n  def encode(string, key) do\n    String.to_charlist(string)\n    |> Enum.map(fn char ->\n      overflow = char + key > ?z\n      if overflow do\n        ?a + rem(char + key, ?z) - 1\n      else\n        char + key\n      end\n    end)\n    |> List.to_string()\n  end\nend\n```\n\n</details>\n\nImplement the `CaesarCypher` module as documented.\n\n```elixir\ndefmodule CaesarCypher do\n  @moduledoc \"\"\"\n  Documentation for `CaesarCypher`\n  \"\"\"\n\n  @doc \"\"\"\n  Encode a string using the caesar cypher.\n  Shift every letter over by one.\n\n  ## Examples\n\n    iex> CaesarCypher.encode(\"abcdefghijklmnopqrstuvwxyz\")\n    \"bcdefghijklmnopqrstuvwxyza\"\n\n  Encoding should work on any string\n\n    iex> CaesarCypher.encode(\"hello\")\n    \"ifmmp\"\n  \"\"\"\n  def encode(string) do\n  end\n\n  @doc \"\"\"\n  Encode a string using the caesar cypher and a provided key.\n  Shift every letter over by the provided key.\n\n  ## Examples\n\n    iex> CaesarCypher.encode(\"abcdefghijklmnopqrstuvwxyz\", 1)\n    \"bcdefghijklmnopqrstuvwxyza\"\n\n    iex> CaesarCypher.encode(\"abcdefghijklmnopqrstuvwxyz\", 2)\n    \"cdefghijklmnopqrstuvwxyzab\"\n\n    iex> CaesarCypher.encode(\"abcdefghijklmnopqrstuvwxyz\", 14)\n    \"opqrstuvwxyzabcdefghijklmn\"\n\n  Encoding should work on any string.\n\n    iex> CaesarCypher.encode(\"hello\", 1)\n    \"ifmmp\"\n  \"\"\"\n  def encode(string, key) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Caesar Cypher exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Caesar Cypher\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/email_validation.livemd\">Email Validation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rollable_expressions.livemd\">Rollable Expressions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task112-exercises-number_finder", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Number Finder\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Number Finder\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/reduce.livemd\">Reduce</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/custom_enum_with_reduce.livemd\">Custom Enum With Reduce</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Number Finder\n\nCreate a `NumberFinder` module which can find the `smallest/1` number in a list, and the `largest/1` number in a list.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nNumberFinder.smallest([2, 3, 1])\n1\n\nNumberFinder.largest([2, 3, 1])\n3\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule NumberFinder do\n  def smallest(number_list) do\n    Enum.reduce(number_list, fn each, acc ->\n      min(each, acc)\n    end)\n  end\n\n  def largest(number_list) do\n    Enum.reduce(number_list, fn each, acc ->\n      max(each, acc)\n    end)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule NumberFinder do\n  @doc \"\"\"\n  Find the smallest number in a list\n\n  ## Examples\n\n    iex> NumberFinder.smallest([2, 3, 1])\n    1\n    iex> NumberFinder.smallest([2, 2, 3, 4])\n    2\n    iex> NumberFinder.smallest([2, 2, 3, 4, 10, 20, -3])\n    -3\n  \"\"\"\n  def smallest(number_list) do\n  end\n\n  @doc \"\"\"\n  Find the largest number in a list\n\n  ## Examples\n\n    iex> NumberFinder.largest([2, 3, 1])\n    3\n    iex> NumberFinder.largest([2, 2, 3, 4, 4])\n    4\n    iex> NumberFinder.largest([2, 2, 3, 4, 10, 20, -3])\n    20\n  \"\"\"\n  def largest(number_list) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Number Finder exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Number Finder\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/reduce.livemd\">Reduce</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/custom_enum_with_reduce.livemd\">Custom Enum With Reduce</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task113-exercises-fun_formulas", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Fun Formulas\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Fun Formulas\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/match_operator.livemd\">Match Operator</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/card_counting.livemd\">Card Counting</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Fun Formulas\n\nAs developers, it's our job to translate business requirements into something that the computer understands.\n\nThese exercises will have you convert a common formula into an Elixir program.\n\n## Loading Bar Percentage\n\nWe often need to display loading bars to the user. Loading bars use the current **percentage** they have finished loading in order to display the loading progress.\n\nYou can calculate the percentage with $\\frac{actual\\ value}{total\\ value}\\times100$\n\nFor example if we complete `7` out of `10` items, we would be `70.0%` complete.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n(7 / 10) * 100 # 70.0\n```\n\nUse arithmetic operators to determine the **percentage** given we have completed `12` out of `42` items.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nactual = 12\ntotal = 42\n\n(actual / total) * 100\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Rocket Ship\n\nWe're building a rocket ship app to teach people about physics.\n\nUsers can enter the `mass` and `acceleration` of a ship to visualize the `force` generated.\n\nGiven that ${mass} * {acceleration} = force$, calculate the force when mass is `10` and acceleration is `50`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nmass = 10\nacceleration = 50\n\nmass * acceleration\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## What Do You Tip?\n\nIt's common in many cultures to leave a tip whenever you buy a meal. It's common to calculate the tip as a percentage of the meal.\n\nGiven the initial cost of a meal is `20`, and you want to leave a `15%` tip, use arithmetic operators to determine the total cost of the meal.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ninitial_cost = 20\ntip_percent = 1.15\n\ninitial_cost * tip_percent\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Pythagorean Theorum\n\nTo calculate the longest side of a triangle we use $a^2 + b^2 = c^2$\n\nGiven a triangle where side $a$ is `4`, and side $b$ is `10`, calculate $c^2$\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\na = 4\nb = 10\n\na ** 2 + b ** 2\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Bonus: Square Root\n\nEarlier we calculated $c^2$ for pythagoream theorum. Given $c^2$ is `116` determine the square root of $c^2$ to calculate $c$.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nc_squared = 116\n:math.sqrt(c_squared)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Fun Formulas exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Fun Formulas\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/match_operator.livemd\">Match Operator</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/card_counting.livemd\">Card Counting</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task114-exercises-time_converting", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Time Converting\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Time Converting\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/datetime.livemd\">Dates And Times</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/itinerary.livemd\">Itinerary</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Time Converting\n\nOften we have to convert seconds, minutes, hours, and days. You're going to create a `TimeConverter` module which can handle all of this for us.\n\nWe'll use the atoms `:days`, `:hours`, `:minutes`, or `:seconds` to represent days, hours, minutes, and seconds.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule TimeConverter do\n  def to_seconds(amount, unit) do\n    case unit do\n      :seconds -> amount\n      :minutes -> amount * 60\n      :hours -> amount * 60 * 60\n      :days -> amount * 60 * 60 * 24\n    end\n  end\n\n  def from_seconds(amount, unit) do\n    case unit do\n      :seconds -> amount * 1.0\n      :minutes -> amount / 60\n      :hours -> amount / 60 / 60\n      :days -> amount / 60 / 60 / 24\n    end\n  end\nend\n```\n\n</details>\n\nImplement the `TimeConverter.to_seconds/2` and `TimeConverter.from_seconds/2` functions as documented.\n\n```elixir\ndefmodule TimeConverter do\n  @moduledoc \"\"\"\n  Documentation for `TimeConverter`\n  \"\"\"\n\n  @doc \"\"\"\n  Convert a unit of time to a number of seconds.\n\n  ## Examples\n\n    iex> TimeConverter.to_seconds(1, :seconds)\n    1\n\n    iex> TimeConverter.to_seconds(1, :minutes)\n    60\n    \n    iex> TimeConverter.to_seconds(1, :hours)\n    3600\n\n    iex> TimeConverter.to_seconds(1, :days)\n    86400\n\n  \"\"\"\n  def to_seconds(amount, unit) do\n  end\n\n  @doc \"\"\"\n  Convert a number of seconds to a unit of time.\n  Return a float, as these values will require division using `/`.\n\n  ## Examples\n\n    iex> TimeConverter.from_seconds(1, :seconds)\n    1.0\n\n    iex> TimeConverter.from_seconds(60, :minutes)\n    1.0\n    \n    iex> TimeConverter.from_seconds(3600, :hours)\n    1.0\n\n    iex> TimeConverter.from_seconds(86400, :days)\n    1.0\n\n  \"\"\"\n  def from_seconds(amount, unit) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Time Converting exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Time Converting\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/datetime.livemd\">Dates And Times</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/itinerary.livemd\">Itinerary</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task115-exercises-sign_up_form", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Sign Up Form\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:ecto, \"~> 3.9.5\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Sign Up Form\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/ecto_changeset.livemd\">Ecto Changesets</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/book_changeset.livemd\">Book Changeset</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## User Changeset\n\nCreate a `User` schemaless changeset that validates a user.\n\nA user struct should have the following fields.\n\n* `username` (required) a 3-12 character string.\n* `password` (required) a 12-50 character string.\n* `age` an integer.\n* `birthdate` a date.\n* `terms_and_conditions` (required) a boolean which must be `true`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule User do\n  defstruct [:username, :password, :age, :birthdate, :terms_and_conditions]\n\n  @types %{\n    username: :string,\n    password: :string,\n    age: :integer,\n    birthdate: :date,\n    terms_and_conditions: :boolean\n  }\n\n  def changeset(%__MODULE__{} = user, params) do\n    {user, @types}\n    |> Ecto.Changeset.cast(params, Map.keys(@types))\n    |> Ecto.Changeset.validate_required([:username, :password])\n    |> Ecto.Changeset.validate_length(:username, min: 3, max: 12)\n    |> Ecto.Changeset.validate_length(:password, min: 12, max: 50)\n    |> Ecto.Changeset.validate_acceptance(:terms_and_conditions)\n  end\n\n  def new(params) do\n    %__MODULE__{}\n    |> changeset(params)\n    |> Ecto.Changeset.apply_action(:update)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule User do\n  @moduledoc \"\"\"\n  Documentation for `User`\n\n  Defines a schemaless changeset and `User` struct.\n\n  ## Examples\n\n      iex> %User{}\n      %User{username: nil, password: nil, age: nil, birthdate: nil, terms_and_conditions: nil}\n  \"\"\"\n  defstruct []\n\n  @types %{}\n\n  @doc \"\"\"\n  Create a User changeset.\n\n  ## Examples\n\n      iex> User.changeset(%User{}, %{username: \"user1\", password: \"securepassword1\", age: 20, terms_and_conditions: true})\n      #Ecto.Changeset<action: nil, changes: %{age: 20, password: \"securepassword1\", terms_and_conditions: true, username: \"user1\"}, errors: [], data: #User<>, valid?: true>\n  \"\"\"\n  def changeset(%__MODULE__{} = user, params) do\n  end\n\n  @doc \"\"\"\n  Validate and create a User struct.\n\n  ## Examples\n\n      iex> User.new(%{username: \"user1\", password: \"securepassword1\", age: 20, terms_and_conditions: true})\n      {:ok, %User{username: \"user1\", password: \"securepassword1\", age: 20, terms_and_conditions: true}}\n\n      Terms and conditions must be signed.\n\n      User.new(%{username: \"user1\", password: \"securepassword1\", age: 20, terms_and_conditions: false})\n      {:error, _changeset}\n  \"\"\"\n  def new(params) do\n  end\nend\n```\n\n## Sign Up Form\n\nYou're going to create a `SignUp` application that validates user data with a sign up form.\nCreate a sign up form with appropriate form fields for the `User` changeset.\n\n```\n$ mix phx.new sign_up\n```\n\nUse the `User` changeset to provide error feedback on each of the form inputs `:username`, `:password`, `:age`, `:birthdate`, and `:terms_and_conditions`.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Sign Up Form exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Sign Up Form\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/ecto_changeset.livemd\">Ecto Changesets</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/book_changeset.livemd\">Book Changeset</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task116-exercises-blog_home_page", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"blog_home_page.png\",\"type\":\"attachment\"}]} -->\n\n# Blog: Home Page\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Home Page\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/tailwind.livemd\">Tailwind</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_deployment.livemd\">Phoenix Deployment</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Home Page\n\nYou're going to use Tailwind to customize the home page in your Blog project.\n\nYour home page should include navigation to the other pages in your application.\n\nUse [Figma](https://www.figma.com/), pen and paper, or some other tool to design your portfolio project before building it.\n\nHere's an example made by an alumni student [Einar Engstr\u00f6m](https://github.com/einariii/beamscene).\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/blog_home_page.png)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Home Page exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Home Page\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/tailwind.livemd\">Tailwind</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_deployment.livemd\">Phoenix Deployment</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task117-exercises-rock_paper_scissors_lizard_spock", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Rock Paper Scissors Lizard Spock\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rock Paper Scissors Lizard Spock\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/structs.livemd\">Structs</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rpg_dialogue.livemd\">RPG Dialogue</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Rock Paper Scissors Lizard Spock\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=_PUEoDYpUyQ\\\")\",\"title\":\"Rock Paper Scissors Lizard Spock. A Brief Introduction.\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=_PUEoDYpUyQ\")\n```\n\nYou're going to create a Rock Paper Scissors Lizard Spock game. Rock Paper Scissors Lizard Spock is a more complex adaptation of Rock Paper Scissors.\n\nThe rules start the same as normal rock paper scissors.\n\n* Rock beats Scissors.\n* Paper beats Rock.\n* Scissors beats Paper.\n\nThen we add the following extra rules\n\n* Rock beats Lizard.\n* Lizard beats Spock.\n* Spock beats Scissors.\n* Scissors beats Lizard.\n* Lizard beats Paper.\n* Paper beats Spock.\n* Spock beats Rock.\n\nWe'll represent these choices as atoms `:rock, :paper, :scissors, :lizard, :spock`.\n\n* Create a `beats?/2` function which determines if once choice beats another.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRockPaperScissorsLizardSpock.beats?(:rock, :lizard) # true\n```\n\n* Create a `play/2` function which determines if player 1 or player 2 won the game.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRockPaperScissorsLizardSpock.play(:rock, :lizard) # \"Player 1 Wins!\"\nRockPaperScissorsLizardSpock.play(:lizard, :rock) # \"Player 1 Wins!\"\nRockPaperScissorsLizardSpock.play(:lizard, :lizard) # \"Draw!\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\n  def beats?(guess1, guess2) do\n    case {guess1, guess2} do\n      {:rock, :scissors} -> true\n      {:rock, :lizard} -> true\n      {:paper, :rock} -> true\n      {:paper, :spock} -> true\n      {:scissors, :paper} -> true\n      {:scissors, :lizard} -> true\n      {:lizard, :spock} -> true\n      {:lizard, :paper} -> true\n      {:spock, :scissors} -> true\n      {:spock, :rock} -> true\n      _answer -> false\n    end\n  end\n\n  def play(player1, player2) do\n    cond do\n      beats?(player1, player2) -> \"Player 1 Wins!\"\n      beats?(player2, player1) -> \"Player 2 Wins!\"\n      true -> \"Draw\"\n    end\n  end\n```\n\n</details>\n\nImplement the `RockPaperScissorsLizardSpock` module below.\n\n> `@doc` syntax runs tests on your code to provide feedback. However, be aware that for the sake of conciseness we do not always write fully comprehensive tests. You solution may pass tests, but be incomplete. You may press the dropdown button to hide the `@doc` documentation/tests.\n\n```elixir\ndefmodule RockPaperScissorsLizardSpock do\n  @doc \"\"\"\n  ## Examples\n\n      iex> RockPaperScissorsLizardSpock.beats?(:lizard, :spock)\n      true\n      iex> RockPaperScissorsLizardSpock.beats?(:lizard, :paper)\n      true\n      iex> RockPaperScissorsLizardSpock.beats?(:spock, :scissors)\n      true\n      iex> RockPaperScissorsLizardSpock.beats?(:spock, :rock)\n      true\n      iex> RockPaperScissorsLizardSpock.beats?(:spock, :paper)\n      false\n  \"\"\"\n  def beats?(guess1, guess2) do\n  end\n\n  @doc \"\"\"\n  ## Examples\n      \n      iex> \"Player 1 Wins!\" = RockPaperScissorsLizardSpock.play(:rock, :lizard)\n      iex> \"Player 2 Wins!\" = RockPaperScissorsLizardSpock.play(:lizard, :rock)\n      iex> \"Draw!\" = RockPaperScissorsLizardSpock.play(:lizard, :lizard)\n  \"\"\"\n  def play(player1, player2) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Rock Paper Scissors Lizard Spock exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rock Paper Scissors Lizard Spock\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/structs.livemd\">Structs</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/rpg_dialogue.livemd\">RPG Dialogue</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task118-exercises-lucas_numbers", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Lucas Numbers\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lucas Numbers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fibonacci.livemd\">Fibonacci Sequence</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/factorial.livemd\">Factorial</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Lucas Numbers\n\nThis exercise was inspired by [Exercism.io](https://exercism.org/tracks/elixir/exercises/lucas-numbers). It's a fantastic platform for learning many languages including Elixir.\n\nLucas numbers are much like the fibonacci sequence where $fib(n) = fib(n - 1) + fib(n - 2)$\nNumberphile has a great video that explains them in further detail,\n\n<!-- livebook:{\"attrs\":{\"source\":\"YouTube.new(\\\"https://www.youtube.com/watch?v=PeUbRXnbmms\\\")\",\"title\":\"Lucas Numbers\"},\"chunks\":null,\"kind\":\"Elixir.HiddenCell\",\"livebook_object\":\"smart_cell\"} -->\n\n```elixir\nYouTube.new(\"https://www.youtube.com/watch?v=PeUbRXnbmms\")\n```\n\nUnlike Fibonacci, they start with a different initial 2 numbers.\n\n| n              | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 10  |\n| -------------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| $Fibonacci(n)$ | 0   | 1   | 1   | 2   | 3   | 5   | 8   | 13  | 21  | 34  | 55  |\n| $Lucas(n)$     | 2   | 1   | 3   | 4   | 7   | 11  | 18  | 29  | 47  | 76  | 123 |\n\nOther than starting with two different numbers, the formula for a lucas number is still\n$L(n)=L(n-1)+L(n - 2)$.\n\nIn addition to generating the $nth$ lucas number, you're also going to generate a sequence of lucas numbers.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Lucas do\n\n  def number(0), do: 2\n  def number(1), do: 1\n\n  def number(n) do\n    number(n - 1) + number(n - 2)\n  end\n\n  def sequence(length) do\n    Enum.map(1..length, &number(&1 - 1)\n  end\nend\n\nLucas.sequence(10)\n```\n\nTo avoid recomputing lucas numbers over and over, we can implement `sequence/1` using [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) instead.\n\n```elixir\ndef sequence(length) when length == 1 do\n  [2]\nend\n\ndef sequence(length) when length == 2 do\n  [2, 1]\nend\n\ndef sequence(length) when length > 2 do\n  {_, _, list} =\n    Enum.reduce(2..length-1, {2, 1, [1, 2]}, fn each, {prev2, prev1, list} ->\n      current = prev2 + prev1\n      {prev1, current, [current | list]}\n    end)\n\n  Enum.reverse(list)\nend\n```\n\n</details>\n\nImplement the `Lucas` module as documented.\n\n```elixir\ndefmodule Lucas do\n  @doc \"\"\"\n  return the nth lucas number.\n\n  ## Examples\n\n    iex> Lucas.number(0)\n    2\n\n    iex> Lucas.number(1)\n    1\n\n    iex> Lucas.number(2)\n    3\n\n    iex> Lucas.number(3)\n    4\n\n    iex> Lucas.number(4)\n    7\n    \n    iex> Lucas.number(5)\n    11\n\n    iex> Lucas.number(6)\n    18\n\n    iex> Lucas.number(20)\n    15127\n  \"\"\"\n  def number(n) do\n  end\n\n  @doc \"\"\"\n  Generate a list of lucas numbers with the given length.\n\n  ## Examples\n\n    iex> Lucas.sequence(1)\n    [2]\n\n    iex> Lucas.sequence(2)\n    [2, 1]\n\n    iex> Lucas.sequence(3)\n    [2, 1, 3]\n\n    iex> Lucas.sequence(4)\n    [2, 1, 3, 4]\n\n    iex> Lucas.sequence(10)\n    [2, 1, 3, 4, 7, 11, 18, 29, 47, 76]\n  \"\"\"\n\n  def sequence(length) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Lucas Numbers exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lucas Numbers\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fibonacci.livemd\">Fibonacci Sequence</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/factorial.livemd\">Factorial</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task119-exercises-card_counting", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Card Counting\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Card Counting\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fun_formulas.livemd\">Fun Formulas</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/habit_tracker.livemd\">Habit Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Card Counting\n\nWe're going to build some logic for a card counting application. Card counting is a strategy used in card games to determine if there are more high cards or low cards in the deck.\n\nThere are **13** numbered cards in a common deck of playing cards.\n\nWe'll use integers `1` to `13` to represent playing cards. Cards are either **low**, **normal**, or **high**.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart LR\nsubgraph low cards\n  direction LR\n  1 --- 2 --- 3 --- 4 --- 5 --- 6\nend\n\nsubgraph Normal Cards\n  direction LR\n  7 --- 8 --- 9\nend\n\nsubgraph High Cards\n  direction LR\n  10 --- 11 --- 12 --- 13\nend\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIn order to track if there are more high cards left in the deck, or low cards left in the deck, you'll track a running count starting at `0`.\n\n* When dealt a **low** card decrease the count by `1`.\n* When dealt a **high** card increase the count by `1`.\n* When dealt a **normal** card do nothing.\n\n## Bind Card Counts\n\nBind integers `low`, `normal`, and `high` to track the amount to increase or decrease the current count by. You will use these variables in further exercises.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nlow = -1\nnormal = 0\nhigh = 1\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## High Card\n\nThe initial count is `0`. You have been dealt one **high** card. Use arithmetic operators and the bound variables above to determine the new count.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ninitial_count = 0\ninitial_count + high\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Low Card\n\nThe initial count is `0`. You have been dealt one **low** card. Use arithmetic operators and the bound variables above to determine the new count.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ninitial_count = 0\ninitial_count + low\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Multiple Cards\n\nThe initial count is `5`. You have been dealt five **high** cards, two **low** cards, and two **normal** cards. Use arithmetic operators and the bound variables above to determine the new count.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ninitial_count = 5\ninitial_count + high * 5 + low * 2 + normal * 2\n```\n\nYou could omit the **normal** cards or allow **high** and **low** cards to balance each other, however if the increment/decrement value changes then your code would break.\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Bonus: Determining Card Values\n\nYou are dealt three cards of a random value between `1` and `13`. You can use [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) to generate a random number.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nrandom_card = Enum.random(1..13)\n```\n\nGenerate three random cards, use the values of the three randomly generated cards to determine the current count given the initial count is `0`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nrandom_card1 = Enum.random(1..13)\nrandom_card2 = Enum.random(1..13)\nrandom_card3 = Enum.random(1..13)\n\ncards =\n  Enum.map([random_card1, random_card2, random_card3], fn random_card ->\n    cond do\n      random_card <= 6 -> low\n      random_card >= 10 -> high\n      true -> normal\n    end\n  end)\n\nEnum.sum(cards)\n```\n\nYou could omit the **normal** cards or allow **high** and **low** cards to balance each other, however if the increment/decrement value changes then your code would break.\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Card Counting exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Card Counting\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fun_formulas.livemd\">Fun Formulas</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/habit_tracker.livemd\">Habit Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task120-exercises-file_system_todo_app", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# File System Todo\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File System Todo\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/save_game.livemd\">Save Game</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/document_tools.livemd\">Document Tools</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\nYou're going to create a TodoList application with persistence using a file system.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule TodoList do\n  @storage \"todolist\"\n\n  def list do\n    case File.read(@storage) do\n      {:ok, list} -> :erlang.binary_to_term(list)\n      # other operations will create the storage if it does not yet exist.\n      _ -> []\n    end\n  end\n\n  def add(item) do\n    new_list = [item | list()]\n    File.write(@storage, :erlang.term_to_binary(new_list))\n  end\n\n  def complete(item) do\n    new_list = list() -- [item]\n    File.write(@storage, :erlang.term_to_binary(new_list))\n  end\nend\n```\n\n</details>\n\nImplement the `TodoList` module as documented. You may choose any file for your persistence mechanism.\n\n```elixir\ndefmodule TodoList do\n  @moduledoc \"\"\"\n  Documentation for `TodoList`\n  \"\"\"\n  @doc \"\"\"\n  Retrieve the todo list.\n\n  ## Examples\n\n      iex> TodoList.list()\n      []\n  \"\"\"\n  def list do\n  end\n\n  @doc \"\"\"\n  Add an item to the todo list.\n\n  ## Examples\n\n      TodoList.add(\"task 1\")\n      TodoList.add(\"task 2\")\n      TodoList.list()\n      [\"task 2\", \"task 1\"]\n  \"\"\"\n  def add(item) do\n  end\n\n  @doc \"\"\"\n  Complete (remove) an item from the todo list.\n\n  ## Examples\n\n      TodoList.add(\"finish homework\")\n      TodoList.complete(\"finish homework\")\n      TodoList.list()\n      [\"task 2\", \"task 1\"]\n  \"\"\"\n  def complete(item) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish File System Todo exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File System Todo\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/save_game.livemd\">Save Game</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/document_tools.livemd\">Document Tools</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task121-exercises-process_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Process Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Process Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/processes.livemd\">Processes</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/process_mailbox.livemd\">Process Mailbox</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Process Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for the [Process](https://hexdocs.pm/elixir/Process.html) module. Follow the instructions for each drill and complete them as quickly as you can.\n\n## Process.send/3\n\nUse [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) and `self()` to send the process for the Elixir cell below a `:message` message. Use [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to receive the message in the same cell.\n\n```elixir\n\n```\n\nUse [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) and `self()` to send the process for the Elixir cell below a message with a value i.e. `{:message, \"value\"}`. Use [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to receive the message in the same cell and return the value.\n\n```elixir\n\n```\n\n## Process.spawn/2\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) to spawn a new process which adds two integers together.\n\n```elixir\n\n```\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds, then prints \"Finished!\".\n\n```elixir\n\n```\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to spawn a process that receives a `:message` message. Use [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) to send the spawned process a `:message` message. The spawned process should print `\"received a message!\"`.\n\n```elixir\n\n```\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to spawn a process that receives a message with a value i.e. `{:message, \"value\"}`. Use [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) to send the spawned process a message with a value. The spawned process should print the received value.\n\n```elixir\n\n```\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) to spawn a process that raises an error. Notice it does not crash the Livebook, because it is an **unlinked** process.\n\n```elixir\n\n```\n\nUse [Process.spawn/3](https://hexdocs.pm/elixir/Process.html#spawn/3) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process which raises an error after one second. Use [Process.link/1](https://hexdocs.pm/elixir/Process.html#link/1) to link the process.\n\nLivebook should crash. Comment out your solution so that you can move on.\n\n```elixir\n\n```\n\n## Process.alive?/1\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds. Use [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to check if the process is alive after two seconds. [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) should return `true`.\n\n```elixir\n\n```\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds. Use [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to check if the process is alive after six seconds. [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) should return `false`.\n\n```elixir\n\n```\n\n## Process.send_after/4\n\nUse [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4) and `self()` to send the process for the Elixir cell below a message after two seconds. Use [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) in the same cell to receive the message.\n\n```elixir\n\n```\n\nUse [Process.spawn/3](https://hexdocs.pm/elixir/Process.html#spawn/3) and [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to spawn a process that waits to receive a message. Use [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4) to send the spawned process a message after two seconds.\n\n```elixir\n\n```\n\n## Process.exit/2\n\nUse [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds. Print `\"I started\"` before sleeping, and `\"I finished\"` after sleeping to prove if the process finishes sleeping or not. Use [Process.exit/2](https://hexdocs.pm/elixir/Process.html#exit/2) with the `:normal` exit reason to kill the spawned process.\n\nOnce finished, switch the exit reason to `:kill` to demonstrate that the process is unlinked, because it does not crash the calling process.\n\n```elixir\n\n```\n\nUse [Kernel.spawn_link/1](https://hexdocs.pm/elixir/Kernel.html#spawn_link/1) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a linked process that sleeps for five seconds. Use [Process.exit/2](https://hexdocs.pm/elixir/Process.html#exit/2) with the `:normal` exit reason to kill the spawned process.\n\nNotice that the Livebook does not crash. Switch the exit reason to `:kill` and notice that the Livebook does crash. Comment out your solution to avoid crashing Livebook.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Process Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Process Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/processes.livemd\">Processes</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/process_mailbox.livemd\">Process Mailbox</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task122-exercises-blog_authentication", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Authentication\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Authentication\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_authentication.livemd\">Phoenix Authentication</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_many_to_many_relationships.livemd\">Many-To-Many Relationships</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog: Authentication\n\nYou're going to add authentication and authorization to your existing [Blog](./group_project_blog.livemd) project, and modify posts and comments so that they belong to a single user.\n\nUse the `mix phx.gen.auth` command to generate the initial authentication system.\n\n```\nmix phx.gen.auth Accounts User users\n```\n\n### Requirements\n\n```mermaid\nerDiagram\n\nPost {\n  string title\n  text content\n  date published_on\n  boolean visibility\n  id user_id\n}\n\nComment {\n  text content\n  id post_id\n  id user_id\n}\n\nUser {\n  string username\n  string email\n  string password\n  string hashed_password\n  naive_datetime confirmed_at\n}\n\nUser ||--O{ Post : \"owns\"\nUser ||--O{ Comment : \"owns\"\nPost ||--O{ Comment : \"has many\"\n```\n\n### Requirements\n\n* Migration & Schema\n  * Add a `username` field to the user that is between `4-20` characters.\n  * Associate a user with posts and comments. Enforce that a post or comment **must** belong to a user. A post or comment cannot exist without an associated user.\n* Functionality\n  * Associate comments with the currently signed in user upon creation.\n  * Associate posts with the currently signed in user upon creation.\n  * Display user's username on each post.\n  * Display user's username on each comment.\n* Authorization\n  * Ensure Users can only edit and delete their own posts\n  * Ensure Users can only edit and delete their own comments\n  * Ensure only signed in users can create posts\n  * Ensure only signed in users can create comments\n* Tests\n  * Write Context and Controller tests to ensure posts are created with a user.\n  * Write Context and Controller tests to ensure comments are created with a user.\n  * All tests should pass. You may need to modify old tests to ensure they continue to pass.\n\nAll users should be able to view all blogs, however only authorized users should be able to create, edit, and update their own blogs.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Authorization Requirements\n\nEnsure you:\n\n* Associate blogs with a user. Blogs should belong to a user.\n* Allow all clients to access the `:index` and `:show` actions for blogs.\n* Allow only authenticated users to access the `:new`, and `:create` actions.\n* Allow only authorized users to access the `:edit`, `:update`, and `:delete` actions only for their own blogs.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bonus: Authorized Comments\n\nAdd the same authorization for comments.\n\nEnsure you:\n\n* Associate comments with a user. Comments should belong to a user and a blog.\n* Allow all clients to read all comments.\n* Allow only authenticated users to create comments.\n* Allow only authorized users to edit and delete their own comments.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Authentication exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Authentication\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_authentication.livemd\">Phoenix Authentication</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_many_to_many_relationships.livemd\">Many-To-Many Relationships</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task123-exercises-games", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games Project\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games Project\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/mix.livemd\">Mix</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_guessing_game.livemd\">Games: Guessing Game</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Create A New Mix Project\n\nUsing the command line, create a new project called `games`.\n\n```\nmix new games\n```\n\nWe're going to use this project to build several different games.\n\nInitialize the project with git. Make sure it is not already in a git managed folder.\n\n```\ngit init\ngit add .\ngit commit -m \"initialize mix project\"\n```\n\nYou should create a [new GitHub repository](https://github.com/new) for this project so that you can push your changes and manage it using source control.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games Project exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games Project\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/mix.livemd\">Mix</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_guessing_game.livemd\">Games: Guessing Game</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task124-exercises-supervised_stack", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Supervised Stack\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Supervised Stack\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/supervisor_drills.livemd\">Supervisor Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_supervised_score_tracker.livemd\">Games: Supervised Score Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Supervised Stack\n\nYou're going to create a stack project that starts a name [Stack](./stack_server.livemd) GenServer process under a supervisor.\n\n```\nmix new stack\n```\n\nHere's an example Stack GenServer you can use.\n\n```elixir\ndefmodule Stack do\n  use GenServer\n\n  def start_link(opts) do\n    GenServer.start_link(__MODULE__, [], name: __MODULE__)\n  end\n\n  @impl true\n  def init(state) do\n    {:ok, state}\n  end\n\n  @impl true\n  def handle_call(:pop, _from, state) do\n    [head | tail] = state\n    {:reply, head, tail}\n  end\n\n  @impl true\n  def handle_call({:push, element}, _from, state) do\n    new_state = [element | state]\n    {:reply, new_state, new_state}\n  end\nend\n```\n\nWe're able to push and pop elements off of the stack. However, there's a bug. If we try to `pop/1` an item off of an empty stack, the process\nwill crash due to a function clause error because the `handle_call/2` function expects a list with one or more elements.\n\nUncomment the following code to watch the `Stack` crash.\n\n```elixir\n# {:ok, pid} = GenServer.start_link(Stack, [])\n# GenServer.call(stack_pid, :pop)\n```\n\nNormally, we could handle this by using control flow. For example, we could make another `handle_call/3` function clause for when the stack is empty.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Return `nil` When The Stack Is Empty.\n@impl true\ndef handle_call(:pop, _from, []) do\n  {:reply, nil, []}\nend\n```\n\nInstead, you're going to start the `Stack` process under a supervisor in your application so that it will be restarted when it crashes.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  {Stack, []}\n]\n\n{:ok, supervisor_pid} = Supervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Crash The Stack\n\nOpen the [IEx](https://hexdocs.pm/iex/IEx.html) shell and send the `Stack` a `:pop` message to cause it to crash and restart.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ iex -S mix\niex> GenServer.call(Stack, :pop)\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Supervised Stack exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Supervised Stack\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/supervisor_drills.livemd\">Supervisor Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_supervised_score_tracker.livemd\">Games: Supervised Score Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task125-exercises-family_tree", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Family Tree\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Family Tree\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/shopping_list.livemd\">Shopping List</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/mazes.livemd\">Mazes</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Family Tree\n\nMaps allow you to create tree like structures using keys and values. Thus it's possible to make a family tree.\nIn the Elixir cell below, create a family tree that is a `map`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart BT\np1g1[Grandparent]\np1g2[Grandparent]\np2g1[Grandparent]\np2g2[Grandparent]\np1[Parent]\np2[Parent]\nc1[Child]\n\nc1 --> p1\nc1 --> p2\np1 --> p1g1\np1 --> p1g2\np2 --> p2g1\np2 --> p2g2\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nThe map will start as a person with\na `:name`, `:age`, `:status`, and `:parents` keys.\n\n* `name` is string.\n* `age` is an integer.\n* `status` will be an atom of `:child`, `:parent`, or `:grandparent`.\n* `parents` should be a list of maps with their own `:name`, `:age`, `:status`, and `:parents` keys.\n\nIn the Elixir cell below, create a map that represents the following family tree diagram.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nclassDiagram\n    direction BT\n    class Arthur {\n        name: \"Arthur\"\n        status: :child\n        age: 22\n    }\n    class Uther {\n        name: \"Uther\"\n        status: :parent\n        age: 56\n    }\n    class Ygraine {\n        name: \"Ygraine\"\n        status: :parent\n        age: 45\n    }\n    class Han {\n        name: \"Han\"\n        status: :grand_parent\n        age: 81\n    }\n    class Leia {\n        name: \"Leia\"\n        status: :grand_parent\n        age: 82\n    }\n    class Bob {\n        name: \"Bob\"\n        status: :grand_parent\n        age: 68\n    }\n    class Bridget {\n        name: \"Bridget\"\n        status: :grand_parent\n        age: 70\n    }\n\n    Arthur --> Uther\n    Arthur --> Ygraine\n    Ygraine --> Bob\n    Ygraine --> Bridget\n    Uther --> Han\n    Uther --> Leia\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\nThis is an example of **nested data**.\n\n```elixir\n%{\n  name: \"Arthur\",\n  status: :child,\n  age: 22,\n  parents: [\n    %{\n      name: \"Uther\",\n      status: :parent,\n      age: 56,\n      parents: [\n        %{name: \"Han\", status: :grand_parent, age: 81},\n        %{name: \"Leia\", status: :grand_parent, age: 82}\n      ]\n    },\n    %{\n      name: \"Ygraine\",\n      status: :parent,\n      age: 68,\n      parents: [\n        %{name: \"Bob\", status: :grand_parent, age: 68},\n        %{name: \"Bridget\", status: :grand_parent, age: 70}\n      ]\n    }\n  ]\n}\n```\n\nYou might also consider extracting each family member as its own variable.\n\n```elixir\nhan = %{name: \"Han\", status: :grand_parent, age: 81}\nleia = %{name: \"Leia\", status: :grand_parent, age: 82}\nbob = %{name: \"Bob\", status: :grand_parent, age: 68}\nbridget = %{name: \"Bridget\", status: :grand_parent, age: 70}\n\nuther = %{name: \"Uther\", status: :parent, age: 56, parents: [han, leia]}\nygraine = %{name: \"Ygraine\", status: :parent, age: 68, parents: [bob, bridget]}\n\narthur = %{name: \"Arthur\", status: :child, age: 22, parents: [uther, ygraine]}\n\nfamily_tree = arthur\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Family Tree exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Family Tree\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/shopping_list.livemd\">Shopping List</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/mazes.livemd\">Mazes</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task126-exercises-custom_enum_with_recursion", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Custom Enum With Recursion\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:benchee, \"~> 1.1\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Enum With Recursion\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/benchmarking.livemd\">Benchmarking</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/ecto_changeset.livemd\">Ecto Changesets</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Custom Enum With Recursion\n\nWe're going to use recursion to re-implement several of the [Enum](https://hexdocs.pm/elixir/Enum.html) module's functions. For this exercise\nyou are not allowed to use the [Enum](https://hexdocs.pm/elixir/Enum.html) module.\n\nImplement the following [Enum](https://hexdocs.pm/elixir/Enum.html) functions in this `CustomEnum` function. Each should use recursion\nto accomplish the same functionality as the [Enum](https://hexdocs.pm/elixir/Enum.html) module does.\n\n* [Enum.reverse/2](https://hexdocs.pm/elixir/Enum.html#reverse/2)\n* [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2)\n* [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2)\n* [Enum.sum/2](https://hexdocs.pm/elixir/Enum.html#sum/2)\n* [Enum.join/1](https://hexdocs.pm/elixir/Enum.html#join/1)\n\nKeep in mind you may need to delegate to another function if an accumulator is required.\n\nFor example,\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndefp recursive_map(list, function, acc) do\n  # ...\nend\n\ndef map(list, function) do\n  recursive_map(list, function, [])\nend\n```\n\nYou only need to handle lists, not all collections.\n\n```elixir\ndefmodule CustomEnum do\n  @moduledoc \"\"\"\n  Documentation for `CustomEnum`.\n  Re-implement common [Enum](https://hexdocs.pm/elixir/Enum.html) functions using recursion.\n  \"\"\"\n\n  @doc \"\"\"\n  Reverse a list\n\n  ## Examples\n\n    iex> CustomEnum.reverse([1, 2, 3])\n    [3, 2, 1]\n\n    iex> CustomEnum.reverse([4, 5, 6, 7])\n    [7, 6, 5, 4]\n  \"\"\"\n  def reverse(list) do\n  end\n\n  @doc \"\"\"\n  Map over a list\n\n  ## Examples\n\n    iex> CustomEnum.map([1, 2, 3], fn integer -> integer * 2 end)\n    [2, 4, 6]\n\n    iex> CustomEnum.map([5, 4, 3], fn integer -> is_integer(integer) end)\n    [true, true, true]\n  \"\"\"\n  def map(list, callback_function) do\n  end\n\n  @doc \"\"\"\n  Filter elements in a list. Keep elements that return `true` when called with the\n  provided callback function.\n\n  ## Examples\n\n    iex> CustomEnum.filter([1, 2, \"3\"], fn int -> is_integer(int) end)\n    [1, 2]\n\n    iex> CustomEnum.filter([1, \"2\", \"3\"], fn char -> is_bitstring(char) end)\n    [\"2\", \"3\"]\n  \"\"\"\n  def filter(list, callback_function) do\n  end\n\n  @doc \"\"\"\n  Sum a list of integers.\n\n  ## Examples\n\n    iex> CustomEnum.sum([1, 2, 3])\n    6\n\n    iex> CustomEnum.sum([1, 1, 1])\n    3\n  \"\"\"\n  def sum(list_of_integers) do\n  end\n\n  @doc \"\"\"\n  Join a list of strings together.\n\n  ## Examples\n\n    iex> CustomEnum.join([\"A\", \"B\", \"C\"])\n    \"ABC\"\n\n    iex> CustomEnum.join([\"Hello\", \",\", \" \", \"World\", \"!\"])\n    \"Hello, World!\"\n  \"\"\"\n  def join(list_of_strings) do\n  end\nend\n```\n\n## Benchmarking\n\nWe've installed the [Benchee](https://github.com/bencheeorg/benchee) project in this livebook.\n\nBenchmark your solution against the existing [Enum](https://hexdocs.pm/elixir/Enum.html) module. Is yours faster or slower? Keep in mind that the [Enum](https://hexdocs.pm/elixir/Enum.html) module contains implementations for all enumerables, not just lists.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Custom Enum With Recursion exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Enum With Recursion\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/benchmarking.livemd\">Benchmarking</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/ecto_changeset.livemd\">Ecto Changesets</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task127-exercises-metric_conversion", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Metric Conversion\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Metric Conversion\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/drill-patternmatching-replace-nils.livemd\">Replacing Nils</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/guards.livemd\">Guards</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Metric Conversion\n\nYou're going to build an app to convert metric measurements such as **millimeters**, **centimeters**, **meters**, and **kilometers** according to the following table.\n\n| unit       | value | meters |\n| ---------- | ----- | ------ |\n| millimeter | 1.0   | 0.001  |\n| centimeter | 1.0   | 0.01   |\n| meter      | 1.0   | 1.0    |\n| kilometer  | 1.0   | 1000.0 |\n\nUsers provide values using `{from_unit, value}` tuples, and the desired unit to convert to.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMetric.convert({:centimeter, 100.0}, :meter)\n1.0\n```\n\nUnits can be `:millimeter`, `:centimeter`, `:meter`, or `:kilometer`. Values are always floats.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Metric do\n  def convert(from, to) do\n    meters = to_meter(from)\n\n    case to do\n      :millimeter -> meters / 0.001\n      :centimeter -> meters / 0.01\n      :meter -> meters / 1.0\n      :kilometer -> meters / 1000.0\n    end\n  end\n\n  defp to_meter({unit, value}) do\n    case unit do\n      :millimeter -> value * 0.001\n      :centimeter -> value * 0.01\n      :meter -> value * 1.0\n      :kilometer -> value * 1000.0\n    end\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Metric do\n  def convert(from, to) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Metric Conversion exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Metric Conversion\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/drill-patternmatching-replace-nils.livemd\">Replacing Nils</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/guards.livemd\">Guards</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task128-exercises-rubix_cube", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"rubix.png\",\"type\":\"attachment\"}]} -->\n\n# Rubix Cube\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rubix Cube\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/worker_pools.livemd\">Worker Pools</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"\"></a>\n<i style=\"display: none;\" class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Rubix's Cube\n\nYou are going to create a Rubix Cube application.\n\n[Rubix's Cubes](https://en.wikipedia.org/wiki/Rubik%27s_Cube) are a toy with six sides. Each side has nine colored squares on it.\nPlayers rotate columns and rows on the cube with the goal of having each side with a single matching color.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/rubix.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nCreate a `RubixCube` supervised mix project.\n\n```\nmix new rubix_cube --sup\n```\n\nYour `RubixCube` project should have the following features:\n\n### Requirements\n\n* Represent the Rubix's Cube as data in a process.\n* Start the Rubix's Cube process under a supervisor.\n* Horizontally rotate a row of the cube to the right and left\n* Vertically rotate a column of the cube up and down.\n* Determine if a Rubix's Cube is solved.\n* Save the state of the Rubix's Cube using the [File](https://hexdocs.pm/elixir/File.html) system.\n* Load the previous state of the Rubix' Cube using the [File](https://hexdocs.pm/elixir/File.html) system when starting the application.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Rubix Cube exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rubix Cube\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/worker_pools.livemd\">Worker Pools</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"\"></a>\n<i style=\"display: none;\" class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task129-exercises-user_validation", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# User Validation\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=User Validation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/message_validation.livemd\">Message Validation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/math_with_guards.livemd\">Math With Guards</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## User Validation\n\nYou're going to use `with` to create a `User` module that can validate a list of user structs. Handle `:missing_name` and `:not_a_user` errors. Return `{:ok, user}` if the user is valid.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nvalid_user = %User{name: \"Mohsin\"}\ninvalid_user1 = %User{}\ninvalid_user2 = \"Yusef\"\n\n[{:ok, %User{name: \"Mohsin\"}}, {:error, :missing_name}, {:error, :not_a_user}] =\n  User.validate_users([valid_user, invalid_user1, invalid_user2])\n```\n\n```elixir\ndefmodule User do\n  @moduledoc \"\"\"\n  Send messages between users.\n  Returns a string of the message if provided valid input.\n\n  ## Examples\n\n    iex> User.validate_users([%User{name: \"valid user\"}])\n    [{:ok, %User{name: \"valid user\"}}]\n\n    iex> User.validate_users([%User{name: nil}])\n    [{:error, :missing_name}]\n\n    iex> User.validate_users([\"invalid user\", \"invalid user\", \"invalid user\"])\n    [{:error, :not_a_user}, {:error, :not_a_user}, {:error, :not_a_user}]\n  \"\"\"\n  defstruct [:name]\n\n  def validate_users(users) do\n    Enum.map(users, fn user ->\n      with %User{name: name} <- user, true <- {:missing_name, is_binary(name)} do\n        {:ok, user}\n      else\n        false ->\n          {:error, :missing_name}\n\n        _ ->\n          {:e}\n          IO.inspect(thing)\n          :error\n      end\n    end)\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish User Validation exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=User Validation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/message_validation.livemd\">Message Validation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/math_with_guards.livemd\">Math With Guards</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task130-exercises-math_with_protocols", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Math With Protocols\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Math With Protocols\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/protocols.livemd\">Protocols</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/battle_map.livemd\">Battle Map</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Math With Protocols\n\nYou're going to create a `Math` module that uses **protocols** to add or subtract **integers**, **strings**, and **lists** with the same `add/2` and `subtract/2` functions.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n2 = Math.add(1, 1)\n[1, 2, 3, 4] = Math.add([1, 2], [3, 4])\n\"hello there\" = Math.add(\"hello there\")\n\n1 = Math.subtract(2, 1)\n[2, 3] = Math.subtract([3, 2, 3], [3])\n\"ab\" = Math.subtract(\"babc\", \"bc\")\n```\n\nRaise a `ProtocolUndefined` error if an invalid value is provided.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMath.add(%{}, %{})\n** (Protocol.UndefinedError) protocol Math not implemented for %{} of type Map\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint: Subtracting Strings</summary>\n\nConsider converting your strings to a list, then subtract the two lists together then join your result back into a string.\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefprotocol Math do\n  def add(value1, value2)\n  def subtract(value1, value2)\nend\n\ndefimpl Math, for: Integer do\n  def add(integer1, integer2) do\n    integer1 + integer2\n  end\n\n  def subtract(integer1, integer2) do\n    integer1 - integer2\n  end\nend\n\ndefimpl Math, for: BitString do\n  def add(string1, string2) do\n    string1 <> string2\n  end\n\n  def subtract(string1, string2) do\n    (String.split(string1, \"\") -- String.split(string2, \"\"))\n    |> Enum.join()\n  end\nend\n\ndefimpl Math, for: List do\n  def add(list1, list2) do\n    list1 ++ list2\n  end\n\n  def subtract(list1, list2) do\n    list1 -- list2\n  end\nend\n```\n\n</details>\n\nDefine implementations for the `Math` protocol as documented below.\n\n```elixir\ndefprotocol Math do\n  @moduledoc \"\"\"\n  iex> Math.add(1, 1)\n  2\n  iex> Math.add([1, 2], [3, 4])\n  [1, 2, 3, 4]\n  iex> Math.add(\"hello \", \"there\")\n  \"hello there\" \n\n  iex> Math.subtract(2, 1)\n  1\n  iex> Math.subtract([3, 2, 3], [3])\n  [2, 3] \n  iex> Math.subtract(\"babc\", \"bc\")\n  \"ab\"\n\n  iex> Math.add({}, {})\n  ** (Protocol.UndefinedError) protocol Math not implemented for {} of type Tuple\n  \"\"\"\n\n  def add(value1, value2)\n\n  def subtract(value1, value2)\nend\n\n# Define Implementations...\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Math With Protocols exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Math With Protocols\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/protocols.livemd\">Protocols</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/battle_map.livemd\">Battle Map</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task131-exercises-inventory_management", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# ETS Inventory Management\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=ETS Inventory Management\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/agent_journal.livemd\">Agent Journal</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/advanced_score_tracker.livemd\">Advanced Score Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## ETS Inventory\n\nYou're going to build an in-memory inventory management application using [:ets](https://elixir-lang.org/getting-started/mix-otp/ets.html).\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Inventory do\n  def new(opts \\\\ []) do\n    :ets.new(:inventory, opts)\n  end\n\n  def get_quantity(ref, item) do\n    case :ets.lookup(ref, item) do\n      [{_item, quantity}] -> quantity\n      _ -> 0\n    end\n  end\n\n  def store(ref, item, quantity) do\n    existing_quantity = get_quantity(ref, item)\n    :ets.insert(ref, {item, quantity + existing_quantity})\n  end\nend\n```\n\n</details>\n\nImplement the `Inventory` module as documented.\n\n```elixir\ndefmodule Inventory do\n  @moduledoc \"\"\"\n  Documentation for `Inventory`\n\n  ## Examples\n\n      Single quantity.\n\n      iex> ref = Inventory.new()\n      iex> Inventory.store(ref, :apples, 5)\n      iex> Inventory.get_quantity(ref, :apples)\n      5\n\n      Multiple stores.\n\n      iex> ref = Inventory.new()\n      iex> Inventory.store(ref, :apples, 5)\n      iex> Inventory.store(ref, :apples, 2)\n      iex> Inventory.get_quantity(ref, :apples)\n      7\n  \"\"\"\n  @doc \"\"\"\n  Create a new Inventory :ets table.\n\n  ## Examples\n\n      iex> ref = Inventory.new()\n      iex> is_reference(ref)\n      true\n  \"\"\"\n  def new() do\n  end\n\n  @doc \"\"\"\n  Retrieve the current quantity of an item in inventory.\n\n  ## Examples\n        \n      iex> ref = Inventory.new()\n      iex> Inventory.get_quantity(ref, :apples)\n      0\n  \"\"\"\n  def get_quantity(ref, item) do\n  end\n\n  @doc \"\"\"\n  Store an item in inventory.\n  If item exists, add amount to existing total.\n\n  ## Examples\n\n      iex> ref = Inventory.new()\n      iex> Inventory.store(ref, :apples, 5)\n      true\n  \"\"\"\n  def store(ref, item, quantity) do\n  end\nend\n```\n\n## Bonus: Warehouse\n\nYou're going to build a warehouse management application using `:ets`. Now, instead of having a single quantity for each item, every item can be stored in multiple boxes, each with their own quantity of that item.\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nConsider using the `:duplicate_bag` [Table Type](https://elixirschool.com/en/lessons/storage/ets#table-types-2).\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Warehouse do\n  def new() do\n    :ets.new(:warehouse, [:duplicate_bag])\n  end\n\n  def get_quantity(ref, item) do\n    :ets.lookup(ref, item)\n  end\n\n  def store(ref, item, quantity) do\n    :ets.insert(ref, {item, quantity})\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Warehouse do\n  @moduledoc \"\"\"\n  Documentation for `Warehouse`\n\n  ## Examples\n\n      Existing quantity.\n\n      iex> ref = Warehouse.new()\n      iex> Warehouse.store(ref, :apples, 5)\n      iex> Warehouse.get_boxes(ref, :apples)\n      [apples: 5]\n\n      Multiple Boxes.\n\n      iex> ref = Warehouse.new()\n      iex> Warehouse.store(ref, :apples, 1)\n      iex> Warehouse.store(ref, :apples, 3)\n      iex> Warehouse.get_boxes(ref, :apples)\n      [apples: 1, apples: 3]\n  \"\"\"\n\n  @doc \"\"\"\n  Create a new Warehouse :ets table.\n\n  ## Examples\n\n      iex> ref = Warehouse.new()\n      iex> is_reference(ref)\n      true\n  \"\"\"\n  def new(opts \\\\ []) do\n  end\n\n  @doc \"\"\"\n  Retrieve all boxes of an item and the associated quantity in each box.\n\n  ## Examples\n\n      iex> ref = Warehouse.new()\n      iex> Warehouse.get_boxes(ref, :apples)\n      []\n  \"\"\"\n  def get_boxes(ref, item) do\n  end\n\n  @doc \"\"\"\n  Store an item in the warehouse.\n  If item exists, add amount to existing total.\n\n    ## Examples\n\n      iex> ref = Warehouse.new()\n      iex> Warehouse.store(ref, :apples, 5)\n      true\n  \"\"\"\n  def store(ref, item, quantity) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish ETS Inventory Management exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=ETS Inventory Management\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/agent_journal.livemd\">Agent Journal</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/advanced_score_tracker.livemd\">Advanced Score Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task132-exercises-typespec_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Typespec Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Typespec Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/documentation_and_static_analysis.livemd\">Documentation And Static Analysis</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_documentation_and_static_analysis.livemd\">Games: Documentation And Static Analysis</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Typespec Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for typespecs. Follow the instructions for each drill and complete them as quickly as you can.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Review\n\nYou can define a function spec using the `@spec` module attribute. Each `@spec` includes the\nfunction parameter types, and the return value type.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@spec add(integer(), integer()) :: integer()\ndef add(int1, int2) do\n  int1 + int2\nend\n```\n\nYou can define custom types using the `@type` module attribute. These custom types can be used inside and outside of the current module.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@type user :: %{\n  name: string(),\n  age: integer()\n}\n```\n\nYou can include multiple types using the `|` operator. This works for functions using `@spec` and in custom types.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@spec double(integer() | nil)\n```\n\n## Function Specs\n\nAdd function `@spec`s based on the function parameter names and return value.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule FunctionSpecs do\n  @spec do_nothing :: nil\n  def do_nothing do\n    nil\n  end\n\n  @spec accept_and_return_anything(any()) :: any()\n  def accept_and_return_anything(anything) do\n    anything\n  end\n\n  @spec double(float()) :: float()\n  def double(float) when is_float(float) do\n    float * 2.0\n  end\n\n  @spec double(integer()) :: integer()\n  def double(integer) when is_integer(integer) do\n    integer * 2\n  end\n\n  @spec double(number()) :: number()\n  def double(number) do\n    number * 2\n  end\n\n  @spec add(integer(), integer()) :: integer()\n  def add(integer1, integer2) do\n    integer1 + integer2\n  end\n\n  @spec multiply(integer(), integer()) :: integer()\n  def multiply(integer1, integer2) do\n    integer1 * integer2\n  end\n\n  @spec divide(integer(), integer()) :: float()\n  def divide(integer1, integer2) do\n    integer1 / integer2\n  end\n\n  @spec rounded_divide(integer(), integer()) :: integer()\n  def rounded_divide(integer1, integer2) do\n    div(integer1, integer2)\n  end\n\n  @spec concat(String.t(), String.t()) :: String.t()\n  def concat(string1, string2) do\n    string1 <> string2\n  end\n\n  @spec to_string(integer()) :: String.t()\n  def to_string(integer) do\n    Integer.to_string(integer)\n  end\n\n  @spec merge(map(), map()) :: map()\n  def merge(map1, map2) do\n    Map.merge(map1, map2)\n  end\n\n  @spec split_and_lowercase(String.t()) :: [String.t()]\n  def split_and_lowercase(string) do\n    string\n    |> String.downcase()\n    |> String.split(\"\", trim: true)\n  end\n\n  @spec string_to_int(String.t()) :: integer()\n  def string_to_int(string) do\n    String.to_integer(string)\n  end\n\n  @spec integers_to_strings([integer()]) :: [String.t()]\n  def integers_to_strings(integers) do\n    Enum.map(integers, fn int -> Integer.to_string(int) end)\n  end\n  \n  @spec one_to_two(1) :: 2\n  def one_to_two(1) do\n    2\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule FunctionSpecs do\n  def do_nothing do\n    nil\n  end\n\n  def accept_and_return_anything(anything) do\n    anything\n  end\n\n  def double(float) when is_float(float) do\n    float * 2.0\n  end\n\n  def double(integer) when is_integer(integer) do\n    integer * 2\n  end\n\n  def double(number) do\n    number * 2\n  end\n\n  def add(integer1, integer2) do\n    integer1 + integer2\n  end\n\n  def multiply(integer1, integer2) do\n    integer1 * integer2\n  end\n\n  def divide(integer1, integer2) do\n    integer1 / integer2\n  end\n\n  def rounded_divide(integer1, integer2) do\n    div(integer1, integer2)\n  end\n\n  def concat(string1, string2) do\n    string1 <> string2\n  end\n\n  def to_string(integer) do\n    Integer.to_string(integer)\n  end\n\n  def merge(map1, map2) do\n    Map.merge(map1, map2)\n  end\n\n  def split_and_lowercase(string) do\n    string\n    |> String.downcase()\n    |> String.split(\"\", trim: true)\n  end\n\n  def string_to_int(string) do\n    String.to_integer(string)\n  end\n\n  def integers_to_strings(integers) do\n    Enum.map(integers, fn int -> Integer.to_string(int) end)\n  end\n\n  def one_to_two(1) do\n    2\n  end\nend\n```\n\n## Custom Types\n\nImplement the following custom `@type`s in the module below based on the comment describing them.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule CustomTypes do\n  # a string or number\n  @type unparsed_number :: String.t() | number()\n  # a list of strings\n  @type strings :: [String.t()]\n  # a map with :title (string) and :content (string) keys. \n  @type book :: %{title: String.t(), content: String.t()}\n  # A map with :name (string) and `:books` (a list of books) keys.\n  @type author :: %{name: String.t(), books: [book()]}\nend\n```\n\n</details>\n\n```elixir\ndefmodule CustomTypes do\n  # a string or number\n  @type unparsed_number\n  # a list of strings\n  @type strings\n  # a map with :title (string) and :content (string) keys. \n  @type book\n  # A map with :name (string) and `:books` (a list of books) keys.\n  @type author\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Typespec Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Typespec Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/documentation_and_static_analysis.livemd\">Documentation And Static Analysis</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_documentation_and_static_analysis.livemd\">Games: Documentation And Static Analysis</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task133-exercises-blog_custom_feature", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Custom Feature\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Custom Feature\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_deployment.livemd\">Blog: Deployment</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/group_project_blog_presentation.livemd\">Group Project: Presentation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Custom Feature\n\nStudents will add one custom feature to their blog project.\n\nHere are some example feature ideas to get you started:\n\n* Using ChatGPT to generate blog posts.\n* Add an E2E testing system such as [wallaby](https://github.com/elixir-wallaby/wallaby).\n* Add animations with Tailwind.\n* Add shared authors to blog posts (users would have a many-to-many relationship with posts).\n\nThis is an opportunity to follow your interests and express your creativity. Speak with your teacher once you have choses your feature idea to get feedback on it.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Custom Feature exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Custom Feature\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/blog_deployment.livemd\">Blog: Deployment</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/group_project_blog_presentation.livemd\">Group Project: Presentation</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task134-exercises-treasure_matching", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Drills: Pattern Matching\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Drills: Pattern Matching\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/advanced_pattern_matching.livemd\">Advanced Pattern Matching</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/drill-patternmatching-replace-nils.livemd\">Replacing Nils</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Drills: Pattern Matching\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for [Pattern Matching](../reading/advanced_pattern_matching.livemd). Follow the instructions for each drill and complete them as quickly as you can.\n\n## Treasure Matching\n\nIn this exercise, you're going to use **pattern matching** to extract the `\"jewel\"`\nstring from the data provided and bind it to a `jewel` variable. The first exercise is complete for example.\n\n```elixir\n[_, _, _, jewel] = [1, 2, 3, \"jewel\"]\njewel\n```\n\nUse pattern matching to bind a `jewel` variable to the `\"jewel\"` string. Each cell should return the `jewel` variable to prove it was bound correctly.\n\n```elixir\n[1, 2, 3, \"jewel\"]\n```\n\n```elixir\n%{key1: \"value\", key2: \"jewel\"}\n```\n\n```elixir\n%{1 => \"jewel\"}\n```\n\n```elixir\n%{%{key: [1, 2, 3, 4, 5, {}]} => \"jewel\"}\n```\n\n```elixir\n%{north: %{south: %{west: %{east: \"jewel\"}}}}\n```\n\n```elixir\n[2, \"jewel\"]\n```\n\n```elixir\n[\"jewel\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n```elixir\n[1, \"jewel\", 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n```elixir\n[1, 2, \"jewel\", 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n```elixir\n[[], [1, [2, \"jewel\"]]]\n```\n\n```elixir\n\"here is the jewel\"\n```\n\n```elixir\n{\"jewel\"}\n```\n\n```elixir\n{\"jewel\", 1}\n```\n\n```elixir\n{1, 2, \"jewel\"}\n```\n\n```elixir\n[\"jewel\"] ++ Enum.to_list(1..100)\n```\n\n```elixir\n[key: \"jewel\"]\n```\n\n```elixir\n[south: \"jewel\", east: {1, 2}]\n```\n\n```elixir\nEnum.map(1..4, fn each -> (each == 2 && \"jewel\") || each end)\n```\n\n```elixir\nEnum.map(1..4, &((&1 > 3 && \"jewel\") || &1))\n```\n\n## Sum\n\nCreate a `Sum` module that uses **recursion** and **pattern matching** to sum all elements in a list. Avoid using the [Enum](https://hexdocs.pm/elixir/Enum.html) module or a comprehension.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> Sum.list([1, 2, 3])\n6\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Sum do\n  def list(list, sum \\\\ 0)\n  def list([], sum), do: sum\n  def list([head | tail], sum), do: list(tail, sum + head)\nend\n```\n\n</details>\n\n```elixir\ndefmodule Sum do\n  @moduledoc \"\"\"\n  iex> Sum.list([1, 2, 3])\n  6\n  \"\"\"\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Drills: Pattern Matching exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Drills: Pattern Matching\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/advanced_pattern_matching.livemd\">Advanced Pattern Matching</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/drill-patternmatching-replace-nils.livemd\">Replacing Nils</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task135-exercises-pokemon_api", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Pokemon API\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:finch, \"~> 0.16.0\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pokemon API\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/apis.livemd\">APIs</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/rdbms.livemd\">Relational Database Management Systems</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Pokemon API\n\nWhen we rely on an external API, it's possible for them to change the format of a response, and have that cause issues for our application.\n\nThat's why it's often important to translate information from an API into a struct when we retrieve it. This way if the format of the API response changes then we can fix the issue in a single spot where we convert the API response into a struct. We can also keep only the information we want, rather than all of the data returned.\n\nOften, certain APIs will have a language-specific implementation that makes it easier to interact with the API.\n\nYou're going to create a `Pokelixir` project which uses the [Pokemon API](https://pokeapi.co/) to return Elixir-friendly `Pokemon` structs.\n\n## Initialize The Mix Project\n\nCreate a new `Pokelixir` mix project.\n\n```\nmix new pokelixir\n```\n\nAdd [Finch](https://github.com/sneako/finch) and [Jason](https://github.com/michalmuskala/jason) as dependencies. Ensure you add Finch to your application's supervision tree as documented on the Finch GitHub.\n\n## Define A Pokemon Struct\n\nA `Pokemon` struct should have the following (required) keys. We've included the types for clarity, you do not need to implement data validation.\n\n```mermaid\nclassDiagram\n  class Pokemon {\n    id: integer\n    name: string\n    hp: integer\n    attack: integer\n    defense: integer\n    special_attack: integer\n    special_defense: integer\n    speed: integer\n    weight: integer\n    height: integer\n    types: list of strings\n  }\n```\n\nHere's that data represented as a `Pokemon` struct.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%Pokemon{\n  id: 6,\n  name: \"charizard\",\n  hp: 78,\n  attack: 84,\n  defense: 78,\n  special_attack: 109,\n  special_defense: 85,\n  speed: 100,\n  height: 17,\n  weight: 905,\n  types: [\"fire\", \"flying\"]\n}\n```\n\n## Get A Pokemon\n\nUsing the [Pokemon API](https://pokeapi.co/), you can retrieve information about a pokemon using the following URL where `name` is the name of the pokemon.\n\n```\nhttps://pokeapi.co/api/v2/pokemon/name\n```\n\nFor example, you can retrieve the stats for `charizard` by making an HTTP GET request to the following URL.\n\n```\nhttps://pokeapi.co/api/v2/pokemon/charizard\n```\n\nYou should be able to retrieve the data for a pokemon and return it as a `Pokemon` struct.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nPokelixir.get(\"charizard\")\n```\n\n## Get All Pokemon\n\nYou can retrieve a list of pokemon using the following URL.\n\n```\nhttps://pokeapi.co/api/v2/pokemon\n```\n\nBy default, this URL only shows the the first `20` pokemon, and provides a `\"next\"` URL to retrieve the next `20` pokemon. This is a common [pagination](https://en.wikipedia.org/wiki/Pagination) strategy to avoid loading too much data at once.\n\n<details style=\"background-color: lightgrey; padding: 1rem; margin: 1rem 0;\">\n<summary>Response Example</summary>\n\n```javascript\n{\n  \"count\": 1154,\n  \"next\": \"https://pokeapi.co/api/v2/pokemon?offset=20&limit=20\",\n  \"previous\": null,\n  \"results\": [\n    {\n    \"name\": \"bulbasaur\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/1/\"\n    },\n    {\n    \"name\": \"ivysaur\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/2/\"\n    },\n    {\n    \"name\": \"venusaur\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/3/\"\n    },\n    {\n    \"name\": \"charmander\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/4/\"\n    },\n    {\n    \"name\": \"charmeleon\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/5/\"\n    },\n    {\n    \"name\": \"charizard\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/6/\"\n    },\n    {\n    \"name\": \"squirtle\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/7/\"\n    },\n    {\n    \"name\": \"wartortle\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/8/\"\n    },\n    {\n    \"name\": \"blastoise\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/9/\"\n    },\n    {\n    \"name\": \"caterpie\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/10/\"\n    },\n    {\n    \"name\": \"metapod\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/11/\"\n    },\n    {\n    \"name\": \"butterfree\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/12/\"\n    },\n    {\n    \"name\": \"weedle\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/13/\"\n    },\n    {\n    \"name\": \"kakuna\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/14/\"\n    },\n    {\n    \"name\": \"beedrill\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/15/\"\n    },\n    {\n    \"name\": \"pidgey\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/16/\"\n    },\n    {\n    \"name\": \"pidgeotto\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/17/\"\n    },\n    {\n    \"name\": \"pidgeot\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/18/\"\n    },\n    {\n    \"name\": \"rattata\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/19/\"\n    },\n    {\n    \"name\": \"raticate\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon/20/\"\n    }\n  ]\n}\n```\n\n</details>\n\nEach pokemon in the results list also has a URL you can use to get information about each pokemon.\n\nhttps://pokeapi.co/api/v2/pokemon/6/\n\nYou should be able to return a list of `Pokemon` structs for every pokemon.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nPokemon.all()\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nYou can either recursively retrieve the next `20` pokemon using the `\"next\"` url, or\nyou can make a request using the `limit` query parameter with a larger value than the number of pokemon.\n\n</details>\n\n## GitHub Repository\n\nConnect your `Pokelixir` project to a GitHub repository and create a README to describe the purpose of the project and what you learned building it.\n\nConsider refactoring, adding documentation, and testing if you have not already to make this an even better resume project.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Pokemon API exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pokemon API\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/apis.livemd\">APIs</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/rdbms.livemd\">Relational Database Management Systems</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task136-exercises-mazes", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"atom_key_maze.png\",\"type\":\"attachment\"},{\"name\":\"string_maze_small.png\",\"type\":\"attachment\"}]} -->\n\n# Mazes\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Mazes\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/family_tree.livemd\">Family Tree</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/functions.livemd\">Functions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\nIn this exercise, you're going to navigate a maze game.\n\nEach maze is a deeply nested `map`.\n\nIf you navigate successfully, your answer will return `\"Exit!\"`\n\n## The Atom Maze\n\nWe've created a map that represents the following maze. Each cardinal direction (north, south, west, east) necessary to navigate the maze is stored as a key in the map.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/atom_key_maze.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nUse **map.key** notation to access the `\"Exit!\"` string.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nmaze = %{\n  south: %{\n    west: %{\n      south: %{\n        east: %{\n          south: %{\n            east: %{\n              south: \"Exit!\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nmaze.south.west.south.east.south.east.south\n```\n\n</details>\n\n```elixir\nmaze = %{\n  south: %{\n    west: %{\n      south: %{\n        east: %{\n          south: %{\n            east: %{\n              south: \"Exit!\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## The String Maze\n\nUse **map[key]** notation to access the maze and retrieve the `\"Exit!\"` string.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/string_maze_small.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nmaze = %{\n  \"south\" => %{\n    \"east\" => %{\n      \"south\" => %{\n        \"west\" => %{\n          \"south\" => %{\n            \"west\" => %{\n              \"south\" => %{\n                \"east\" => %{\n                  \"south\" => \"Exit!\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nmaze[\"south\"][\"east\"][\"south\"][\"west\"][\"south\"][\"west\"][\"south\"][\"east\"][\"south\"]\n```\n\n</details>\n\n```elixir\nmaze = %{\n  \"south\" => %{\n    \"east\" => %{\n      \"south\" => %{\n        \"west\" => %{\n          \"south\" => %{\n            \"west\" => %{\n              \"south\" => %{\n                \"east\" => %{\n                  \"south\" => \"Exit!\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Bonus: Treasure Map\n\nYou have been given a treasure map (pun intended). That will lead you to `\"gold\"`.\n\nUse **map[key]** and/or **map.key** notation to retrieve the `\"gold\"` value in the `treasure_map`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ntreasure_map = %{\n  \"south ten paces\" => %{\n    10 => %{\n      :\"east three paces\" => %{\n        [1, 2, 3] => %{\n          {\"turn\", \"right\"} => %{\n            :dig => \"gold\"\n          }\n        }\n      }\n    }\n  }\n}\n\ntreasure_map[\"south ten paces\"][10][:\"east three paces\"][[1, 2, 3]][{\"turn\", \"right\"}][:dig]\n```\n\n</details>\n\n```elixir\ntreasure_map = %{\n  \"south ten paces\" => %{\n    10 => %{\n      :\"east three paces\" => %{\n        [1, 2, 3] => %{\n          {\"turn\", \"right\"} => %{\n            :dig => \"gold\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### (Extra Bonus) Update The Treasure Map\n\nUse map update syntax to create and update the original `treasure_map` such that the `\"gold\"` is now `\"taken\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ntreasure_map = %{\n  \"south ten paces\" => %{\n    10 => %{\n      :\"east three paces\" => %{\n        [1, 2, 3] => %{\n          {\"turn\", \"right\"} => %{\n            :dig => \"gold\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nWe can update the treasure map using map update syntax `%{old_map | updated_key}`.\n\n```elixir\n%{\n  treasure_map\n  | \"south ten paces\" => %{\n      10 => %{\n        :\"east three paces\" => %{\n          [1, 2, 3] => %{\n            {\"turn\", \"right\"} => %{:dig => \"taken\"}\n          }\n        }\n      }\n    }\n}\n```\n\nYou might also have found the [Kernel.put_in](https://hexdocs.pm/elixir/Kernel.html#put_in/3) function for updating a deeply nested map.\n\n```elixir\nput_in(\n  treasure_map,\n  [\"south ten paces\", 10, :\"east three paces\", [1, 2, 3], {\"turn\", \"right\"}, :dig],\n  \"taken\"\n)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\ntreasure_map = %{\n  \"south ten paces\" => %{\n    10 => %{\n      :\"east three paces\" => %{\n        [1, 2, 3] => %{\n          {\"turn\", \"right\"} => %{\n            :dig => \"gold\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Bonus: Pattern Matching\n\nUse pattern matching to bind the `\"Exit!\"` string to an `exit` variable.\n\n```elixir\nmaze = %{\n  \"south\" => %{\n    \"east\" => %{\n      \"south\" => %{\n        \"west\" => %{\n          \"south\" => %{\n            \"west\" => %{\n              \"south\" => %{\n                \"east\" => %{\n                  \"south\" => \"Exit!\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## BONUS: Create Your Own Maze\n\nGenerate a maze using the [Online Maze Generator](https://www.mazegenerator.net/). It should be\nat least a 5 * 5 in width and height.\n\n* Create a deeply nested map to represent your `custom_maze`. It should have an `\"Exit!\"` value at the end.\n* Have a partner navigate your maze using either **map[key]** notation or **map.key** notation to retrieve the `\"Exit!\"` value.\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Mazes exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Mazes\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/family_tree.livemd\">Family Tree</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/functions.livemd\">Functions</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task137-exercises-fibonacci", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Fibonacci Sequence\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:benchee, \"~> 1.1\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Fibonacci Sequence\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/recursion.livemd\">Recursion</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/lucas_numbers.livemd\">Lucas Numbers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Fibonacci Sequence\n\nThe Fibonacci Sequence is a series of the following numbers.\n\n```mermaid\nflowchart LR\na[0] --> b[1] --> c[1] --> d[2] --> e[3] --> f[5] --> g[8] --> h[13] --> i[21] --> k[34] --> ...\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIt's created by taking the sum of the previous to numbers to get the next number.\n\nSo $fib(n) = fib(n-1) + fib(n - 2)$\n\nYou'll notice that this is a recursive function. You're going to create a `Fibonacci` module that can generate the $nth$ fibonacci number.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Fibonacci do\n  def of(0), do: 0\n  def of(1), do: 1\n\n  def of(n) do\n    of(n - 1) + of(n - 2)\n  end\nend\n```\n\n</details>\n\nImplement the `Fibonacci` module as documented.\n\n```elixir\ndefmodule Fibonacci do\n  @moduledoc \"\"\"\n  Documentation for the `Fibonacci` module.\n  \"\"\"\n\n  @doc \"\"\"\n  Generate the nth fibonacci number.\n\n  ## Examples\n\n    iex> Fibonacci.of(0)\n    0\n\n    iex> Fibonacci.of(1)\n    1\n\n    iex> Fibonacci.of(2)\n    1\n\n    iex> Fibonacci.of(3)\n    2\n\n    iex> Fibonacci.of(4)\n    3\n\n    iex> Fibonacci.of(5)\n    5\n\n    iex> Fibonacci.of(6)\n    8\n\n    iex> Fibonacci.of(20)\n    6765\n  \"\"\"\n  def of(n) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Fibonacci Sequence exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Fibonacci Sequence\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/recursion.livemd\">Recursion</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/lucas_numbers.livemd\">Lucas Numbers</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task138-exercises-blog_migration", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Visibility Migration\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Visibility Migration\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_components.livemd\">Phoenix Components</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_one_to_many_associations.livemd\">One-To-Many Associations</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog: Visibility Migration\n\nYour existing [Blog](./group_project_blog.livemd) application should already have blog posts with a `title`, `subtitle`, and `content`.\n\nYou're going to make some modifications to the posts table that allow you to filter posts by visibility and sort them by a published date.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nerDiagram\n\nPost {\n    string title\n    text content\n    date published_on\n    boolean visibility\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requirements\n\n* Migration & Schema\n  * Remove the `subtitle` field on posts\n  * Add a published_on `:date` field on posts.\n  * Add a `visible` `:boolean` field with a default value of `true` on posts.\n  * **(bonus)** Add a unique constraint to post titles.\n* Functionality\n  * Update all post pages to account for the new and removed fields. For example, you will need to add the `visible` and `published_on` fields to the post form and remove the `subtitle` field.\n  * Display the list of posts from newest -> oldest.\n  * Hide posts if `visible` is `false`.\n  * **(bonus)** Hide posts if their `published_on` date is in the future.\n* Tests\n  * Write test(s) to ensure posts with `visible: false` are filtered from the list of posts.\n  * Write test(s) to ensure posts are displayed from newest -> oldest.\n  * All tests should pass. You may need to modify old tests and pages to ensure they continue to pass.\n  * **(bonus)** Write test(s) to ensure posts with a published date in the future are filtered from the list of posts.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Visibility Migration exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Visibility Migration\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_components.livemd\">Phoenix Components</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_one_to_many_associations.livemd\">One-To-Many Associations</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task139-exercises-mapset_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# MapSet Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=MapSet Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/maps_mapsets_keyword_lists.livemd\">Maps, Mapsets, And Keyword Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fibonacci_challenge.livemd\">Fibonacci Sequence</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## MapSet Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for [MapSets](../reading/maps_mapsets_keyword_lists.livemd) follow the instructions for each drill and complete them as quickly as you can.\n\n## MapSet.new/2\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with the integers `1`, `2`, and `3`.\n\n```elixir\n\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create an empty mapset.\n\n```elixir\n\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with the integers `1` to `10`.\n\n```elixir\n\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with the integers `1` to `1000`.\n\n```elixir\n\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with the same elements as the list below.\n\n```elixir\nlist = [%{}, 2, \"3\"]\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with the elements `%{key: \"value\"}`, `[one: 1]`, and `{1, 2, 3}`.\n\n```elixir\n\n```\n\n## MapSet.put/2\n\nUse [MapSet.put/2](https://hexdocs.pm/elixir/MapSet.html#put/2) to put the element `\"a\"` into the existing `mapset`.\n\n```elixir\nmapset = MapSet.new([\"b\", \"c\"])\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) and [MapSet.put/2](https://hexdocs.pm/elixir/MapSet.html#put/2) to put `1` into a [MapSet](https://hexdocs.pm/elixir/MapSet.html) containing the elements `2` and `3`.\n\n```elixir\n\n```\n\nUse [MapSet.put/2](https://hexdocs.pm/elixir/MapSet.html#put/2) twice with the element `1` on an empty mapset to demonstrate that the MapSet only contains unique values.\n\n```elixir\n\n```\n\n## MapSet.delete/2\n\nUse [MapSet.delete/2](https://hexdocs.pm/elixir/MapSet.html#delete/2) to delete the `1` element from the following `mapset`.\n\n```elixir\nmapset = MapSet.new([1])\n```\n\nUse [MapSet.delete/2](https://hexdocs.pm/elixir/MapSet.html#delete/2) and [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with elements from `1` to `6` then delete the `6` element.\n\n## MapSet.member?/2\n\nUse [MapSet.member?/2](https://hexdocs.pm/elixir/MapSet.html#member?/2) to check if `1` is in the following `mapset`.\n\n```elixir\nmapset = MapSet.new([1, 2, 3])\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create a mapset with elements from `1` to `10`. Then use [MapSet.member?/2](https://hexdocs.pm/elixir/MapSet.html#member?/2) to check if `11` is in the mapset.\n\n```elixir\n\n```\n\nUse [MapSet.member?/2](https://hexdocs.pm/elixir/MapSet.html#member?/2) to check if `%{key: \"value\"}` is in the following mapset.\n\n```elixir\nmapset = MapSet.new([%{key: \"value\"}])\n```\n\n## MapSet.filter/2\n\nUse [MapSet.filter/2](https://hexdocs.pm/elixir/MapSet.html#filter/2) to filter the following mapset and make a mapset with only integers.\n\n```elixir\nmapset = MapSet.new([\"a\", \"b\", \"c\", 1, 2, 3])\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) and [MapSet.filter/2](https://hexdocs.pm/elixir/MapSet.html#filter/2) to create a mapset with integers from `1` to `10`, then filter it to make a mapset with only even numbers.\n\n```elixir\n\n```\n\nUse [MapSet.filter/2](https://hexdocs.pm/elixir/MapSet.html#filter/2) to filter the following mapset to only include strings containing the letter `\"a\"`.\n\n```elixir\nMapSet.new([\"apple\", \"orange\", \"pear\", \"banana\", \"cherry\", \"fruit\"])\n```\n\n## MapSet.equal?/2\n\nUse [MapSet.equal?/2](https://hexdocs.pm/elixir/MapSet.html#equal?/2) to check if the following mapset is equal to `MapSet.new([1])`.\n\n```elixir\nmapset = MapSet.new([1])\n```\n\nUse [MapSet.equal?/2](https://hexdocs.pm/elixir/MapSet.html#equal?/2) to check if `MapSet.new([1, 2, 3, 4, 5])` is equal to `MapSet.new(1..5)`.\n\n```elixir\n\n```\n\nUse [MapSet.new/2](https://hexdocs.pm/elixir/MapSet.html#new/2) to create an empty mapset, then [MapSet.put/2](https://hexdocs.pm/elixir/MapSet.html#put/2) to add `1` to the mapset.\nThen use [MapSet.equal?/2](https://hexdocs.pm/elixir/MapSet.html#equal?/2) to check if the resulting mapset equals `MapSet.new([1])`\n\n```elixir\n\n```\n\n## MapSet.subset?/2\n\nUse [MapSet.subset?/2](https://hexdocs.pm/elixir/MapSet.html#subset?/2) to check if `MapSet.new([2, 3])` is a subset of `MapSet.new([1, 2, 3, 4])`. The result should be `true`.\n\n```elixir\n\n```\n\nUse [MapSet.subset?/2](https://hexdocs.pm/elixir/MapSet.html#subset?/2) to check if `MapSet.new([\"a\"])` is a subset of `MapSet.new([\"a\", \"b\"])`.\n\n```elixir\n\n```\n\n## MapSet.to_list/1\n\nUse [MapSet.to_list/1](https://hexdocs.pm/elixir/MapSet.html#to_list/1) to convert the following `mapset` into a list.\n\n```elixir\nmapset = MapSet.new([1, 2, 3])\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish MapSet Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=MapSet Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/maps_mapsets_keyword_lists.livemd\">Maps, Mapsets, And Keyword Lists</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/fibonacci_challenge.livemd\">Fibonacci Sequence</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task140-exercises-factorial", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Factorial\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Factorial\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/lucas_numbers.livemd\">Lucas Numbers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/pascals_triangle.livemd\">Pascal's Triangle</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Factorial\n\nThe factorial of a $n$ is the sum of the sequence of numbers leading up to $n$.\n\n```mermaid\nflowchart LR\nn --*--> n1[n - 1] --*--> n2[n - 2] --*--> n3[n - 3] --*--> 2 --*--> 1\n```\n\nMeaning the factorial of `5` is `5 * 4 * 3 * 2 * 1` which equals `120`.\n\nSo $factorial(n) = n * factorial(n - 1)$\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Factorial do\n  def of(1), do: 1\n  def of(n) do\n    n * of(n - 1)\n  end\nend\n```\n\n</details>\n\nOur factorial function only needs to handle inputs above `1`.\nImplement the `Factorial` module as documented below.\n\n```elixir\ndefmodule Factorial do\n  @doc \"\"\"\n  Find the factorial of an integer.\n\n  ## Examples\n\n    iex> Factorial.of(1)\n    1\n\n    iex> Factorial.of(2)\n    2\n\n    iex> Factorial.of(3)\n    6\n\n    iex> Factorial.of(4)\n    24\n    \n    iex> Factorial.of(5)\n    120\n\n    iex> Factorial.of(10)\n    3628800\n  \"\"\"\n  def of(n) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Factorial exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Factorial\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/lucas_numbers.livemd\">Lucas Numbers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/pascals_triangle.livemd\">Pascal's Triangle</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task141-exercises-blog_cover_image", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Cover Image\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Cover Image\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_one_to_one_relationships.livemd\">One-to-One Relationships</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/tailwind.livemd\">Tailwind</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog: Cover Image\n\nYou're going to add a cover images in your blog project.\n\nEach `Post` will have a one-to-one relationship with a `CoverImage`.\n\n```mermaid\nerDiagram\n\nPost {\n}\n\nCoverImage {\n    string url\n    id post_id\n}\n\nPost ||--O| CoverImage: \"has one/belongs to\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requirements\n\n* Migration and Schema:\n  * Create `cover_images` table with a `url` and a `post_id` foreign key field.\n  * Associate the `Post` and `CoverImage` records through a has_one/belongs_to association.\n* Functionality\n  * Create, update, and delete posts with cover images using a url.\n  * Display the post cover image on the post show page.\n* Tests\n  * Write context and controller tests to ensure a user can create, update, and delete a post with a cover image.\n  * All tests should pass. You may need to modify old tests and pages to ensure they continue to pass.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Cover Image exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Cover Image\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_one_to_one_relationships.livemd\">One-to-One Relationships</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/tailwind.livemd\">Tailwind</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task142-exercises-group_project_blog", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Group Project: Blog\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Group Project: Blog\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/phoenix_drills.livemd\">Phoenix Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_and_ecto.livemd\">Phoenix And Ecto</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Group Project: Blog\n\nYou're going to build a `Blog` application with a group of 3-4 others to learn more about Phoenix and Ecto.\n\nAs we move through the Phoenix and Web Development section, you'll gradually add more features to your blog.\n\n## Requirements\n\n### Features\n\nYour blog application should have the following features.\n\n* Posts with a CoverImage\n* Users\n* Tags\n* Comments\n* Authentication and Authorization\n\nAs you progress through the Phoenix section you'll complete the following exercises that further clarify these features.\n\n* [Blog: Posts](../exercises/blog_posts.livemd)\n* [Blog: Search](../exercises/blog_search.livemd)\n* [Blog: Visibility Migration](../exercises/blog_migration.livemd)\n* [Blog: Comments](../exercises/blog_comments.livemd)\n* [Blog: Authentication](../exercises/blog_authentication.livemd)\n* [Blog: Tags](../exercises/blog_tags.livemd)\n* [Blog: Cover Image](../exercises/blog_cover_image.livemd)\n* [Blog: Home Page](../exercises/blog_home_page.livemd)\n* [Blog: Deployment](../exercises/blog_deployment.livemd)\n* [Blog: Custom Feature](../exercises/blog_custom_feature.livemd)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Entity Relationship Diagram\n\nHere's an Entity-Relationship Diagram that describes the data and associations in the blog project.\n\n```mermaid\nerDiagram\nUser {\n  string username\n  string email\n  string password\n  string hashed_password\n  naive_datetime confirmed_at\n}\n\nPost {\n    string title\n    text content\n    date published_on\n    boolean visibility\n}\n\nCoverImage {\n    text url\n    id post_id\n}\n\nComment {\n  text content\n  id post_id\n}\n\nTag {\n    string name\n}\n\nUser |O--O{ Post: \"\"\nPost }O--O{ Tag: \"\"\nPost ||--O{ Comment: \"\"\nPost ||--|| CoverImage: \"\"\n```\n\n## Initialize Group Project\n\nHave the project lead use `phx.new` to create a new `blog` project.\n\n```\n$ mix phx.new blog\n```\n\nInitialize the project with git.\n\n```\n$ git init\n```\n\n[Create a GitHub Repository](https://github.com/new) and invite everyone as contributors to the project.\n\n## Create Your README\n\nEdit the `README.md` file initialized in your Phoenix project.\n\nInclude at least the following information:\n\n* Project Name\n* Project Summary\n* Technologies Used (Phoenix, Elixir)\n* Contributors\n* An ERDiagram made with mermaid. (see above)\n\nYou may update your README as the project expands\n\n## Protect Main\n\n[Protect your main branch](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule) so that no one can push directly to main without a PR review.\n\nThis is a common safety mechanism used on most projects to ensure no one can accidentally write to the main branch without review by another member of the project.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Group Project: Blog exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Group Project: Blog\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/phoenix_drills.livemd\">Phoenix Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_and_ecto.livemd\">Phoenix And Ecto</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task143-exercises-comprehension_search", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Comprehension Product Search\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comprehension Product Search\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/anagram.livemd\">Anagram</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/reduce.livemd\">Reduce</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Comprehension Product Search\n\nYou're going to create a `Products` module that mimics searching a list of products.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Products.all_items/0\n\nCreate a `Products.all_items/0` function that uses comprehensions to generate variations of items.\n\nitems should be a map with the following fields:\n\n* **name**: a string of either `\"computer\"`, `\"phone\"` or `\"tablet\"`\n* **price**: A random integer between `1` and `100`.\n\nUsing these values above, `all_items/0` should generate `300` unique items.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[\n  %{name: \"computer\", price: 1},\n  %{name: \"computer\", price: 2},\n  %{name: \"computer\", price: 3}\n  ...\n] = Products.all_items()\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Products.search/2\n\nGiven a list of items and a keyword list of filters, use comprehensions to filter the list of items that match the given filters.\n\n* **min**: The product price must be greater than or equal to this value.\n* **max**: The product must be less than or equal to this value.\n* **name**: The product name must be equal to this value.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nall_items = Products.all_items()\n\n[\n  %{name: \"computer\", price: 10},\n  %{name: \"computer\", price: 11},\n  %{name: \"computer\", price: 12},\n  %{name: \"computer\", price: 13},\n  %{name: \"computer\", price: 14},\n  %{name: \"computer\", price: 15},\n] = Products.search(all_items, [min: 10, max: 15, name: \"computer\"])\n```\n\nIf a filter is not provided, then do not filter based on that value.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[\n  %{name: \"computer\", price: 10},\n  %{name: \"phone\", price: 10},\n  %{name: \"tablet\", price: 10},\n] = Products.search(all_items, [min: 10, max: 10])\n```\n\n<details style=\"background-color: lightgreen; padding: 12px; margin-top: 1rem;\">\n<summary>Solution Example</summary>\n\n```elixir\ndefmodule Products do\n  def all_items do\n    for name <- [\"computer\", \"phone\", \"tablet\"], price <- 1..100 do\n      %{name: name, price: price}\n    end\n  end\n\n  def search(items, filters) do\n    name = Keyword.get(filters, :name)\n    min = Keyword.get(filters, :min)\n    max = Keyword.get(filters, :max)\n\n    for item <- items,\n        !name || item.name == name,\n        !max || item.price <= max,\n        !min || min <= item.price do\n      item\n    end\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Products do\n  def all_items do\n  end\n\n  def search(items, filters) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Comprehension Product Search exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comprehension Product Search\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/anagram.livemd\">Anagram</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/reduce.livemd\">Reduce</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task144-exercises-named_number_lists", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Named Number Lists\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Named Number Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fizzbuzz.livemd\">FizzBuzz</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/measurements.livemd\">Measurements</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Named Number Lists\n\nGenerate a list with ten random integers from `0` to `9`. Convert each integer in this list to its string representation so `1` would become `\"one\"`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Input\n[1, 2, 4, 2, 7, 8, 0, 4, 5, 6]\n# Output\n[\"one\", \"two\", \"four\", \"two\", \"seven\", \"eight\", \"zero\", \"four\", \"five\", \"six\"]\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\n   0 --> zero\n   1 --> one\n   2 --> two\n   3 --> three\n   4 --> four\n   5 --> five\n   6 --> six\n   7 --> seven\n   8 --> eight\n   9 --> nine\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example Solution</summary>\n\n  ```elixir\n  random_integers = Enum.map(1..10, fn _ -> Enum.random(0..9) end)\n\n  Enum.map(random_integers, fn integer ->\n    case integer do\n      0 -> \"zero\"\n      1 -> \"one\"\n      2 -> \"two\"\n      3 -> \"three\"\n      4 -> \"four\"\n      5 -> \"five\"\n      6 -> \"six\"\n      7 -> \"seven\"\n      8 -> \"eight\"\n      9 -> \"nine\"\n    end\n  end)\n  ```\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Named Number Lists exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Named Number Lists\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/fizzbuzz.livemd\">FizzBuzz</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/measurements.livemd\">Measurements</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task145-exercises-traffic_light_server", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Traffic Light Server\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Traffic Light Server\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/stack.livemd\">Tested Stack</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/supervisors.livemd\">Supervisors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Traffic Light Server\n\nYou're going to create a `TrafficLights` mix project that manages traffic.\n\n```\nmix new traffic_lights\n```\n\nCreate a `TrafficLights.Light` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that mimics a traffic light transitioning from green to yellow to red.\n\n```mermaid\nflowchart LR\n  G((1))\n  Y((2))\n  R((3))\n  G --> Y --> R --> G\n  style G fill: lightgreen\n  style Y fill: lightyellow\n  style R fill: coral\n```\n\nThis is also a simple example of building a [Finite-state machine](https://en.wikipedia.org/wiki/Finite-state_machine) using [GenServer](https://hexdocs.pm/elixir/GenServer.html).\n\n### Requirements\n\n* The initial traffic light state should start as `:green`. Store light states as atoms `:green`, `:yellow`, and `:red`.\n* Handle an asynchronous `:transition` message to transition the current light.\n* Handle a synchronous `:current_light` message to retrieve the current light.\n* Create the `transition/1` and `current_light/1` messages as documented below.\n* Write a full suite of tests for the `TrafficLights` module.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, pid} = TrafficLights.Light.start_link([])\n\n:green = TrafficLights.Light.current_light(pid)\n:ok = TrafficLights.Light.transition(pid)\n\n:yellow = TrafficLights.Light.current_light(pid)\n:ok = TrafficLights.Light.transition(pid)\n\n:red = TrafficLights.Light.current_light(pid)\n:ok = TrafficLights.Light.transition(pid)\n\n:green = TrafficLights.Light.current_light(pid)\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule TrafficLights.Light do\n  use GenServer\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def transition(pid) do\n    GenServer.call(pid, :transition)\n  end\n\n  def current_light(pid) do\n    GenServer.call(pid, :current_light)\n  end\n\n  @impl true\n  def init(_opts) do\n    {:ok, :green}\n  end\n\n  @impl true\n  def handle_call(:transition, _from, state) do\n    next_state =\n      case state do\n        :green -> :yellow\n        :yellow -> :red\n        :red -> :green\n      end\n\n    {:reply, next_state, next_state}\n  end\n\n  @impl true\n  def handle_call(:current_light, _from, state) do\n    {:reply, state, state}\n  end\nend\n```\n\n</details>\n\n## TrafficGrid\n\nCreate a `TrafficLights.Grid` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that manages five `TrafficLights.Light` processes.\n\n```mermaid\nflowchart\nTG[TrafficLights.Grid]\nTLS1[TrafficLights.Light]\nTLS2[TrafficLights.Light]\nTLS3[TrafficLights.Light]\nTLS4[TrafficLights.Light]\nTLS5[TrafficLights.Light]\nG1[Green]\nG2[Green]\nG3[Green]\nG4[Green]\nG5[Green]\nY1[Yellow]\nY2[Yellow]\nY3[Yellow]\nY4[Yellow]\nY5[Yellow]\nR1[Red]\nR2[Red]\nR3[Red]\nR4[Red]\nR5[Red]\n\nTG --> TLS1\nTG --> TLS2\nTG --> TLS3\nTG --> TLS4\nTG --> TLS5\n\nTLS1 --> G1 --> Y1 --> R1 --> G1\nTLS2 --> G2 --> Y2 --> R2 --> G2\nTLS3 --> G3 --> Y3 --> R3 --> G3\nTLS4 --> G4 --> Y4 --> R4 --> G4\nTLS5 --> G5 --> Y5 --> R5 --> G5\n\nstyle G1 fill:lightgreen\nstyle G2 fill:lightgreen\nstyle G3 fill:lightgreen\nstyle G4 fill:lightgreen\nstyle G5 fill:lightgreen\nstyle Y1 fill:lightyellow\nstyle Y2 fill:lightyellow\nstyle Y3 fill:lightyellow\nstyle Y4 fill:lightyellow\nstyle Y5 fill:lightyellow\nstyle R1 fill:lightcoral\nstyle R2 fill:lightcoral\nstyle R3 fill:lightcoral\nstyle R4 fill:lightcoral\nstyle R5 fill:lightcoral\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requirements\n\n* The initial state of the grid should contain a list with five `TrafficLights.Light` pids in addition to any other state you want to track\n* Create a `current_lights/1` and `transition/1` function as documented below.\n* Write a full suite of tests.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n{:ok, pid} = TrafficLights.Grid.start_link([])\n\n:ok = TrafficLights.Grid.transition(pid)\n\n[:yellow, :green, :green, :green, :green] = TrafficLights.Grid.current_lights(pid)\n\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n\n[:red, :yellow, :yellow, :yellow, :yellow] = TrafficLights.Grid.current_lights(pid)\n\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n:ok = TrafficLights.Grid.transition(pid)\n\n[:green, :red, :red, :red, :red] = TrafficLights.Grid.current_lights(pid)\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule TrafficLights.Grid do\n  use GenServer\n\n  def start_link(_opts) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def transition(grid_pid) do\n    GenServer.call(grid_pid, :transition)\n  end\n\n  def current_lights(grid_pid) do\n    GenServer.call(grid_pid, :current_lights)\n  end\n\n  @impl true\n  def init(_opts) do\n    light_pids =\n      Enum.map(1..5, fn _ ->\n        {:ok, pid} = TrafficLights.Light.start_link([])\n        pid\n      end)\n\n    {:ok, %{light_pids: light_pids, transition_index: 0}}\n  end\n\n  @impl true\n  def handle_call(:transition, _from, state) do\n    light_pid = Enum.at(state.light_pids, state.transition_index)\n    TrafficLights.Light.transition(light_pid)\n\n    lights = Enum.map(state.light_pids, &TrafficLights.Light.current_light/1)\n    next_transition_index = rem(state.transition_index + 1, length(state.light_pids))\n\n    {:reply, lights, %{state | transition_index: next_transition_index}}\n  end\n\n  @impl true\n  def handle_call(:current_lights, _from, state) do\n    lights = Enum.map(state.light_pids, &TrafficLights.Light.current_light/1)\n\n    {:reply, lights, state}\n  end\nend\n```\n\n</details>\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Traffic Light Server exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Traffic Light Server\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/stack.livemd\">Tested Stack</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/supervisors.livemd\">Supervisors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task146-exercises-shopping_list", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Shopping List\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Shopping List\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/maps.livemd\">Maps</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/family_tree.livemd\">Family Tree</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Text Shopping List\n\nYou are creating a shopping list app. Users have the ability to add items into their `shopping_cart`.\nEach item is represented as a string.\n\nIn the Elixir cells below, use `++` and `--` to add the items shown.\n\n* Add `\"grapes\"`, `\"walnuts\"`, and `\"apples\"` to the `shopping_cart`\n* Add `\"blueberries\"`, `\"chocolate\"`, and `\"pizza\"` to the `shopping_cart`.\n* Remove `\"grapes\"` and `\"walnuts\"` from the `shopping_cart`\n* Add three `\"banana\"`s to the `shopping_cart`\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nshopping_cart = []\n\nshopping_cart = shopping_cart ++ [\"grapes\", \"walnuts\", \"apples\"]\nshopping_cart = shopping_cart ++ [\"blueberries\", \"chocolate\", \"pizza\"]\nshopping_cart = shopping_cart -- [\"grapes\", \"walnuts\"]\nshopping_cart = shopping_cart ++ [\"banana\", \"banana\", \"banana\"]\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Text Shopping List With Quantities\n\nUsers of your shopping list app have asked that they be able to include the quantity of each item\nto make adding many items easier.\n\nIn the Elixir cell below, use a keyword list in the format `[item: quantity]` to add or remove\nitems from the `shopping_cart`\n\n* Add `1` `milk` and `12` `eggs`\n* Add `2` `bars_of_butter` and `10` `candies`\n* Remove `2` `bars_of_butter`\n* Remove `5` `candies` (Notice `5` and not `10`!).\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nshopping_cart = []\n\nshopping_cart = shopping_cart ++ [milk: 1, eggs: 12]\nshopping_cart = shopping_cart ++ [bars_of_butter: 2, candies: 10]\nshopping_cart = shopping_cart -- [bars_of_butter: 2]\nshopping_cart = shopping_cart -- [candies: 10]\nshopping_cart = shopping_cart ++ [candies: 5]\n```\n\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Shopping List exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Shopping List\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/maps.livemd\">Maps</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/family_tree.livemd\">Family Tree</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task147-exercises-capstone_github_project", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Capstone GitHub Project\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone GitHub Project\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/capstone_project_guide.livemd\">Capstone Project Guide</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/capstone_entity_relationship_diagram.livemd\">Capstone Project: Entity-Relationship Diagram</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Capstone Project: GitHub Project\n\nInitialize your capstone project where `app_name` is your project name.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nmix phx.new app_name\n```\n\nThen do the following:\n\n* Connect your capstone project to a [GitHub Repository](https://docs.github.com/en/get-started/quickstart/create-a-repo)\n* Create a [GitHub Project](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/quickstart-for-projects#creating-a-user-project) kanban board to track project feature progress.\n* On the GitHub Project kanban board, create a list of feature tickets.\n\nIdeally, when prioritizing features, we recommend you start with a very small MVP (Minimum Viable Product) you can easily accomplish within the timeframe and extra features you can build to expand the project.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Capstone GitHub Project exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Capstone GitHub Project\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/capstone_project_guide.livemd\">Capstone Project Guide</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/capstone_entity_relationship_diagram.livemd\">Capstone Project: Entity-Relationship Diagram</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task148-exercises-games_guessing_game", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games: Guessing Game\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Guessing Game\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games.livemd\">Games Project</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_rock_paper_scissors.livemd\">Games: Rock Paper Scissors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Games: Guessing Game\n\nIn your existing [Games](./games.livemd) project, you're going to create a number guessing game which accepts user input through the\ncommand line.\n\nYou should be able to start your project by running the following from the `game` folder in\nthe command line.\n\n```\niex -S mix\n```\n\nThen you can start the game with the `Games.GuessingGame` module.\n\n`Games.GuessingGame` should prompt the user to guess a number between `1` and `10`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> Games.GuessingGame.play()\nGuess a number between 1 and 10:\n```\n\nIf the guess is correct, return a winning message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nGuess a number between 1 and 10: 10\nYou win!\n```\n\nif the guess is incorrect, return a failing message.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nGuess a number between 1 and 10: 1\nIncorrect!\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bonus: Re-Attempt\n\nIf the guess is incorrect, re-prompt the user to enter another guess until they succeed. This is harder problem than you might expect! See the future lesson on [Recursion](../reading/recursion.livemd) for more information.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEnter your guess: 10\nIncorrect!\nEnter your guess: 5\nIncorrect!\nEnter your guess: 7\nCorrect!\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Bonus: High Or Low!\n\nIf the guess is too high or low, prompt the user with informative feedback.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEnter your guess: 10\nToo High!\nEnter your guess: 5\nToo Low!\nEnter your guess: 7\nCorrect!\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Limited Attempts\n\nGive the user 5 attempts to guess the answer. Print a losing message and end the game if they don't guess the answer.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEnter your guess: 10\nToo high!\nEnter your guess: 9\nToo high!\nEnter your guess: 8\nToo high!\nEnter your guess: 7\nToo high!\nEnter your guess: 6\nToo high!\nEnter your guess: 5\nYou lose! the answer was 4\niex> \n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games: Guessing Game exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Guessing Game\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games.livemd\">Games Project</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/games_rock_paper_scissors.livemd\">Games: Rock Paper Scissors</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task149-exercises-math_with_guards", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Math With Guards\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Math With Guards\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/user_validation.livemd\">User Validation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/protocols.livemd\">Protocols</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Math With Guards\n\nYou're going to create a `Math` module that uses **guards** to add or subtract **integers**, **strings**, and **lists** with the same `add/2` and `subtract/2` functions.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n2 = Math.add(1, 1)\n[1, 2, 3, 4] = Math.add([1, 2], [3, 4])\n\"hello there\" = Math.add(\"hello there\")\n\n1 = Math.subtract(2, 1)\n[2, 3] = Math.subtract([3, 2, 3], [3])\n\"ab\" = Math.subtract(\"babc\", \"bc\")\n```\n\nRaise a [FunctionClauseError](https://hexdocs.pm/elixir/FunctionClauseError.html) error if an invalid value is provided.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nMath.add(2, \"2\")\n** (FunctionClauseError) no function clause matching in Math.add/2\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint: Subtracting Strings</summary>\n\nConsider converting your strings to a list, then subtract the two lists together then join your result back into a string.\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Math do\n  def add(integer1, integer2) when is_integer(integer1) and is_integer(integer2) do\n    integer1 + integer2\n  end\n\n  def add(list1, list2) when is_list(list1) and is_list(list2) do\n    list1 ++ list2\n  end\n\n  def add(string1, string2) when is_binary(string1) and is_binary(string2) do\n    string1 <> string2\n  end\n\n  def subtract(integer1, integer2) when is_integer(integer1) and is_integer(integer2) do\n    integer1 - integer2\n  end\n\n  def subtract(list1, list2) when is_list(list1) and is_list(list2) do\n    list1 -- list2\n  end\n\n  def subtract(string1, string2) when is_binary(string1) and is_binary(string2) do\n    String.split(string1, \"\")\n    |> subtract(String.split(string2, \"\"))\n    |> Enum.join()\n  end\nend\n```\n\n</details>\n\nImplement the `Math` module as documented below.\n\n```elixir\ndefmodule Math do\n  @moduledoc \"\"\"\n  iex> Math.add(1, 1)\n  2\n  iex> Math.add([1, 2], [3, 4])\n  [1, 2, 3, 4]\n  iex> Math.add(\"hello \", \"there\")\n  \"hello there\" \n\n  iex> Math.subtract(2, 1)\n  1\n  iex> Math.subtract([3, 2, 3], [3])\n  [2, 3] \n  iex> Math.subtract(\"babc\", \"bc\")\n  \"ab\"\n\n  iex> Math.add(2, \"2\")\n  ** (FunctionClauseError) no function clause matching in Math.add/2\n  \"\"\"\n\n  def add(value1, value2) do\n  end\n\n  def subtract(value1, value2) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Math With Guards exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Math With Guards\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/user_validation.livemd\">User Validation</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/protocols.livemd\">Protocols</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task150-exercises-filter_values_by_type", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Filter Values By Type\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Filter Values By Type\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/built-in_modules.livemd\">Built-In Elixir Modules</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/tic-tac-toe.livemd\">Tic-tac-toe</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Filter Values By Type\n\nGiven a list of random items that could be any type, you are going to find all of the items that match a particular type.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nFilter.floats([1, 2, 3, 4.0])\n[4.0]\n\nFilter.integers([1, 2, 3, 4.0])\n[1, 2, 3]\n\nFilter.maps([\"hello\", 4.0, %{key: \"value\"}, %{}])\n[%{key: \"value\"}, %{}]\n```\n\nImplement the `Filter` module as documented.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Filter do\n  def integers(list) do\n    Enum.filter(list, &is_integer/1)\n  end\n\n  def floats(list) do\n    Enum.filter(list, &is_float/1)\n  end\n\n  def numbers(list) do\n    Enum.filter(list, fn number -> is_number(number) end)\n  end\n\n  def atoms(list) do\n    Enum.filter(list, &is_atom/1)\n  end\n\n  def lists(list) do\n    Enum.filter(list, fn item -> is_list(item) and item != [] end)\n  end\n\n  def maps(list) do\n    Enum.filter(list, &is_map/1)\n  end\n\n  def keyword_lists(list) do\n    Enum.filter(list, &Keyword.keyword?/1)\n  end\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\ndefmodule Filter do\n  @doc \"\"\"\n  Filter in integers in list.\n\n  ## Examples\n\n    iex> Filter.integers([1, 2, %{}, {}, []])\n    [1, 2]\n  \"\"\"\n  def integers(list) do\n  end\n\n  @doc \"\"\"\n  Filter in floats in list.\n\n  ## Examples\n\n    iex> Filter.floats([1, 2, %{}, {}, [], 1.2, 3.2])\n    [1.2, 3.2]\n  \"\"\"\n  def floats(list) do\n  end\n\n  @doc \"\"\"\n  Filter in numbers and floats in list.\n\n  ## Examples\n\n    iex> Filter.numbers([1, 2, %{}, {}, [], 1.2, 3.2])\n    [1, 2, 1.2, 3.2]\n  \"\"\"\n  def numbers(list) do\n  end\n\n  @doc \"\"\"\n  Filter in atoms in list.\n\n  ## Examples\n\n    iex> Filter.atoms([1, 2, %{}, {}, [], :first_atom, 1.2, 3.2, :second_atom])\n    [:first_atom, :second_atom]\n  \"\"\"\n  def atoms(list) do\n  end\n\n  @doc \"\"\"\n  Filter in lists and keyword lists in list.\n\n  ## Examples\n\n    iex> Filter.lists([1, 2, %{}, {}, [], 1.2, 3.2, :atom, [1, 2], [4, 5, 6]])\n    [[], [1, 2], [4, 5, 6]]\n  \"\"\"\n  def lists(list) do\n  end\n\n  @doc \"\"\"\n  Filter in maps in list.\n\n  ## Examples\n\n    iex> Filter.maps([1, 2, %{}, {}, [], 1.2, 3.2, :atom, %{key: \"value\"}])\n    [%{}, %{key: \"value\"}]\n  \"\"\"\n  def maps(list) do\n  end\n\n  @doc \"\"\"\n  Filter in keyword lists.\n\n  ## Examples\n\n    iex> Filter.keyword_lists([1, 2, %{}, {}, [], 1.2, 3.2, :atom, %{key: \"value\"}, [key: \"value\"]])\n    [[], [key: \"value\"]]\n  \"\"\"\n  def keyword_lists(list) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Filter Values By Type exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Filter Values By Type\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/built-in_modules.livemd\">Built-In Elixir Modules</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/tic-tac-toe.livemd\">Tic-tac-toe</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task151-exercises-drill-patternmatching-replace-nils", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Replacing Nils\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Replacing Nils\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/treasure_matching.livemd\">Drills: Pattern Matching</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/metric_conversion.livemd\">Metric Conversion</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Replacing Nils\n\nThis exercise was inspired by Quentin Crain, one of our amazing DockYard Academy mentors.\n\nGiven two lists of the same length, replace `nil` values in the first list with non-nil values in the second list.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nlist1 = [1, 2, 3, nil, 5]\nlist2 = [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\n[1, 2, 3, \"4\", 5] = Replace.nils(list1, list2)\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Replace do\n  def nils(list1, list2) do\n    Enum.zip(list1, list2)\n    |> Enum.map(fn\n      {nil, value} -> value\n      {value, _} -> value\n    end)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Replace do\n  @doc \"\"\"\n  iex> Replace.nils([1, 2, 3, nil, 5], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n  [1, 2, 3, \"4\", 5]\n\n  iex> Replace.nils([nil, nil, nil, nil, \"5\"], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, \"5\"]\n  \"\"\"\n  def nils(list1, list2) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Replacing Nils exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Replacing Nils\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/treasure_matching.livemd\">Drills: Pattern Matching</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/metric_conversion.livemd\">Metric Conversion</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task152-exercises-agent_journal", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Agent Journal\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Agent Journal\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/agents_and_ets.livemd\">State: Agent And ETS</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/inventory_management.livemd\">ETS Inventory Management</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Agent Journal\n\nFor this exercise, you're going to create a `Journal` [Agent](https://hexdocs.pm/elixir/Agent.html) which will store journal entries as strings.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Journal do\n  use Agent\n\n  def start_link(entries) do\n    Agent.start_link(fn -> entries end)\n  end\n\n  def all_entries(pid, opts \\\\ []) do\n    entries = Agent.get(pid, fn state -> state end)\n    if opts[:order] == :desc, do: Enum.reverse(entries), else: entries\n  end\n\n  def add_entry(pid, entry) do\n    # Using ++ is less performant than prepending.\n    # A more optimal solution would be to store entries in reverse order so they can be prepended.\n    Agent.update(pid, fn state -> state ++ [entry] end)\n  end\nend\n```\n\n</details>\n\nImplement the `Journal` module as documented below.\n\n```elixir\ndefmodule Journal do\n  @moduledoc \"\"\"\n  Documentation for `Journal`\n  \"\"\"\n  use Agent\n\n  @doc \"\"\"\n  Start the Agent process.\n\n  ## Examples\n\n      Default.\n\n      iex> {:ok, pid} = Journal.start_link([])\n\n      With initial entries.\n\n      iex> {:ok, pid} = Journal.start_link([\"Entry1\", \"Entry 2\"])\n  \"\"\"\n  def start_link(_opts) do\n  end\n\n  @doc \"\"\"\n  Get all journal entries.\n\n  ## Examples\n      \n      Empty journal.\n      \n      iex> {:ok, pid} = Journal.start_link([])\n      iex> Journal.all_entries(pid)\n      []\n\n      Journal with entries. Entries are returned in ascending order (oldest entries first).\n\n      iex> {:ok, pid} = Journal.start_link([\"Entry 1\", \"Entry 2\"])\n      iex> Journal.all_entries(pid)\n      [\"Entry 1\", \"Entry 2\"]\n       \n      Ascending order (default).\n      \n      iex> {:ok, pid} = Journal.start_link([\"Entry 1\", \"Entry 2\"])\n      iex> Journal.all_entries(pid, order: :asc)\n      [\"Entry 1\", \"Entry 2\"]\n\n      Descending order.\n\n      iex> {:ok, pid} = Journal.start_link([\"Entry 1\", \"Entry 2\"])\n      iex> Journal.all_entries(pid, order: :desc)\n      [\"Entry 2\", \"Entry 1\"]\n  \"\"\"\n  def all_entries(pid, opts \\\\ []) do\n  end\n\n  @doc \"\"\"\n  Add a journal entry.\n\n  ## Examples\n\n    iex> {:ok, pid} = Journal.start_link([])\n    iex> Journal.add_entry(pid, \"Entry 1\")\n    :ok\n    iex> Journal.add_entry(pid, \"Entry 2\")\n    :ok\n    iex> Journal.all_entries(pid)\n    [\"Entry 1\", \"Entry 2\"]\n  \"\"\"\n  def add_entry(pid, entry) do\n  end\nend\n```\n\n```elixir\n:\n```\n\n## Bonus: Advanced Journal\n\nExpand upon your original journal with several additional features. Journal entries will now be stored as a struct with `:id`, `:title`, `:content`, `:updated_at`, and `created_at` fields. Enforce all keys.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nexample_entry = %AdvancedJournal{\n  # ids start at `0` and auto increment with each new entry.\n  id: 0,\n  title: \"Title\",\n  content: \"Content\",\n  created_at: DateTime.utc_now(),\n  updated_at: DateTime.utc_now()\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule AdvancedJournal do\n  use Agent\n\n  @enforce_keys [:id, :title, :content, :created_at, :updated_at]\n  defstruct @enforce_keys\n\n  def start_link(entry_attrs) do\n    entries =\n      entry_attrs\n      |> Enum.with_index()\n      |> Enum.map(fn {attrs, index} -> make_entry(index, attrs) end)\n      |> Enum.reverse()\n\n    Agent.start_link(fn -> %{entries: entries, current_index: Enum.count(entries)} end)\n  end\n\n  def all_entries(pid, opts \\\\ []) do\n    entries = Agent.get(pid, fn state -> state.entries end)\n    if opts[:order] == :desc, do: entries, else: Enum.reverse(entries)\n  end\n\n  def add_entry(pid, attrs) do\n    Agent.update(pid, fn state ->\n      entry = make_entry(state.current_index, attrs)\n\n      %{\n        state\n        | current_index: state.current_index + 1,\n          entries: [entry | state.entries]\n      }\n    end)\n  end\n\n  def update_entry(pid, id, attrs) do\n    Agent.update(pid, fn state ->\n      index = Enum.find_index(state.entries, fn entry -> entry.id == id end)\n\n      new_entries = List.update_at(state.entries, index, fn entry -> Map.merge(entry, attrs) end)\n\n      %{state | entries: new_entries}\n    end)\n  end\n\n  def delete_entry(pid, id) do\n    Agent.update(pid, fn state ->\n      new_entries = Enum.reject(state.entries, fn entry -> entry.id == id end)\n      %{state | entries: new_entries}\n    end)\n  end\n\n  def make_entry(index, attrs) do\n    %__MODULE__{\n      id: index,\n      title: attrs[:title] || \"\",\n      content: attrs[:content] || \"\",\n      created_at: DateTime.utc_now(),\n      updated_at: DateTime.utc_now()\n    }\n  end\nend\n```\n\n</details>\n\nImplement the `AdvancedJournal` using [Agent](https://hexdocs.pm/elixir/Agent.html) as documented below.\n\n```elixir\ndefmodule AdvancedJournal do\n  @moduledoc \"\"\"\n  Documentation for `AdvancedJournal`\n  \"\"\"\n  use Agent\n\n  @doc \"\"\"\n  Start the Agent process\n\n  ## Examples\n\n      Default.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([])\n\n      With initial entries.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Entry 1\", content: \"Entry 1 Content\"}])\n  \"\"\"\n  def start_link(opts) do\n  end\n\n  @doc \"\"\"\n  Return all entries. Entries are automatically assigned an `:id` starting at `0` in the\n  order they are created in. The `:created_at` and `:updated_at` fields should be the current\n  UTC [DateTime](https://hexdocs.pm/elixir/DateTime.html) at the moment of creation.\n\n  We do not include `:created_at` and `:updated_at` in doctests as small differences \n  in time could cause these tests to fail.\n\n  ## Examples\n\n      Empty journal.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([])\n      iex> AdvancedJournal.all_entries(pid)\n      []\n\n      One entry. \n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Title\", content: \"Content\"}])\n      iex> [%AdvancedJournal{id: 0, title: \"Title\", content: \"Content\", created_at: _, updated_at: _}] = AdvancedJournal.all_entries(pid)\n\n      Multiple entries. Order is ascending by default.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Entry 1\", content: \"Entry 1\"}, %{title: \"Entry 2\", content: \"Entry 2\"}])\n      iex>\n      ..>[\n      ..>  %AdvancedJournal{id: 0, title: \"Entry 1\", content: \"Entry 1\", created_at: _, updated_at: _},\n      ..>  %AdvancedJournal{id: 1, title: \"Entry 2\", content: \"Entry 2\", created_at: _, updated_at: _}\n      ..>] = AdvancedJournal.all_entries(pid)\n\n      Ascending order (default).\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Entry 1\", content: \"Entry 1\"}, %{title: \"Entry 2\", content: \"Entry 2\"}])\n      iex>\n      ..>[\n      ..>  %AdvancedJournal{id: 0, title: \"Entry 1\", content: \"Entry 1\", created_at: _, updated_at: _},\n      ..>  %AdvancedJournal{id: 1, title: \"Entry 2\", content: \"Entry 2\", created_at: _, updated_at: _}\n      ..>] = AdvancedJournal.all_entries(pid, order: :asc)\n\n      Descending order.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Entry 1\", content: \"Entry 1\"}, %{title: \"Entry 2\", content: \"Entry 2\"}])\n      iex>\n      ..>[\n      ..>  %AdvancedJournal{id: 1, title: \"Entry 2\", content: \"Entry 2\", created_at: _, updated_at: _}\n      ..>  %AdvancedJournal{id: 0, title: \"Entry 1\", content: \"Entry 1\", created_at: _, updated_at: _},\n      ..>] = AdvancedJournal.all_entries(pid, order: :desc)\n  \"\"\"\n  def all_entries(pid, opts \\\\ []) do\n  end\n\n  @doc \"\"\"\n  Add a journal entry. Automatically create `:id`, `:created_at`, and `:updated_at` fields.\n\n  ## Examples\n\n      One entry.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([])\n      iex> AdvancedJournal.add_entry(pid, %{title: \"Title\", content: \"Content\"})\n      iex> [%AdvancedJournal{id: 0, title: \"Title\", content: \"Content\", created_at: _, updated_at: _}] = AdvancedJournal.all_entries(pid)\n\n      Multiple entries.\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([])\n      iex> AdvancedJournal.add_entry(pid, %{title: \"Entry 1\", content: \"Entry 1\"})\n      iex> AdvancedJournal.add_entry(pid, %{title: \"Entry 2\", content: \"Entry 2\"})\n      iex>\n      ..>[\n      ..>  %AdvancedJournal{id: 0, title: \"Entry 1\", content: \"Entry 1\", created_at: _, updated_at: _}\n      ..>  %AdvancedJournal{id: 1, title: \"Entry 2\", content: \"Entry 2\", created_at: _, updated_at: _},\n      ..>] = AdvancedJournal.all_entries(pid)\n  \"\"\"\n  def add_entry(pid, attrs) do\n  end\n\n  @doc \"\"\"\n  Update a journal entry. \n  This should automatically set the `:updated_at` field to the current [DateTime](https://hexdocs.pm/elixir/DateTime.html).\n\n  ## Examples\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Title\", content: \"Content\"}])\n      iex> AdvancedJournal.update_entry(pid, 0, %{title: \"Updated Title\", content: \"Updated Content\"})\n      iex> [%AdvancedJournal{id: 0, title: \"Updated Title\", content: \"Updated Content\", created_at: _, updated_at: _}] = AdvancedJournal.all_entries(pid)\n  \"\"\"\n  def update_entry(pid, id, attrs) do\n  end\n\n  @doc \"\"\"\n  Delete a journal entry by it's id.\n\n  ## Examples\n\n      iex> {:ok, pid} = AdvancedJournal.start_link([%{title: \"Title\", content: \"Content\"}])\n      iex> AdvancedJournal.delete_entry(pid, 0)\n      iex> []\n  \"\"\"\n  def delete_entry(pid, id, attrs) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Agent Journal exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Agent Journal\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/agents_and_ets.livemd\">State: Agent And ETS</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/inventory_management.livemd\">ETS Inventory Management</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task153-exercises-sql_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# SQL Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=SQL Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/rdbms.livemd\">Relational Database Management Systems</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_1.7.livemd\">Phoenix 1.7</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## SQL Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for using SQL and PostgreSQL. Follow the instructions for each drill and complete them as quickly as you can.\n\nTo complete this exercise, you may need to switch to the `postgres` user from your command line.\n\n```\n$ sudo -i -u postgres\n```\n\n## PostgreSQL\n\nFrom the command line, create a `drills` PostgreSQL Database.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\ncreatedb drills\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the command line, open the PostgreSQL prompt.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\npsql\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, view your list of databases.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\n\\l\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, connect to your `drills` database.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\n\\c drills\n```\n\n</details>\n\n## SQL\n\nFrom your PostgreSQL prompt, create an `authors` table. `authors` should have an `ID` primary key field, and a `NAME` `VARCHAR` field.\nEvery fields should be `NOT NULL`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\nCREATE TABLE authors (\n   ID    INT              NOT NULL,\n   NAME  VARCHAR (255)    NOT NULL,\n   PRIMARY KEY (ID)\n);\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom your PostgreSQL prompt, create a `books` table. `books` should have a `TITLE` field up to `30` characters, and a `CONTENT` field of unlimited length. Both fields should be `NOT NULL`.\n\n`books` should also store an optional `AUTHORID` `FOREIGN KEY` field that `REFERENCES` the `authors` table by `ID`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\nCREATE TABLE books (\n    ID INT NOT NULL,\n    TITLE VARCHAR(30) NOT NULL,\n    CONTENT TEXT NOT NULL,\n    AUTHORID INT,\n    PRIMARY KEY (ID),\n    FOREIGN KEY (AUTHORID) REFERENCES authors(ID)\n);\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, view both of your tables.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\n\\dt\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, create an author in the `authors` table.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\nINSERT INTO authors (ID,NAME) VALUES (1, 'Patrick Rothfuss');\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, create a book in the `books` table that belongs to the author you previously created.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\nINSERT INTO books (ID,TITLE,CONTENT,AUTHORID) VALUES (1, 'Name of the Wind', 'My name is Kvothe, pronounced nearly the same as quothe', 1);\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, select all authors.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```sql\nSELECT * FROM authors;\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, select all books.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\nSELECT * FROM books\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nFrom the PostgreSQL prompt, select all books that belong to the author you previously created.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```\nSELECT * FROM books b WHERE b.authorid = 1\n```\n\n</details>\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish SQL Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=SQL Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/rdbms.livemd\">Relational Database Management Systems</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_1.7.livemd\">Phoenix 1.7</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task154-exercises-tic-tac-toe", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"tic_tac_toe.png\",\"type\":\"attachment\"},{\"name\":\"tic_tac_toe_coordinates_grid.png\",\"type\":\"attachment\"}]} -->\n\n# Tic-tac-toe\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tic-tac-toe\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/filter_values_by_type.livemd\">Filter Values By Type</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/non_enumerables.livemd\">Non-Enumerables</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\nYou're going to create a game of [Tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe).\n\nIn Tic-tac-toe, players take turns placing either an `X` or an `O` onto a 3 by 3 grid.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tic_tac_toe.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can represent a grid like this as a list of lists.\n\n```elixir\ngrid = [\n  [\"X\", \"O\", nil],\n  [nil, \"X\", \"O\"],\n  [nil, nil, \"X\"]\n]\n```\n\nUsually we say grids have an **x** and a **y** axis. Each location in the grid is called a coordinate.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/tic_tac_toe_coordinates_grid.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe'll use an `{x, y}` tuple to represent a coordinate on the board.\n\nFor example, the `\"X\"` in the top left corner of the board above would be at coordinate `{0, 2}`.\n\n## TicTacToe\n\nYou're going to create a `TicTacToe` module which can read coordinates from a board, and fill them in.\n\nFor example, reading the coordinate `{0, 2}` on the following board returns `\"X\"`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nboard = [\n  [\"X\", \"O\", nil],\n  [nil, \"X\", \"O\"],\n  [nil, nil, \"X\"]\n]\n\nTicTacToe.at(board, {0, 2})\n\"X\"\n```\n\nFilling the coordinate will return a newly updated board.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nboard = [\n  [\"X\", \"O\", nil],\n  [nil, \"X\", \"O\"],\n  [nil, nil, \"X\"]\n]\n\nTicTacToe.fill(board, {0, 1}, \"O\")\n[\n  [\"X\", \"O\", nil],\n  [\"O\", \"X\", \"O\"],\n  [nil, nil, \"X\"]\n]\n```\n\nImplement the `TicTacToe` module as documented.\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nRemember that `Enum.at` can access a list at an index, however our coordinates are flipped\non the board, so the first list is at **y = 2**.\n\nTherefore, if `y` is `0`, then we want to access the row list at index `2`.\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule TicTacToe do\n  def at(board, coordinate) do\n    {x, y} = coordinate\n\n    Enum.at(board, 2 - y) |> Enum.at(x)\n  end\n\n  def fill(board, coordinate, symbol) do\n    {x, y} = coordinate\n    List.update_at(board, 2 - y, fn row ->\n      List.replace_at(row, x, symbol)\n    end)\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule TicTacToe do\n  @moduledoc \"\"\"\n    Documentation for `TicTacToe`\n  \"\"\"\n\n  @doc \"\"\"\n  Read a coordinate on a board.\n\n  ## Examples\n\n      We've used a board with letter symbols for sake of example.\n\n      iex> board = [\n      ...> [\"A\", \"B\", \"C\"],\n      ...> [\"D\", \"E\", \"F\"],\n      ...> [\"G\", \"H\", \"I\"]\n      ...> ]\n      iex> TicTacToe.at(board, {0, 0})\n      \"G\"\n      iex> TicTacToe.at(board, {2, 1})\n      \"F\"\n      iex> TicTacToe.at(board, {0, 2})\n      \"A\"\n  \"\"\"\n  def at(board, coordinate) do\n  end\n\n  @doc \"\"\"\n  Fill in a coordinate on a board with the provided symbol and return a new updated board.\n\n  ## Examples\n\n      iex> board = [\n      ...> [nil, nil, nil],\n      ...> [nil, nil, nil],\n      ...> [nil, nil, nil]\n      ...> ]\n      iex> TicTacToe.fill(board, {0, 0}, \"X\")\n      [[nil, nil, nil], [nil, nil, nil], [\"X\", nil, nil]]\n      iex> TicTacToe.fill(board, {1, 1}, \"O\")\n      [[nil, nil, nil], [nil, \"O\", nil], [nil, nil, nil]]\n  \"\"\"\n  def fill(board, coordinate, symbol) do\n  end\nend\n```\n\n### Bonus: Winner\n\nCreate a `TicTacToe.winner/1` function which accepts a board and determines if there is a winner. A player wins if they have three symbols in a row, three symbols in a column, or three symbols diagonally.\n\nFor example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nboard = [\n  [\"X\", \"O\", \"O\"]\n  [\"X\", \"O\", nil]\n  [\"X\", nil, nil]\n]\n\nTicTacToe.winner(board) # returns \"X\".\n\"X\"\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule TicTacToe do\n  def winner(board) do\n    cond do\n      winner?(board, \"X\") -> \"X\"\n      winner?(board, \"O\") -> \"O\"\n      true -> nil\n    end\n  end\n\n  def winner?(board, symbol) do\n    row_winner =\n      Enum.any?(board, fn row ->\n        Enum.all?(row, fn element -> element == symbol end)\n      end)\n\n    column_winner =\n      Enum.any?(0..2, fn index ->\n        Enum.all?(board, fn row ->\n          Enum.at(row, index) == symbol\n        end)\n      end)\n\n    diagonal_winner =\n      Enum.all?(0..2, fn index ->\n        board\n        |> Enum.at(index)\n        |> Enum.at(index) == symbol\n      end) or\n        Enum.all?(0..2, fn index ->\n          board\n          |> Enum.at(index)\n          |> Enum.at(2 - index) == symbol\n        end)\n\n    row_winner or column_winner or diagonal_winner\n  end\nend\n```\n\nNote it's also possible to use pattern matching to solve this problem.\n\n```elixir\ndefmodule TicTacToe do\n  def winner(board) do\n    cond do\n      winner?(board, \"X\") -> \"X\"\n      winner?(board, \"O\") -> \"O\"\n      true -> nil\n    end\n  end\n\n  def winner?(board, x) do\n    match?([[^x, ^x, ^x], [_, _, _], [_, _, _]], board) or\n      match?([[_, _, _], [^x, ^x, ^x], [_, _, _]], board) or\n      match?([[_, _, _], [_, _, _], [^x, ^x, ^x]], board) or\n      match?([[^x, _, _], [^x, _, _], [^x, _, _]], board) or\n      match?([[_, ^x, _], [_, ^x, _], [_, ^x, _]], board) or\n      match?([[_, _, ^x], [_, _, ^x], [_, _, ^x]], board) or\n      match?([[^x, _, _], [_, ^x, _], [_, _, ^x]], board) or\n      match?([[_, _, ^x], [_, ^x, _], [^x, _, _]], board)\n  end\nend\n```\n\n</details>\n\nTo get started, copy the code below into the `TicTacToe` module above.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n@doc \"\"\"\nDetermine if a player has won the game.\n\n## Examples\n\n  Row Wins:\n\n  iex> TicTacToe.winner([[\"X\", \"X\", \"X\"], [nil, nil, nil], [nil, nil, nil]])\n  \"X\"\n  iex> TicTacToe.winner([[nil, nil, nil], [\"X\", \"X\", \"X\"], [nil, nil, nil]])\n  \"X\"\n  iex> TicTacToe.winner([[nil, nil, nil], [nil, nil, nil], [\"X\", \"X\", \"X\"]])\n  \"X\"\n\n  Column Wins:\n\n  iex> TicTacToe.winner([[\"X\", nil, nil], [\"X\", nil, nil], [\"X\", nil, nil]])\n  \"X\"\n  iex> TicTacToe.winner([[nil, \"X\", nil], [nil, \"X\", nil], [nil, \"X\", nil]])\n  \"X\"\n  iex> TicTacToe.winner([[nil, nil, \"X\"], [nil, nil, \"X\"], [nil, nil, \"X\"]])\n  \"X\"\n\n  Diagonal Wins\n\n  iex> TicTacToe.winner([[\"X\", nil, nil], [nil, \"X\", nil], [nil, nil, \"X\"]])\n  \"X\"\n  iex> TicTacToe.winner([[nil, nil, \"X\"], [nil, \"X\", nil], [\"X\", nil, nil]])\n  \"X\"\n\n  No Winner\n\n  iex> TicTacToe.winner([[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]])\n  nil\n  iex> TicTacToe.winner([[nil, \"X\", nil], [nil, \"X\", nil], [nil, nil, nil]])\n  nil\n\n\"\"\"\ndef winner(board) do\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Tic-tac-toe exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tic-tac-toe\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/filter_values_by_type.livemd\">Filter Values By Type</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/non_enumerables.livemd\">Non-Enumerables</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task155-exercises-blog_tags", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Tags\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Tags\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_many_to_many_relationships.livemd\">Many-To-Many Relationships</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_one_to_one_relationships.livemd\">One-to-One Relationships</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog Tags\n\nYou're going to add `Tags` to your existing [Blog](group_project_blog.livemd) project.\n\nEach blog post has a many-to-many association with tags.\n\nTags should have `:name` field describing the type of tag such as `\"tutorial\"`, `\"elixir\"`, `\"testing\"`, etc.\n\nBlogs and tags should be associated through a **join** table such as `posts_tags`.\n\n```mermaid\nerDiagram\n\nPost {\n}\n\nTag {\n    string name\n}\n\nPost }O--O{ Tag: \"posts_tags\"\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Tag Requirements\n\n* Migration and Schema:\n  * Create a join table for tags and posts\n  * Associate the `Post` and `Tag` schema through a many to many association\n* Functionality\n  * Users can create tags (or seed a pre-existing set of tags).\n  * Create, update, and delete posts with tags.\n  * **(bonus)**: Search and/or display posts by tag\n  * **(bonus)**: Allow a user to create tags when creating a post\n* Tests\n  * Write context and controller tests to ensure a user can create, update, and delete a post with tags\n  * All tests should pass. You may need to modify old tests and pages to ensure they continue to pass.\n  * **(bonus)** Write test(s) to ensure a user can search for posts by tag.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Tags exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Tags\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_many_to_many_relationships.livemd\">Many-To-Many Relationships</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_one_to_one_relationships.livemd\">One-to-One Relationships</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task156-exercises-data_traversal", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Data Traversal\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Data Traversal\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/custom_enum_with_reduce.livemd\">Custom Enum With Reduce</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/datetime.livemd\">Dates And Times</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Data Traversal\n\n`Enum.reduce/3` is often useful for traversing complex or nested data structures.\n\nYou're going to create a `DataTraversal` module that can perform some complex data traversal operations.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule DataTraversal do\n  def sum_keyword_list(keyword_list) do\n    Enum.reduce(keyword_list, 0, fn {_key, value}, acc -> value + acc end)\n  end\n\n  def aggregate(keyword_list) do\n    Enum.reduce(keyword_list, [], fn {key, value}, acc ->\n      previous = acc[key] || 0\n      Keyword.put(acc, key, previous + value)\n    end)\n    |> Enum.sort()\n  end\n\n  def merge_maps(maps) do\n    Enum.reduce(maps, %{}, fn map, acc ->\n      Map.merge(acc, map)\n    end)\n  end\nend\n```\n\n</details>\n\nImplement the `DataTraversal` module as documented below.\n\n```elixir\ndefmodule DataTraversal do\n  @doc \"\"\"\n  Sum all of the integer values in a keyword list. The keys do not matter.\n\n  iex> DataTraversal.sum([key: 10, key: 20, key: 30])\n  60\n  \"\"\"\n  def sum(keyword_list) do\n  end\n\n  @doc \"\"\"\n  Aggregate values with common keys in a keyword list.\n  Ensure aggregated values are sorted with Enum.sort/1\n\n  iex> DataTraversal.aggregate([key1: 10, key1: 20, key2: 30, key2: 20])\n  [key1: 30, key2: 50]\n  \"\"\"\n  def aggregate(keyword_list) do\n  end\n\n  @doc \"\"\"\n  Merge a list of maps together. New values will replace old values.\n\n  iex> maps = [%{keya: \"a\"}, %{keyb: \"b\"}, %{keyc: \"c\"}, %{keyc: \"c2\"}]\n  iex> DataTraversal.merge_maps(maps)\n  %{keya: \"a\", keyb: \"b\", keyc: \"c2\"}\n  \"\"\"\n  def merge_maps(maps) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Data Traversal exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Data Traversal\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/custom_enum_with_reduce.livemd\">Custom Enum With Reduce</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/datetime.livemd\">Dates And Times</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task157-exercises-palindrome", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Palindrome\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Palindrome\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/comprehensions.livemd\">Comprehensions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/anagram.livemd\">Anagram</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Palindrome\n\nA word or sentence that reads the same way forwards and backwards is a palindrome.\nFor example **kayak** and **racecar** are palindromes.\n\nYou're going to create a `Palindrome` module which can determine if a string is a palindrome.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nPalindrome.palindrome?(\"kayak\")\ntrue\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Palindrome do\n  def palindrome?(string) do\n    string\n    |> String.split(\"\")\n    |> Enum.reverse()\n    |> Enum.join() == string\n  end\nend\n```\n\n</details>\n\nImplement the `Palindrome` module as documented below.\n\n```elixir\ndefmodule Palindrome do\n  @moduledoc \"\"\"\n  Documentation for `Palindrome`.\n  \"\"\"\n\n  @doc \"\"\"\n  Determine if a string is a palindrome.\n\n  ## Examples\n\n    iex> Palindrome.palindrome?(\"baab\")\n    true\n\n    iex> Palindrome.palindrome?(\"racecar\")\n    true\n\n    iex> Palindrome.palindrome?(\"kayak\")\n    true\n\n    iex> Palindrome.palindrome?(\"apples\")\n    false\n  \"\"\"\n  def palindrome?(string) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Palindrome exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Palindrome\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/comprehensions.livemd\">Comprehensions</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/anagram.livemd\">Anagram</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task158-exercises-file_search", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# File Search\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File Search\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/document_tools.livemd\">Document Tools</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/processes.livemd\">Processes</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Mastery\n\nMastery assignments are bonus projects designed to incorporate curriculum concepts at an advanced level. You have complete freedom with how you complete mastery assignments, and may change requirements as you see fit. Each mastery assignment serves as an independent project you may choose to include on your portfolio of projects.\n\n## File Search\n\nCreate a `FileSearch` module which can recursively search files in all nested folders.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule FileSearch do\n  def all(folder) do\n    File.ls!(folder)\n    |> Enum.map(fn file_or_folder ->\n      path = Path.join(folder, file_or_folder)\n\n      if File.dir?(path) do\n        all(path)\n      else\n        file_or_folder\n      end\n    end)\n    |> List.flatten()\n  end\n\n  def by_extension(folder) do\n    all(folder) |> Enum.reduce(%{}, fn file_name, acc ->\n      extension = Path.extname(file_name)\n      Map.update(acc, extension, [file_name], fn files -> [file_name | files] end)\n    end)\n  end\nend\n```\n\n</details>\n\nImplement the `FileSearch` module as documented.\n\n```elixir\ndefmodule FileSearch do\n  @moduledoc \"\"\"\n  Documentation for FileSearch\n  \"\"\"\n\n  @doc \"\"\"\n  Find all nested files.\n\n  For example, given the following folder structure\n  /main\n    /sub1\n      file1.txt\n    /sub2\n      file2.txt\n    /sub3\n      file3.txt\n    file4.txt\n\n  It would return:\n\n  [\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\"]\n  \"\"\"\n  def all(folder) do\n  end\n\n  @doc \"\"\"\n  Find all nested files and categorize them by their extension.\n\n  For example, given the following folder structure\n  /main\n    /sub1\n      file1.txt\n      file1.png\n    /sub2\n      file2.txt\n      file2.png\n    /sub3\n      file3.txt\n      file3.jpg\n    file4.txt\n\n  The exact order and return value are up to you as long as it finds all files \n  and categorizes them by file extension.\n\n  For example, it might return the following:\n\n  %{\n    \".txt\" => [\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\"],\n    \".png\" => [\"file1.png\", \"file2.png\"],\n    \".jpg\" => [\"file3.jpg\"]\n  }\n  \"\"\"\n  def by_extension(folder) do\n  end\nend\n```\n\n### Configure Project As A Script\n\nCreate a new mix project.\n\n```\n$ mix new file_search\n```\n\nConfigure the project as a script. You should be able to run the following to list all files.\n\n```\n$ mix escript.build\n$ ./file_search\n```\n\nYou should also be able to use a flag to list files by their extension.\n\n```\n$ ./file_search --by_type\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish File Search exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=File Search\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/document_tools.livemd\">Document Tools</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/processes.livemd\">Processes</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task159-exercises-games_documentation_and_static_analysis", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games: Documentation And Static Analysis\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Documentation And Static Analysis\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/typespec_drills.livemd\">Typespec Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/executables.livemd\">Executables</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Games: Documentation & DocTesting\n\nDocument your existing [Games](./games.livemd) project. Add documentation tests and examples where appropriate.\n\nEnsure all tests pass.\n\n## Games: Typespecs\n\nAdd typespecs to your [Games.RockPaperScissors](games_rock_paper_scissors.livemd) and [Games.Wordle](games_wordle.livemd) modules. Each public function should have an associated `@spec`.\n\n## Games: Dialyzer\n\nAdd [Dialyxir](https://github.com/jeremyjh/dialyxir) to your existing [Games](./games.livemd) project. You should be able to verify the typespecs in your application by running the following command.\n\n```\nmix dialyzer\n```\n\nEnsure all checks pass and fix any dialyzer errors.\n\n## Games: Credo\n\nAdd [Credo](https://hexdocs.pm/credo/Credo.html) to your existing [Games](./games.livemd) project.\n\nYou should be able to run credo with the following command. Ensure that all checks pass and fix any errors or credo suggestions.\n\n```\nmix credo\n```\n\n## Games: ExDocs\n\nAdd `ExDocs` to your existing [Games](./games.livemd) project.\n\nRun the following command to generate project documentation. Re-run the command to update project documentation.\n\n```\nmix docs\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games: Documentation And Static Analysis exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Documentation And Static Analysis\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/typespec_drills.livemd\">Typespec Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/executables.livemd\">Executables</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task160-exercises-games_rock_paper_scissors", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games: Rock Paper Scissors\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Rock Paper Scissors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_guessing_game.livemd\">Games: Guessing Game</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/exunit.livemd\">ExUnit</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Games: Rock Paper Scissors\n\nIn your existing [Games](./games.livemd) project, you're going to create a rock paper scissors game where players will play against an AI which randomly chooses\nrock, paper, or scissors.\n\nYou should be able to start your project by running the following from the `game` folder in\nthe command line.\n\n```\niex -S mix\n```\n\nThen you can start the rock paper scissors game with a `Games.RockPaperScissors` module.\nThe game should prompt the user for a choice of `\"rock\"`, `\"paper\"`, or `\"scissors\"`.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> Games.RockPaperScissors.play()\n(rock/paper/scissors): scissors\n```\n\nThe game should generate a random AI choice of `\"rock\"` , `\"paper\"`, or `\"scissors\"`, then prompt the user with feedback if they win, lose, or draw.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Ai Choice: Paper\nChoose rock, paper, or scissors: scissors\n\"You win! scissors beats paper.\"\n\n# Ai Choice: Scissors\nChoose rock, paper, or scissors: paper\n\"You lose! scissors beats paper.\"\n\n# Ai Choice: Rock\nChoose rock, paper, or scissors: rock\n\"It's a tie!\"\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games: Rock Paper Scissors exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Rock Paper Scissors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/games_guessing_game.livemd\">Games: Guessing Game</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/exunit.livemd\">ExUnit</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task161-exercises-anagram", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Anagram\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Anagram\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/palindrome.livemd\">Palindrome</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/comprehension_search.livemd\">Comprehension Product Search</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Anagram\n\nTwo words that contain all the same letters are anagrams.\nFor example **bored** and **robed** are anagrams.\n\n* Create a function `anagram?/2` which determines if two strings are anagrams.\n* Create a function `filter_anagrams/2` which filters a list based on if they are anagrams of a provided string.\n\n<details style=\"background-color: lightgreen; padding: 12px\">\n<summary>Solution Example</summary>\n\n```elixir\ndefmodule Anagram do\n  def anagram?(word, possible_anagram) do\n    sort_string(word) == sort_string(possible_anagram)\n  end\n\n  def filter_anagrams(words, string) do\n    Enum.filter(words, fn word -> anagram?(word, string) end)\n  end\n\n  defp sort_string(string) do\n    String.split(string, \"\", trim: true) |> Enum.sort() |> Enum.join()\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Anagram do\n  @moduledoc \"\"\"\n  Documentation for `Anagram`.\n  \"\"\"\n\n  @doc \"\"\"\n  Determine if two strings are anagrams.\n\n  ## Examples\n\n    iex> Anagram.anagram?(\"abc\", \"bac\")\n    true\n\n    iex> Anagram.anagram?(\"sit\", \"its\")\n    true\n\n    iex> Anagram.anagram?(\"cats\", \"dogs\")\n    false\n\n    iex> Anagram.anagram?(\"robed\", \"bored\")\n    true\n  \"\"\"\n  def anagram?(word, possible_anagram) do\n  end\n\n  @doc \"\"\"\n  Filter anagrams.\n\n  ## Examples\n\n    iex> Anagram.filter_anagrams([\"abc\", \"bca\", \"abcd\", \"cat\"], \"bac\")\n    [\"abc\", \"bca\"]\n\n    iex> Anagram.filter_anagrams([\"rams\", \"mars\", \"arms\", \"alarms\"], \"arms\")\n    [\"rams\", \"mars\", \"arms\"]\n\n    iex> Anagram.filter_anagrams([\"stop\"], \"go\")\n    []\n  \"\"\"\n  def filter_anagrams(word_list, anagram) do\n  end\nend\n```\n\n## Bonus: Anagram Solver\n\nGiven a string, return all possible permutations of the string to return a list of potential anagrams.\n\n<div style=\"background-color: lightcoral; font-weight: bold; padding: 1rem; margin: 1rem 0;\">\nThis is a HARD challenge. Move on to regular exercises before attempting this.\n</div>\n\n```elixir\ndefmodule AnagramSolver do\n  @doc \"\"\"\n  Return a list of all string permutations to solve for all anagrams.\n\n  ## Examples\n\n    iex> AnagramSolver.solve(\"a\")\n    [\"a\"]\n\n    iex> AnagramSolver.solve(\"ab\")\n    [\"ab\", \"ba\"]\n\n    iex> AnagramSolver.solve(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n  \"\"\"\n  def solve(string) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Anagram exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Anagram\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/palindrome.livemd\">Palindrome</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/comprehension_search.livemd\">Comprehension Product Search</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task162-exercises-common_components", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"card_component_light_mode.png\",\"type\":\"attachment\"},{\"name\":\"outline-button-hover.png\",\"type\":\"attachment\"},{\"name\":\"outline-button.png\",\"type\":\"attachment\"},{\"name\":\"rainbow_component.png\",\"type\":\"attachment\"}]} -->\n\n# Common Components\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Common Components\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/html_css.livemd\">HTML & CSS</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/apis.livemd\">APIs</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Common Components\n\nYou're going to use HTML and CSS to replicate some styled components.\n\nCreate an `.html` document or use [CodePen](https://codepen.io/pen/) to create these components.\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n    </style>\n  </head>\n  <body>\n    <!-- Component goes here -->\n  </body>\n</html>\n```\n\n## Hoverable Outline Button\n\nReplicate the following outlined button as closely as you can.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/outline-button.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nOn hover, the button should change the `background-color`.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/outline-button-hover.png)\n\n## Rainbow Boxes\n\nCreate a series of rainbow colored boxes like the following.\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nResearch `padding`, `margin`, `background-color`, and `border` and consider using nested elements.\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/rainbow_component.png)\n\n## Card Component\n\nComponents like the following are often called **Card Components**. Create a card component matching the following with an image, heading, subtitle, body, and bottom bar decoration.\n\nYou can use https://picsum.photos/200/100 to retrieve a fake image:\n\n```html\n<img src=\"https://picsum.photos/200/100\"></img>\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nYou can create a rounded border using the `border-radius` and `border` declarations.\n\nYou can create a horizontal bar using either the `<hr></hr>` element, or an empty `div` element.\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/card_component_light_mode.png)\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Common Components exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Common Components\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/html_css.livemd\">HTML & CSS</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/apis.livemd\">APIs</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task163-exercises-stack", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Tested Stack\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tested Stack\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/testing_genservers.livemd\">Testing GenServers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/traffic_light_server.livemd\">Traffic Light Server</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Tested Stack\n\nYou're going to create a `Stack` mix project similar to the [Stack](../exercises/stack.livemd) module you previously created.\n\n```\n$ mix new stack\n```\n\n### Requirements\n\nWrite a full test suite for the `Stack` module and implement the functionality. Include at least the following test cases.\n\n* `start_link/1 - default state`\n* `start_link/1 - default configuration`\n* `pop/1 - remove one element from stack`\n* `pop/1 - remove multiple elements from stack`\n* `pop/1 - remove element from empty stack`\n* `push/2 - add element to empty stack`\n* `push/2 - add element to stack with multiple elements`\n\nIn addition to the above, add documentation and at least one doctest for the `push/2` and `pop/1` functions.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Pair Testing\n\nThis will be a **pair testing** exercise Using TDD (Test Driven Development). We recommend using Visual Studio Code LiveShare to collaborate.\n\n1. One student (**the tester**) will write a single test\n2. The other student (**the implementer**) will implement **only** the code necessary to make the test pass.\n3. **Swap roles after each test.**\n\nAs **the implementer** you are encouraged to *fake* your solution (within reason) if the test allows for it. This will encourage your **tester** to write a better test.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Tested Stack exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Tested Stack\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/testing_genservers.livemd\">Testing GenServers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/traffic_light_server.livemd\">Traffic Light Server</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task164-exercises-pokemon_battle", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Pokemon Battle\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pokemon Battle\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rpg_dialogue.livemd\">RPG Dialogue</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/ranges.livemd\">Ranges</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Overview\n\nYou're going to create a pokemon battle game. If you're not familiar with pokemon, it's a game where elemental creatures battle.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Define The Pokemon Struct\n\nYou're going to represent pokemon using a `Pokemon` struct with the following keys.\n\n* `:name` will be a string.\n* `:type` will be an atom of either `:grass`, `:water`, or `:fire`\n* `:health` will be a float with a default value of `20.0`\n* `:attack` will be an integer with a default value of `5`\n* `:speed` will be an integer\n\n<div style=\"padding: 1rem; margin: 1rem 0; background-color: lightgreen; font-weight: bold;\">\nYou do not need to validate the data types for the keys above.\nThese are simply the expected data types for each `Pokemon` struct instance.\n</div>\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n%Pokemon{name: \"Bulbasaur\", type: :grass, health: 20, attack: 5, speed: 20}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Pokemon.attack/2\n\nCreate a Pokemon.attack/2 function to make one pokemon attack another.\n\nThe pokemon will apply their `:attack` value multiplied by a **type advantage** modified according to the following list. **strong** attacks are multiplied by `2` and **weak** attacks are multiplied by `0.5`.\n\n* `:fire` is strong against `:grass`\n* `:grass` is strong against `:water`\n* `:water` is strong against `:fire`\n* `:fire` is weak against `:water`\n* `:grass` is weak against `:fire`\n* `:water` is weak against `:grass`\n* the same type should deal normal damage.\n\nFor example:\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nattacker = %Pokemon{name: \"Charmander\", type: :fire, health: 20.0, attack: 5, speed: 20}\ndefender = %Pokemon{name: \"Bulbasaur\", type: :grass, health: 20.0, attack: 5, speed: 20}\n\n# Applies 5 * 2 Damage. Original Health: 20.0, New Health: 10.0.\nPokemon.attack(attacker, defender)\n%Pokemon{name: \"Bulbasaur\", type: :grass, health: 10.0, attack: 5, speed: 20}\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ndefmodule Pokemon do\n  defstruct [:name, :type, :health, :attack, :speed]\n\n  def attack(attacker, defender) do\n    damage = attacker.attack * modifier(attacker.type, defender.type)\n    %__MODULE__{defender | health: defender.health - damage}\n  end\n\n  defp modifier(attacker_type, defender_type) do\n    cond do\n      super_effective?(attacker_type, defender_type) -> 2\n      super_effective?(defender_type, attacker_type) -> 0.5\n      true -> 1\n    end\n  end\n\n  defp super_effective?(attacker_type, defender_type) do\n    {attacker_type, defender_type} in [{:fire, :grass}, {:grass, :water}, {:water, :fire}]\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Pokemon do\n  @moduledoc \"\"\"\n  Pokemon\n\n  ## Examples\n      iex> attacker = %Pokemon{name: \"Charmander\", type: :fire, health: 20.0, attack: 5, speed: 20}\n      iex> defender = %Pokemon{name: \"Bulbasaur\", type: :grass, health: 20.0, attack: 5, speed: 20}\n      iex> Pokemon.attack(attacker, defender)\n      %Pokemon{name: \"Bulbasaur\", type: :grass, health: 10.0, attack: 5, speed: 20}\n  \"\"\"\n  defstruct []\n\n  def attack(attacker, defender) do\n  end\nend\n```\n\nConsider using the following Elixir cell to test your solution.\n\n```elixir\n\n```\n\n### Pokemon Instances\n\nBind three variables `charmander`, `bulbasaur`, and `squirtle` to an instance of a `Pokemon` struct with the following information.\n\n```mermaid\nclassDiagram\n  class charmander {\n    name: \"Charmander\"\n    type: :fire\n    health: 20.0\n    attack: 5\n    speed: 20\n  }\n  class bulbasaur {\n    name: \"Bulbasar\"\n    type: :grass\n    health: 20.0\n    attack: 5\n    speed: 20\n  }\n  class squirtle {\n    name: \"Squirtle\"\n    type: :water\n    health: 20.0\n    attack: 5\n    speed: 20\n  }\n```\n\nYou may use these three structs to test your `Pokemon.attack/2` function.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\ncharmander = %Pokemon{name: \"Charmander\", type: :fire, health: 20, attack: 5, speed: 20}\nbulbasaur = %Pokemon{name: \"Bulbasaur\", type: :grass, health: 20, attack: 5, speed: 20}\nsquirtle = %Pokemon{name: \"Squirtle\", type: :water, health: 20, attack: 5, speed: 20}\n\n# Testing Example\nPokemon.attack(charmander, bulbasaur)\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Pokemon Battle exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pokemon Battle\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/rpg_dialogue.livemd\">RPG Dialogue</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/ranges.livemd\">Ranges</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task165-exercises-games_supervised_score_tracker", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Games: Supervised Score Tracker\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Supervised Score Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/supervised_stack.livemd\">Supervised Stack</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/task.livemd\">Task</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Games: Supervised Score Tracker\n\nYou're going to setup your [Games](../exercises/games.livemd) project as a supervised mix project.\n\nThen, create a `Games.ScoreTracker` [GenServer](https://hexdocs.pm/elixir/GenServer.html) which will track a player score as they play different games.\n\nDecide on point rewards for winning a game such as:\n\n* **guessing game**: 5 points\n* **rock paper scissors**: 10 points\n* **wordle**: 25 points\n\nIncrease the `ScoreTracker`'s score whenever a user wins the game.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requirements\n\n* The initial score tracker state should be `0`.\n* Handle an asynchronous `{:add_points, points}` message to increment the score state.\n* Handle a synchronous `:get_score` message to retrieve the current score.\n* `Games.ScoreTracker` should be started as a named process by the supervisor.\n* Create the `start_link/1`, `add_points/1`, and `current_score/1` functions as documented below.\n* Write a full suite of tests including at least the following cases:\n  * `\"current_score/1 retrieves the current score\"`\n  * `\"add_points/1 adds points to the score\"`\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n# Games.ScoreTracker should be a named process, so we don't need to provide the pid.\n{:ok, _pid} = Games.ScoreTracker.start_link()\n:ok = Games.ScoreTracker.add_points(10)\n:ok = Games.ScoreTracker.add_points(10)\n20 = Games.ScoreTracker.current_score()\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Score Menu\n\nCreate a `\"score\"` command for the game menu that displays the user's current score. For example:\n\n```\n$ ./games\nWhat game would you like to play?\n1. Guessing Game\n2. Rock Paper Scissors\n3. Wordle\n\nenter \"stop\" to exit\nenter \"score\" to view your current score\nscore\n\n==================================================\nYour score is 0\n==================================================\n\nWhat game would you like to play?\n1. Guessing Game\n2. Rock Paper Scissors\n3. Wordle\n\nenter \"stop\" to exit\nenter \"score\" to view your current score\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Games: Supervised Score Tracker exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Games: Supervised Score Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/supervised_stack.livemd\">Supervised Stack</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/task.livemd\">Task</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task166-exercises-timeline", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Timeline\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timeline\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/itinerary.livemd\">Itinerary</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/strings_and_binaries.livemd\">Strings And Binaries</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Timeline\n\nYou are building an application which creates a timeline of events.\nUsers provide you with a list of [Date](https://hexdocs.pm/elixir/Date.html)s. You will provide the number of days between each date.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndates = [~D[2020-01-01], ~D[2020-01-02], ~D[2020-01-22]]\n\nTimeline.from_dates(dates)\n[1, 20]\n```\n\n**BONUS**: `Timeline.from_strings/1`.\n\nAs a bonus, implement the `Timeline.from_strings/1` function which accepts a list of strings instead of a list of [Date](https://hexdocs.pm/elixir/Date.html)s.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\ndate_strings = [\"2020-01-01\", \"2020-01-02\", \"2020-01-22\"]\n\nTimeline.from_strings(date_strings)\n[1, 20]\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Timeline do\n  \n  def from_dates(dates) do\n    Enum.chunk_every(dates, 2, 1, :discard)\n    |> Enum.map(fn chunk ->\n      [start, finish] = chunk\n      Date.diff(finish, start)\n    end)\n  end\n\n  def from_strings(date_strings) do\n    date_strings\n    |> Enum.map(&string_to_date/1)\n    |> from_dates()\n  end\n\n  defp string_to_date(date_string) do\n    [year, month, day] = String.split(date_string, \"-\")\n    Date.new!(String.to_integer(year), String.to_integer(month), String.to_integer(day))\n  end\nend\n```\n\nAlternatively, you might use `Date.from_iso8601/1` to convert strings into [Date](https://hexdocs.pm/elixir/Date.html) structs instead of creating your own solution as seen above.\n\n```elixir\ndef from_strings(date_strings) do\n    Enum.map(date_strings, &Date.from_iso8601!/1)\n    |> from_dates()\nend\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\ndefmodule Timeline do\n  @moduledoc \"\"\"\n  Documentation for `Timeline`\n  \"\"\"\n\n  @doc \"\"\"\n  Given a list of [Date](https://hexdocs.pm/elixir/Date.html)s return a timeline of days between each date.\n\n  ## Examples\n\n    iex> Timeline.from_dates([~D[2020-01-01]])\n    []\n\n    iex> Timeline.from_dates([~D[2020-01-01], ~D[2020-01-02]])\n    [1]\n\n    iex> Timeline.from_dates([~D[2020-01-01], ~D[2020-01-02], ~D[2020-01-22]])\n    [1, 20]\n    \n    iex> Timeline.from_dates([~D[2020-01-01], ~D[2020-01-10], ~D[2020-01-22], ~D[2020-01-24]])\n    [9, 12, 2]\n  \"\"\"\n  def from_dates(dates) do\n  end\n\n  @doc \"\"\"\n  Given a list of \"YYYY-MM-DD\" strings return a timeline of days between each date.\n  Assume you will always be given two or more strings.\n\n  ## Examples\n\n    iex> Timeline.from_strings([\"2020-01-01\", \"2020-01-02\"])\n    [1]\n\n    iex> Timeline.from_strings([\"2020-01-01\", \"2020-01-02\", \"2020-01-22\"])\n    [1, 20]\n    \n    iex> Timeline.from_strings([\"2020-01-01\", \"2020-01-10\", \"2020-01-22\", \"2020-01-24\"])\n    [9, 12, 2]\n  \"\"\"\n  def from_strings(date_strings) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Timeline exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timeline\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/itinerary.livemd\">Itinerary</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/strings_and_binaries.livemd\">Strings And Binaries</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task167-exercises-email_validation", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Email Validation\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Email Validation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/regex.livemd\">Regex</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/caesar_cypher.livemd\">Caesar Cypher</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Email Validation\n\nMost applications and websites with users have a sign up form with an email input.\n\nGenerally, we validate this input to ensure that users enter a valid email.\n\nYou are going to build an `Email.validate/1` function which checks if an email address is valid or not.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nEmail.valid?(\"mail@mail.com\")\ntrue\n\nEmail.valid?(\"mail.com\")\nfalse\n```\n\nFor the sake of this exercise, an email is valid if it is in the format `string@string.string`. Be aware, this is not sufficient for true email validation where not all characters are allowed.\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nConsider using [Regex.match/2](https://hexdocs.pm/elixir/Regex.html#match/2).\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Email do\n  def valid?(email) do\n    Regex.match?(~r/\\w+\\@\\w+\\.\\w+/, email)\n  end\nend\n```\n\n</details>\n\nImplement the `Email` module as documented.\n\n```elixir\ndefmodule Email do\n  @moduledoc \"\"\"\n  Documentation for `Email`\n  \"\"\"\n\n  @doc \"\"\"\n  Checks if an email is valid.\n\n  ## Examples\n\n    iex> Email.valid?(\"mail@mail.com\")\n    true\n\n    iex> Email.valid?(\"string@string.string\")\n    true\n\n    iex> Email.valid?(\"string\")\n    false\n\n    iex> Email.valid?(\".string\")\n    false\n\n    iex> Email.valid?(\"string.string\")\n    false\n\n    iex> Email.valid?(\"string@string\")\n    false\n\n    iex> Email.valid?(\"string@string.\")\n    false\n  \"\"\"\n  def valid?(email) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Email Validation exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Email Validation\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/regex.livemd\">Regex</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/caesar_cypher.livemd\">Caesar Cypher</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task168-exercises-save_game", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Save Game\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Save Game\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/file_drills.livemd\">File Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/file_system_todo_app.livemd\">File System Todo</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Save Game\n\nMany games have a Save function, which allows players to save the current state of the game.\nIn some cases, the saved game is stored in a save file.\n\nYou're going to implement a `Game` module which simulates saving a video game's state using the file system. You should be able to store some arbitrary Elixir term in a given file, and retrieve it.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Game do\n  def save(game_state, filename) do\n    File.write!(filename, :erlang.term_to_binary(game_state))\n  end\n\n  def load(filename) do\n    File.read!(filename) |> :erlang.binary_to_term()\n  end\nend\n```\n\n</details>\n\nImplement the `Game` module as documented below.\n\n```elixir\ndefmodule Game do\n  @moduledoc \"\"\"\n  Documentation for `Game`\n\n  ## Examples\n\n      game_state = %{name: \"Peter Parker\", level: 10, location: \"New York\"}\n      \n      Game.save(game_state, \"save_file1\")\n      :ok\n      \n      Game.load(\"save_file1\")\n      %{name: \"Peter Parker\", level: 10, location: \"New York\"}\n  \"\"\"\n\n  @doc \"\"\"\n  Save an elixir term into a given file name.\n  \"\"\"\n  def save(data, filename) do\n  end\n\n  @doc \"\"\"\n  Retrieve an elixir term from a given file name.\n  \"\"\"\n  def load(filename) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Save Game exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Save Game\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/file_drills.livemd\">File Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/file_system_todo_app.livemd\">File System Todo</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task169-exercises-github_collab", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Github Collab\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Github Collab\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/github_engineering_journal.livemd\">Github Engineering Journal</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/comments.livemd\">Comments</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Collab\n\nWith a partner, you're going to create a collaborative GitHub project.\n\nOne partner will be the **CREATOR** and the other partner(s) will be the **CONTRIBUTORS**.\nDecide on your role and complete the exercise.\n\n* **CREATOR**: Setup a git project called `collab`.\n* **CREATOR**: Connect the git project to a public github repository.\n* **CREATOR**: [Add your partner as a contributor](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories/inviting-collaborators-to-a-personal-repository)\n  to the GitHub project.\n* **CONTRIBUTORS**: Clone the github project onto your local machine.\n* **CONTRIBUTORS**: Create a new branch `bug-fix`\n* **CONTRIBUTORS**: Stage, commit, and push a new file `your_name.txt` (where your_name is your name).\n* **CONTRIBUTORS**: Create a pull request for the bug-fix branch.\n* **CREATOR**: Review the pull request and accept the changes.\n* **CREATOR**: pull the main branch and see the changes on your local git project.\n\n## Merge Conflicts\n\nSometimes when you create a pull request, other pull requests may be accepted which creates\nmerge conflicts.\n\nYou and your partner(s) are going to walk through the flow of resolving a merge conflict.\n\nUsing your existing `collab` project:\n\n* **CONTRIBUTORS**: Create a new branch `conflict-your_name` where `your_name` is the **CONTRIBUTOR**'s name.\n* **CREATOR**: Create a new branch `conflict-your_name` where `your_name` is the **CREATOR**'s name.\n* **CONTRIBUTORS**: Stage, commit, and push a new file `conflict.txt`. Enter the **CONTRIBUTORS**'s name as the file's contents.\n* **CREATOR**: Stage, commit, and push a new file `conflict.txt`. Enter the **CREATOR**'s name as the file's contents.\n* **CONTRIBUTORS**: Create a pull request for the `conflict-your_name` branch.\n* **CREATOR**: Create a pull request for the `conflict-your_name` branch.\n* **CREATOR**: Review the **CONTRIBUTOR**'s pull request and accept the changes.\n* **CREATOR**: Notice that your `conflict-your_name` branch now has merge conflicts and cannot be merged.\n* **CREATOR**: Resolve the conflicts and merge your pull request\n\n## Open Source\n\nSometimes you want a project to be open to changes from other developers, not just the allowed contributors. We'll use your existing `collab` project to walk through the flow for contributing to an open source project.\n\nThe creator of the `collab` project will remain the **CREATOR**, and the **CONTRIBUTORS** on your current project will each find a different group to be an **OSS CONTRIBUTOR** to.\n\n* **OSS CONTRIBUTOR**: Create a fork of the **CREATOR**'s project.\n* **OSS CONTRIBUTOR**: Clone the fork onto your local machine.\n* **OSS CONTRIBUTOR**: Create a new branch.\n* **OSS CONTRIBUTOR**: Stage, commit, and push a new file `your_name.txt` (where `your_name` is your name.)\n* **OSS CONTRIBUTOR**: Create a pull request from your fork to the **CREATOR**'s project.\n* **CREATOR**: Review and accept the pull request.\n* **OSS CONTRIBUTOR**: pull the main branch and see the changes on your local git project.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Github Collab exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Github Collab\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/github_engineering_journal.livemd\">Github Engineering Journal</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/comments.livemd\">Comments</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task170-exercises-rollable_expressions", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Rollable Expressions\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rollable Expressions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/caesar_cypher.livemd\">Caesar Cypher</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/phone_number_parsing.livemd\">Phone Number Parsing</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Rollable Expressions\n\nMany games such as Dungeons & Dragons require rolling dice to determine the effects of player actions.\nYou will build a program which makes it easier for players to automatically roll dice online.\n\nDice expressions are in the form `1d6` which means [roll one six-sided die](https://www.google.com/search?q=roll+1d6).\n\nThere can be any **number of dice** on the left hand side of the `d` and any number of sides on the dice on the right hand side of the `d`.\n\nFor example, `20d12` would roll twenty dice with twelve sides. [20d12](https://www.google.com/search?q=roll+20d12).\n\nProvided a text with a dice expression, replace the expression with a clickable link.\n\nIn markdown, a clickable link is in the format `[link name](url)`.\n\nGoogle allows you to roll multi sided dice by searching `roll 1d6`.\nThe url for this is https://www.google.com/search?q=roll+1d6.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRollable.replace(\"8d6\")\n\"[8d6](https://www.google.com/search?q=roll+8d6)\"\n```\n\nEnsure you handle `4`, `6`, `8`, `12`, and `20` sided dice and\nhandle rolling between `1` and `99` dice.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRollable.replace(\"Fireball: deal 8d6 fire damage.\")\n\"Fireball: deal [8d6](https://www.google.com/search?q=roll+8d6) fire damage.\"\n```\n\n### Bonus\n\nImplement a `Rollable.roll/1` function which finds rollable expressions and generates a random number based on the expression. For example, `1d6` would roll a single die returning a result from `1` to `6`. `2d12` would generate two random numbers between `1` and `12` and add them together.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nRollable.roll(\"2d12\")\n\"20\"\n\nRollable.roll(\"2d12\")\n\"24\"\n\nRollable.roll(\"2d12\")\n\"5\"\n\nRollable.roll(\"Fireball: deal 8d6 fire damage.\")\n\"Fireball: deal 20 fire damage.\"\n```\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nYou can use [Regex.replace/4](https://hexdocs.pm/elixir/Regex.html#replace/4) to replace expressions in a string, and `\\d+` to match on one or more digits.\n\n</details>\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Rollable\n  def replace(string) do\n    Regex.replace(~r/(\\d+)d(\\d+)/, string, fn full, dice, sides ->\n      \"[#{full}](https://www.google.com/search?q=roll+#{dice}d#{sides})\"\n    end)\n  end\n\n  def roll(string) do\n    Regex.replace(~r/(\\d+)d(\\d)+/, string, fn full, dice, sides ->\n      dice_integer = String.to_integer(dice)\n      sides_integer = String.to_integer(sides)\n\n      value =\n        1..dice_integer\n        |> Enum.map(fn _ -> Enum.random(1..sides_integer) end)\n        |> Enum.sum()\n        |> Integer.to_string()\n    end)\n  end\nend\n```\n\n</details>\n\nImplement the `Rollable` module as documented below.\n\n```elixir\ndefmodule Rollable do\n  @moduledoc \"\"\"\n  Documentation for `Rollable`\n  \"\"\"\n\n  @doc \"\"\"\n  Replace dice expressions with clickable links.\n\n  ## Examples\n\n    iex> Rollable.replace(\"1d4\")\n    \"[1d4](https://www.google.com/search?q=roll+1d4)\"\n\n    iex> Rollable.replace(\"1d6\")\n    \"[1d6](https://www.google.com/search?q=roll+1d6)\"\n\n    iex> Rollable.replace(\"1d8\")\n    \"[1d8](https://www.google.com/search?q=roll+1d8)\"\n\n    iex> Rollable.replace(\"1d12\")\n    \"[1d12](https://www.google.com/search?q=roll+1d12)\"\n\n    iex> Rollable.replace(\"1d20\")\n    \"[1d20](https://www.google.com/search?q=roll+1d20)\"\n\n    iex> Rollable.replace(\"8d6\")\n    \"[8d6](https://www.google.com/search?q=roll+8d6)\"\n\n    iex> Rollable.replace(\"99d20\")\n    \"[99d20](https://www.google.com/search?q=roll+99d20)\"\n    \n    iex> Rollable.replace(\"Ice Shard: deal 12d4 ice damage.\")\n    \"Ice Shard: deal [12d4](https://www.google.com/search?q=roll+12d4) ice damage.\"\n  \"\"\"\n  def replace(string) do\n  end\n\n  def roll(string) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Rollable Expressions exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rollable Expressions\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/caesar_cypher.livemd\">Caesar Cypher</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/phone_number_parsing.livemd\">Phone Number Parsing</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task171-exercises-supervisor_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Supervisor Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Supervisor Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/supervisors.livemd\">Supervisors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/supervised_stack.livemd\">Supervised Stack</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for [Supervisor](https://hexdocs.pm/elixir/Supervisor.html)s.\n\n> A supervisor is a process which supervises other processes, which we refer to as child processes. Supervisors are used to build a hierarchical process structure called a supervision tree. Supervision trees provide fault-tolerance and encapsulate how our applications start and shutdown.\n> \n> * [HexDocs: Supervisor](https://hexdocs.pm/elixir/Supervisor.html)\n\n## Supervisor\n\nWe've created a `Worker` [GenServer](https://hexdocs.pm/elixir/GenServer.html) for you to use with the following [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) drills.\n\n```elixir\ndefmodule Worker do\n  use GenServer\n\n  def start_link(state, opts \\\\ []) do\n    GenServer.start_link(__MODULE__, state, opts)\n  end\n\n  def init(state) do\n    {:ok, state}\n  end\nend\n```\n\nUse [Supervisor.start_link/3](https://hexdocs.pm/elixir/Supervisor.html#start_link/3) to start a supervisor process with no children. Use [Supervisor.which_children/1](https://hexdocs.pm/elixir/Supervisor.html#which_children/1) to see the empty list of children.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nWe often bind `children` to a variable in demonstrations.\n\n```elixir\nchildren = []\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\nBut that's not enforced, just idiomatic.\n\n```elixir\nSupervisor.start_link([], strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Supervisor.start_link/3](https://hexdocs.pm/elixir/Supervisor.html#start_link/3) function to start a supervisor with the `Worker` as a child using the **map** syntax.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  %{\n    id: :worker1,\n    start: {Worker, :start_link, [\"initial state\"]}\n  } \n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Supervisor.start_link/3](https://hexdocs.pm/elixir/Supervisor.html#start_link/3) function to start a supervisor three `Worker` children using the **map** syntax.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  %{\n    id: :worker1,\n    start: {Worker, :start_link, [\"initial state\"]}\n  },\n  %{\n    id: :worker2,\n    start: {Worker, :start_link, [\"initial state\"]}\n  },\n  %{\n    id: :worker3,\n    start: {Worker, :start_link, [\"initial state\"]}\n  }\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Supervisor.start_link/3](https://hexdocs.pm/elixir/Supervisor.html#start_link/3) function to start a supervisor with the `Worker` as a child using the **tuple** syntax.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  {Worker, \"initial state\"}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [Supervisor.start_link/3](https://hexdocs.pm/elixir/Supervisor.html#start_link/3) function to start a supervisor with the `Worker` as a child using the **map** syntax to start the `Worker` process as a named process.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  %{\n    id: :worker1,\n    start: {Worker, :start_link, [\"initial state\", [name: :named_worker1]]}\n  }\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\nUsually worker GenServers should define a `start_link/1` function to start under a supervision tree. However, this is idiomatic and we can (but usually shouldn't) break this rule.\n\nStart the following `NonIdiomatic` [GenServer](https://hexdocs.pm/elixir/GenServer.html) under a supervision tree using the `starter/3` function.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  %{\n    id: :never_do_this,\n    start: {NonIdiomatic, :starter, [\"arg\", \"arg\", \"arg\"]}\n  }\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\ndefmodule NonIdiomatic do\n  use GenServer\n\n  def starter(_arg1, _arg2, _arg3) do\n    GenServer.start_link(__MODULE__, [])\n  end\n\n  def init(_opts) do\n    {:ok, \"initial state\"}\n  end\nend\n```\n\nUse [Supervisor.start_link/3](https://hexdocs.pm/elixir/Supervisor.html#start_link/3) function to start a supervisor with three `Worker` children using the **tuple** syntax.\n\nThis should cause the supervisor to crash because each `Worker` has the same id.\n\nComment your solution when finished to avoid crashing this livebook.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nchildren = [\n  {Worker, \"initial state\"},\n  {Worker, \"initial state\"},\n  {Worker, \"initial state\"}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Supervisor Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Supervisor Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/supervisors.livemd\">Supervisors</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/supervised_stack.livemd\">Supervised Stack</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task172-exercises-fibonacci_challenge", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Fibonacci Sequence\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"},\n  {:benchee, \"~> 1.1\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Fibonacci Sequence\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/mapset_drills.livemd\">MapSet Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/big_o_notation.livemd\">Performance</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Fibonacci Sequence\n\nThe Fibonacci sequence is a series of the following numbers.\n\n```mermaid\nflowchart LR\na[0] --> b[1] --> c[1] --> d[2] --> e[3] --> f[5] --> g[8] --> h[13] --> i[21] --> k[34] --> ...\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nIt's created by taking the sum of the previous to numbers to get the next number.\n\nSo $fib(n) = fib(n-1) + fib(n - 2)$\n\nImplement the `Fibonacci.sequence/1` function below. Do not worry about performance for this solution.\n\n```elixir\ndefmodule Fibonacci do\n  @doc \"\"\"\n  Generate the fibonacci sequence of a given length.\n\n  ## Examples\n\n    iex> \n  \"\"\"\n  def sequence(length) do\n  end\nend\n```\n\n## Competition: Benchmark\n\nIn the Elixir cell below, create a `FastFib` module. The `FastFib` module should be the most performant version of the Fibonacci Sequence that you can create.\n\n```elixir\ndefmodule FastFib do\n  def sequence(length) do\n  end\nend\n```\n\nUse [Benchee](https://hexdocs.pm/benchee/Benchee.html) to benchmark the performance of `FastFib.sequence/1` function. The student in the class with the fastest `FastFib` time wins.\n\n```elixir\nBenchee.run(\n  %{\n    fast_fib: fn n -> FastFib.sequence(n) end\n  },\n  inputs: %{\n    \"1: small\" => 10,\n    \"2: medium\" => 30\n    # Uncomment the following if your solution can handle it! \n    # Make sure to add a comma above.\n    # \"3: large\" => 100,\n    # \"4: xl\" => 1000,\n    # \"6: 2xl\" => 10000,\n    # \"7: 3xl\" => 100_000\n  },\n  memory_time: 2\n)\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Fibonacci Sequence exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Fibonacci Sequence\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/mapset_drills.livemd\">MapSet Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/big_o_notation.livemd\">Performance</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task173-exercises-blog_posts", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Blog: Posts\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Posts\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_and_ecto.livemd\">Phoenix And Ecto</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/testing_phoenix.livemd\">Testing Phoenix</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog: Posts\n\nYou're going to create the `Posts` resource in your [Blog](./group_project_blog.livemd) project.\n\nBlog posts should have a `title`, `subtitle`, and `content`. It should also have relevant `timestamp` information.\n\n```mermaid\nerDiagram\n\nPost {\n    string title\n    string subtitle\n    text content\n}\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Generate The Posts Resource\n\nUse Phoenix Generators to scaffold all of the necessary boilerplate.\nMake sure to also define the post routes in the router.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nGenerate the resource.\n\n```elixir\n$ mix phx.gen.html Posts Post posts title:string subtitle:string content:text\n$ mix ecto.migrate\n```\n\nThen add the resource to `router.ex`.\n\n```elixir\nscope \"/\", BlogWeb do\n  pipe_through :browser\n\n  get \"/\", PageController, :index\n  resources \"/posts\", PostController\nend\n```\n\nAlternatively we can define every route individually.\n\n```elixir\nscope \"/\", BlogWeb do\n  pipe_through :browser\n\n  get \"/\", PageController, :index\n  get \"/posts\", PostController, :index\n  get \"/posts/new\", PostController, :new\n  post \"/posts\", PostController, :create\n  get \"/posts/:id\", PostController, :show\n  get \"/posts/:id/edit\", PostController, :edit\n  put \"/posts/:id\", PostController, :update\n  patch \"/posts/:id\", PostController, :update\n  delete \"/posts/:id\", PostController, :delete\nend\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Context Functions\n\nNow that you've generated the `Posts` resource, start your project in the IEx shell to interact with the context programmatically.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n$ iex -S mix phx.server\n```\n\nVisit http://localhost:4000/posts to see the changes you make in the IEx shell reflected on the list of posts. Make sure to refresh the page to see updated changes.\n\nNow, use the `Blog.Posts` context module to do the following in the IEx shell:\n\n1. Create a blog post\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\niex> Blog.Posts.create_post(%{title: \"title\", subtitle: \"subtitle\", content: \"content\"})\n```\n\n</details>\n\n1. Retrieve the blog post by it's id.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n`1` will be the id of any valid post.\n\n```elixir\niex> Blog.Posts.get_post!(1)\n```\n\n</details>\n\n1. Edit the blog post\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n`1` will be the id of any valid post.\n\n```elixir\niex> Blog.Posts.get_post!(1) |> Blog.Posts.update_post(%{title: \"updated title\"})\n```\n\n</details>\n\n1. List all blog posts\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\niex> Blog.Posts.list_posts()\n```\n\n</details>\n\n1. Delete the blog post\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n`1` will be the id of any valid post.\n\n```elixir\niex> Blog.Posts.get_post!(1) |> Blog.Posts.delete_post()\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Repo Functions\n\nIn the IEx shell, use the `Blog.Posts.Post` schema and `Blog.Repo` module directly to do the following:\n\n> Note that the example solutions assume that you alias both modules.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\niex> alias Blog.Posts.Post\niex> alias Blog.Repo \n```\n\n1. Create a blog post\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\niex>  changeset = Post.changeset(%Post{}, %{title: \"title\", subtitle: \"subtitle\", content: \"content\"})\niex>  post = Repo.insert(changeset)\n```\n\n</details>\n\n1. Retrieve the blog post by it's id.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n`2` will be the id of any valid post.\n\n```elixir\niex> Repo.get!(Post, 2)\n```\n\n</details>\n\n1. Edit the blog post\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n`2` will be the id of any valid post.\n\n```elixir\niex> Repo.get!(Post, 2) |> Post.changeset(%{title: \"updated title\"}) |> Repo.update()\n```\n\n</details>\n\n1. List all blog posts\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\niex> Repo.all(Post)\n```\n\n</details>\n\n1. Delete the blog post\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n`1` will be the id of any valid post.\n\n```elixir\niex> Repo.get!(Post, 2) |> Repo.delete()\n```\n\n</details>\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Posts exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Posts\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/phoenix_and_ecto.livemd\">Phoenix And Ecto</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/testing_phoenix.livemd\">Testing Phoenix</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task174-exercises-mad_libs", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Mad Libs\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Mad Libs\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/habit_tracker.livemd\">Habit Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/guessing_games.livemd\">Guessing Games</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Madlibs\n\nYou're going to create some mad lib games. A madlib is a game where the player can enter in a word or sentence to fill in the blanks.\n\n## String Concatenation Madlib\n\nIn the Elixir cell below, bind each blank word to a variable. Then use **string concatenation** to combine these values into a single string madlib.\n\n> A programmer is a ____ that turns ____ into ____.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nblank1 = \"person\"\nblank2 = \"coffee\"\nblank3 = \"code\"\n\n\"A programmer is a \" <> blank1 <> \" that turns \" <> blank2 <> \" into \" <> blank3\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## String Interpolation Madlib\n\nIn the Elixir cell below, bind each blank word to a variable. Then use **string interpolation** to combine these values into a single string madlib.\n\n> ____ and ____ combined makes ____.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nblank1 = \"foo\"\nblank2 = \"bar\"\nblank3 = \"foobar\"\n\n\"#{blank1} and #{blank2} combined makes #{blank3}.\"\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Mad Libs exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Mad Libs\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/habit_tracker.livemd\">Habit Tracker</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/guessing_games.livemd\">Guessing Games</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task175-exercises-genserver_drills", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# GenServer Drills\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=GenServer Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/genservers.livemd\">GenServers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/score_tracker.livemd\">Score Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Drills\n\nDrills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.\n\nThis set of drills is for [GenServers](../reading/genservers.livemd).\n\n> A GenServer is a process like any other Elixir process and it can be used to keep state, execute code asynchronously and so on. The advantage of using a generic server process (GenServer) implemented using this module is that it will have a standard set of interface functions and include functionality for tracing and error reporting. It will also fit into a supervision tree.\n> \n> * [HexDocs: GenServer](https://hexdocs.pm/elixir/GenServer.html)\n\n## GenServer\n\nCreate a `Zero` `Genserver` that does nothing other than store the integer `0` in its state. Use [GenServer.start_link/3](https://hexdocs.pm/elixir/GenServer.html#start_link/3) to start the `Zero` process. Use `:sys.get_state/1` to view the state of your `Zero` process.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Zero do\n  use GenServer\n\n  @impl true\n  def init(_opts) do\n    {:ok, 0}\n  end\nend\n\n{:ok, pid} = GenServer.start_link(Zero, \"init_arg\")\n:sys.get_state(pid)\n```\n\n</details>\n\n```elixir\n\n```\n\nUse [GenServer.start_link/3](https://hexdocs.pm/elixir/GenServer.html#start_link/3) to start your `Zero` [GenServer](https://hexdocs.pm/elixir/GenServer.html) as a named process.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\nGenServer.start_link(Zero, \"init_arg\", [name: :my_name])\n```\n\n</details>\n\n```elixir\n\n```\n\nCreate a `SimpleCounter` [GenServer](https://hexdocs.pm/elixir/GenServer.html) whose state starts as `0`. Implement a [GenServer.handle_call/3](https://hexdocs.pm/elixir/GenServer.html#handle_call/3) callback function which accepts the `:increment` message and increments the state by `1` and returns `:ok`.\n\nUse [GenServer.start_link/3](https://hexdocs.pm/elixir/GenServer.html#start_link/3) and [GenServer.call/3](https://hexdocs.pm/elixir/GenServer.html#call/3) to spawn a `SimpleCounter` process and send it an `:increment` message.\n\nUse `:sys.get_state/1` to see that the state of the counter has incremented.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule SimpleCounter do\n  use GenServer do\n  \n  def init(_opts) do\n    {:ok, 0}\n  end\n  \n  def handle_call(:increment, _from, state) do\n    {:reply, :ok, state + 1}\n  end\nend\n\n{:ok, pid} = GenServer.start_link(SimpleCounter, [])\nGenServer.call(pid, :increment)\n:sys.get_state(pid)\n```\n\n</details>\n\n```elixir\n\n```\n\nCreate an `InitialState` [GenServer](https://hexdocs.pm/elixir/GenServer.html) whose initial state can be configured. Call [GenServer.start_link/3](https://hexdocs.pm/elixir/GenServer.html#start_link/3) to spawn a `State` GenServer with an initial state. Use `:sys.get_state/1` to confirm the state matches your configured state.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule InitialState do\n  use GenServer\n\n  @impl true\n  def init(state) do\n    {:ok, state}\n  end\nend\n\n{:ok, pid} = GenServer.start_link(InitialState, \"my initial state\")\n\n:sys.get_state(pid)\n```\n\n</details>\n\n```elixir\n\n```\n\nCreate a `State` module.\n\nIt should:\n\n* Define a `State.get/1` function that uses [GenServer.call/3](https://hexdocs.pm/elixir/GenServer.html#call/3) and a [GenServer.handle_call/3](https://hexdocs.pm/elixir/GenServer.html#handle_call/3) callback function to retrieve state.\n* Define a `State.set/2` function that uses [GenServer.cast/2](https://hexdocs.pm/elixir/GenServer.html#cast/2) and a [GenServer.handle_cast/2](https://hexdocs.pm/elixir/GenServer.html#handle_cast/2) callback function to update state.\n* Define a `State.start_link/1` function with a [GenServer.init/1](https://hexdocs.pm/elixir/GenServer.html#c:init/1) callback function to initialize the [GenServer](https://hexdocs.pm/elixir/GenServer.html) with a configurable state.\n\nManually test each function (`State.set/2`, `State.get/1` and `State.start_link/1`) to confirm they work as expected.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\n\ndefmodule State do\n  use GenServer\n\n  def start_link(state) do\n    GenServer.start_link(__MODULE__, state)\n  end\n\n  def set(pid, new_state) do\n    GenServer.cast(pid, {:set, new_state})\n  end\n\n  def get(pid) do\n    GenServer.call(pid, :get)\n  end\n\n  @impl true\n  def init(state) do\n    {:ok, state}\n  end\n\n  @impl true\n  def handle_cast({:set, new_state}, state) do\n    {:noreply, new_state}\n  end\n\n  @impl true\n  def handle_call(:get, _from, state) do\n    # response is not specified\n    {:reply, state, state}\n  end\nend\n\n{:ok, pid} = State.start_link(\"initial state\")\n\"initial state\" = State.get(pid)\nState.set(pid, \"updated state\")\n\"updated state\" = State.get(pid)\n```\n\n</details>\n\n```elixir\n\n```\n\nCreate a minimal `Named` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that can be started and configured as a named process using `Named.start_link/1`. Start a `Named` process and use [GenServer.whereis/1](https://hexdocs.pm/elixir/GenServer.html#whereis/1) and/or [Process.whereis/1](https://hexdocs.pm/elixir/Process.html#whereis/1) to find the pid of the named process.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule Named do\n  use GenServer\n\n  def start_link(opts) do\n    name = Keyword.get(opts, :name, __MODULE__)\n    GenServer.start_link(__MODULE__, [], name: name)\n  end\n\n  def init(_opts) do\n    {:ok, \"any state!\"}\n  end\nend\n\nNamed.start_link([name: :my_configured_name])\nProcess.whereis(:my_configured_name)\n```\n\n</details>\n\n```elixir\n\n```\n\nCreate a minimal `NamedState` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that can be started and configured as a named process with a configurable state using `NamedState.start_link`. Use `:sys.get_state/1` to confirm the initial state is as expected and [GenServer.whereis/1](https://hexdocs.pm/elixir/GenServer.html#whereis/1) and/or [Process.whereis/1](https://hexdocs.pm/elixir/Process.html#whereis/1) to find the pid of the named process.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nThere are many ways to configure `NamedState.start_link/1`\n\nUsing multiple parameters:\n\n```elixir\ndefmodule NamedState do\n  use GenServer\n\n  def start_link(state, opts \\\\ []) do\n    name = Keyword.get(opts, :name, __MODULE__)\n    GenServer.start_link(__MODULE__, state, name: name)\n  end\n\n  def init(state) do\n    {:ok, state}\n  end\nend\n\nNamedState.start_link(\"initial state\", name: :multi_arg_example)\n\nProcess.whereis(:multi_arg_example)\n```\n\nUsing a keyword list with different keys:\n\n```elixir\ndefmodule NamedState do\n  use GenServer\n\n  def start_link(opts) do\n    name = Keyword.get(opts, :name, __MODULE__)\n    state = Keyword.get(opts, :state)\n    GenServer.start_link(__MODULE__, state, name: name)\n  end\n\n  def init(state) do\n    {:ok, state}\n  end\nend\n\nNamedState.start_link(state: \"initial state\", name: :keyword_list_example)\nProcess.whereis(:keyword_list_example)\n```\n\n</details>\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish GenServer Drills exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=GenServer Drills\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/genservers.livemd\">GenServers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/score_tracker.livemd\">Score Tracker</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task176-exercises-concurrent_word_count", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Concurrent Word Count\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Concurrent Word Count\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/task_drills.livemd\">Task Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/html_css.livemd\">HTML & CSS</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Concurrent Word Count\n\nGiven a list of documents, use the [Task](https://hexdocs.pm/elixir/Task.html) module to concurrently find the total word count of every document combined.\n\nFor our purposes, a **word** will be any sequence of characters separated by a space. You do not have to handle invalid words, punctuation, or other special cases.\n\n```elixir\ndocument = \"\"\"\nThis is my document document\n\"\"\"\n\nString.split(document, \" \", trim: true)\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\n```elixir\ndefmodule WordCount do\n  def individual_count(documents) do\n    tasks =\n      Enum.map(documents, fn document ->\n        Task.async(fn ->\n          document |> String.split(\" \", trim: true) |> Enum.count()\n        end)\n      end)\n\n    Task.await_many(tasks)\n  end\n\n  def total_count(documents) do\n    documents |> individual_count() |> Enum.sum()\n  end\nend\n```\n\n</details>\n\nImplement the `WordCount` module as documented below.\n\n```elixir\ndefmodule WordCount do\n  @moduledoc \"\"\"\n  Documentation for `WordCount`.\n  \"\"\"\n\n  @doc \"\"\"\n  Concurrently count the number of words in each document.\n\n  ## Examples\n\n      iex> WordCount.individual_count([\"document one\", \"document two\"])\n      [2, 2]\n  \"\"\"\n  def individual_count(documents) do\n  end\n\n  @doc \"\"\"\n  Concurrently count the number of words in each document and return\n  the combined count.\n\n  iex> WordCount.total_count([\"document one\", \"document two\"])\n  4\n  \"\"\"\n  def total_count(documents) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Concurrent Word Count exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Concurrent Word Count\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/task_drills.livemd\">Task Drills</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/html_css.livemd\">HTML & CSS</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task177-exercises-blog_search", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "<!-- livebook:{\"file_entries\":[{\"name\":\"blog_post_search_mock.png\",\"type\":\"attachment\"}]} -->\n\n# Blog: Search\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Search\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/testing_phoenix.livemd\">Testing Phoenix</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_components.livemd\">Phoenix Components</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Blog: Search\n\nYou're going to add the ability to search for blog posts to your `Blog` project.\n\nYour solution does not have to match this example UI as long as it has the required search functionality.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n![](files/blog_post_search_mock.png)\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Requirements\n\n* A user should be able to search for posts by title (case insensitive and partially matching) using a text input.\n* Write a full test suite of **Context** and **Controller** tests.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Blog: Search exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Blog: Search\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../reading/testing_phoenix.livemd\">Testing Phoenix</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/phoenix_components.livemd\">Phoenix Components</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task178-exercises-habit_tracker", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Habit Tracker\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Habit Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/card_counting.livemd\">Card Counting</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/mad_libs.livemd\">Mad Libs</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Habit Tracker\n\nYou are going to build some logic for a habit tracking app. Habit tracking apps such as [Habitica](https://habitica.com/) help users develop healthy habits.\n\nEach habit is assigned a size such as small, medium, or large. Each size is assigned a different point value. Users earn points based on the habits they complete.\n\n* A large habit is worth 30 points\n* A medium habit is worth 20 points\n* A small habit is worth 5 points.\n\n```mermaid\nflowchart\n  A[\"Large (30 points)\"]\n  B[\"Medium (20 points)\"]\n  C[\"Small (5 points)\"]\n```\n\n## Bind Habit Variables\n\nBind a variable `small`, `medium`, and `large` to represent the point value as an integer (see above) for each habit. You will use these variables in further solutions.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nlarge = 30\nmedium = 20\nsmall = 5\n```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Small, Medium, Large\n\nGiven a user has completed one small habit, one medium habit, and one large habit, use arithmetic operators and your previously bound variables `small`, `medium`, and `large` to determine how many points they have in total.\n\n```mermaid\nflowchart LR\n  A[\"Large (30 points)\"]\n  B[\"Medium (20 points)\"]\n  C[\"Small (5 points)\"]\n  T[total?]\n  A --+--> B\n  B --+--> C\n  C --+--> T\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example solution</summary>\n\n```elixir\nsmall + medium + large\n```\n\n</details>\n\nEnter your answer in the code cell below.\n\n```elixir\n\n```\n\n## Multiples\n\nGiven a user has completed **ten small** habits, **five medium** habits, and **three large** habits, use arithmetic operators to determine how many points they have in total.\n\n<details style=\"background-color: lightgreen; padding: 1rem;\">\n<summary>Example solution</summary>\n\n```elixir\nsmall * 10 + medium * 5 + large * 3\n```\n\n</details>\n\nEnter your answer below.\n\n```elixir\n\n```\n\n## Progress Bar\n\nUsers define a `goal` number of points to earn each day. Determine what percentage progress have they made if they would like to earn `40` points and have completed a `small` and a `medium` habit.\n\nRemember that you can calculate percentage with $\\frac{points}{goal} * 100$\n\n<details style=\"background-color: lightgreen; padding: 1rem;\">\n<summary>Example solution</summary>\n\n```elixir\ngoal = 40\n((small + medium) / goal) * 100\n```\n\nOr you might consider binding `points` as a variable.\n\n\n```elixir\ngoal = 40\npoints = small + medium \n(points / goal) * 100\n```\n\n</details>\n\nEnter your answer below.\n\n```elixir\n\n```\n\n## Penalties And Rewards\n\nTo motivate users to complete their habits quickly, we add a time-limit feature where users will receive a `60%` point bonus if they complete their habit early, and a `50%` point penalty if they complete their habit late.\n\nDetermine the users total point score when they complete:\n\n* three early small habits\n* two normal medium habits\n* two late large habits\n\n<details style=\"background-color: lightgreen; padding: 1rem;\">\n<summary>Example solution</summary>\n\n```elixir\ngoal = 40\n\nsmall * 1.6 * 3 + medium * 2 + large * 2 * 0.5\n```\n\n</details>\n\nEnter your answer below.\n\n```elixir\n\n```\n\n## Bonus: Add Your Own Feature\n\nAdd your own feature to the habit tracking app. Use comments to describe your feature and show\nhow it would affect calculating the total score and/or the total percentage of completed habits.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Habit Tracker exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Habit Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/card_counting.livemd\">Card Counting</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../exercises/mad_libs.livemd\">Mad Libs</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task179-exercises-advanced_score_tracker", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Advanced Score Tracker\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Advanced Score Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/inventory_management.livemd\">ETS Inventory Management</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/metaprogramming.livemd\">Metaprogramming</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Mastery\n\nMastery assignments are bonus projects designed to incorporate curriculum concepts at an advanced level. You have complete freedom with how you complete mastery assignments, and may change requirements as you see fit. Each mastery assignment serves as an independent project you may choose to include on your portfolio of projects.\n\n## Advanced Score Tracker\n\nCreate a new supervised mix project `AdvancedScoreTracker`.\n\n```\n$ mix new advanced_score_tracker --sup\n```\n\nThe `AdvancedScoreTracker` will use an [Agent](https://hexdocs.pm/elixir/Agent.html) to create a general purpose score tracker that tracks player score history across multiple different games. The `AdvancedScoreTracker` [Agent](https://hexdocs.pm/elixir/Agent.html) should start as part of the application's supervision tree.\n\n<details style=\"background-color: burlywood; padding: 1rem; margin: 1rem 0;\">\n<summary>Hint</summary>\n\nConsider how you want to store your state, and how to update it.\nFor example, you might consider a map.\n\n```elixir\nstate = %{\n  player1: %{\n    ping_pong: [0, 20]\n  },\n  player2: %{\n    ping_pong: [0, 20]\n    rock_paper_scissors: [3, 2]\n  }\n}\n```\n\n</details>\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Test Cases\n\nCreate a full suite of test cases for all of the features described below.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Score\n\nThe `AdvancedScoreTracker` should be able to add a certain number of points given a player name and a game name. A game should start with `0` points by default.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nAdvancedScoreTracker.add(:player1, :ping_pong, 10)\nAdvancedScoreTracker.add(:player1, :ping_pong, 10)\n```\n\nIt should also be able to retrieve the total number of points for the current game when provided the name of the game and the player.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n20 = AdvancedScoreTracker.get(:player1, :ping_pong)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### New Game\n\nWhen a game is finished, `AdvancedScoreTracker` should be able to start a new point total with a default score of `0`.\nThe previous game total should be saved, see the **History** section below.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nAdvancedScoreTracker.new(:player1, :ping_pong)\n0 = AdvancedScoreTracker.get(:player1, :ping_pong)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### History\n\nRetrieve a history of scores for a player and a game as a list of point totals.\nThe most recent game should be at the start of the list.\n\nEach value should be the total number of points accumulated before calling `AdvancedScoreTracker.new/2` to start a new game.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[0, 20] = AdvancedScoreTracker.history(:player1, :ping_pong)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### High Score\n\nFind a player's highest score from their history.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n20 = AdvancedScoreTracker.high_score(:player1, :ping_pong)\n```\n\nFind the highest score out of all players for a game.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n20 = AdvancedScoreTracker.high_score(:ping_pong)\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n### Create A GitHub Repository\n\nConnect your `AdvancedScoreTracker` project to a GitHub repository and create a README to describe the purpose of the project and what you learned building it.\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Advanced Score Tracker exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Advanced Score Tracker\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/inventory_management.livemd\">ETS Inventory Management</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/metaprogramming.livemd\">Metaprogramming</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task180-exercises-rock_paper_scissors", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Rock Paper Scissors\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rock Paper Scissors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/naming_numbers.livemd\">Naming Numbers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/modules.livemd\">Modules</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Create The Perfect AI\n\nYou're going to create the perfect AI for rock paper scissors that will always win.\n\n```mermaid\nflowchart LR\nscissors --beats--> paper --beats--> rock --beats--> scissors\n```\n\nGenerate a random player choice of `:rock` ,`:paper`, or `:scissors` or manually enter `:rock`, `:paper`, and `:scissors` to determine your program works correctly.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nplayer_choice = Enum.random([:rock, :paper, :scissors])\n```\n\nThen, return the winning choice of either `:rock`, `:paper`, or `:scissors` that beats the player's choice.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n  ```elixir\n  player_choice = :scissors\n  \n  case player_choice do\n    :rock -> :paper\n    :paper -> :scissors\n    :scissors -> :rock\n  end\n  ```\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Create Two Player Rock Paper Scissors\n\nNow that you know how to create a rock paper scissors AI, you're going to create a two player game of rock paper scissors.\n\nBind a `player1_choice` and `player2_choice` variable to `:rock`, `:paper`, or `:scissors`.\n\n* If `player1_choice` beats `player2_choice`, return `\"Player 1 wins!\"`.\n* If `player2_choice` beats `player1_choice`, return `\"Player 2 wins!\"`.\n* If both players have the same choice, then return `\"Draw\"`.\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n  <summary>Example solution</summary>\n\n  ```elixir\n  player1 = :rock\n  player2 = :scissors\n\n  case {player1, player2} do\n    {:rock, :scissors} -> \"Player 1 Wins!\"\n    {:paper, :rock} -> \"Player 1 Wins!\"\n    {:scissors, :paper} -> \"Player 1 Wins!\"\n    {:rock, :paper} -> \"Player 2 Wins!\"\n    {:paper, :scissors} -> \"Player 2 Wins!\"\n    {:scissors, :rock} -> \"Player 2 Wins!\"\n    {_same, _same} -> \"Draw\"\n  end\n  ```\n\n  You can also reduce code repetition using functions and the `in` keyword to check if the value exists in a list.\n\n  ```elixir\n  player1 = :rock\n  player2 = :scissors\n\n  beats? = fn choice1, choice2 ->\n    {choice1, choice2} in [{:rock, :scissors}, {:paper, :rock}, {:scissors, :paper}]\n  end\n\n  cond do\n    beats?.(player1, player2) -> \"Player1\"\n    beats?.(player2, player1) -> \"Player2\"\n    player1 == player2 -> \"Draw\"\n  end\n  ```\n\n</details>\n\nEnter your solution below.\n\n```elixir\n\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Rock Paper Scissors exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Rock Paper Scissors\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/naming_numbers.livemd\">Naming Numbers</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/modules.livemd\">Modules</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
{"custom_id": "task181-exercises-pascals_triangle", "method": "POST", "url": "/chat/completions", "body": {"model": "gpt-4o-mini-batch", "messages": [{"role": "system", "content": "\u8bf7\u5e2e\u6211\u5c06\u4ee5\u4e0bmarkdown\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u8bf7\u4fdd\u6301\u683c\u5f0f\u5b8c\u6574\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u7cbe\u7b80\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u8981\u6dfb\u52a0\u989d\u5916\u7684\u89e3\u91ca\u3002\u6587\u672c\u5185\u5bb9\u4e2d\u7684\u4ee3\u7801block\u548c\u6ce8\u91ca\uff08\u5373`<!--  -->`\u6269\u8d77\u7684\u5185\u5bb9\uff09\u4e5f\u8bf7\u4e0d\u8981\u7ffb\u8bd1\u3002\u5185\u5bb9\u53d6\u81eaLiveview\u4e13\u7528\u7684livemd\u683c\u5f0f\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5c5e\u4e8e\u683c\u5f0f\u8bbe\u7f6e\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e5f\u8bf7\u4fdd\u6301\u539f\u6837\u3002\u7ffb\u8bd1\u7684\u5185\u5bb9\u662f\u4e00\u4efdElixir\u5b66\u4e60\u6587\u6863\uff0c\u56e0\u6b64\u8bf7\u6ce8\u610f\u4e0d\u8981\u7ffb\u8bd1\u5176\u4e2d\u7684\u4e00\u4e9b\u4e13\u6709\u540d\u8bcd\uff0c\u4f8b\u5982Elixir\uff0cPhoenix\uff0cLivebook\u7b49\u3002"}, {"role": "user", "content": "# Pascal's Triangle\n\n```elixir\nMix.install([\n  {:jason, \"~> 1.4\"},\n  {:kino, \"~> 0.9\", override: true},\n  {:youtube, github: \"brooklinjazz/youtube\"},\n  {:hidden_cell, github: \"brooklinjazz/hidden_cell\"}\n])\n```\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pascal's Triangle\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/factorial.livemd\">Factorial</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/mix.livemd\">Mix</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n\n## Pascal's Triangle\n\nIn this exercise, you're going to generate Pascal's Triangle for a certain number of rows.\n\nIn Pascal's Triangle, each number is the sum of the two integers above it.\n\n<!-- livebook:{\"break_markdown\":true} -->\n\n```mermaid\nflowchart\na[1]\nb1[1]\nb2[1]\nc1[1]\nc2[2]\nc3[1]\nd1[1]\nd2[3]\nd3[3]\nd4[1]\ne1[1]\ne2[4]\ne3[6]\ne4[4]\ne5[1]\n\na --> b1\na --> b2\n\nb1 --> c1\nb1 --> c2\n\nb2 --> c2\nb2 --> c3\n\nc1 --> d1\nc1 --> d2\n\nc2 --> d2\nc2 --> d3\n\nc3 --> d3\nc3 --> d4\n\nd1 --> e1\nd1 --> e2\n\nd2 --> e2\nd2 --> e3\n\nd3 --> e3\nd3 --> e4\n\nd4 --> e4\nd4 --> e5\n```\n\n<!-- livebook:{\"break_markdown\":true} -->\n\nWe can also represent Pascal's triangle as a list of lists.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n```\n\nIn the Elixir cell below, finish the `of/1` function in the `Pascal` module which will\nreturn Pascal's triangle in a list for `n` number of rows.\n\n<!-- livebook:{\"force_markdown\":true} -->\n\n```elixir\nPascal.of(1)\n[\n  [1]\n]\n\nPascal.of(2)\n[\n  [1],\n  [1, 1],\n]\n\nPascal.of(5)\n[\n  [1],\n  [1, 1],\n  [1, 2, 1],\n  [1, 3, 3, 1],\n  [1, 4, 6, 4, 1]\n]\n```\n\n<details style=\"background-color: lightgreen; padding: 1rem; margin: 1rem 0;\">\n<summary>Example Solution</summary>\n\nThe following solution works, but is not very performant because it has to recalculate every previous row.\n\n```elixir\ndefmodule Pascal do\n  def row(1), do: [1]\n  def row(2), do: [1, 1]\n  def row(n), do: [1 | Enum.chunk(row(n - 1), 2, 1) |> Enum.map(fn [a, b] -> a + b end)] ++ [1]\n\n  def of(n) do\n    Enum.map(1..n, &row/1)\n  end\nend\n```\n\nBy building up the solution and referring to the previous value, we can avoid recalculating each row.\n\n```elixir\ndefmodule Pascal do\n  def of(1), do: [[1]]\n  def of(2), do: [[1], [1, 1]]\n\n  def of(n) do\n    Enum.reduce(3..n, [[1, 1], [1]], fn each, [prev | _] = acc ->\n      row = [1 | Enum.chunk(prev, 2, 1) |> Enum.map(fn [a, b] -> a + b end)] ++ [1]\n      [row | acc]\n    end)\n    |> Enum.reverse()\n  end\nend\n```\n\n</details>\n\n```elixir\ndefmodule Pascal do\n  @doc ~S\"\"\"\n  Generates a Pascal's Triangle of `n` rows.\n\n  ## Examples\n\n      iex> Pascal.of(1)\n      [[1]]\n\n      iex> Pascal.of(5)\n      [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n  \"\"\"\n  def of(n) do\n  end\nend\n```\n\n## Commit Your Progress\n\nDockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.\n\nRun `git status` to ensure there are no undesirable changes.\nThen run the following in your command line from the `curriculum` folder to commit your progress.\n\n```\n$ git add .\n$ git commit -m \"finish Pascal's Triangle exercise\"\n$ git push\n```\n\nWe're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.\n\nWe also offer a paid course where you can learn from an instructor alongside a cohort of your peers.\nWe will accept applications for the June-August 2023 cohort soon.\n\n## Navigation\n\n<div style=\"display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;\">\n<div style=\"display: flex;\">\n<i class=\"ri-home-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../start.livemd\">Home</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-bug-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Pascal's Triangle\">Report An Issue</a>\n</div>\n<div style=\"display: flex;\">\n<i class=\"ri-arrow-left-fill\"></i>\n<a style=\"display: flex; color: #61758a; margin-left: 1rem;\" href=\"../exercises/factorial.livemd\">Factorial</a>\n</div>\n<div style=\"display: flex;\">\n<a style=\"display: flex; color: #61758a; margin-right: 1rem;\" href=\"../reading/mix.livemd\">Mix</a>\n<i class=\"ri-arrow-right-fill\"></i>\n</div>\n</div>\n"}], "temperature": 0, "top_p": 0.95, "max_tokens": 16384}}
