# PicChat: PubSub

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: PubSub">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/pic_chat_image_upload.livemd">PicChat: 图片上传</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/pic_chat_infinite_scroll.livemd">PicChat: 分页</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 什么是PubSub（发布/订阅模式），它如何实现实时功能？
* 我们如何将LiveView进程订阅到一个主题？
* 我们如何向一个主题广播？
* 我们如何在LiveView进程中处理广播的消息？

## 概述

### [PubSub](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)

PubSub，或“发布-订阅”，是一种消息传递模式，允许消息的发送者（发布者）向多个接收者（订阅者）发送消息，而无需明确建立与每个接收者的连接。这允许一种解耦的通信模型，发布者和订阅者不需要彼此了解或直接连接即可进行通信。

```mermaid
flowchart
PS[PubSub]
P[Publisher]
S1[Subscriber]
S2[Subscriber]
S3[Subscriber]

P --broadcast--> PS
PS --broadcast--> S1
PS --broadcast--> S2
PS --broadcast--> S3
```

<!-- livebook:{"break_markdown":true} -->

### 主题

在PubSub系统中，发布者将消息发送到一个主题，该主题充当消息的逻辑通道。订阅者可以订阅该主题，并在消息发布时接收该消息的副本。这允许多个订阅者接收相同的消息，并且还允许发布者向多个主题发送消息，这些消息可以被多个订阅者接收。

```mermaid
flowchart BT
S1[Subscriber]
S2[Subscriber]
S3[Subscriber]
T[Topic]

S1 --subscribe--> T
S2 --subscribe--> T
S3 --subscribe--> T
```

<!-- livebook:{"break_markdown":true} -->

### [Phoenix.PubSub](https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html)

Phoenix提供了一个基于Elixir进程模型的内置PubSub系统，允许客户端订阅主题并实时接收消息。由于LiveViews是GenServer进程，因此每个Phoenix LiveView可以订阅相关主题，并根据发布的事件实时渲染信息。

我们的Phoenix PubSub服务在`application.ex`中作为应用程序监督树的一部分启动。

<!-- livebook:{"force_markdown":true} -->

```elixir
def start(_type, _args) do
  children = [
    # 启动Ecto仓库
    App.Repo,
    # 启动Telemetry监督者
    AppWeb.Telemetry,
    # 启动PubSub系统
    {Phoenix.PubSub, name: App.PubSub},
    # 启动Endpoint (http/https)
    AppWeb.Endpoint
    # 通过调用: App.Worker.start_link(arg) 启动一个工作者
    # {App.Worker, arg}
  ]

  # 请参见 https://hexdocs.pm/elixir/Supervisor.html
  # 以获取其他策略和支持的选项
  opts = [strategy: :one_for_one, name: App.Supervisor]
  Supervisor.start_link(children, opts)
end
```

## PicChat: Pub Sub

在接下来的几节课中，我们将构建一个`PicChat`应用程序，用户可以创建带有上传图片的消息。本课将重点添加一个pub-sub系统，以实现消息的实时推送。

每当LiveView进程触发相关事件，例如添加、创建或更新消息时，我们将广播一条消息到pubsub，导致其他LiveView进程更新它们的聊天记录。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
P[Publisher]
PS[(PubSub)]
S1[LiveView Subscriber]
S2[LiveView Subscriber]
S3[LiveView Subscriber]

P --broadcast event to ''messages'' topic--> PS
PS --broadcast event--> S1
PS --broadcast event--> S2
PS --broadcast event--> S3
```

<!-- livebook:{"break_markdown":true} -->

实现一个简单的PubSub系统有三个主要步骤。

1. 使用[Endpoint.subscribe/2](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#c:subscribe/2)，它调用[Phoenix.PubSub.subscribe/3](https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html#subscribe/3)将相关进程订阅到一个主题。
2. 使用广播函数，例如[Endpoint.broadcast/3](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#c:broadcast/3)或[Endpoint.broadcast_from/4](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#c:broadcast_from/4)（不向调用者发送消息），向主题的所有订阅者广播消息。
3. 在订阅者进程中使用[handle_info/2](https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2)回调处理广播的消息。

## 订阅

我们在`MessageLive.Index` LiveView上显示消息列表。我们将每个挂载的`MessageLive.Index` LiveView订阅到一个`"messages"`主题。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Index.ex
def mount(_params, session, socket) do
  if connected?(socket) do
    PicChatWeb.Endpoint.subscribe("messages")
  end

  {:ok, stream(socket, :messages, Chat.list_messages())}
end
```

现在，我们订阅的`MessageLive.Index` LiveView进程将接收任何广播到`"messages"`主题的消息。

## 广播

每当在`"messages"`主题上发生与提供实时更新相关的事件时，我们希望向我们的PubSub系统广播消息。每当我们创建、更新或删除`Message`记录时，我们都会广播一条消息。

<!-- livebook:{"force_markdown":true} -->

### 保存消息

每当我们创建或更新新消息时，在`"messages"`主题上广播一个`"new"`或`"edit"`事件。

为了节省时间，使广播的消息不必通过PubSub系统，我们选择使用`broadcast_from/4`而不是`broadcast/3`，让发送者直接通知父LiveView已保存的消息。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Form_component.ex
defp save_message(socket, :edit, message_params) do
  case Chat.update_message(socket.assigns.message, message_params) do
    {:ok, message} ->
      notify_parent({:edit, message})
      PicChatWeb.Endpoint.broadcast_from(self(), "messages", "edit", message)

      {:noreply,
        socket
        |> put_flash(:info, "消息更新成功")
        |> push_patch(to: socket.assigns.patch)}

    {:error, %Ecto.Changeset{} = changeset} ->
      {:noreply, assign_form(socket, changeset)}
  end
end

defp save_message(socket, :new, message_params) do
  case Chat.create_message(message_params) do
    {:ok, message} ->
      notify_parent({:new, message})
      PicChatWeb.Endpoint.broadcast_from(self(), "messages", "new", message)

      {:noreply,
        socket
        |> put_flash(:info, "消息创建成功")
        |> push_patch(to: socket.assigns.patch)}

    {:error, %Ecto.Changeset{} = changeset} ->
      {:noreply, assign_form(socket, changeset)}
  end
end
```

<!-- livebook:{"break_markdown":true} -->

### 删除

在我们创建或更新新消息时，在`"messages"`主题上广播一个`"delete"`事件。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Index.ex
def handle_event("delete", %{"id" => id}, socket) do
  message = Chat.get_message!(id)

  if message.user_id == socket.assigns.current_user.id do
    {:ok, _} = Chat.delete_message(message)
    PicChatWeb.Endpoint.broadcast_from(self(), "messages", "delete", message)
    {:noreply, stream_delete(socket, :messages, message)}
  else
    {:noreply,
      Phoenix.LiveView.put_flash(
        socket,
        :error,
        "您没有权限删除此消息。"
      )}
  end
end
```

## 处理接收的事件

在订阅的LiveView进程中，`handle_info/2`回调将接收一个[Phoenix.Socket.Broadcast](https://hexdocs.pm/phoenix/Phoenix.Socket.Broadcast.html)广播结构。

<!-- livebook:{"force_markdown":true} -->

```elixir
%Phoenix.Socket.Broadcast{
  topic: "messages",
  event: "new",
  payload: %PicChat.Chat.Message{
    __meta__: #Ecto.Schema.Metadata<:loaded, "messages">,
    id: 4,
    content: "some content",
    picture: nil,
    user_id: 1,
    user: #Ecto.Association.NotLoaded<association :user is not loaded>,
    inserted_at: ~N[2023-05-28 21:26:18],
    updated_at: ~N[2023-05-28 21:26:18]
  }
}
```

我们可以对这个结构进行模式匹配，以创建事件处理程序。为在消息流中创建、更新和删除`Message`添加`handle_info/2`回调函数。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Index.ex
def handle_info(%Phoenix.Socket.Broadcast{topic: "messages", event: "new", payload: message}, socket) do
  {:noreply, stream_insert(socket, :messages, message, at: 0)}
end

def handle_info(%Phoenix.Socket.Broadcast{topic: "messages", event: "edit", payload: message}, socket) do
  {:noreply, stream_insert(socket, :messages, message)}
end

def handle_info(%Phoenix.Socket.Broadcast{topic: "messages", event: "delete", payload: message}, socket) do
  {:noreply, stream_delete(socket, :messages, message)}
end
```

## 测试PubSub

我们可以通过挂载多个LiveViews并触发事件来测试PubSub交互。

以下是我们可以添加到`message_live_test.ex`中的一些测试，以确保创建、更新和删除PubSub功能按预期工作。

<!-- livebook:{"force_markdown":true} -->

```elixir
describe "PubSub" do
  test "创建消息更新订阅者", %{conn: conn} do
    user = user_fixture()
    conn = log_in_user(conn, user)
    {:ok, subscriber_live, _html} = live(conn, ~p"/messages")
    {:ok, publisher_live, _html} = live(conn, ~p"/messages/new")

    assert publisher_live
            |> form("#message-form", message: @create_attrs)
            |> render_submit()

    assert render(subscriber_live) =~ "some content"
  end

  test "更新消息更新订阅者", %{conn: conn} do
    user = user_fixture()
    conn = log_in_user(conn, user)
    message = message_fixture(user_id: user.id)
    {:ok, subscriber_live, _html} = live(conn, ~p"/messages")
    {:ok, publisher_live, _html} = live(conn, ~p"/messages/#{message}/edit")

    assert publisher_live
            |> form("#message-form", message: @update_attrs)
            |> render_submit()

    assert render(subscriber_live) =~ "some updated content"
  end

  test "删除消息更新订阅者", %{conn: conn} do
    user = user_fixture()
    conn = log_in_user(conn, user)
    message = message_fixture(user_id: user.id)
    {:ok, subscriber_live, _html} = live(conn, ~p"/messages")
    {:ok, publisher_live, _html} = live(conn, ~p"/messages/#{message}/edit")

    assert publisher_live |> element("#messages-#{message.id} a", "Delete") |> render_click()

    refute render(subscriber_live) =~ "some content"
  end
end
```

## 进一步阅读

考虑以下资源以加深您对该主题的理解。

* [Elixir Schools: LiveView与PubSub](https://elixirschool.com/blog/live-view-with-pub-sub/)
* [Elixir Schools: LiveView与Channels](https://elixirschool.com/blog/live-view-with-channels)
* [HexDocs: Phoenix Channels](https://hexdocs.pm/phoenix/channels.html#overview)
* [HexDocs: Phoenix PubSub](https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html#content)
* [HexDocs: Phoenix Endpoint](https://hexdocs.pm/phoenix/Phoenix.Endpoint.html)

## 提交您的进度

DockYard Academy现在建议您使用最新的[Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行`git status`以确保没有不必要的更改。
然后在`curriculum`文件夹中从命令行运行以下命令以提交您的进度。

```
$ git add .
$ git commit -m "完成PicChat: PubSub阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按自己的节奏进行。

我们还提供付费课程，您可以在同伴的陪伴下向讲师学习。
我们将很快接受2023年6月至8月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: PubSub">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/pic_chat_image_upload.livemd">PicChat: 图片上传</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/pic_chat_infinite_scroll.livemd">PicChat: 分页</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>