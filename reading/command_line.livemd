# 命令行

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/computer_hardware.livemd">计算机硬件</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/git.livemd">Git</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 如何使用命令行导航文件系统？
* 如何使用命令行操作（创建和删除）文件夹和文件？

## 概述

我们使用命令行通过文本界面与计算机交互，而不是通过图形用户界面（GUI）。

许多程序仅通过命令行运行。通常，我们称这些为**命令行应用程序**、**CLI 应用程序**（命令行接口）或简称**CLI**。

命令行会根据你的操作系统（Windows、macOS、GNU/Linux）而有所不同。因此，我们将为每个操作系统提供特定的命令说明。

每个操作系统使用不同的程序来进行命令行操作。请按照你的操作系统的说明打开命令行。

* **Windows**：使用 <kbd>Win <i class="ri-windows-fill"></i></kbd> 键打开开始菜单。搜索命令提示符。确保以管理员模式运行以避免权限问题。
* **macOS 或 GNU/Linux**：打开终端应用 <kbd>Ctrl+Alt+T</kbd>
* **macOS** 点击 Dock 中的启动台图标或使用 <kbd>Command + Space</kbd> 打开启动台。在搜索框中输入终端，然后点击终端程序。

关于命令行界面的概述，我们推荐这段由 Crash Course Computer Science 制作的优秀视频。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\")","title":"Command Line Interfaces"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=4RPtJ9UyHS0")
```

### 当前工作目录

你的命令行应该显示**当前工作目录**。在教程中，你通常会看到 `$` 代表当前工作目录。在输入文本到命令行时，请省略 `$`。

例如，在 Windows 11 中，我的当前工作目录是：

```sh
C:\Users\brook>
```

### 你的回合

在你的计算机上打开命令行并输入 `whoami` 命令以查看当前用户。

你应该会看到类似的输出。

```sh
$ whoami
your_user_name
```

## 运行 Elixir 文件

安装了 [Elixir](https://elixir-lang.org/install.html) 后，我们可以使用命令行执行以 `.ex` 或 `.exs` 结尾的 Elixir 文件。

Elixir 对这两种文件扩展名的处理是相似的。然而，我们通常使用 `.exs` 文件来编写脚本。

让我们创建一个 Elixir 脚本。首先，创建一个 `script.exs` 文件，内容如下。这将在你的控制台中打印 `"Hello, world!"` 消息。

<!-- livebook:{"force_markdown":true} -->

```elixir
IO.puts("Hello, world!")
```

然后从命令行执行该文件。文件中的任何 Elixir 代码都会执行。

```
$ elixir script.exs
Hello, world!
```

## 权限（sudo）

某些命令需要权限才能执行。如果命令需要权限，你应该会在命令行中看到错误。

在 **Windows** 中，你通常需要以管理员模式运行命令提示符或 Powershell。

对于 **macOS & GNU/Linux**，你可以在命令前加上 **sudo**。系统会提示你输入计算机的密码。你会注意到 `whoami` 返回一个不同的值（可能是 `root`）。

Root 是 macOS 和 GNU/Linux 中的超级用户账户。

```sh
$ sudo whoami
root
```

## 列出文件和文件夹

我们的计算机存储**文件**和**文件夹**。**文件夹**和**目录**这两个术语可以互换使用。

我们使用以下命令列出文件和文件夹。

* **Windows**：`dir`
* **macOS 或 GNU/Linux**：`ls`

macOS 和 GNU/Linux 会隐藏特定文件。例如，以 `.` 开头的文件会自动隐藏。

你可以使用 `ls -a` 查看隐藏文件。

```sh
$ ls -a
```

在 **Windows** 中，所有文件和文件夹默认应该显示。

```sh
C:\> dir
```

### 你的回合

使用命令行列出当前工作目录中的文件和文件夹。如果你在 macOS 或 GNU/Linux 上，请使用 `ls` 和 `ls -a` 查看差异。

## 创建文件

你可以使用以下命令创建文件

* **macOS & GNU/Linux**：`touch`
* **Windows**：`echo`

**macOS & GNU/Linux** 允许你输入 `touch` 后跟文件名。

```sh
$ touch ./example_file.txt
```

**Windows** 要求你输入内容到文件中（`>`）。

```sh
C:\> echo example content > ./example_file.txt
```

在 **Windows** 中，你可以使用 `type nul` 创建一个空文件。

```sh
C:\> echo type nul > ./example_file.txt
```

`./` 代表当前工作目录。通常可以省略它。

以下是没有 `./` 的相同命令。

```sh
$ touch example_file.txt
$ echo example content > example_file.txt
```

### 你的回合

使用命令行创建一个名为 `test.txt` 的文件。

在 **macOS & GNU/Linux** 上运行：

```sh
$ touch test.txt
```

在 **Windows** 上运行：

```sh
C:\> type nul > text.txt
```

## 创建文件夹

你可以在每个操作系统上使用 `mkdir` 创建文件夹。它是 **make directory** 的缩写。

### 你的回合

使用命令行创建一个名为 `example` 的文件夹，使用 `mkdir`。

```sh
$ mkdir example
```

然后使用命令行在 `example` 文件夹内创建一个名为 `in_example.txt` 的文件。

在 **macOS 或 GNU/Linux** 上输入：

```sh
$ touch example/in_example.txt
```

在 **Windows** 上输入：

```sh
C:\> echo type nul > example/in_example.txt
```

## 导航文件系统

你可以在每个操作系统上使用 `cd` 导航文件系统。

你可以像在文件资源管理器中点击一样通过文件和文件夹进行导航。

输入 `cd` 后跟文件夹的路径以导航到该文件夹。该文件夹必须存在。

```sh
$ cd example_folder
$ cd first_folder/second_folder/third_folder
```

你可以使用 `../` 向上导航文件夹。你可以通过重复 `../` 向上导航任意数量的文件夹。

```sh
$ cd ../
$ cd ../../../
```

让我们通过一个包含多个嵌套文件夹的示例来演示。

```sh
/top
  /folder_a
    /folder_b
      /folder_c
  /folder_1
    /folder_2
      /folder_3
```

<!-- livebook:{"break_markdown":true} -->

我们使用 `cd` 在这些文件夹之间导航并设置当前工作目录。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
top --> folder_1 --> folder_2 --> folder_3
top --> folder_a --> folder_b --> folder_c
style top fill:lightgreen
```

例如，我们可以 `cd folder_1/folder_2/` 将当前工作目录设置为 `folder_2`。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
top_level_folder --> folder_1 --> folder_2 --> folder_3
top_level_folder --> folder_a --> folder_b --> folder_c
style folder_2 fill:lightgreen
```

<!-- livebook:{"break_markdown":true} -->

并使用 `cd ../../folder_a/folder_b/folder_c` 将当前工作目录设置为 `folder_c`。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
top_level_folder --> folder_1 --> folder_2 --> folder_3
top_level_folder --> folder_a --> folder_b --> folder_c
style folder_c fill:lightgreen
```

<!-- livebook:{"break_markdown":true} -->

### 你的回合

使用命令行进入你之前创建的 `example` 文件夹。使用 `ls` 或 `dir` 列出文件夹中的所有文件。你应该能看到上一个练习中的 `in_example.txt` 文件。

```sh
$ cd example
```

## 删除文件

你可以使用以下命令删除文件。

* **macOS & GNU/Linux**：`rm`
* **Windows**：`del`

<!-- livebook:{"break_markdown":true} -->

### 你的回合

使用命令行删除上一个练习中的 `in_example.txt` 文件。

在 **macOS & GNU/Linux** 上运行：

```sh
$ rm example/in_example.txt
```

在 **Windows** 上运行：

```sh
C:\> del example/in_example.txt
```

## 删除文件夹

你可以使用以下命令删除文件夹。

* **macOS & GNU/Linux**：`rm -rf`
* **Windows**：`rmdir`

### 你的回合

删除上一个练习中的 `example` 文件夹。

在 **macOS & GNU/Linux** 上运行：

```sh
$ rm -rf example
```

在 **Windows** 上运行：

```sh
C:\> rmdir example
```

## 读取文件

你可以使用以下命令读取文件内容。

* **macOS & GNU/Linux**：`cat`
* **Windows**：`type`。

### 你的回合

创建一个名为 `read_example.txt` 的新文件，并添加一些文本内容。
你可以在每个操作系统上使用 `echo` 创建一个带有内容的文件。然而，`type nul` 仅在 **Windows** 上有效。

运行：

```sh
$ echo content > read_example.txt
```

然后读取内容。

在 **macOS & GNU/Linux** 上运行：

```sh
$ cat read_example.txt
```

在 **Windows** 上运行：

```sh
C:\> type read_example.txt
```

## Tab 补全

为了节省时间，你通常可以使用 <kbd>Tab</kbd> 键自动完成命令或文件名。

### 你的回合

使用命令行创建一个名为 `tab_to_folder` 的新文件夹。

```sh
$ mkdir tab_to_folder
```

使用自动补全导航到该文件夹。开始输入 `tab` 然后使用 <kbd>Tab</kbd> 键自动完成文件夹名称。

```sh
$ cd tab_to_folder
```

## 权力越大

命令行是强大的。因此，命令行也是危险的。例如，一个简单的命令可以删除你计算机上的所有文件。

打开下面的下拉菜单查看该命令。你**绝对不应该**运行它。

<details style="background-color: lightcoral; color: white; padding: 1rem;">
<summary>危险 请勿运行</summary>
rm -rf *
</details>

因此，在命令行上运行命令时要小心。

## 总结

本课是对命令行的简要介绍。以下是关键要点的快速总结。

<!-- livebook:{"break_markdown":true} -->

**macOS & GNU/Linux**

* 列出文件和文件夹：`ls` 和 `ls -a`。
* 创建文件：`touch`。
* 创建文件夹：`mkdir`。
* 导航：`cd`。
* 删除文件：`rm`。
* 删除文件夹：`rm -rf`。
* 读取文件内容：`cat`。

**Windows**

* 列出文件和文件夹：`dir`。
* 创建文件：`echo`。
* 创建文件夹：`mkdir`。
* 导航：`cd`。
* 删除文件：`del`。
* 删除文件夹：`rmdir`。
* 读取文件内容：`type`。

你现在可以处理日常的命令行任务！期待在遇到更多编程挑战时学习更多关于命令行的知识。

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成命令行阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/computer_hardware.livemd">计算机硬件</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/git.livemd">Git</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>