# PicChat: 消息

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Messages">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/math_game.livemd">数学游戏</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/pic_chat_authentication.livemd">PicChat: 认证</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 路由器中的实时操作如何与 `MessageLive.Index` 中的 `handle_params/3` 交互，以渲染 `:index`、`:new` 和 `:edit` 操作的 UI？
* 解释 LiveComponent 生命周期。

## PicChat: 消息

在接下来的几节课中，我们将构建一个 `PicChat` 应用程序，用户可以创建带有上传图片的消息。本课将重点创建仅包含文本内容的 `Messages` 资源。

<!-- livebook:{"break_markdown":true} -->

### 初始化项目

初始化 `pic_chat` phoenix 项目。

<!-- livebook:{"force_markdown":true} -->

```elixir
mix phx.new pic_chat
```

创建数据库。

```
mix ecto.create
```

使用 [LiveView 生成器](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Live.html) 生成管理 `Messages` 资源所需的所有 LiveView 样板。

<!-- livebook:{"force_markdown":true} -->

```elixir
mix phx.gen.live Chat Message messages content:text
```

<!-- livebook:{"break_markdown":true} -->

### 路由

添加生成资源的路由。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Router.ex
scope "/", PicChatWeb do
  pipe_through :browser

  get "/", PageController, :home
  live "/messages", MessageLive.Index, :index
  live "/messages/new", MessageLive.Index, :new
  live "/messages/:id/edit", MessageLive.Index, :edit

  live "/messages/:id", MessageLive.Show, :show
  live "/messages/:id/show/edit", MessageLive.Show, :edit
end
```

<!-- livebook:{"break_markdown":true} -->

### 消息排序

确保消息按从最新到最旧的顺序排列。我们通过 `inserted_at` 和 `id` 字段进行排序，以确保在同一时间创建的消息具有一致的排序。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Chat.ex
def list_messages do
  Message
  |> from(order_by: [desc: :inserted_at, desc: :id])
  |> Repo.all()
end
```

<!-- livebook:{"break_markdown":true} -->

### 通知父级

我们还需要修改保存消息时如何通知父级 LiveView，因为流默认会附加消息，但我们希望将其放在前面。见 []

将 `form_component.ex` 中的 `notify_parent` 调用更改为分别处理 `:edit` 和 `:new`，而不是对两者使用 `:saved` 事件。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Save_message :edit
notify_parent({:edit, message})

# Save_message :new
notify_parent({:new, message})
```

然后在父级 LiveView 中为每个添加单独的处理程序。

<!-- livebook:{"force_markdown":true} -->

```elixir
# Index.ex
@impl true
def handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do
  # 将新消息放在前面
  {:noreply, stream_insert(socket, :messages, message, at: 0)}
end

@impl true
def handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do
  # 在其当前位置更新新消息
  {:noreply, stream_insert(socket, :messages, message)}
end
```

就是这样！本课的其余部分将重点理解生成器为我们构建的内容以及我们添加的更改。

## 理解构建

生成器为我们做了很多事情，但理解生成的内容很重要。

以下是我们应用程序的新 `MessageLive.Index` LiveView 的广泛视图，以及它如何最终为以下路由呈现 HTML 响应：

* http://localhost:4000/messages
* http://localhost:4000/messages/new
* http://localhost:4000/messages/:id/edit

```mermaid
sequenceDiagram
  autonumber
  participant R as Router
  participant L as MessageLive.Index
  participant FC as MessageLive.FormComponent

  R->>L: GET "/messages" (live_action = :index, :new, or :edit)
  L --> L: disconnected mount/3
  L --> L: connected mount/3
  L --> L: handle_params/3
  L --> L: apply_action/3
  L --> L: render/3 index.html.heex
  L->> FC: live_component (:new and :edit only)
  FC --> FC : mount/1
  FC --> FC : update/2
  FC --> FC : render/1 form_component.html.heex
```

我们将深入探讨应用程序的每个部分。如果您正在参加官方的 DockYard Academy 课程，您的老师将带您完成此过程。

## LiveView

我们将分解 `live/message_live/index.ex` 中的 `MessageLive.Index` liveview，以更好地理解 LiveView 如何与 Ecto 一起工作，以及 LiveView 生成器为我们提供了什么样的支架。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule PicChatWeb.MessageLive.Index do
  use PicChatWeb, :live_view

  alias PicChat.Chat
  alias PicChat.Chat.Message

  @impl true
  def mount(_params, _session, socket) do
    {:ok, stream(socket, :messages, Chat.list_messages())}
  end

  @impl true
  def handle_params(params, _url, socket) do
    {:noreply, apply_action(socket, socket.assigns.live_action, params)}
  end

  defp apply_action(socket, :edit, %{"id" => id}) do
    socket
    |> assign(:page_title, "编辑消息")
    |> assign(:message, Chat.get_message!(id))
  end

  defp apply_action(socket, :new, _params) do
    socket
    |> assign(:page_title, "新消息")
    |> assign(:message, %Message{})
  end

  defp apply_action(socket, :index, _params) do
    socket
    |> assign(:page_title, "消息列表")
    |> assign(:message, nil)
  end

  @impl true
  def handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do
    {:noreply, stream_insert(socket, :messages, message, at: 0)}
  end

  @impl true
  def handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do
    {:noreply, stream_insert(socket, :messages, message)}
  end

  @impl true
  def handle_event("delete", %{"id" => id}, socket) do
    message = Chat.get_message!(id)
    {:ok, _} = Chat.delete_message(message)

    {:noreply, stream_delete(socket, :messages, message)}
  end
end
```

当 LiveView 首次加载时，它调用 `mount/3` 函数以在 socket 中分配消息列表。

然后，`handle_params/3` 委托给 `apply_action/3` 函数，根据实时操作是 `:index`、`:edit` 还是 `:new` 来分配更多数据到 socket：

* 每个页面的 `page_title` 是不同的。它控制浏览器标签顶部显示的文本。
* `:new` 页面为新消息表单创建一个 `Message` 结构。
* `:edit` 页面根据 `"id"` url 参数检索现有的 `Message`。
* `handle_info/3` 从 form_component 接收消息以将 `Message` 插入消息列表中。
* `handle_event/3` 删除消息。

<!-- livebook:{"break_markdown":true} -->

### 流

Phoenix 1.7 和 LiveView 1.18 引入了 [stream/4](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream/4)、[stream_insert/4](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream_insert/4) 和 [stream_delete/3](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#stream_delete/3) 函数。

之前，消息会存储在列表中，用户会从列表中附加和删除元素。

现在，消息列表被视为流，这是一种更高效的替代方案，不在服务器上存储数据，而只在客户端存储数据。这在处理大量数据时是理想的。

流存储在 socket 的 `@streams` 中，针对给定的键。

<!-- livebook:{"force_markdown":true} -->

```elixir
@impl true
def mount(_params, _session, socket) do
  {:ok, stream(socket, :messages, Chat.list_messages())}
end
```

元素被插入或从流中删除。

<!-- livebook:{"force_markdown":true} -->

```elixir
@impl true
def handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do
  # 将新消息放在前面
  {:noreply, stream_insert(socket, :messages, message, at: 0)}
end

@impl true
def handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do
  # 在其当前位置更新新消息
  {:noreply, stream_insert(socket, :messages, message)}
end

@impl true
def handle_event("delete", %{"id" => id}, socket) do
  message = Chat.get_message!(id)
  {:ok, _} = Chat.delete_message(message)

  {:noreply, stream_delete(socket, :messages, message)}
end
```

<!-- livebook:{"break_markdown":true} -->

### 渲染消息

流在模板中使用 `@streams` 字段中的键进行渲染。
`phx-update="stream"` 属性配置父容器以支持流操作。流中的元素通常使用列表推导进行渲染。

这是一个简化的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
<section id="messages" phx-update="stream">
  <article
    :for={{dom_id, message} <- @streams.messages}
    id={dom_id}
  >
    <%= message.content %>
  </article>
</section>
```

消息表在相应的模板文件 `index.html.heex` 中渲染。该表依赖于 [Phoenix.LiveView.JS](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html) 进行各种操作，例如导航和将事件推送到服务器。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.table
  id="messages"
  rows={@streams.messages}
  row_click={fn {_id, message} -> JS.navigate(~p"/messages/#{message}") end}
>
  <:col :let={{_id, message}} label="内容"><%= message.content %></:col>
  <:action :let={{_id, message}}>
    <div class="sr-only">
      <.link navigate={~p"/messages/#{message}"}>显示</.link>
    </div>
    <.link patch={~p"/messages/#{message}/edit"}>编辑</.link>
  </:action>
  <:action :let={{id, message}}>
    <.link
      phx-click={JS.push("delete", value: %{id: message.id}) |> hide("##{id}")}
      data-confirm="您确定吗？"
    >
      删除
    </.link>
  </:action>
</.table>
```

<!-- livebook:{"force_markdown":true} -->

### 模态框

包含 `FormComponent` 直播组件的模态框在 `:new` 和 `:edit` 实时操作中渲染。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.modal :if={@live_action in [:new, :edit]} id="message-modal" show on_cancel={JS.patch(~p"/messages")}>
  <.live_component
    module={PicChatWeb.MessageLive.FormComponent}
    id={@message.id || :new}
    title={@page_title}
    action={@live_action}
    message={@message}
    patch={~p"/messages"}
  />
</.modal>
```

## LiveComponent

[Phoenix.LiveComponent](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html) 将 LiveView 的行为（状态、消息处理、显示 HTML）封装到其他 LiveViews 中的可重用组件中。

我们使用 [Phoenix.Component.live_component/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#live_component/1) 来渲染 LiveComponent。`id` 和 `module` 属性是必需的。其他属性绑定到 socket 分配。LiveComponents 不从其父级继承 socket 值，因此 **必须显式提供 socket 值**。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.live_component
  module={PicChatWeb.MessageLive.FormComponent}
  id={@message.id || :new}
  title={@page_title}
  action={@live_action}
  message={@message}
  patch={~p"/messages"}
/>
```

我们将分解 `MessageLive.FormComponent` 以更好地理解 LiveComponents。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule PicChatWeb.MessageLive.FormComponent do
  use PicChatWeb, :live_component

  alias PicChat.Chat

  @impl true
  def render(assigns) do
    ~H"""
    <div>
      <.header>
        <%= @title %>
        <:subtitle>使用此表单管理数据库中的消息记录。</:subtitle>
      </.header>

      <.simple_form
        for={@form}
        id="message-form"
        phx-target={@myself}
        phx-change="validate"
        phx-submit="save"
      >
        <.input field={@form[:content]} type="text" label="内容" />
        <:actions>
          <.button phx-disable-with="保存中...">保存消息</.button>
        </:actions>
      </.simple_form>
    </div>
    """
  end

  @impl true
  def update(%{message: message} = assigns, socket) do
    changeset = Chat.change_message(message)

    {:ok,
     socket
     |> assign(assigns)
     |> assign_form(changeset)}
  end

  @impl true
  def handle_event("validate", %{"message" => message_params}, socket) do
    changeset =
      socket.assigns.message
      |> Chat.change_message(message_params)
      |> Map.put(:action, :validate)

    {:noreply, assign_form(socket, changeset)}
  end

  def handle_event("save", %{"message" => message_params}, socket) do
    save_message(socket, socket.assigns.action, message_params)
  end

  defp save_message(socket, :edit, message_params) do
    case Chat.update_message(socket.assigns.message, message_params) do
      {:ok, message} ->
        notify_parent({:edit, message})

        {:noreply,
         socket
         |> put_flash(:info, "消息更新成功")
         |> push_patch(to: socket.assigns.patch)}

      {:error, %Ecto.Changeset{} = changeset} ->
        {:noreply, assign_form(socket, changeset)}
    end
  end

  defp save_message(socket, :new, message_params) do
    case Chat.create_message(message_params) do
      {:ok, message} ->
        notify_parent({:new, message})

        {:noreply,
         socket
         |> put_flash(:info, "消息创建成功")
         |> push_patch(to: socket.assigns.patch)}

      {:error, %Ecto.Changeset{} = changeset} ->
        {:noreply, assign_form(socket, changeset)}
    end
  end

  defp assign_form(socket, %Ecto.Changeset{} = changeset) do
    assign(socket, :form, to_form(changeset))
  end

  defp notify_parent(msg), do: send(self(), {__MODULE__, msg})
end
```

<!-- livebook:{"break_markdown":true} -->

### LiveComponent 生命周期

LiveComponent 生命周期与 LiveView 类似，但有一些重要的区别。

```mermaid
sequenceDiagram
    LiveView-->>LiveComponent: render/1
    LiveComponent-->>LiveComponent: mount/1
    LiveComponent-->>LiveComponent: update/2
    LiveComponent-->>LiveComponent: render/1
```

与 LiveView 不同，我们通常不会在 `mount/1` 回调中检索数据。相反，父级 LiveView 通常会为组件提供所需的任何初始数据。每当 LiveComponent 被重新渲染时（通常是如果父级 LiveView 提供的数据发生变化），LiveComponent 会调用 `update/2` 回调。

<!-- livebook:{"force_markdown":true} -->

```elixir
@impl true
def update(%{message: message} = assigns, socket) do
  changeset = Chat.change_message(message)

  {:ok,
    socket
    |> assign(assigns)
    |> assign_form(changeset)}
end
```

有关更多信息，请参见 [LiveComponent 生命周期](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html#module-life-cycle)。

<!-- livebook:{"break_markdown":true} -->

### 发送/接收进程消息

默认情况下，LiveComponent 将消息发送到父级。我们可以在元素上使用 `phx-target={@myself}` 属性来将消息发送到 LiveComponent 本身。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.simple_form
  for={@form}
  id="message-form"
  phx-target={@myself}
  phx-change="validate"
  phx-submit="save"
>
  <.input field={@form[:content]} type="text" label="内容" />
  <:actions>
    <.button phx-disable-with="保存中...">保存消息</.button>
  </:actions>
</.simple_form>
```

这些消息随后在 LiveComponent 中处理，而不是在父级 LiveView 中。

<!-- livebook:{"force_markdown":true} -->

```elixir
def handle_event("save", %{"message" => message_params}, socket) do
  save_message(socket, socket.assigns.action, message_params)
end
```

`FormComponent` 还提供了一个示例，当创建新的 `Message` 时向父级 LiveView 进程发送消息。

<!-- livebook:{"force_markdown":true} -->

```elixir
defp notify_parent(msg), do: send(self(), {__MODULE__, msg})
```

这在父级 LiveView 中处理，以更新 `Message` 结构的流。

<!-- livebook:{"force_markdown":true} -->

```elixir
@impl true
def handle_info({PicChatWeb.MessageLive.FormComponent, {:new, message}}, socket) do
  {:noreply, stream_insert(socket, :messages, message, at: 0)}
end

@impl true
def handle_info({PicChatWeb.MessageLive.FormComponent, {:edit, message}}, socket) do
  {:noreply, stream_insert(socket, :messages, message)}
end
```

<!-- livebook:{"break_markdown":true} -->

### assign_form

`FormComponent` 使用 `assign_form/2` 辅助函数在 socket 中分配 `Phoenix.HTML.Form` 结构。

<!-- livebook:{"force_markdown":true} -->

```elixir
defp assign_form(socket, %Ecto.Changeset{} = changeset) do
  assign(socket, :form, to_form(changeset))
end
```

此表单用于初始化表单数据和显示错误。观察创建新消息时的 `:error` 情况。`assign_form/2` 函数与 changeset 一起工作以显示错误。

<!-- livebook:{"force_markdown":true} -->

```elixir
defp save_message(socket, :new, message_params) do
  case Chat.create_message(message_params) do
    {:ok, message} ->
      notify_parent({:new, message})

      {:noreply,
        socket
        |> put_flash(:info, "消息创建成功")
        |> push_patch(to: socket.assigns.patch)}

    {:error, %Ecto.Changeset{} = changeset} ->
      {:noreply, assign_form(socket, changeset)}
  end
end
```

## LiveView 测试

在 `test/pic_chat_web/live/message_live_test.ex` 中找到的 `MessageLiveTest` 模块演示了如何挂载 LiveView、模拟用户交互以及断言 LiveView 的行为和响应。

阅读 `MessageLiveTest` 模块以更好地理解测试 LiveViews 的模式。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule PicChatWeb.MessageLiveTest do
  use PicChatWeb.ConnCase

  import Phoenix.LiveViewTest
  import PicChat.ChatFixtures

  @create_attrs %{content: "some content"}
  @update_attrs %{content: "some updated content"}
  @invalid_attrs %{content: nil}

  defp create_message(_) do
    message = message_fixture()
    %{message: message}
  end

  describe "Index" do
    setup [:create_message]

    test "lists all messages", %{conn: conn, message: message} do
      {:ok, _index_live, html} = live(conn, ~p"/messages")

      assert html =~ "消息列表"
      assert html =~ message.content
    end

    test "saves new message", %{conn: conn} do
      {:ok, index_live, _html} = live(conn, ~p"/messages")

      assert index_live |> element("a", "新消息") |> render_click() =~
               "新消息"

      assert_patch(index_live, ~p"/messages/new")

      assert index_live
             |> form("#message-form", message: @invalid_attrs)
             |> render_change() =~ "不能为空"

      assert index_live
             |> form("#message-form", message: @create_attrs)
             |> render_submit()

      assert_patch(index_live, ~p"/messages")

      html = render(index_live)
      assert html =~ "消息创建成功"
      assert html =~ "some content"
    end

    test "updates message in listing", %{conn: conn, message: message} do
      {:ok, index_live, _html} = live(conn, ~p"/messages")

      assert index_live |> element("#messages-#{message.id} a", "编辑") |> render_click() =~
               "编辑消息"

      assert_patch(index_live, ~p"/messages/#{message}/edit")

      assert index_live
             |> form("#message-form", message: @invalid_attrs)
             |> render_change() =~ "不能为空"

      assert index_live
             |> form("#message-form", message: @update_attrs)
             |> render_submit()

      assert_patch(index_live, ~p"/messages")

      html = render(index_live)
      assert html =~ "消息更新成功"
      assert html =~ "some updated content"
    end

    test "deletes message in listing", %{conn: conn, message: message} do
      {:ok, index_live, _html} = live(conn, ~p"/messages")

      assert index_live |> element("#messages-#{message.id} a", "删除") |> render_click()
      refute has_element?(index_live, "#messages-#{message.id}")
    end
  end

  describe "Show" do
    setup [:create_message]

    test "displays message", %{conn: conn, message: message} do
      {:ok, _show_live, html} = live(conn, ~p"/messages/#{message}")

      assert html =~ "显示消息"
      assert html =~ message.content
    end

    test "updates message within modal", %{conn: conn, message: message} do
      {:ok, show_live, _html} = live(conn, ~p"/messages/#{message}")

      assert show_live |> element("a", "编辑") |> render_click() =~
               "编辑消息"

      assert_patch(show_live, ~p"/messages/#{message}/show/edit")

      assert show_live
             |> form("#message-form", message: @invalid_attrs)
             |> render_change() =~ "不能为空"

      assert show_live
             |> form("#message-form", message: @update_attrs)
             |> render_submit()

      assert_patch(show_live, ~p"/messages/#{message}")

      html = render(show_live)
      assert html =~ "消息更新成功"
      assert html =~ "some updated content"
    end
  end
end
```

## 进一步阅读

考虑以下资源以加深您对该主题的理解。

* [HexDocs: LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)
* [HexDocs: LiveComponent](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html)
* [Elixir Schools: LiveView](https://elixirschool.com/blog/phoenix-live-view/)
* [PragProg: Programming Phoenix LiveView](https://pragprog.com/titles/liveview/programming-phoenix-liveview/)

## 提交您的进展

DockYard Academy 现在建议您使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的存储库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交您的进展。

```
$ git add .
$ git commit -m "完成 PicChat: 消息阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按自己的节奏进行。

我们还提供付费课程，您可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=PicChat: Messages">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/math_game.livemd">数学游戏</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/pic_chat_authentication.livemd">PicChat: 认证</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>