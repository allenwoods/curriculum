<!-- livebook:{"file_entries":[{"name":"linked_list_cons_cells.png","type":"attachment"}]} -->

# 列表

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/tuples.livemd">元组</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/keyword_lists.livemd">关键字列表</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 什么是列表，列表和元组之间有什么区别？
* 如何对列表进行模式匹配？

## 列表

列表存储其他数据类型的列表。列表中的数据类型称为 **元素**。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  subgraph List
    a[Element] --> b[Element] --> c[Element] --> d[Element]
  end
```

<!-- livebook:{"break_markdown":true} -->

使用方括号 `[]` 来创建列表，然后用逗号 `,` 分隔每个值。

<!-- livebook:{"force_markdown":true} -->

```elixir
[1, 2, 3]
```

列表可以包含任何其他 Elixir 数据结构，甚至其他列表。

<!-- livebook:{"force_markdown":true} -->

```elixir
["a", 2, "c", []]
```

列表用于表示信息的集合。例如，购物清单、待办事项清单或文章的标签列表。

<!-- livebook:{"break_markdown":true} -->

### 索引

**索引** 是列表中元素的位置。

在编程中，我们从 0 开始计数索引。为什么？简短的回答是，这与计算机硬件的工作方式有关。

所以以这个示例列表为例。

<!-- livebook:{"force_markdown":true} -->

```elixir
["a", "b", "c"]
```

* `"a"` 在索引 `0`
* `"b"` 在索引 `1`
* `"c"` 在索引 `2`

```mermaid
flowchart
  subgraph Index
    0 --> 1 --> 2
  end
  subgraph Elements
    a --> b --> c
  end
```

### 你的回合

在下面的 Elixir 单元中，创建一个你最喜欢的食物的字符串列表。

```elixir

```

## 列表运算符

列表运算符允许我们操作列表。列表可以用 `++` 相加，并用 `--` 相减。

```elixir
[1] ++ [2]
```

```elixir
[1, 2, 3] -- [2, 3]
```

减法操作首先移除最左边的元素。

```elixir
[3, 2, 4, 3, 2] -- [3, 2]
```

列表操作是从 **右到左** 进行的，这与算术运算符不同，这可能会导致一些不直观的行为。你可能认为以下操作应该返回一个空列表 `[]`，但实际上它返回 `[2]`。

```elixir
[1, 2] -- [1] -- [2]
```

这是因为 `[1] -- [2]` 首先计算，因为操作是从右到左进行的。

```elixir
step1 = [1] -- [2]
result = [1, 2] -- step1
```

为了避免编写不直观的代码，你可以使用括号或将值拆分到变量中，以将操作分解为使用匹配运算符的步骤。

```elixir
([1, 2] -- [1]) -- [2]
```

### 你的回合

在下面的 Elixir 单元中，将 `[1, 2, 3]` 和 `[4, 5, 6]` 相加，得到 `[1, 2, 3, 4, 5, 6]`。

```elixir
[1, 2, 3] ++ [4, 5, 6]
```

在下面的 Elixir 单元中，从 `[1, 1, 2, 3]` 中移除 `[1]`，得到 `[1, 2, 3]`。

```elixir
[1, 1, 2, 3] -- [1]
```

## 头和尾

在底层，列表实现为 **链表**，其中每个元素都是一个 [cons cell(列表构造函数)](https://en.wikipedia.org/wiki/Cons)，具有头和尾。

让我们以示例列表 `[2, 3]` 为例。

这实际上是由两个 cons cell `[2 | tail]` 和 `[3 | tail]` 组成的链表。

我们可以看到 `[2, 3]` 实际上是 `[2 | [3 | []]]` 的语法糖，它使用管道符号语法 `|` 将它们连接起来。

```elixir
[2 | [3 | []]]
```

![](files/linked_list_cons_cells.png)

<!-- livebook:{"break_markdown":true} -->

我们不会经常以这种方式编写列表，但了解它们的内部实现细节对于 **前置** 元素到列表和 **模式匹配** 列表是有用的。

<!-- livebook:{"break_markdown":true} -->

### 前置

因为列表实际上只是连接在一起的 cons cell，我们可以使用 `[element | list]` 语法将元素前置到列表中。

例如，我们可以将 `1` 前置到列表 `[2, 3]` 中，得到 `[1, 2, 3]`。

```mermaid
flowchart
  1 --> l[2, 3]
```

```elixir
[1 | [2, 3]]
```

你可以用变量代替硬编码的列表。

```elixir
list = [2, 3]
[1 | list]
```

### 你的回合

在下面的 Elixir 单元中，将 `"hello"` 前置到列表 `["world"]` 中，得到 `["hello", "world"]`。

```elixir
["hello" | ["world"]]
```

## 模式匹配列表

我们可以对列表进行模式匹配，将列表中的元素绑定到变量。

```elixir
[one, two] = [1, 2]
```

不过，这对似乎要求每个元素都匹配的列表提出了一个问题。

```elixir
[one] = [1, 2]
```

为了解决这个问题，你可以使用 `[head | tail]` 语法来前置元素到列表中。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
  subgraph Head
  L
  end
  subgraph Tail
  I
  S
  T
  end
  L -- tail --> I --> S --> T
```

<!-- livebook:{"break_markdown":true} -->

**头** 是列表的第一个元素。

```elixir
[head | _tail] = [1, 2, 3, 4, 5, 6, 7]
head
```

**尾** 是列表中其余的元素。

```elixir
[_head | tail] = [1, 2, 3, 4, 5, 6, 7]
tail
```

你可以访问列表开头的多个元素，用逗号 `,` 分隔。

```elixir
[one, two | _tail] = [1, 2, 3, 4, 5, 6, 7]
{one, two}
```

### 你的回合

使用模式匹配将以下列表中的 `1` 绑定到变量 `a`。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
[a, _b, _c] = [1, 2, 3]
```

</details>

在下面输入你的解决方案。

```elixir
[a | _tail] = [1, 2, 3]
a
```

使用模式匹配将以下列表中的 `1` 绑定到变量 `a`。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
[a | _tail] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
```

</details>

在下面输入你的解决方案。

```elixir
[a | _tail] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
a
```

使用模式匹配将 `1`、`2` 和 `3` 绑定到变量 `a`、`b` 和 `c`。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
[a, b, c | _tail] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
```

</details>

在下面输入你的解决方案。

```elixir
[a, b, c | _tail] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
[a, b, c]
```

## 深入阅读

考虑以下资源以加深你对该主题的理解。

* [Elixir 学校：列表](https://elixirschool.com/en/lessons/basics/collections#lists-0)
* [Exercism：列表](https://exercism.org/tracks/elixir/concepts/lists)
* [Elixir Lang：列表](https://elixir-lang.org/getting-started/basic-types.html#linked-lists)
* [HexDocs：List](https://hexdocs.pm/elixir/List.html)

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成列表阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/tuples.livemd">元组</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/keyword_lists.livemd">关键字列表</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
