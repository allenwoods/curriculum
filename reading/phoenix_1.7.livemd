<!-- livebook:{"file_entries":[{"name":"Phoenix%201.7%20Architecture%20Diagram.png","type":"attachment"}]} -->

# Phoenix 1.7

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix 1.7">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/sql_drills.livemd">SQL 练习</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/web_servers.livemd">Web 服务器</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

* HTTP 请求中的 body 参数、url 参数和查询参数是什么？
* 什么是 conn？
* Phoenix 应用程序的层次结构是什么？

## 概述

### Phoenix 1.7

与 Phoenix 1.6 相比，Phoenix 1.7 引入了几个重要的变化。有关所做更改的完整概述，请参见 [发布公告](https://phoenixframework.org/blog/phoenix-1.7-final-released)。其中一个最重要的变化是 [用 Phoenix.Component 替换 Phoenix.View](https://hexdocs.pm/phoenix_view/2.0.0/Phoenix.View.html#module-replaced-by-phoenix-component)。此外，Phoenix 现在开箱即用地支持 Tailwind。

Phoenix 1.7 还引入了使用 `~p` 符号的 [验证路由](https://hexdocs.pm/phoenix/1.7.0-rc.0/Phoenix.VerifiedRoutes.html)。这些路由替代了 [路径助手](https://hexdocs.pm/phoenix/routing.html#path-helpers)。

<!-- livebook:{"force_markdown":true} -->

```elixir
~p"/home"
```

Elixir 生态系统中的许多项目仍将使用 Phoenix 1.6 或更早版本。虽然本课程专注于 Phoenix 1.7，但请考虑阅读之前的 [Phoenix 1.6](./deprecated_phoenix_1.6.livemd) 部分，以了解更多关于旧版本的信息。

<!-- livebook:{"break_markdown":true} -->

### Phoenix

[Phoenix 框架](https://phoenixframework.org/) 是 Elixir 最流行的 Web 开发框架。使用 Phoenix，我们可以快速构建丰富的交互式和实时 Web 应用程序。

[Chris McCord](http://chrismccord.com/) 是 Phoenix 的创建者，他有一个很好的视频来演示 Phoenix 的强大功能。您可以跟随视频，在仅 15 分钟内构建一个 Twitter 克隆应用程序。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=MZvmYaFkNJI\")","title":"在 15 分钟内使用 LiveView 构建实时 Twitter 克隆"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=MZvmYaFkNJI")
```

上面的视频使用 [Phoenix LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html) 创建交互式和实时功能。我们将在未来的课程中介绍 LiveView。

## 模型视图控制器 (MVC) 架构

Phoenix 深受 MVC 架构的影响，应用程序被分解为多个层次，使用 [模型-视图-控制器 (MVC)](https://en.wikipedia.org/wiki/Model–view–controller) 架构。

* **模型**：管理应用程序的数据和业务逻辑。
* **视图**：表示视觉信息。
* **控制器**：处理请求并操作模型/视图以响应用户。

最近，Phoenix 开始逐渐脱离严格的 MVC 架构，但理解这种架构风格将帮助我们更好地理解 Phoenix 背后的整体设计选择。

<!-- livebook:{"break_markdown":true} -->

![test](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/300px-MVC-Process.svg.png)

> 来源: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller

<!-- livebook:{"branch_parent_index":2} -->

## Plug

在底层，Phoenix 使用 [Plug](https://hexdocs.pm/plug/readme.html) 规范来组合 Web 应用程序的功能。Plug 是转换 `conn`（连接）数据结构的函数。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
subgraph Input
  CP[conn, params]
end
subgraph Output
  C[conn]
end
Output[conn]
P[Plug Function]
Input --> P --> Output
```

<!-- livebook:{"break_markdown":true} -->

Phoenix 设置了一系列的 plugs，并使用转换后的 `conn` [Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) 结构来返回响应给客户端。

Plug 使用 [Cowboy](https://github.com/ninenines/cowboy)，一个小而快速的 HTTP Web 服务器。Cowboy 使用 [Ranch](https://github.com/ninenines/ranch) 来管理 Web 服务器的底层 TCP 连接。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart TB
P[Phoenix]
PG[Plug]
C[Cowboy]
R[Ranch]
P --> PG --> C --> R

click P "https://hexdocs.pm/phoenix/overview.html"
click PG "https://hexdocs.pm/plug/readme.html"
click C "https://github.com/ninenines/cowboy"
click R "https://github.com/ninenines/ranch"
```

<!-- livebook:{"branch_parent_index":2} -->

## 分层架构

Phoenix 将应用程序的复杂性分解为多个具有不同职责的层。将应用程序分为层可以简化对复杂应用程序的推理和协作。

Phoenix 默认生成以下架构层。

* **端点**：应用程序的边界层。
* **路由器**：将请求路由到正确的控制器。
* **控制器**：处理请求——通常，控制器委托给模型和视图以操作业务逻辑并返回响应。
* **上下文**：定义与应用程序特定部分（如用户或产品）相关的函数的模块。它通过分离关注点来帮助组织和简化代码，使其更易于维护。
* **模式**：模式将数据库数据映射到 Elixir 结构。
* **迁移**：迁移用于随着时间的推移对数据库模式进行更改，例如添加、删除或更改表。
* **组件（在 1.6 中之前是视图）**：处理返回响应，并可能委托给模板。
* **模板**：构建响应，通常使用 HEEx（HTML + 嵌入 Elixir）构建 HTML 网页。

<!-- livebook:{"break_markdown":true} -->

![](files/Phoenix%201.7%20Architecture%20Diagram.png)

<!-- livebook:{"branch_parent_index":2} -->

## 项目结构

默认情况下，Phoenix 1.7 包含以下项目文件夹结构，其中 `app` 是您的应用程序名称。

```
├── _build
├── assets
├── config
├── deps
├── lib
│   ├── app
│   ├── app.ex
│   ├── app_web
│   └── app_web.ex
├── priv
├── test
├── formatter.exs
├── .gitignore
├── mix.exs
├── mix.lock
└── README.md
```

Phoenix 项目使用 [Mix](./mix.livemd)，因此这个文件夹结构应该感觉有些熟悉。以下是每个文件/文件夹的详细说明。

* **_build**：构建工件，例如编译的 .beam 代码。
* **assets**：静态资产，例如 JavaScript 和 CSS。
* **config**：应用程序的配置文件，例如数据库配置和特定于环境的设置。
* **deps**：编译的项目依赖项，由 Mix 管理。
* **lib**：应用程序的源代码。
  * **app**：应用程序的业务逻辑，组织成上下文。
  * **app.ex**：主应用程序模块，启动 Web 服务器并配置应用程序。
  * **app_web**：应用程序的 Web 特定代码，例如控制器、组件和模板。
  * **app_web.ex**：主 Web 模块，配置 Phoenix 应用程序。
* **priv**：Phoenix 中的 "priv" 目录包含生产所需的资源，这些资源不是源代码的一部分，包括静态文件（如图像和字体）以及来自 "assets" 目录的生成资产。
* **test**：应用程序的测试。
* **formatter.exs**：格式化程序配置。
* **.gitignore**：应在 .git 中忽略的文件的配置。
* **mix.exs**：配置应用程序的依赖项和 Mix 项目的其他设置。
* **mix.lock**：应用程序中使用的依赖项的确切版本，由 Mix 生成。
* **README.md**：包含有关项目的信息，例如安装说明或文档。

<!-- livebook:{"branch_parent_index":2} -->

## Web 项目结构

请求通过 Plug 管道流动。路由器、控制器、组件和模板在返回用户请求的响应中各自发挥着重要作用。

<!-- livebook:{"break_markdown":true} -->

### 路由器

Phoenix 生成一个 `router.ex` 文件，用于配置客户端可以发送 HTTP 请求的 URL。有关完整指南，请参见 [路由](https://hexdocs.pm/phoenix/routing.html) 文档。

Phoenix 路由器使用 [pipeline/2](https://hexdocs.pm/phoenix/Phoenix.Router.html#pipeline/2) 宏来设置 plug 管道。

<!-- livebook:{"force_markdown":true} -->

```elixir
pipeline :browser do
  plug :accepts, ["html"]
  plug :fetch_session
  plug :fetch_live_flash
  plug :put_root_layout, {AppWeb.LayoutView, :root}
  plug :protect_from_forgery
  plug :put_secure_browser_headers
end
```

然后 [scope/2] 宏将相关路由组合在一起，使用一个公共基础 URL。在 scope 内部， [get/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#get/4)、[post/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#post/4)、[put/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#put/4)、[patch/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#patch/4) 和 [delete/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#delete/4) 宏可以处理特定的 HTTP 请求并委托给控制器以返回响应。

<!-- livebook:{"force_markdown":true} -->

```elixir
scope "/", HelloWeb do
  pipe_through :browser

  get "/", PageController, :home
end
```

<!-- livebook:{"break_markdown":true} -->

### 控制器

`app_web/controllers` 中的控制器管理对 HTTP 请求的响应。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule AppWeb.PageController do
  use AppWeb, :controller

  def home(conn, _params) do
    render(conn, :home)
  end
end
```

控制器委托给相应的 `*HTML` 组件模块中的 [函数组件](https://hexdocs.pm/phoenix/components.html) 以返回 HEEx 模板。上面的原子 `:home` 对应于组件模块中调用的函数 `home/1`。

<!-- livebook:{"break_markdown":true} -->

### 组件

`*HTML` 组件使用符号 `~H` 返回 HEEx 模板。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule AppWeb.PageHTML do
  use AppWeb, :html

  def home(assigns) do
    ~H"""
    Hello World
    """
  end
end
```

或者使用 [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#content) 中的 [embed_templates/2](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#embed_templates/2) 宏嵌入包含在文件夹中的模板文件。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule AppWeb.PageHTML do
  use AppWeb, :html

  embed_templates "page_html/*"
end
```

<!-- livebook:{"break_markdown":true} -->

### 模板

模板包含用于构建 HTML 响应的 HEEx 代码。例如，以下内容可能包含在 `app_web/page_html/home.html.heex` 中。

```html
<p>Hello, World!</p>
```

## Conn

在 Phoenix 应用程序中，"conn" 代表 "连接"。它表示客户端与 Web 服务器之间的连接，并包含有关 HTTP 请求和响应的信息。

conn 结构是 Phoenix 中的一个核心概念，并在整个框架中广泛使用。它是在客户端向服务器发送请求时创建的，并在请求处理过程中在应用程序的各个部分之间传递。

conn 结构包含的信息包括 HTTP 方法、请求路径、请求头、请求体和响应头。它还包括有关客户端会话和任何身份验证信息等其他信息。

<!-- livebook:{"break_markdown":true} -->

### Assigns

[Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) 存储一个 `assigns` 映射，该映射被注入到 HEEx 模板中。可以通过在 [Controller.render/3](https://hexdocs.pm/phoenix/Phoenix.Controller.html#render/3) 函数的第三个参数中提供关键字列表来绑定 `assigns` 映射中的值。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule AppWeb.PageController do
  use AppWeb, :controller

  def home(conn, _params) do
    render(conn, :home, message: "Hello, World!", injected_class: "text-2xl")
  end
end
```

我们可以使用 `<%= %>` 语法在模板文件中嵌入 Elixir，并使用提供的 `assigns`。或者，我们可以使用大括号 `{}` 在 HTML 属性中嵌入 Elixir。

<!-- livebook:{"force_markdown":true} -->

```elixir
<p class={"bg-black text-white #{assigns.injected_class}"}><%= assigns.message %></p>
```

`@` 是 `assigns.` 的简写。

<!-- livebook:{"force_markdown":true} -->

```elixir
<p class={"bg-black text-white #{@injected_class}"}><%= @message %></p>
```

<!-- livebook:{"branch_parent_index":2} -->

## 布局

`router.ex` 中 `:browser` 管道中的 `:put_root_layout` plug 设置了在每个页面上呈现的布局 HEEx 模板。

<!-- livebook:{"force_markdown":true} -->

```elixir
pipeline :browser do
  plug :accepts, ["html"]
  plug :fetch_session
  plug :fetch_live_flash
  plug :put_root_layout, {AppWeb.LayoutView, :root} # 设置根布局
  plug :protect_from_forgery
  plug :put_secure_browser_headers
end
```

`components/layouts/root.html.heex` 中的根布局是 LiveView 和常规视图使用的模板，包含 HTML 文档的基本结构以及任何全局样式或脚本。它确保您应用程序所有页面的一致性。

`components/layouts/app.html.heex` 中的应用程序布局是常规 HTTP 请求和 LiveViews 的标准布局。

有关布局及其使用的更多信息，请参见 [LiveLayouts](https://hexdocs.pm/phoenix_live_view/live-layouts.html)。

<!-- livebook:{"branch_parent_index":2} -->

## Phoenix 组件

Phoenix 1.7 允许我们在 LiveViews 和控制器视图中使用函数组件。

Phoenix 在 `app_web/components/core_components.ex` 文件中生成了一些有用的函数组件，而 [Phoenix.Component](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#components) 模块定义了 [link/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1) 和 [form/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#form/1) 等组件。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.link navigate={~p"/"}>首页</.link>
```

我们可以创建自己的函数组件。函数组件接受 `assigns` 参数，并返回 HEEx 模板。我们可以选择使用 [attr](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#attr/3) 宏定义属性。

<!-- livebook:{"force_markdown":true} -->

```elixir
attr :name, :string

def hello(assigns) do
  ~H"""
  <p><%= @name %></p>
  """
end
```

<!-- livebook:{"branch_parent_index":2} -->

## 嵌入 Elixir

我们可以使用以下语法在模板文件中嵌入 Elixir。

<!-- livebook:{"force_markdown":true} -->

```elixir
<%= expression %>
```

其中 `expression` 是我们的 Elixir 代码，例如：

<!-- livebook:{"force_markdown":true} -->

```elixir
<%= 1 + 1 %>
```

我们可以编写任何 Elixir 表达式。例如，我们可以编写一个 `if` 语句，根据某些条件渲染不同的 HTML。

<!-- livebook:{"force_markdown":true} -->

```elixir
<%= if DateTime.utc_now().hour > 12 do %>
  <p>下午好！</p>
<% else %>
  <p>早上好！</p>
<% end %>
```

或者使用 `for` 生成的循环。我们通常使用它来根据集合创建多个元素。

<!-- livebook:{"force_markdown":true} -->

```elixir
<%= for int <- 1..10 do %>
  <p><%= int %></p>
<% end %>
```

请注意，所有输出值的表达式都使用 `=` 符号。未输出值的表达式（或继续当前表达式）省略 `=` 符号。

这里有一个小提示，我们可以在页面中使用 `IO.inspect/2` 查看值，而不将它们注入到 HTML 中。

<!-- livebook:{"force_markdown":true} -->

```elixir
<% IO.inspect(@value) %>
```

或者，要将它们作为字符串查看，可以使用 `Kernel.inspect/2`。

<!-- livebook:{"force_markdown":true} -->

```elixir
<%= inspect(@value) %>
```

<!-- livebook:{"branch_parent_index":2} -->

## 控制器参数

控制器操作接受 `params` 作为第二个参数。`params` 是由逗号分隔的查询参数、请求的 [body](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) 和 URL 中的动态值的组合映射。

例如，如果我们向以下 URL 发送一个 POST 请求：

http://localhost:4000/1/?param1=some_value,param2=some_value

并在 POST body 中包含以下数据：

<!-- livebook:{"force_markdown":true} -->

```elixir
%{body_param: "value"}
```

假设我们定义了以下路由。

<!-- livebook:{"force_markdown":true} -->

```elixir

post "/:id", PageController, :home
```

那么控制器中的 `params` 将绑定为：

<!-- livebook:{"force_markdown":true} -->

```elixir
%{
  "body_param" => "value",
  "id" => "1",
  "param1" => "some_value",
  "param2" => "some_value"
}
```

## 进一步阅读

有关 Phoenix 的更多信息，请考虑以下资源。

* [Phoenix HexDocs](https://hexdocs.pm/phoenix/Phoenix.html)
* [Plug HexDocs](https://hexdocs.pm/plug/readme.html)
* [Phoenix a Web Framework for the New Web • José Valim • GOTO 2016](https://www.youtube.com/watch?v=bk3icU8iIto&ab_channel=GOTOConferences)

## 提交您的进度

DockYard Academy 现在建议您使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交您的进度。

```
$ git add .
$ git commit -m "完成 Phoenix 1.7 阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按自己的节奏进行。

我们还提供付费课程，您可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Phoenix 1.7">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/sql_drills.livemd">SQL 练习</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/web_servers.livemd">Web 服务器</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>