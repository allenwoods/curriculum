<!-- livebook:{"file_entries":[{"name":"big_o_notation_graph.png","type":"attachment"}]} -->

# 性能

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:vega_lite, "~> 0.1.6"},
  {:kino_vega_lite, "~> 0.1.8"},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])

defmodule Factorial do
  def of(0), do: 1

  def of(n) when n > 0 do
    Enum.reduce(1..n, &*/2)
  end
end
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Performance">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/fibonacci_challenge.livemd">斐波那契数列</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/benchmarking.livemd">基准测试</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 大 O 符号 ($O(n), O(n^2), 等等$) 如何描述随着数据 $n$ 增长我们应用程序的性能？
* 大 O 符号为什么有用，你认为将来如何使用它来描述你的程序？

## 大 O 符号

作为程序员，我们通常更关心随着数据变大，我们程序的性能如何增长。

我们使用 **大 $$O$$ 符号** 来交流性能如何根据数据的大小而变化。

* **$$O(1)$$**: 常数时间
* **$$O(log (n))$$**: 对数时间
* **$$O(n)$$**: 线性时间
* **$$O(n^2)$$**: 二次时间（多项式时间）
* **$$O(2^n)$$**: 指数时间
* **$$O(n!)$$**: 阶乘时间

这是 Tom Scott 的一段视频，提供了一个入门概述。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=RGuJga2Gl_k\")","title":"大 O 复杂度"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=RGuJga2Gl_k")
```

当你处理更大数量的数据时，不同的大 $O$ 复杂度增长的速度不同。
请参见下面的图表以获取一般排名。

<!-- livebook:{"break_markdown":true} -->

![大 O 符号](files/big_o_notation_graph.png)

<!-- livebook:{"break_markdown":true} -->

我们应该尽量意识到你编写的代码和你使用的内置功能的性能成本和内存成本，尤其是在处理大量数据时。

这将影响你编写代码的方式，以及你在特定情况下选择的数据结构。

## 常数复杂度

你知道 [信鸽的速度可以超过互联网](https://www.bbc.com/news/technology-11325452) 吗？
这是真的，这与常数增长的性质有关。

某些操作无论涉及多少数据，执行所需的时间都是相同的。
例如，一只鸽子在每次尝试中大约在相同的时间内飞行一定的公里数。如果你把一个 USB 闪存驱动器绑在鸽子上，它可以在一个恒定的时间内（在合理范围内）将任何数量的数据送到目的地。

所以，虽然这在关于慢速互联网的标题中很吸引人，但实际上这是一个数学保证，对于某些数据大小，鸽子的速度会超过互联网。

我们可以在下面的图表中看到，对于某些数据量，恒定的旅行时间总是与预期的互联网速度相交。

<!-- livebook:{"attrs":{"source":"size = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"data\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"time\", type: :quantitative)\n  |> VegaLite.encode_field(:color, \"type\", title: \"线性增长\", type: :nominal)\n  |> Kino.VegaLite.new()\n\ninit = 1\nmax = 200\n\ninternet = for n <- init..max, do: %{data: n, time: n, type: \"互联网\"}\npigeon = for n <- init..max, do: %{data: n, time: 100, type: \"鸽子\"}\n\nKino.VegaLite.push_many(widget, internet)\nKino.VegaLite.push_many(widget, pigeon)\nwidget","title":"鸽子胜过互联网图"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
size = 600

widget =
  VegaLite.new(width: size, height: size)
  |> VegaLite.mark(:line)
  |> VegaLite.encode_field(:x, "data", type: :quantitative)
  |> VegaLite.encode_field(:y, "time", type: :quantitative)
  |> VegaLite.encode_field(:color, "type", title: "线性增长", type: :nominal)
  |> Kino.VegaLite.new()

init = 1
max = 200

internet = for n <- init..max, do: %{data: n, time: n, type: "互联网"}
pigeon = for n <- init..max, do: %{data: n, time: 100, type: "鸽子"}

Kino.VegaLite.push_many(widget, internet)
Kino.VegaLite.push_many(widget, pigeon)
widget
```

## 线性复杂度

线性增长为集合中的每个元素增加相同数量的计算。
例如，阅读一本书（假设阅读速度一致）就是线性复杂度。
如果你每页花两分钟阅读，那么每增加一页就增加两分钟。

* 1 页需要 2 分钟
* 2 页需要 4 分钟
* 3 页需要 6 分钟
* 4 页需要 8 分钟

在编程术语中，对于集合中每增加一个项目，计算机需要执行大约相同数量的额外计算。

在图表上，你会期望随着元素数量的增加，时间以恒定的线性向上增长。

<!-- livebook:{"attrs":{"source":"size = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"元素数量\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"时间\", type: :quantitative)\n  |> VegaLite.encode_field(:color, \"type\", title: \"线性增长\", type: :nominal)\n  |> Kino.VegaLite.new()\n\nlinear = for n <- 1..100, do: %{\"元素数量\": n, time: n, type: \"O(n)\"}\n\nKino.VegaLite.push_many(widget, linear)\nwidget","title":"线性复杂度图"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
size = 600

widget =
  VegaLite.new(width: size, height: size)
  |> VegaLite.mark(:line)
  |> VegaLite.encode_field(:x, "元素数量", type: :quantitative)
  |> VegaLite.encode_field(:y, "时间", type: :quantitative)
  |> VegaLite.encode_field(:color, "type", title: "线性增长", type: :nominal)
  |> Kino.VegaLite.new()

linear = for n <- 1..100, do: %{"元素数量": n, time: n, type: "O(n)"}

Kino.VegaLite.push_many(widget, linear)
widget
```

## 多项式复杂度

与线性增长不同，多项式复杂度以某个幂次增长。
例如，嵌套循环通常会导致多项式复杂度。

这是因为对于第一个可枚举的每个元素，我们都要遍历第二个可枚举的每个元素。

```mermaid
flowchart
A[1] --> B[1]
A[1] --> C[2]
A[1] --> D[3]

A1[2] --> B1[1]
A1[2] --> C1[2]
A1[2] --> D1[3]

A2[3] --> B2[1]
A2[3] --> C2[2]
A2[3] --> D2[3]
```

<!-- livebook:{"break_markdown":true} -->

### 你的回合

尝试将 `number` 改为 `2`、`3` 和 `4`。注意它如何创建更多的列表，每增加一个数字，元素数量也会增加。

```elixir
number = 1

Enum.map(1..number, fn _ ->
  Enum.to_list(1..number)
end)
```

* 1 个元素创建 1 个元素
* 2 个元素创建 4 个元素
* 3 个元素创建 9 个元素
* 4 个元素创建 16 个元素

换句话说，它创建了 $n^2$ 个元素。我们可以在下面的表格中看到这种增长。

<!-- livebook:{"attrs":{"source":"Enum.map(1..1000, fn each ->\n  %{\n    \"元素数量\": each,\n    result: each ** 2,\n    notation: \"#{each}**2\",\n    equation: \"#{each} * #{each}\"\n  }\nend) |> Kino.DataTable.new()","title":"n<sup>2</sup> 复杂度"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
Enum.map(1..1000, fn each ->
  %{
    "元素数量": each,
    result: each ** 2,
    notation: "#{each}**2",
    equation: "#{each} * #{each}"
  }
end)
|> Kino.DataTable.new()
```

如果你嵌套第三个枚举，它将变为 $n^3$。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
A1[1]

A11[1]
A12[2]
A13[3]

A1 --> A11
A1 --> A12
A1 --> A13

A111[1]
A112[2]
A113[3]

A11 --> A111
A11 --> A112
A11 --> A113

A121[1]
A122[2]
A123[3]

A12 --> A121
A12 --> A122
A12 --> A123

A131[1]
A132[2]
A133[3]

A13 --> A131
A13 --> A132
A13 --> A133

B1[1]

B11[1]
B12[2]
B13[3]

B1 --> B11
B1 --> B12
B1 --> B13

B111[1]
B112[2]
B113[3]

B11 --> B111
B11 --> B112
B11 --> B113

B121[1]
B122[2]
B123[3]

B12 --> B121
B12 --> B122
B12 --> B123

B131[1]
B132[2]
B133[3]

B13 --> B131
B13 --> B132
B13 --> B133

C1[1]

C11[1]
C12[2]
C13[3]

C1 --> C11
C1 --> C12
C1 --> C13

C111[1]
C112[2]
C113[3]

C11 --> C111
C11 --> C112
C11 --> C113

C121[1]
C122[2]
C123[3]

C12 --> C121
C12 --> C122
C12 --> C123

C131[1]
C132[2]
C133[3]

C13 --> C131
C13 --> C132
C13 --> C133
```

<!-- livebook:{"break_markdown":true} -->

### 你的回合

尝试将 `number` 改为 `2`、`3` 和 `4`。注意它如何创建 $n^3$ 个元素。

```elixir
number = 3

Enum.map(1..number, fn _ ->
  Enum.map(1..number, fn _ ->
    Enum.to_list(1..number)
  end)
end)
```

我们可以在下面的表格中看到 $n^3$ 的增长。

<!-- livebook:{"attrs":{"source":"Enum.map(1..1000, fn each ->\n  %{\n    \"元素数量\": each,\n    result: each ** 3,\n    notation: \"#{each}**3\",\n    equation: \"#{each} * #{each} * #{each}\"\n  }\nend) |> Kino.DataTable.new()","title":"n<sup>3</sup> 复杂度"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
Enum.map(1..1000, fn each ->
  %{
    "元素数量": each,
    result: each ** 3,
    notation: "#{each}**3",
    equation: "#{each} * #{each} * #{each}"
  }
end)
|> Kino.DataTable.new()
```

绘制在图表上，我们可以看到多项式复杂度导致向上曲线，幂的大小显著增加了增长。

<!-- livebook:{"attrs":{"source":"size = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"元素数量\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"时间\", type: :quantitative)\n  |> VegaLite.transform(groupby: [\"color\"], extent: [2500, 6500])\n  |> VegaLite.encode_field(:color, \"type\", title: \"多项式增长\", type: :nominal)\n  |> Kino.VegaLite.new()\n\ninit = 1\nmax = 5\n\nn2 = for n <- init..max, do: %{\"元素数量\": n, time: n ** 2, type: \"n^2\"}\nn3 = for n <- init..max, do: %{\"元素数量\": n, time: n ** 3, type: \"n^3\"}\nn4 = for n <- init..max, do: %{\"元素数量\": n, time: n ** 4, type: \"n^4\"}\n\nKino.VegaLite.push_many(widget, n2)\nKino.VegaLite.push_many(widget, n3)\nKino.VegaLite.push_many(widget, n4)\nwidget","title":"多项式复杂度图"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
size = 600

widget =
  VegaLite.new(width: size, height: size)
  |> VegaLite.mark(:line)
  |> VegaLite.encode_field(:x, "元素数量", type: :quantitative)
  |> VegaLite.encode_field(:y, "时间", type: :quantitative)
  |> VegaLite.transform(groupby: ["color"], extent: [2500, 6500])
  |> VegaLite.encode_field(:color, "type", title: "多项式增长", type: :nominal)
  |> Kino.VegaLite.new()

init = 1
max = 5

n2 = for n <- init..max, do: %{"元素数量": n, time: n ** 2, type: "n^2"}
n3 = for n <- init..max, do: %{"元素数量": n, time: n ** 3, type: "n^3"}
n4 = for n <- init..max, do: %{"元素数量": n, time: n ** 4, type: "n^4"}

Kino.VegaLite.push_many(widget, n2)
Kino.VegaLite.push_many(widget, n3)
Kino.VegaLite.push_many(widget, n4)
widget
```

## 指数复杂度

在指数增长中，某个常数随着每个添加到集合中的元素而增加一个幂次。

让我们以破解密码为例。我们可以假设密码只能由整数 `0` 到 `9` 组成。

```mermaid
flowchart LR
0---1---2---3---4---5---6---7---8---9
```

<!-- livebook:{"break_markdown":true} -->

随着密码中数字的增加，组合的数量按 $2$ 的幂次增长。

* 1 位数需要 10 次尝试
* 2 位数需要 100 次尝试
* 3 位数需要 1000 次尝试
* 4 位数需要 10000 次尝试

换句话说，它执行 $$10^n$$ 次尝试。现在你经常会看到指数复杂度表示为 $2^n$ 或 $C^n$，其中 `2` 或 `C` 代表某个常数值。在密码破解的情况下，它将是 `10`。

<!-- livebook:{"attrs":{"source":"Enum.map(1..100, fn each ->\n  %{\n    \"元素数量\": each,\n    result: 10 ** each,\n    equation: \"100 ** #{each}\"\n  }\nend) |> Kino.DataTable.new()","title":"指数增长表"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
Enum.map(1..100, fn each ->
  %{
    "元素数量": each,
    result: 10 ** each,
    equation: "100 ** #{each}"
  }
end)
|> Kino.DataTable.new()
```

<!-- livebook:{"attrs":{"source":"size = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"x\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"y\", type: :quantitative)\n  |> VegaLite.transform(groupby: [\"color\"], extent: [2500, 6500])\n  |> VegaLite.encode_field(:color, \"type\", title: \"指数增长\", type: :nominal)\n  |> Kino.VegaLite.new()\n\ninit = 1\nmax = 10\n\nexponential = for n <- init..max, do: %{x: n, y: 10 ** n, type: \"2^n\"}\n\nKino.VegaLite.push_many(widget, exponential)\nwidget","title":"指数复杂度图"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
size = 600

widget =
  VegaLite.new(width: size, height: size)
  |> VegaLite.mark(:line)
  |> VegaLite.encode_field(:x, "x", type: :quantitative)
  |> VegaLite.encode_field(:y, "y", type: :quantitative)
  |> VegaLite.transform(groupby: ["color"], extent: [2500, 6500])
  |> VegaLite.encode_field(:color, "type", title: "指数增长", type: :nominal)
  |> Kino.VegaLite.new()

init = 1
max = 10

exponential = for n <- init..max, do: %{x: n, y: 10 ** n, type: "2^n"}

Kino.VegaLite.push_many(widget, exponential)
widget
```

## 阶乘复杂度

某些函数会枚举输入的每一个可能排列。可以想象这在计算上是非常昂贵的。对于每个元素，函数需要枚举所有剩余元素。

例如，如果你需要计算一个数字的每一个排列，那将需要一个阶乘函数。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  a[123]
  a --> b[1]
  a --> c[2]
  a --> d[3]
  b --> b1[2] --> 123
  b --> b2[3] --> 132
  c --> c1[1] --> 213
  c --> c2[3] --> 231
  d --> d1[1] --> 312
  d --> d2[2] --> 321
```

<!-- livebook:{"break_markdown":true} -->

### 你的回合

尝试向 `list` 添加元素，注意它如何创建 $n!$ 个排列。

```elixir
defmodule Permutations do
  def of([]) do
    [[]]
  end

  def of(list) do
    for h <- list, t <- of(list -- [h]), do: [h | t]
  end
end

list = [1, 2, 3]
Permutations.of(list)
```

* 1 个元素创建 1 个排列
* 2 个元素创建 2 个排列
* 3 个元素创建 6 个排列
* 4 个元素创建 24 个排列
* 5 个元素创建 120 个排列

换句话说，它创建了 $$n!$$ 个排列，其中 $n!$ 是的简写为

$n! = n * (n-1) * (n-2) * ... * 1$

例如 $5!$ 是 $5 * 4 * 3 * 2 * 1$。

<!-- livebook:{"break_markdown":true} -->

阶乘复杂度增长非常快，正如你在这个图表和相应的数据表中所看到的。

<!-- livebook:{"attrs":{"source":"size = 600\n\nwidget =\n  VegaLite.new(width: size, height: size)\n  |> VegaLite.mark(:line)\n  |> VegaLite.encode_field(:x, \"x\", type: :quantitative)\n  |> VegaLite.encode_field(:y, \"y\", type: :quantitative)\n  |> VegaLite.transform(groupby: [\"color\"], extent: [2500, 6500])\n  |> VegaLite.encode_field(:color, \"type\", title: \"阶乘增长\", type: :nominal)\n  |> Kino.VegaLite.new()\n\nfactorial = for n <- 1..5, do: %{x: n, y: Factorial.of(n), type: \"n!\"}\n\nKino.VegaLite.push_many(widget, factorial)\nwidget","title":"阶乘复杂度图"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
size = 600

widget =
  VegaLite.new(width: size, height: size)
  |> VegaLite.mark(:line)
  |> VegaLite.encode_field(:x, "x", type: :quantitative)
  |> VegaLite.encode_field(:y, "y", type: :quantitative)
  |> VegaLite.transform(groupby: ["color"], extent: [2500, 6500])
  |> VegaLite.encode_field(:color, "type", title: "阶乘增长", type: :nominal)
  |> Kino.VegaLite.new()

factorial = for n <- 1..5, do: %{x: n, y: Factorial.of(n), type: "n!"}

Kino.VegaLite.push_many(widget, factorial)
widget
```

<!-- livebook:{"attrs":{"source":"defmodule Calculate do\n  def factorial(1), do: 1\n  def factorial(n), do: n * factorial(n - 1)\nend\n\nEnum.map(1..10, fn each ->\n  equation =\n    Enum.map_join(each..1, fn\n      ^each -> \"#{each}\"\n      n -> \" * #{n}\"\n    end)\n\n  %{\"元素数量\": each, result: Calculate.factorial(each), equation: equation}\nend)  |> Kino.DataTable.new()","title":"阶乘复杂度表"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
defmodule Calculate do
  def factorial(1), do: 1
  def factorial(n), do: n * factorial(n - 1)
end

Enum.map(1..10, fn each ->
  equation =
    Enum.map_join(each..1, fn
      ^each -> "#{each}"
      n -> " * #{n}"
    end)

  %{"元素数量": each, result: Calculate.factorial(each), equation: equation}
end)
|> Kino.DataTable.new()
```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成性能阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Performance">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/fibonacci_challenge.livemd">斐波那契数列</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/benchmarking.livemd">基准测试</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>