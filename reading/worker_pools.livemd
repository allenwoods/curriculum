# 工作池

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:poolboy, "~> 1.5"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Worker Pools">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/queues.livemd">队列</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/rubix_cube.livemd">魔方</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 概述

### 进程瓶颈

进程瓶颈发生在我们向一个进程发送过多消息时。例如，如果我们在应用程序中有一个单一的 GenServer，每条消息都是同步处理的。同步消息处理使得推理 GenServer 的行为变得更容易，但限制了我们系统的并发性。

例如，如果我们有一个耗时 500 毫秒的操作，并且三个客户端同时发起请求，最后一个客户端将不得不等待 1.5 秒。

```mermaid
sequenceDiagram
    participant Client 3
    participant Client 2
    participant Client 1
    participant GenServer
    Client 1->>GenServer: request
    Client 2->>GenServer: request
    Client 3->>GenServer: request
    GenServer->>Client 1: response (500ms)
    GenServer->>Client 2: response (1s)
    GenServer->>Client 3: response (1.5s)
```

<!-- livebook:{"break_markdown":true} -->

### 工作池

工作池是一组处理传入任务的进程。当一个新任务到达时，会分配一个空闲的工作进程来处理它。这使得工作负载能够在工作进程之间均匀分配，从而提高系统的效率和可扩展性。

```mermaid
flowchart LR

Caller --> P
subgraph Worker Pool
  P[Pool Manager]
  W1[Worker 1]
  W2[Worker 2]
  W3[Worker 3]

  P --> W1
  P --> W2
  P --> W3
end
```

<!-- livebook:{"break_markdown":true} -->

### 并发限制

工作池通常有有限数量的工作进程。有限的工作池有助于防止 **无界并发**，这可能会使我们的系统因过多的并发任务而超载。此外，一旦我们有足够的工作进程来确保我们的 CPU 核心忙于工作，额外的并发就几乎没有好处。

<!-- livebook:{"break_markdown":true} -->

### 命名进程

我们在本阅读材料中使用命名进程。如果一个命名进程已经启动，而你重新评估一个代码示例，你可能会看到以下错误。

> ** (MatchError) no match of right hand side value: {:error, {:already_started, #PID<0.265.0>}}
> reading/worker_pools.livemd#cell:oc2mtzukw3gd7z2s5oyguox4qdpegr7a:3: PoolManager.start_link/1
> /home/brook/dockyard/curriculum/reading/worker_pools.
> livemd#cell:ynvusqt7eiocyatfupox6d2pqqpiwwf4:2: (file)
> /home/brook/dockyard/curriculum/reading/worker_pools.
> livemd#cell:ynvusqt7eiocyatfupox6d2pqqpiwwf4:1: (file)

要解决此问题，请重新连接当前运行时。

<!-- livebook:{"break_markdown":true} -->

### 模块名称是原子

在本阅读中，你将看到几个没有模块定义的模块名称示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
Registry.start_link(name: ModuleName, keys: :duplicate)
```

请记住，模块名称只是原子。对于这些示例，我们可以将原子和模块名称互换使用。我们通常在为进程提供名称时看到这种情况。

<!-- livebook:{"force_markdown":true} -->

```elixir
Registry.start_link(name: :my_module_name, keys: :duplicate)
```

模块名称只是以 `:Elixir.<atom>` 为前缀的原子的语法糖。

```elixir
MyModule == :"Elixir.MyModule"
```

模块甚至可以与 [Atom](https://hexdocs.pm/elixir/Atom.html) 函数一起使用。

```elixir
Atom.to_string(MyModule)
```

### Kino.Process

我们在本材料中使用 `Kino.Process` 来提供进程的序列图。我们将经常使用 [Kino.Process.render_sequence_trace/2](https://hexdocs.pm/kino/Kino.Process.html#render_sequence_trace/2) 函数来在图中显示进程消息。

```elixir
Kino.Process.render_seq_trace(fn ->
  parent = self()
  child = spawn(fn -> send(parent, :message) end)

  receive do
    :message -> "parent #{inspect(parent)} received a message from child #{inspect(child)}"
  end
end)
```

## 注册表

[Registry](https://hexdocs.pm/elixir/Registry.html) 是一个内置模块，提供了一种在分布式系统中注册和查找命名进程的方法。可以将其视为一个目录服务，允许你将进程与名称关联，从而更容易在整个应用程序中定位和与该进程通信。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
Registry
p1[Process]
p2[Process]
p3[Process]

Registry --> p1
Registry --> p2
Registry --> p3
```

<!-- livebook:{"break_markdown":true} -->

### 唯一注册表

<!-- livebook:{"break_markdown":true} -->

唯一注册表为每个唯一键仅注册一个进程。

```mermaid
flowchart
R[Registry]
K1[Key1]
K2[Key2]
K3[Key3]
P1[Process1]
P2[Process2]
P3[Process3]

R --> K1 --> P1
R --> K2 --> P2
R --> K3 --> P3
```

```elixir
{:ok, _} = Registry.start_link(keys: :unique, name: :my_unique_registry)
```

我们可以通过调用 [Registry.register/3](https://hexdocs.pm/elixir/Registry.html#register/3) 在注册表下启动一个进程。我们将启动一个简单的 Agent 进程。

```elixir
{:ok, agent_pid} =
  Agent.start_link(fn ->
    Registry.register(:my_unique_registry, :agent1, nil)
    0
  end)
```

然后我们可以使用 [Registry.lookup/2](https://hexdocs.pm/elixir/Registry.html#lookup/2) 在注册表中查找 `:agent1` 进程。

```elixir
Registry.lookup(:my_unique_registry, :agent1)
```

### 通过

对于唯一注册表，我们还可以在不调用 [Registry.register/3](https://hexdocs.pm/elixir/Registry.html#register/3) 的情况下启动一个注册的进程，方法是使用格式为 `{:via, Registry, {registry, key}}` 的 [:via 元组](https://hexdocs.pm/elixir/Registry.html#module-using-in-via)。

```elixir
name = {:via, Registry, {:my_unique_registry, :agent2}}
{:ok, agent_pid} = Agent.start_link(fn -> 0 end, name: name)
```

我们的 [Registry](https://hexdocs.pm/elixir/Registry.html) 现在包含 `:agent1` 和 `:agent2`。

```elixir
[{agent1, _}] = Registry.lookup(:my_unique_registry, :agent1)
[{agent2, _}] = Registry.lookup(:my_unique_registry, :agent2)

{agent1, agent2}
```

## 重复注册表

我们可以将许多进程分组到一个键下，而不是为每个进程使用唯一键。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
R[Registry]
K1[Key1]
K2[Key2]
P1[Process]
P2[Process]
P3[Process]
P4[Process]
P5[Process]
P6[Process]

R --> K1
K1 --> P1
K1 --> P2
K1 --> P3

R --> K2
K2 --> P4
K2 --> P5
K2 --> P6
```

```elixir
{:ok, _} = Registry.start_link(keys: :duplicate, name: :my_duplicate_registry)

# 在注册表中以相同的键注册多个进程

Agent.start_link(fn ->
  Registry.register(:my_duplicate_registry, :my_key, nil)
  0
end)

Agent.start_link(fn ->
  Registry.register(:my_duplicate_registry, :my_key, nil)
  0
end)

Agent.start_link(fn ->
  Registry.register(:my_duplicate_registry, :my_key, nil)
  0
end)

# 查找所有三个进程
Registry.lookup(:my_duplicate_registry, :my_key)
```

## 构建我们自己的工作池

现在我们理解了 [Registry](https://hexdocs.pm/elixir/Registry.html)，我们可以用它来构建我们自己的工作池。

我们的 `Worker` 将是一个简单的 [GenServer](https://hexdocs.pm/elixir/GenServer.html)，执行一个等待一秒并返回响应的工作。

当这个 `Worker` 进程启动时，它会在 `PoolManager` 注册表下注册自己。虽然这不是严格必要的，但我们通过 `opts` 传入注册表，以便我们可以在多个注册表示例中使用相同的 `Worker` 进程。

```elixir
defmodule Worker do
  use GenServer

  def start_link(opts) do
    GenServer.start_link(__MODULE__, opts, opts)
  end

  def init(opts) do
    # 在 PoolManager 下注册 Worker
    # 我们使 : Registry 可配置。
    # 虽然不是必要的，但这使我们的工作者在整个注册表示例中可重用。
    registry = opts[:registry] || PoolManager
    Registry.register(registry, :workers, nil)

    {:ok, 0}
  end

  def perform_job(pid) do
    # 打印工作者的名称或其 pid
    IO.inspect(Process.info(pid)[:registered_name] || pid, label: "starting job")
    GenServer.call(pid, :perform_job)
  end

  def handle_call(:perform_job, _from, state) do
    Process.sleep(1000)
    {:reply, "response", state}
  end
end
```

我们还将创建一个 `PoolManager`，它启动一个注册表和三个 `Worker` 进程。

```elixir
defmodule PoolManager do
  def start_link(_opts) do
    {:ok, _} = Registry.start_link(name: __MODULE__, keys: :duplicate)

    # 启动三个工作者。我们为下面的图表给他们命名。
    for n <- 1..3 do
      {:ok, pid} = Worker.start_link(name: :"worker#{n}")
    end
  end

  def schedule_job do
    workers = Registry.lookup(__MODULE__, :workers)
    # 我们随机选择一个工作者来执行工作。
    # 虽然不是理想的，但这是一个非常简单的调度实现。
    {pid, _value} = Enum.random(workers)

    Worker.perform_job(pid)
  end
end
```

我们将使用 [Kino.Process.render_seq_trace/2](https://hexdocs.pm/kino/Kino.Process.html#render_seq_trace/2) 来演示 `PoolManager` 如何启动三个注册的 `Worker` 进程。

`PoolManager.PIDPartition0` 进程在后台由 [Registry](https://hexdocs.pm/elixir/Registry.html) 使用。有关更多信息，请参见 [Registry.start_link/1](https://hexdocs.pm/elixir/Registry.html#start_link/1)。

```elixir
Kino.Process.render_seq_trace(fn ->
  PoolManager.start_link([])
end)
```

当一个进程调用 `PoolManager.schedule_job/0` 时，我们的 `PoolManager` 将随机选择一个工作者。

```elixir
Kino.Process.render_seq_trace(fn ->
  PoolManager.schedule_job()
end)
```

代码对于调用者进程是同步的，但如果我们有多个调用者进程（例如，当你在 Phoenix 服务器中有许多客户端时），我们将看到工作池的全部好处。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
  C1[Client]
  C2[Client]
  C1 --> P
  C2 --> P
  subgraph Worker Pool
    P[Pool Manager]
    W1[Worker 1]
    W2[Worker 2]
    W3[Worker 3]

    P --Client 1 Routed to--> W1
    P --Client 2 Routed to --> W2
    P --inactive--> W3
  end
```

<!-- livebook:{"break_markdown":true} -->

为了模拟多个调用者，我们将使用两个任务。这通常只需一秒钟运行。然而，如果我们运气不好并为两个任务选择相同的工作者，则需要两秒钟。

```elixir
task1 = Task.async(fn -> PoolManager.schedule_job() end)
task2 = Task.async(fn -> PoolManager.schedule_job() end)

Task.await_many([task1, task2])
```

虽然随机选择一个工作者通常是可以的，因为大量工作负载将均匀分布在工作者之间，但还有更复杂的调度技术，例如 **轮询**，我们按顺序调度工作者。

## 监督我们的注册表

要监督我们的注册表，我们只需将我们的 [Registry](https://hexdocs.pm/elixir/Registry.html) 进程和 `Worker` 池进程放在一个监督者下。

这是一个最小示例来演示这个概念。

<!-- livebook:{"break_markdown":true} -->

接下来，我们在 [Supervisor](https://hexdocs.pm/elixir/Supervisor.html) 下启动一个名为 `SupervisedPoolManager` 的 [Registry](https://hexdocs.pm/elixir/Registry.html)。我们还手动启动三个 `SupervisedWorker` 进程以供我们的工作池使用。

```elixir
children = [
  {Registry, name: SupervisedPoolManager, keys: :duplicate},
  %{
    id: :worker1,
    start: {Worker, :start_link, [[name: :super_worker1, registry: SupervisedPoolManager]]}
  },
  %{
    id: :worker2,
    start: {Worker, :start_link, [[name: :super_worker2, registry: SupervisedPoolManager]]}
  },
  %{
    id: :worker3,
    start: {Worker, :start_link, [[name: :super_worker3, registry: SupervisedPoolManager]]}
  }
]

opts = [strategy: :one_for_one, name: :registry_supervisor]

{:ok, supervisor_pid} = Supervisor.start_link(children, opts)
```

我们可以查找由 `SupervisedPoolManager` 注册的三个 `SupervisedWorker` 进程，以确保它们已启动。

```elixir
Registry.lookup(SupervisedPoolManager, :workers)
```

我们将使用 [Kino.Process.sup_tree/2](https://hexdocs.pm/kino/Kino.Process.html#sup_tree/2) 来可视化上面的监督者树以供演示。

```elixir
Kino.Process.sup_tree(supervisor_pid)
```

## 监督工作池模块

现在我们已经看到了一个最小示例，我们将使用 [模块基础监督者](https://hexdocs.pm/elixir/Supervisor.html#module-module-based-supervisors) 来封装我们的监督注册表，制作一个更完整的实现。

```elixir
defmodule SupervisedPool do
  use Supervisor

  def start_link(_opts) do
    # 我们使名称可配置以供演示。
    Supervisor.start_link(__MODULE__, [], name: __MODULE__)
  end

  @impl true
  def init(_opts) do
    # System.schedulers_online() 返回当前机器上可用的调度器数量。
    child_specs =
      Enum.map(1..System.schedulers_online(), fn n ->
        %{
          id: :"supervised_worker_#{n}",
          start: {Worker, :start_link, [[registry: SupervisedPool.Registry]]}
        }
      end)

    children =
      [
        {Registry, name: SupervisedPool.Registry, keys: :duplicate}
      ] ++ child_specs

    Supervisor.init(children, strategy: :one_for_one)
  end
end
```

该模块启动的工作者数量等于当前机器上可用调度器的数量。

```elixir
System.schedulers_online()
```

我们将启动 `SupervisedPool` 并在 [Kino](https://hexdocs.pm/kino/Kino.html) 监督树图中可视化它。你会看到在 `SupervisedPool` 下的进程数量与在线调度器的数量相同。

```elixir
{:ok, supervisor_pid} = SupervisedPool.start_link([])

Kino.Process.sup_tree(supervisor_pid)
```

工作池通过管理工作进程来帮助应用程序更好地运行，使得处理许多任务变得更容易，并在不遇到无界并发问题的情况下扩展我们的系统。

值得注意的是，存在多种设计和实现工作池的方法。虽然我们开发的构建自定义工作池的代码是一个可行的解决方案，但肯定还有更好的选择。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

创建一个 mix 应用程序，带有一个监督工作池，允许你配置在工作池中启动的工作者数量。

例如：

<!-- livebook:{"force_markdown":true} -->

```elixir
MyApp.SupervisedPool.start_link(name: :example_pool, size: 4)
```

将监督工作池作为你的应用程序监督者的子项启动。

## Poolboy

Poolboy 是一个可靠的替代方案，用于实现自定义进程池，节省我们的时间和精力。

我们可以为进程池指定以下配置。

* `:name`: 池的名称。范围可以是 `:local`、`:global` 或 `:via`。
* `:worker_module`: 用于为池创建工作者的模块。
* `:size`: 池中允许的最大工作者数量。
* `:max_overflow`（可选）：在池为空时可以创建的临时工作者的最大数量。
* `:strategy`（可选）：确定返回池的工作者应该在可用工作者队列中放在最前面还是最后面，有两个可能的值：`:lifo` 或 `:fifo`。默认值为 `:lifo`。

```elixir
poolboy_config = [
  name: {:local, :worker},
  worker_module: Worker,
  size: 4
]
```

Poolboy 提供了一个 `:poolboy.child_spec/2` 函数，我们可以用它在应用程序的监督树中启动一个 Poolboy 管理器。

```elixir
children = [
  :poolboy.child_spec(:worker, poolboy_config)
]

opts = [strategy: :one_for_one, name: :my_pool_supervisor]

{:ok, supervisor_pid} = Supervisor.start_link(children, opts)
```

我们可以使用 `:poolboy.transaction/3` 函数访问工作池中的一个工作者并执行工作。

```elixir
:poolboy.transaction(:worker, fn pid -> Worker.perform_job(pid) end, 5000)
```

由于上面的 `size: 4` 配置，`4` 个工作者将在工作池中并发执行工作。请注意，尽管触发了 `10` 个任务，但只有 `4` 个工作同时发生。

```elixir
tasks =
  Enum.map(1..10, fn _ ->
    Task.async(fn ->
      :poolboy.transaction(:worker, fn pid -> Worker.perform_job(pid) end, 5000)
    end)
  end)

Task.await_many(tasks)
```

在这里，我们将使用 [Kino.Process.seq_trace/2](https://hexdocs.pm/kino/Kino.Process.html#seq_trace/2) 来可视化 Poolboy 池管理器启动三个工作进程的过程。

请注意，有三个 `perform_job` 消息。Poolboy 背后还有几个进程在使用。

```elixir
Kino.Process.render_seq_trace(fn ->
  tasks =
    Enum.map(1..3, fn _ ->
      Task.async(fn ->
        :poolboy.transaction(:worker, fn pid -> Worker.perform_job(pid) end, 5000)
      end)
    end)

  Task.await_many(tasks)
end)
```

### 你的回合

将 Poolboy 依赖项添加到 mix 项目中，并在应用程序的监督树下启动一个工作池。

## 深入阅读

考虑以下资源以加深你对该主题的理解。

* [使用 Elixir 的注册表进行进程池管理，作者：Andrea Leopardi](https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/)
* [在 Elixir 中使用 Poolboy 管理进程，作者：Akash Manohar](https://hashnuke.com/2013/10/03/managing-processes-with-poolboy-in-elixir.html)

## 提交你的进展

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进展。

```
$ git add .
$ git commit -m "完成工作池阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人以自己的节奏学习。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的班级申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Worker Pools">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/queues.livemd">队列</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/rubix_cube.livemd">魔方</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
