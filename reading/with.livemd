# With

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=With">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/guards.livemd">守卫</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/message_validation.livemd">消息验证</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## With

在Elixir中，`with`是一个控制结构，提供了一种方便的方式来处理多个表达式并对其结果进行模式匹配。它允许你将一系列表达式串联在一起，并逐个评估它们，如果其中任何一个返回错误或模式匹配失败，则停止。

<!-- livebook:{"force_markdown":true} -->

```elixir
with {:ok, v1} <- check1(),
     {:ok, v2} <- check2(v1),
     {:ok, v3} <- check3(v2),
     {:ok, v4} <- check4(v3),
     {:ok, _} <- check5(v4) do
  # 需要上述成功结果的代码
end
```

`with`构造简化了错误处理，并通过避免嵌套的`case`语句或冗长的`if`条件，使代码更具可读性。它提供了一种简洁的方式来处理一系列表达式，同时优雅地处理潜在的错误或失败的模式匹配。

以下是使用嵌套`case`语句编写的上述代码的版本，以演示`with`语句可以多么简洁。

<!-- livebook:{"force_markdown":true} -->

```elixir
case action1() do
  {:ok, v1} ->
  case action2(v1) do
    {:ok, v2} ->
      case action3(v2) do
        {:ok, v3} -> 
          case action4(v3) do
            {:ok, v4} -> 
              case check5(v4) do
                {:ok, _} -> 
                  # 需要上述成功结果的代码。
              end
          end
      end
  end
end
```

我们在上面使用了`{:ok, value}`元组，但`with`语句可以对任何Elixir术语进行模式匹配。

```elixir
student = %{name: "Einar", is_admin: true}

with %{name: name, is_admin: true} <- student do
  IO.puts("管理员 #{name} 被授权。")
end
```

### 你的回合

`with`语句可以包含一个`else`子句来处理错误。`else`子句可以匹配许多不同的模式。

更改下面`user`的值，以触发`else`子句中的每个情况（一次一个）。

```elixir
user = %{name: "Jon", is_admin: false}

with %{name: name, is_admin: true} <- user do
  IO.puts("管理员 #{name} 被授权。")
else
  %{is_admin: false, name: name} ->
    IO.puts("#{name} 不是管理员")

  %{is_admin: false} ->
    IO.puts("未知用户不是管理员")

  _ ->
    IO.puts("出现了问题！")
end
```

## 处理错误

一些项目使用元组来注释`with`表达式中哪个语句失败。

社区中的一些成员认为，使用自定义错误类型比使用`with`语句更可取。有关更多信息，请参见[Chris Keathley: Good and Bad Elixir](https://keathley.io/blog/good-and-bad-elixir.html)。

然而，我们希望你了解这种模式，以便在你未来的团队使用它时能够熟悉。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

更改`value`以触发每个else子句。

```elixir
value = {:not_binary, "example"}

with {:not_binary, true} <- {:not_binary, is_binary(value)},
     {:too_long, true} <- {:too_long, String.length(value) <= 10},
     {:too_short, true} <- {:too_short, 2 <= String.length(value)} do
  IO.puts("成功")
else
  {:not_binary, _} -> IO.puts("值不是二进制")
  {:too_long, _} -> IO.puts("值太长")
  {:too_short, _} -> IO.puts("值太短")
end
```

## 提交你的进展

DockYard Academy现在建议你使用最新的[Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行`git status`以确保没有不必要的更改。
然后在`curriculum`文件夹中从命令行运行以下命令以提交你的进展。

```
$ git add .
$ git commit -m "完成 With 阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受2023年6月至8月的课程申请。

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=With">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/guards.livemd">守卫</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/message_validation.livemd">消息验证</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
