# 多对多关系

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Many-To-Many Relationships">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/blog_authentication.livemd">博客：认证</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/blog_tags.livemd">博客：标签</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 我们如何使用 Ecto 配置多对多关联？
* 在进行数据库查询时，我们如何加载关联？
* 我们如何在表单中处理关联数据？

## 概述

这是 [博客：标签](../exercises/blog_tags.livemd) 练习的配套阅读材料。本课概述了如何在 Phoenix 应用程序中处理一对多关联。请参阅 `example_projects/blog` 项目文件夹，以便为本课中的示例提供背景。

<!-- livebook:{"break_markdown":true} -->

### 多对多关系

多对多关系是一种关联类型，其中一个表中的多个实体可以与另一个表中的多个实体连接。

例如，考虑博客文章和标签。每篇文章可以有多个标签，每个标签可以与多篇文章关联。这表示文章和标签之间的多对多关联。

```mermaid
erDiagram

Post {
    string title
    text content
    date published_on
    boolean visibility
}

Tag {
  string name
}

Post }O--O{ Tag: ""
```

例如，考虑以下场景：

* 文章 1: "Elixir 中的机器学习简介"， 
  * 标签 - ["机器学习", "Elixir"]
* 文章 2: "Elixir 编程技巧" 
  * 标签 - ["Elixir", "编程"]

以下是基于上述数据的简化文章表。

| id  | title                           |
| --- | ------------------------------- |
| 1   | Elixir 中的机器学习简介 |
| 2   | Elixir 编程技巧             |

以及标签表。

| id  | tag          |
| --- | ------------ |
| 1   | 机器学习 |
| 2   | Elixir       |
| 3   | 编程       |

为了关联文章和标签，我们使用一个 **连接表**，该表存储文章和标签，从而允许多个文章和多个标签关联。

| Post                            | Tag          |
| ------------------------------- | ------------ |
| Elixir 中的机器学习简介 | 机器学习 |
| Elixir 中的机器学习简介 | Elixir       |
| Elixir 编程技巧             | Elixir       |
| Elixir 编程技巧             | 编程       |

上述表格是为了清晰起见，实际上 **连接表** 只存储每个文章/标签的外键。

| post_id | tag_id |
| ------- | ------ |
| 1       | 1      |
| 1       | 2      |
| 2       | 2      |
| 2       | 3      |

<!-- livebook:{"break_markdown":true} -->

### 分解

要实现多对多关联，我们需要注意应用程序的许多部分。

1. 迁移: [创建连接表](#join-table-migration)
2. 模式: [设置多对多关联](#schema)
3. 更改集 + 上下文: [关联记录](#associating-records)。
4. 表单: [在表单中发送关联数据](#sending-associated-data-in-a-form)
5. 控制器: [在控制器中处理关联数据](#handling-associated-data-in-the-controller)

我们还将介绍如何 [测试多对多关联](#testing-many-to-many-associations)。

以下是使用创建带有关联标签的文章作为示例的 Phoenix 应用程序中的 HTTP 请求周期的回顾。

```mermaid
sequenceDiagram
    Form->>Router: HTTP Post "/posts" %{attrs}
    Router ->>Controller: :create
    Controller ->> Context: create_post
    Context -->> Schema: changeset
    Schema -->> Context: changeset
    Context -->> Repo: insert
    Repo --> Migration: CREATE
```

在上述示例中，`attrs` 将是创建文章并将标签与文章关联所需的数据。

与其记住一系列步骤，不如努力理解 Phoenix 应用程序的每一层，以便能够将它们连接在一起以构建所需的任何功能。

在接下来的课程中，我们将涵盖每个步骤的示例。您可以参考 `example_projects/blog` 文件夹中的示例博客应用程序，以查看这些内容在实际应用中的协同工作。

## 连接表迁移

连接表不需要模式，只需在数据库中进行迁移。

以下是一个连接表迁移的示例，可以使用 `mix ecto.gen.migration add_posts_tags_join_table` 初始生成。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Blog.Repo.Migrations.AddPostsTagsJoinTable do
  use Ecto.Migration

  def change do
      create table(:posts_tags, primary_key: false) do
        add :post_id, references(:posts, on_delete: :delete_all)
        add :tag_id, references(:tags, on_delete: :delete_all)
      end

      create(unique_index(:post_tags, [:post_id, :tag_id]))
  end
end
```

`primary_key: false` 选项指定连接表中的记录不需要主键。

虽然不是严格必要，但 [unique_index/3](https://hexdocs.pm/ecto_sql/Ecto.Migration.html#unique_index/3) 宏在搜索文章的标签时优化了性能，并确保一篇文章不能有相同的标签两次。

## 模式

连接表不需要自己的模式，但可以有一个 [单独的模式也将两个表连接在一起](https://hexdocs.pm/ecto/associations.html#many-to-many)。相反， [many_to_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#many_to_many/3) 宏允许我们通过连接表在我们的模式中设置多对多关联。

以下是一个 `Tag` 模式的示例，它通过 `posts_tags` 表与 `Post` 具有多对多关系。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Blog.Tags.Tag do
  use Ecto.Schema
  import Ecto.Changeset

  schema "tags" do
    field :name, :string
    many_to_many :posts, Blog.Posts.Post, join_through: "posts_tags"

    timestamps()
  end

  @doc false
  def changeset(tag, attrs) do
    tag
    |> cast(attrs, [:name])
    |> validate_required([:name])
  end
end
```

以下是一个 `Post` 模式的示例，它通过 `posts_tags` 表与 `Tag` 具有多对多关系。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Blog.Posts.Post do
  use Ecto.Schema
  import Ecto.Changeset

  schema "posts" do
    field :content, :string
    field :title, :string
    field :visible, :boolean, default: true
    field :published_on, :utc_datetime

    has_many :comments, Blog.Comments.Comment
    belongs_to :user, Blog.Accounts.User
    many_to_many :tags, Blog.Posts.Tag, join_through: "posts_tags"

    timestamps()
  end

  @doc false
  def changeset(post, attrs) do
    post
    |> cast(attrs, [:title, :content, :visible, :published_on, :user_id])
    |> validate_required([:title, :content, :visible, :user_id])
    |> unique_constraint(:title)
    |> foreign_key_constraint(:user_id)
  end
end
```

## 关联记录

要插入关联的现有记录，我们可以使用 [put_assoc/3](https://hexdocs.pm/ecto/Ecto.Changeset.html#put_assoc/4) 函数，该函数将关联数据放入更改集中。

以下是将标签与文章更改集关联的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
def changeset(post, attrs, tags \\ []) do
  post
  |> cast(attrs, [:title, :content, :visible, :published_on, :user_id])
  |> validate_required([:title, :content, :visible, :user_id])
  |> unique_constraint(:title)
  |> foreign_key_constraint(:user_id)
  # tags 是现有 Tag 结构的列表。
  |> put_assoc(:tags, tags)
end
```

使用 `put_assoc/3` 构建的关联存储在更改集中。

<!-- livebook:{"force_markdown":true} -->

```elixir
#Ecto.Changeset<
  action: nil,
  changes: %{
    content: "some content",
    tags: [
      #Ecto.Changeset<action: :update, changes: %{}, errors: [],
       data: #Blog.Tags.Tag<>, valid?: true>,
      #Ecto.Changeset<action: :update, changes: %{}, errors: [],
       data: #Blog.Tags.Tag<>, valid?: true>
    ],
    title: "some title",
    user_id: 4975
  },
  errors: [],
  data: #Blog.Posts.Post<>,
  valid?: true
>
```

这些放入更改集中的关联记录将在传递给 `Repo` 以将数据插入数据库时在连接表中创建记录。

以下是一个上下文函数的示例，用于创建文章并将标签列表传递给更改集。请记住，这只是一个示例。提供此数据的模式有很多种，这种模式在只有一个关联时很简单，但在提供许多不同的关联记录时不会很好扩展。

<!-- livebook:{"force_markdown":true} -->

```elixir
def create_post(attrs \\ %{}, tags \\ []) do
  %Post{}
  |> Post.changeset(attrs, tags)
  |> Repo.insert()
end
```

请参阅 [Ecto: 插入关联记录](https://hexdocs.pm/ecto/associations.html#inserting-associated-records) 指南以获取更多方法，包括：

* 向现有父级插入子记录
* 一起插入父级和子级记录

<!-- livebook:{"break_markdown":true} -->

### 更新关联记录

更新关联记录需要为模式上的多对多关系设置 `on_replace` 行为。以下是一个 [many_to_many/3](https://hexdocs.pm/ecto/Ecto.Schema.html#many_to_many/3) 调用的示例，该调用配置 `Post` 模式，以便在更新文章的标签时删除 `posts_tags` 记录。

<!-- livebook:{"force_markdown":true} -->

```elixir
many_to_many(:tags, Blog.Tags.Tag, join_through: "posts_tags", on_replace: :delete)
```

以下是如何从上下文发送新标签的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
def update_post(%Post{} = post, attrs, tags \\ []) do
  post
  |> Post.changeset(attrs, tags)
  |> Repo.update()
end
```

## 表单关联数据

我们已经看到如何在表单中发送关联数据。然而，多对多关系比其他关系更复杂，并且有许多不同的方法来创建数据。

* 创建关联数据
* 关联现有数据

在文章和标签的情况下，我们可能会强制用户仅从现有标签列表中选择。或者，我们可能允许用户在创建文章时创建自己的标签。

无论我们具体实现如何，发送关联数据的方式只有 3 种。

* 查询参数
* URL 参数
* 主体参数

我们可以通过表单提交关联所需的数据。例如，为了将文章与某些标签关联，我们可能会提交标签 ID 的列表。

<!-- livebook:{"break_markdown":true} -->

### 选择输入

选择输入允许我们发送选项列表，并包含一个 `selected` 字段以指示哪些选项被选中。

<!-- livebook:{"force_markdown":true} -->

```elixir
  <.input 
    field={f[:field]} 
    type="select" 
    multiple={true} 
    options={[
      [key: "选项1", value: 1, selected: true],
      [key: "选项2", value: 2, selected: false],
      [key: "选项3", value: 3, selected: true]
    ]}
  />
```

选择输入中的 `options` 可以有几种格式：

* 值的列表，即 `["1", "2", "3"]`
* 键/值元组的列表，即 `[{"one", "1"}, {"two", "2"}]`
* 带有键、值和选中字段的关键字列表，即 `[[key: "one", value: "1", selected: true]]`

也可以省略 `selected` 选项，因为 `false` 是默认值。

<!-- livebook:{"break_markdown":true} -->

### 关联现有数据

以下是一个使用从 `conn.assigns` 传入的 `tag_options` 创建标签列表选择输入的表单示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.simple_form :let={f} for={@changeset} action={@action}>
  <.error :if={@changeset.action}>
    哎呀，出了点问题！请检查下面的错误。
  </.error>
  <.input field={f[:user_id]} type="hidden" value={@current_user.id} />
  <.input field={f[:title]} type="text" label="标题" />
  <.input field={f[:content]} type="text" label="内容" />
  <.input field={f[:published_on]} type="datetime-local" label="发布日期" value={DateTime.utc_now()} />
  <.input field={f[:visible]} type="checkbox" label="可见" />
  <.input field={f[:tag_ids]} type="select" label="标签" multiple={true} options={@tag_options} />


  <:actions>
    <.button>保存文章</.button>
  </:actions>
</.simple_form>
```

请记住，无法在 HTML 输入中存储 Elixir 术语，否则我们会遇到 `Phoenix.HTML.Safe not implemented for ELIXIRTERM`，其中 `ELIXIRTERM` 是我们尝试嵌入到 HTML 中的数据结构。当 Phoenix 使用某些关联的默认值时，我们经常会遇到此问题，这就是为什么我们将字段命名为 `:tag_ids` 而不是 `:tags`。有一些解决此问题的方法，但这是避免问题的简单方法。

以下是如何构建标签选项的示例：

<!-- livebook:{"force_markdown":true} -->

```elixir
defp tag_options(selected_ids \\ []) do
  Tags.list_tags()
  |> Enum.map(fn tag ->
    [key: tag.name, value: tag.id, selected: tag.id in selected_ids]
  end)
end
```

然后从控制器操作中提供：

<!-- livebook:{"force_markdown":true} -->

```elixir
def new(conn, _params) do
  changeset = Posts.change_post(%Post{tags: []})
  render(conn, :new, changeset: changeset, tag_options: tag_options())
end

...

def edit(conn, %{"id" => id}) do
  post = Posts.get_post!(id)
  changeset = Posts.change_post(post)

  render(conn, :edit,
    post: post,
    changeset: changeset,
    tag_options: tag_options(Enum.map(post.tags, & &1.id))
  )
end
```

如果使用组件，请记住 `conn.assigns` 中的值也需要传递给组件。以下是将 `tag_options` 列表提供给表单组件的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.post_form changeset={@changeset} action={~p"/posts"} current_user={@current_user} tag_options={@tag_options} />
```

请参阅 `example_projects/blog` 文件夹中的示例博客项目以获取更具体的示例。

<!-- livebook:{"break_markdown":true} -->

### 创建关联数据

对于更高级的用例， [inputs_for/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#inputs_for/1) 宏使得在表单中发送关联记录的数据成为可能。例如，我们可以使用 [inputs_for/1](https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#inputs_for/1) 在创建文章时创建标签。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.form
  # 其他表单属性
  ...
>
  # 其他表单输入
  ...
  <.inputs_for :let={f_nested} field={f[:tags]}>
    <.input type="text" field={f_nested[:name]} />
  </.inputs_for>
</.form>
```

Ecto 还提供 [Ecto.Multi](https://hexdocs.pm/ecto/Ecto.Multi.html) 用于分组此类数据库操作。

## 控制器关联数据

在对某些关联资源执行创建或更新操作时，我们通常需要加载关联数据。

以下是一个控制器中的创建和更新操作示例，该操作使用从表单发送的 `tag_ids` 列表加载标签。

<!-- livebook:{"force_markdown":true} -->

```elixir
  def create(conn, %{"post" => post_params}) do
    tags = Map.get(post_params, "tag_ids", []) |> Enum.map(&Tags.get_tag!/1)

    case Posts.create_post(post_params, tags) do
      {:ok, post} ->
        conn
        |> put_flash(:info, "文章创建成功。")
        |> redirect(to: ~p"/posts/#{post}")

      {:error, %Ecto.Changeset{} = changeset} ->

        render(conn, :new,
          changeset: changeset,
          tag_options: tag_options(Enum.map(tags, & &1.id))
        )
    end
  end

  ...

  def update(conn, %{"id" => id, "post" => post_params}) do
    post = Posts.get_post!(id)
    tags = Map.get(post_params, "tag_ids", []) |> Enum.map(&Tags.get_tag!/1)

    case Posts.update_post(post, post_params, tags) do
      {:ok, post} ->
        conn
        |> put_flash(:info, "文章更新成功。")
        |> redirect(to: ~p"/posts/#{post}")

      {:error, %Ecto.Changeset{} = changeset} ->

        render(conn, :edit,
          post: post,
          changeset: changeset,
          tag_options: tag_options(Enum.map(tags, & &1.id)),
        )
    end
  end
```

## 测试多对多关联

测试多对多关联至关重要，以验证实体之间的关系是否正确建立，以及管理这些关联的函数是否正常工作。

<!-- livebook:{"break_markdown":true} -->

### 上下文测试

以下是一个上下文测试的示例，确保我们在创建时可以将文章与多个标签关联。为了更加彻底，此测试在多对多关联的 `post.tags` 和 `tag.posts` 两侧进行断言。

<!-- livebook:{"force_markdown":true} -->

```elixir
test "create_post/1 with tags" do
  user = user_fixture()
  tag1 = tag_fixture()
  tag2 = tag_fixture()

  valid_attrs1 = %{content: "some content", title: "post 1", user_id: user.id}
  valid_attrs2 = %{content: "some content", title: "post 2", user_id: user.id}

  assert {:ok, %Post{} = post1} = Posts.create_post(valid_attrs1, [tag1, tag2])
  assert {:ok, %Post{} = post2} = Posts.create_post(valid_attrs2, [tag1])

  # posts have many tags
  assert Repo.preload(post1, :tags).tags == [tag1, tag2]
  assert Repo.preload(post2, :tags).tags == [tag1]

  # tags have many posts
  # we preload posts: [:tags] because posts contain the list of tags when created
  assert Repo.preload(tag1, posts: [:tags]).posts == [post1, post2]
  assert Repo.preload(tag2, posts: [:tags]).posts == [post1]
end
```

### 控制器测试

以下是一个控制器测试的示例，验证我们可以通过标签 ID 列表创建带有关联标签的文章。

<!-- livebook:{"force_markdown":true} -->

```elixir
test "create post with tags", %{conn: conn} do
  # 准备：设置必要的数据
  user = user_fixture()
  conn = log_in_user(conn, user)

  tag1 = tag_fixture(name: "标签 1 名称")
  tag2 = tag_fixture(name: "标签 2 名称")

  create_attrs = %{
    content: "some content",
    title: "some title",
    visible: true,
    published_on: DateTime.utc_now(),
    user_id: user.id,
    tag_ids: [tag1.id, tag2.id]
  }

  # 行动：发送 HTTP POST 请求
  conn = post(conn, ~p"/posts", post: create_attrs)

  # 断言：验证响应被重定向，并且文章与标签一起创建。
  assert %{id: id} = redirected_params(conn)
  assert redirected_to(conn) == ~p"/posts/#{id}"

  assert Posts.get_post!(id).tags == [tag1, tag2]
end
```

### 测试关联问题

在测试中，由于加载或未加载关联数据结构，常常会遇到问题。

以下是解决此问题的 3 种常见方法。

* 仅比较 ID
* 删除关联字段
* 预加载关联

以下是使用模式匹配仅比较 ID 的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
# 使用引导运算符 ^ 在文章的 ID 上进行模式匹配。
assert [%{id: ^post_id}] = Posts.list_posts("ITL")
```

以下是通过访问 ID 比较 ID 的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
assert Posts.list_posts() |> Enum.map(& &1.id) == [post1.id, post2.id]
```

以下是删除关联字段的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
Map.delete(post, :tags) == Map.delete(expected, :tags)
```

以下是预加载关联的示例。在此示例中，`post1` 和 `post2` 已经加载了 `:tags` 关联。如果在数据已加载后创建了关联，有时需要使用 `force` 选项。请参阅 [Ecto.Repo.preload/3 #options](https://hexdocs.pm/ecto/Ecto.Repo.html#c:preload/3-options) 以获取更多信息。

<!-- livebook:{"force_markdown":true} -->

```elixir
assert Blog.Repo.preload(post, :tags, force: true).tags == [tag1, tag2]
```

## 进一步阅读

有关 Phoenix 的更多信息，请考虑以下资源。

* [Ecto 关联：多对多](https://hexdocs.pm/ecto/associations.html#many-to-many)
* [Elixir 学校：关联](https://elixirschool.com/en/lessons/ecto/associations)
* [Elixir 论坛：Ecto 关联及其目的](https://elixirforum.com/t/ecto-associations-and-the-purpose-of-has-many-through-and-many-to-many/32164/2)

## 提交您的进度

DockYard Academy 现在建议您使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的存储库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交您的进度。

```
$ git add .
$ git commit -m "完成多对多关系阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人以自己的节奏学习。

我们还提供付费课程，您可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Many-To-Many Relationships">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/blog_authentication.livemd">博客：认证</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/blog_tags.livemd">博客：标签</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
