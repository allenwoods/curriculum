# 测试 Phoenix

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Testing Phoenix">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/blog_posts.livemd">博客：帖子</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/blog_search.livemd">博客：搜索</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 如何在 Phoenix 应用程序中生成资源？
* 解释上下文、模式、迁移和 Repo。

## 概述

这是 [博客：搜索](../exercises/blog_search.livemd) 练习的配套阅读。本课概述了如何在 Phoenix 应用程序中编写测试。

<!-- livebook:{"break_markdown":true} -->

### Phoenix 测试组织

Phoenix 附带了一个内置的测试框架，包括 ExUnit 和其他与测试相关的库。

测试通常根据要测试的内容组织到不同的模块中。主要有两个测试文件夹 `tests/app` 和 `tests/app_web`，其中 `app` 是我们应用程序的名称。

例如，如果我们想测试 `Blog.PostController` 模块，我们将在 `tests/app_web/post_controller_test.exs` 中定义一个 `Blog.PostControllerTest` 模块。

或者如果我们想测试 `Blog.Posts` 上下文，我们将在 `tests/app/posts_test.exs` 中定义一个 `Blog.PostsTest` 模块。

```mermaid
flowchart

tests --> app --> Blog.PostsTest
tests --> app_web --> BlogWeb.PostControllerTest
```

`mix test` 命令会自动运行 `tests` 文件夹中的所有 `*_test.exs` 文件。

默认情况下，Phoenix 生成器会为我们创建默认测试，但它们通常需要根据应用程序行为的变化进行修改和更新，或者在处理关联数据结构时进行更新。

## 使用 DataCase 的上下文测试

Phoenix 在 `tests/support/data_case.ex` 中定义了一个 `DataCase` 模块。DataCase 是一个测试用例，用于设置测试数据库并提供创建和操作数据的辅助函数。

这个测试用例通常用于上下文测试。以下是一个 `Posts` 上下文的示例测试套件。如果没有 `DataCase`，这些上下文函数将无法作用于沙箱数据库。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Blog.PostsTest do
  use Blog.DataCase

  alias Blog.Posts

  describe "posts" do
    alias Blog.Posts.Post

    import Blog.PostsFixtures

    @invalid_attrs %{content: nil, subtitle: nil, title: nil}

    test "list_posts/0 returns all posts" do
      post = post_fixture()
      assert Posts.list_posts() == [post]
    end

    test "get_post!/1 returns the post with given id" do
      post = post_fixture()
      assert Posts.get_post!(post.id) == post
    end

    test "create_post/1 with valid data creates a post" do
      valid_attrs = %{content: "some content", subtitle: "some subtitle", title: "some title"}

      assert {:ok, %Post{} = post} = Posts.create_post(valid_attrs)
      assert post.content == "some content"
      assert post.subtitle == "some subtitle"
      assert post.title == "some title"
    end

    test "create_post/1 with invalid data returns error changeset" do
      assert {:error, %Ecto.Changeset{}} = Posts.create_post(@invalid_attrs)
    end

    test "update_post/2 with valid data updates the post" do
      post = post_fixture()
      update_attrs = %{content: "some updated content", subtitle: "some updated subtitle", title: "some updated title"}

      assert {:ok, %Post{} = post} = Posts.update_post(post, update_attrs)
      assert post.content == "some updated content"
      assert post.subtitle == "some updated subtitle"
      assert post.title == "some updated title"
    end

    test "update_post/2 with invalid data returns error changeset" do
      post = post_fixture()
      assert {:error, %Ecto.Changeset{}} = Posts.update_post(post, @invalid_attrs)
      assert post == Posts.get_post!(post.id)
    end

    test "delete_post/1 deletes the post" do
      post = post_fixture()
      assert {:ok, %Post{}} = Posts.delete_post(post)
      assert_raise Ecto.NoResultsError, fn -> Posts.get_post!(post.id) end
    end

    test "change_post/1 returns a post changeset" do
      post = post_fixture()
      assert %Ecto.Changeset{} = Posts.change_post(post)
    end
  end
end

```

## 使用 ConnCase 的控制器测试

`ConnCase` 是一个测试用例，用于设置 HTTP 连接并提供用于发起 HTTP 请求和检查响应的辅助函数。这个测试用例通常用于测试控制器。

以下是 `PostController` 的示例测试套件。`ConnCase` 设置了在发起请求时使用的 `conn` [Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) 结构。`ConnCase` 还使我们可以访问在 [Phoenix.ConnTest](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#functions) 模块中定义的函数，例如 [get/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#get/3)、[post/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#post/3)、[put/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#put/3) 和 [delete/3](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html#delete/3)，用于模拟 HTTP 请求。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule BlogWeb.PostControllerTest do
  use BlogWeb.ConnCase

  import Blog.PostsFixtures

  @create_attrs %{content: "some content", subtitle: "some subtitle", title: "some title"}
  @update_attrs %{content: "some updated content", subtitle: "some updated subtitle", title: "some updated title"}
  @invalid_attrs %{content: nil, subtitle: nil, title: nil}

  describe "index" do
    test "lists all posts", %{conn: conn} do
      conn = get(conn, ~p"/posts")
      assert html_response(conn, 200) =~ "Listing Posts"
    end
  end

  describe "new post" do
    test "renders form", %{conn: conn} do
      conn = get(conn, ~p"/posts/new")
      assert html_response(conn, 200) =~ "New Post"
    end
  end

  describe "create post" do
    test "redirects to show when data is valid", %{conn: conn} do
      conn = post(conn, ~p"/posts", post: @create_attrs)

      assert %{id: id} = redirected_params(conn)
      assert redirected_to(conn) == ~p"/posts/#{id}"

      conn = get(conn, ~p"/posts/#{id}")
      assert html_response(conn, 200) =~ "Post #{id}"
    end

    test "renders errors when data is invalid", %{conn: conn} do
      conn = post(conn, ~p"/posts", post: @invalid_attrs)
      assert html_response(conn, 200) =~ "New Post"
    end
  end

  describe "edit post" do
    setup [:create_post]

    test "renders form for editing chosen post", %{conn: conn, post: post} do
      conn = get(conn, ~p"/posts/#{post}/edit")
      assert html_response(conn, 200) =~ "Edit Post"
    end
  end

  describe "update post" do
    setup [:create_post]

    test "redirects when data is valid", %{conn: conn, post: post} do
      conn = put(conn, ~p"/posts/#{post}", post: @update_attrs)
      assert redirected_to(conn) == ~p"/posts/#{post}"

      conn = get(conn, ~p"/posts/#{post}")
      assert html_response(conn, 200) =~ "some updated content"
    end

    test "renders errors when data is invalid", %{conn: conn, post: post} do
      conn = put(conn, ~p"/posts/#{post}", post: @invalid_attrs)
      assert html_response(conn, 200) =~ "Edit Post"
    end
  end

  describe "delete post" do
    setup [:create_post]

    test "deletes chosen post", %{conn: conn, post: post} do
      conn = delete(conn, ~p"/posts/#{post}")
      assert redirected_to(conn) == ~p"/posts"

      assert_error_sent 404, fn ->
        get(conn, ~p"/posts/#{post}")
      end
    end
  end

  defp create_post(_) do
    post = post_fixture()
    %{post: post}
  end
end
```

`setup [:create_post]` 部分有时在测试中调用 `create_post/1` 函数。

## 夹具

默认情况下，Phoenix 设置了用于创建数据的测试夹具。您可能会注意到上面示例中的 `post_fixture/1` 函数。

这些只是便利函数，允许我们在测试中创建数据，而无需手动提供字段值。许多项目选择省略这些，直接使用上下文函数，或使用 [ExMachina](https://github.com/thoughtbot/ex_machina) 等库定义自己的夹具。

以下是 `Blog.PostControllerTest` 测试示例中导入的 `PostsFixture` 模块的示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Blog.PostsFixtures do
  def post_fixture(attrs \\ %{}) do
    {:ok, post} =
      attrs
      |> Enum.into(%{
        content: "some content",
        subtitle: "some subtitle",
        title: "some title"
      })
      |> Blog.Posts.create_post()

    post
  end
end

```

`post_fixture/1` 函数使用 `Enum.into/2` 将默认字段值与覆盖的 `attrs` 合并。

```elixir
attrs = [title: "overridden title"]

Enum.into(attrs, %{
  content: "some content",
  subtitle: "some subtitle",
  title: "some title"
})
```

## 应该测试什么？

在软件测试中，确保系统按预期工作并满足用户的需求是很重要的。以下是决定测试内容时应考虑的一些领域：

* **核心功能**：确保应用程序的主要功能按预期工作。例如，上述生成的测试覆盖了系统的主要 CRUD 操作，以及错误处理等重要功能。
* **之前捕获的错误**：如果可能，在修复应用程序中的错误时，编写一个重现该错误的测试。这可以防止错误在系统中重新出现，就像打地鼠游戏一样，修复一个错误可能会导致另一个错误。
* **上下文**：上下文是资源的接口。它们允许您专注于单独测试函数，而无需担心 HTTP 请求/响应周期，并避免设置完整 HTTP 请求/响应周期的开销。它们通常性能更好，因此非常适合覆盖各种测试用例。
* **控制器**：控制器是整个 Web 应用程序的接口。它们需要更多的设置和开销，因此在测试系统时更全面。它们非常适合确保整个功能从客户端的角度按预期工作，而不是应用程序的单个内部部分。

## 功能示例：搜索

为了使测试更具实用性，让我们考虑如何测试搜索功能。搜索将按标题以部分和不区分大小写的方式过滤博客帖子列表。

<!-- livebook:{"break_markdown":true} -->

### 上下文测试

我们希望在测试时考虑 **快乐路径** 和 **边缘情况**。

* 快乐路径：过滤是精确匹配
* 快乐路径：过滤不匹配
* 边缘情况：过滤是部分匹配
* 边缘情况：过滤是不区分大小写
* 边缘情况：过滤是部分匹配且不区分大小写
* 边缘情况：过滤为空

以下是一个成功捕获上述内容的示例测试。它还进一步细分了一些边缘情况，以捕获可能发生的特定失败。

<!-- livebook:{"force_markdown":true} -->

`````elixir
test "list_posts/1 filters posts by partial and case-insensitive title" do
  post = post_fixture(title: "Title")

  # non-matching
  assert Posts.list_posts("Non-Matching") == []
  # exact match
  assert Posts.list_posts("Title") == [post]
  # partial match end
  assert Posts.list_posts("tle") == [post]
  # partial match front
  assert Posts.list_posts("Titl") == [post]
  # partial match middle
  assert Posts.list_posts("itl") == [post]
  # case insensitive lower
  assert Posts.list_posts("title") == [post]
  # case insensitive upper
  assert Posts.list_posts("TITLE") == [post]
  # case insensitive and partial match
  assert Posts.list_posts("ITL") == [post]
  # empty
  assert Posts.list_posts("") == [post]
end
`````
  
<!-- livebook:{"force_markdown":true} -->

### 控制器测试

控制器测试允许我们测试应用程序如何处理 HTTP 操作。在这种情况下，我们可能会测试当用户访问带有 `title` 查询参数的帖子页面 http://localhost:4000/posts?title=Title 时，应用程序如何过滤帖子列表。

以下是一个控制器测试示例。

<!-- livebook:{"force_markdown":true} -->

```elixir
test "search for posts - non-matching", %{conn: conn} do
  post = post_fixture(title: "some title")
  conn = get(conn, ~p"/posts", title: "Non-Matching")
  refute html_response(conn, 200) =~ post.title
end

test "search for posts - exact match", %{conn: conn} do
  post = post_fixture(title: "some title")
  conn = get(conn, ~p"/posts", title: "some title")
  assert html_response(conn, 200) =~ post.title
end
```

我们只包含了精确匹配和不匹配过滤的情况，但您可以扩展此测试套件以包括其他边缘情况。

<!-- livebook:{"force_markdown":true} -->

```elixir
test "search for posts - partial match", %{conn: conn} do
  post = post_fixture(title: "some title")
  conn = get(conn, ~p"/posts", title: "itl")
  assert html_response(conn, 200) =~ post.title
end
```

请注意，每个测试需要更多的设置，因此更冗长，以覆盖更多的边缘情况。在许多情况下，如果我们全面单元测试上下文，我们可以满足于在控制器中进行更少的集成测试。

<!-- livebook:{"break_markdown":true} -->

### 表单怎么办？

控制器测试仅覆盖 HTTP 操作。在上面的示例中，我们可以编写一个控制器来过滤帖子列表，而无需编写带有搜索输入的表单，让用户搜索帖子。

控制器测试 **不能** 测试 UI 交互，例如提交表单。然而，它们可以测试我们期望表单触发的 HTTP 操作。

测试 UI 交互，例如提交表单或点击按钮，最好使用 E2E（端到端）库，例如 [Wallaby](https://github.com/elixir-wallaby/wallaby)。

以下是用户可以使用的示例表单，以发起 GET 请求搜索帖子。

<!-- livebook:{"force_markdown":true} -->

```elixir
<.simple_form :let={f} for={%{}} method={"get"} action={~p"/posts"}>
  <.input field={f[:title]} type="text" label="搜索帖子" />
  <:actions>
    <.button>搜索</.button>
  </:actions>
</.simple_form>
```

## 深入阅读

考虑以下资源以加深您对该主题的理解。

* [Phoenix：测试简介](https://hexdocs.pm/phoenix/testing.html)
* [Phoenix：测试上下文](https://hexdocs.pm/phoenix/testing_contexts.html)
* [Phoenix：测试控制器](https://hexdocs.pm/phoenix/testing_controllers.html)
* [Phoenix：ConnTest](https://hexdocs.pm/phoenix/Phoenix.ConnTest.html)

## 提交您的进度

DockYard Academy 现在建议您使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交您的进度。

```
$ git add .
$ git commit -m "完成测试 Phoenix 阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供付费课程，您可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Testing Phoenix">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/blog_posts.livemd">博客：帖子</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/blog_search.livemd">博客：搜索</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>