# 算术

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:visual, github: "brooklinjazz/visual"},
  {:smart_animation, github: "brooklinjazz/smart_animation"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Arithmetic">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/comments.livemd">评论</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/strings.livemd">字符串</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 整数和浮点数是什么？
* 算术运算符有哪些？
* 运算顺序是什么，如何使用圆括号 `()` 来改变它？

## 概述

**算术**是数学的一个分支，涉及数字的操作。
通常，像 Elixir 这样的函数式编程语言被认为需要高级数学技能。
编程一般也是如此，但尤其是函数式编程。

让我们打破这个神话。虽然某些编程领域确实需要
高级数学技能，但许多并不需要。一般来说，网页开发只需要简单的算术
（加、减、除、乘等），即使如此，我们也让计算机完成大部分
繁重的工作！

请放心，这不会是一门数学课程，绝大多数现实世界的应用也不需要高级数学知识。

计算机最初是为了执行人类无法轻松或根本无法执行的计算而构建的。因此，开箱即用，我们可以进行数学计算。

人类已经构建了 [数学机器](https://www.cs.uah.edu/~rcoleman/Common/History/History.html)
很久了，而运行我们程序的计算机无疑是最强大的！

## 整数

整数是完整的数字，包括负数。

```mermaid
flowchart LR
... --> -5 --> -4 --> -3 --> -2 --> -1 --> 0 --> 1 --> 2 --> 3 --> 4 --> 5 --> 6[...]
```

你可以在程序中直接使用整数。

<!-- livebook:{"force_markdown":true} -->

```elixir
1
1023
1235460
-1
-100
-123512
```

通常你会使用整数来表示年龄、天数、年份、现金值等。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

在下面的 Elixir 单元中，将 `1` 替换为你能想到的最大整数（直到你感到无聊）。

当你重新评估 Elixir 单元时，我们会告诉你这个数字有多少位数。

如果你使用过其他编程语言，你可能会感到惊讶！在 Elixir 中，整数是无界的，意味着它们没有最大大小。

与 JavaScript 等语言形成对比，JavaScript 的最大安全整数大小为 `9007199254740991`。
Elixir 让这个看起来微不足道！

<!-- livebook:{"attrs":"eyJjb2RlIjoiYmlnZ2VzdF9pbnRlZ2VyID0gOTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OSIsInNvdXJjZSI6Iktpbm8uTWFya2Rvd24ubmV3KH5zKFxuaW50ZWdlcjogI3tiaWdnZXN0X2ludGVnZXJ9XFxuXG5kaWdpdHM6ICN7YmlnZ2VzdF9pbnRlZ2VyIHw+IEludGVnZXIuZGlnaXRzKCkgfD4gRW51bS5jb3VudCgpfVxuKSkiLCJ0aXRsZSI6dHJ1ZX0","chunks":null,"kind":"Elixir.Visual","livebook_object":"smart_cell"} -->

```elixir
biggest_integer = 9999999999999999999999999999999999999999999999999999999999999999999999
Kino.Markdown.new(~s(
integer: #{biggest_integer}\n
digits: #{biggest_integer |> Integer.digits() |> Enum.count()}
))

```

你可以在以下动画中看到无界整数的实际效果。观察数字的位数是如何不断增长的！当你确信整数确实是无界的时，请继续下一部分。

为了避免扭曲你的屏幕，我们在 80 位后使用数学符号 $10^{n}$。

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiJTbWFydEFuaW1hdGlvbi5uZXcoMS4uMTAwXzAwMF8wMDAsIGZuIGkgLT5cbiAgbWF4ID0gMTAgKiogODBcbiAgaW50ZWdlcl9kaXNwbGF5ID0gKDEwICoqIGkgPCBtYXggJiYgMTAgKiogaSkgfHwgXCIkMTBeeyN7aX19JFwiXG5cbiAgS2luby5NYXJrZG93bi5uZXcoXCJcIlwiXG4gIGludGVnZXI6ICN7aW50ZWdlcl9kaXNwbGF5fVxcblxuICBkaWdpdHM6ICN7SW50ZWdlci5kaWdpdHMoMTAgKiogaSkgfD4gRW51bS5jb3VudCgpfVxuICBcIlwiXCIpXG5lbmQpIiwidGl0bGUiOiLliqjnlLvmupA6ICjpmpDol486IOS7hemZkOiusuW4iCkifQ","chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
SmartAnimation.new(1..100_000_000, fn i ->
  max = 10 ** 80
  integer_display = (10 ** i < max && 10 ** i) || "$10^{#{i}}$"

  Kino.Markdown.new("""
  integer: #{integer_display}\n
  digits: #{Integer.digits(10 ** i) |> Enum.count()}
  """)
end)
```

## 浮点数

**浮点数**指的是 **浮点数字**。

浮点数用于在程序中表示小数，如 `1.22`、`2.3`、`1.0`，甚至 `0.0`。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
  ... --> -0.0001 --> -0.001 --> -0.01 --> -0.1 --> 0.0 --> 0.1 --> 0.01 --> 0.001 --> 0.0001 --> a[...]
```

<!-- livebook:{"break_markdown":true} -->

你可以像使用整数一样直接在程序中使用浮点数。

<!-- livebook:{"force_markdown":true} -->

```elixir
0.0
3.5
12123.123123123
```

浮点数可以具有不同的 **精度**。浮点数的精度是小数点后数字的数量。

例如，浮点数 `1.2` 的精度为 1，浮点数 `1.22` 的精度为 2。

你通常会使用浮点数来表示百分比。
例如，你可能想将进度条表示为百分比。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

在下面的 Elixir 单元中，尝试将浮点数 `percentage` 更改为 `0.0` 和 `100.0` 之间的任何浮点数，看看加载条是如何变化的！将 `50.0` 替换为你的答案并重新评估单元。

<!-- livebook:{"attrs":"eyJjb2RlIjoicGVyY2VudGFnZSA9IDExMC4wIiwic291cmNlIjoiS2luby5NYXJrZG93bi5uZXcofnMoXG4gIDxkaXYgc3R5bGU9XFxcImhlaWdodDogMjBweDsgd2lkdGg6IDEwMCU7IGJhY2tncm91bmQtY29sb3I6IGdyZXlcXFwiPlxuICA8ZGl2IHN0eWxlPVxcXCJoZWlnaHQ6IDIwcHg7IHdpZHRoOiAje3BlcmNlbnRhZ2V9JTsgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47IGNvbG9yOiB3aGl0ZTtcXFwiPiN7cGVyY2VudGFnZX0lPC9kaXY+XG4gIDwvZGl2PlxuKSkiLCJ0aXRsZSI6dHJ1ZX0","chunks":null,"kind":"Elixir.Visual","livebook_object":"smart_cell"} -->

```elixir
percentage = 110.0
Kino.Markdown.new(~s(
  <div style=\"height: 20px; width: 100%; background-color: grey\">
  <div style=\"height: 20px; width: #{percentage}%; background-color: green; color: white;\">#{percentage}%</div>
  </div>
))

```

### 浮点错误

在进行浮点数计算时要非常小心。

计算机在表示浮点数时精度是有限的。
因此，可能会出现意想不到的结果！

例如，你认为 `1.2 + 1.4` 返回什么？可能是 `2.6` 对吧？不！你会看到实际答案是 `2.5999999999999996` 在下面的 Elixir 单元中。

```elixir
1.2 + 1.4
```

为什么计算机会出现这些错误？这需要对计算机硬件的底层工作原理有相当深入的理解。就我们的目的而言，知道它会发生就足够了。

如果你感兴趣，Computerphile 有一段关于原因的精彩视频。

```elixir
YouTube.new("https://www.youtube.com/watch?v=PZRI1IfStY0")
```

由于这些错误，**不要使用浮点数表示货币**，即使将 `$1.29` 转换为 `1.29` 似乎很直观。

相反，你通常会使用整数来表示美分，因此 `$1.29` 变为 `129`。

另外，[Money 库](https://github.com/elixirmoney/money)
提供了处理货币的工具。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

在下面的 Elixir 单元中，输入一些浮点加法，返回意想不到的结果。

```elixir
2.7+4.2
```

## 算术运算符

使用 **算术运算符**，我们可以加 `+`、减 `-`、乘 `*` 和除 `/`。
我们还有两个特殊的算术运算符，`div/2` 用于整数除法，`rem/2` 用于余数。

算术运算符可以操作正整数、负整数和浮点数。

如前所述，在浮点数的课程中，浮点数的算术运算可能会导致浮点错误。

## 加法

```elixir
7 + 5
```

你可以通过将运算符一个接一个地写来创建整个方程式。只要运算符的左右两侧都有有效的数字（整数或浮点数）。

```elixir
4 + 3 + 2 + 1
```

以下代码将崩溃，因为有一个悬空的 `+` 运算符。错误信息为 [TokenMissingError](https://hexdocs.pm/elixir/TokenMissingError.html) 和 `expression is incomplete`，因为我们没有完成数学表达式。每当我们的代码崩溃时，
Elixir 会通过错误消息告诉你原因。

```elixir
2 +
```

如前所述，将浮点数相加可能会导致浮点错误，因此仅在少量不准确性不是问题时使用它们。

```elixir
1.2 + 1.4
```

你可以在算术表达式中同时使用浮点数和整数。

```elixir
1.2 + 4
```

```elixir
1.5 + 3.5 + 3 + 4.1 + 9
```

你还可以将负数和正数相加。
加上负数等同于减去正数。

```elixir
8 + -9
```

将负数相加可能会让人感觉不直观，因此很少写这样的代码，但知道你可以这样做是有用的。

### 你的回合

在下面的 Elixir 单元中，将两个巨大的数字相加，你无法在脑海中计算。

```elixir

```

## 减法

我们可以使用减号 `-` 运算符来减去数字。

```elixir
20 - 12
```

与加法一样，我们可以以任何组合减去浮点数和整数。

```elixir
2.5 - 10
```

```elixir
10 - 2.5 - 2.1
```

浮点错误仍然可能发生。

```elixir
1.3 - 1.2
```

减去负数等同于加上正数。

```elixir
10 - -1
```

### 你的回合

在下面的 Elixir 单元中，减去两个巨大的数字。

```elixir

```

## 乘法

计算机可以高效地乘以数字。在底层，乘法只是重复加法。例如，`5 * 5` 是 `5 + 5 + 5 + 5 + 5`。

```elixir
10 * 10
```

乘法仍然可能导致浮点错误。

```elixir
2.2 * 2.1
```

你可以将正负整数和浮点数结合在一起进行乘法，就像加法和减法一样。

```elixir
2 * 30 * -2 * 1.4
```

### 你的回合

在下面的 Elixir 单元中，将两个巨大的数字相乘。

```elixir

```

## 除法

我们还可以除以数字。然而，在 Elixir 中有两个除法运算符。
一个是 `/` 运算符，它将始终返回一个 `float`，另一个是 `div` 运算符，
它将始终返回一个 `integer`（向下取整）。

```elixir
10 / 5
```

`div` 是一个函数。你将来会学到更多关于函数的知识。
现在，知道 `div` 允许你将两个数字相除就足够了。

```elixir
div(10, 5)
```

请记住，`div` 总是向下取整，因此 `1.5` 变为 `1`。

```elixir
div(3, 2)
```

在任何计算机程序中，数字的精度是有限的，因此在使用不能整除的分数时要小心。你也可能会遇到在浮点数课程中讨论的相同浮点计算问题。

例如，注意 `10 / 3` 是 `3.3333333333333335`。

```elixir
10 / 3
```

### 你的回合

在下面的 Elixir 单元中，使用 `/` 将 `223` 除以 `71`，得到一个接近 `3.14` 的值。

```elixir

```

使用 `div` 将 `100` 除以 `3`。你的答案应该是 `33`。

```elixir

```

## 指数

Elixir 中的指数运算符是 `**`。

这意味着 `10 ** 2` 是 10 的平方。数学上这与 `10 * 10` 是相同的。

`10 ** 3` 意味着 `10 * 10 * 10`。如果你想要更深入的指数解释，Khan Academy 有一段视频。

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiJZb3VUdWJlLm5ldyhcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WFpSUWhraWkwaDBcIikiLCJ0aXRsZSI6IuaMh+aVsOS7i+e7jSJ9","chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=XZRQhkii0h0")
```

```elixir
10 ** 2
```

### 你的回合

在下面的 Elixir 单元中，使用 `**` 运算符计算 `10` 的 `214` 次方。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
10 ** 214
```

</details>

```elixir
10**214
```

## BEDMAS

Elixir 中的计算遵循 **BEDMAS** 运算顺序。
**BEDMAS** 代表括号、指数、除法、乘法、加法和减法。

这意味着以下表达式将先计算 `5 * 2`，再计算 `5 + 5`。

<!-- livebook:{"force_markdown":true} -->

```elixir
5 + 5 * 2
```

所以它首先计算为。

```elixir
5 + 10
```

得到结果 15。

```elixir
15
```

这是同一语句在 Elixir 单元中的样子，以便你确认结果是 15。

```elixir
5 + 5 * 2
```

如果从左到右计算，结果将是 20。

<!-- livebook:{"force_markdown":true} -->

```elixir
5 + 5 * 2
10 * 2
20
```

你可能会注意到 **B** 在 BEDMAS 中代表括号。你可以在程序中使用括号来覆盖运算顺序。

<!-- livebook:{"force_markdown":true} -->

```elixir
(5 + 5) * 2
(10) * 2
20
```

这是同一语句在 Elixir 单元中的样子，以便你确认结果是 20。

```elixir
(5 + 5) * 2
```

### 你的回合

在下面的 Elixir 单元中，
使用括号 `()` 来改变下面表达式的返回值，使其为 `200` 而不是 `110`。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
(10 + 10) * 10
```

</details>

```elixir
10 + 10 * 10
```

## 余数

余数是将一个数字除以另一个数字时剩下的部分。
例如，如果你将 `5` 除以 `2`，余数是 `1`。

这是因为 `2` 可以进入 `5` 两次，留下余数 `1`。

如果你不熟悉余数，这里有一段 Khan Academy 的视频。

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiJZb3VUdWJlLm5ldyhcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UDFxeWpkaF9zSXdcIilcbiIsInRpdGxlIjoi5L2Z5pWw5LuL57uNIn0","chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=P1qyjdh_sIw")

```

```elixir
rem(5, 2)
```

在编程中，我们可以使用余数来检查一个数字是否能被另一个数字整除。
例如，如果 `rem(number, 2)` 等于 `0`，则该数字为偶数。

```elixir
rem(6, 2)
```

而奇数将有余数 `1`。

```elixir
rem(5, 2)
```

你还可以使用余数在数字之间循环，但当达到限制时再重置为 0。你现在不需要知道如何做到这一点，但在未来的课程中会很有帮助。

这里有一个动画，展示了一个增长的数字除以 10 的余数，以帮助你可视化这个效果。

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiJTbWFydEFuaW1hdGlvbi5uZXcoMS4uMTAwXzAwMF8wMDAsIGZuIGkgLT5cbiAgS2luby5NYXJrZG93bi5uZXcoXCJcIlwiXG4gIGBgYGVsaXhpclxuICByZW0oI3tpfSwgMTApID0gI3tyZW0oaSwgMTApfVxuICBgYGBcbiAgXCJcIlwiKVxuZW5kKSIsInRpdGxlIjoi5Yqo55S75rqQICjpmpDol486IOS7hemZkOiusuW4iCkifQ","chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

````elixir
SmartAnimation.new(1..100_000_000, fn i ->
  Kino.Markdown.new("""
  ```elixir
  rem(#{i}, 10) = #{rem(i, 10)}
  ```
  """)
end)
````

### 你的回合

使用 `rem/2` 找出 `10` 除以 `3` 的余数。

```mermaid
flowchart
1
2
3
4
5
6
7
8
9
10

style 1 fill:lightgreen
style 2 fill:lightgreen
style 3 fill:lightgreen
style 4 fill:lightyellow
style 5 fill:lightyellow
style 6 fill:lightyellow
style 7 fill:lightcoral
style 8 fill:lightcoral
style 9 fill:lightcoral
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
rem(10, 3)
```

</details>

在下面输入你的解决方案。

```elixir
rem(10, 3)
```

## 进一步阅读

考虑以下资源以加深你对该主题的理解。

* [Elixir-lang: 基本算术](https://elixir-lang.org/getting-started/basic-types.html#basic-arithmetic)
* [ElixirSchool: 整数](https://elixirschool.com/en/lessons/basics/basics/#integers-4)
* [Exercism: 整数](https://exercism.org/tracks/elixir/concepts/integers)
* [Exercism: 浮点数](https://exercism.org/tracks/elixir/concepts/floating-point-numbers)

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成算术阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一门付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Arithmetic">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/comments.livemd">评论</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/strings.livemd">字符串</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
