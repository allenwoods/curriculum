# 可执行文件

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Executables">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/games_documentation_and_static_analysis.livemd">游戏：文档与静态分析</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/games_menu.livemd">游戏：菜单</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 如何将项目配置为可执行脚本？

## 可执行文件

我们可以使用 escript 将 mix 项目配置为可执行脚本。

配置完成后，我们可以使用项目文件夹中的可执行文件运行 mix 项目。

```
./project_name
```

为了演示如何配置可执行文件，我们将创建一个简单的 `greeting` 可执行文件，它会打印早安消息。

创建一个新的 mix 项目。

```
$ mix new greeting
```

首先，我们需要定义一个带有 `main/1` 函数的模块。这个函数将是可执行文件触发的内容。
我们可以修改现有的 `Greeting` 模块，在 `lib/greeting.ex` 中。

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Greeting do
  def main(_args) do
    IO.puts("Good morning!")
  end
end
```

<!-- livebook:{"break_markdown":true} -->

<div style="background-color: orange; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;">
删除 doctests 和现有的 `test` 宏，以确保在运行 `mix test` 时所有测试都通过。
</div>

## 可执行文件配置

在任何 mix 项目中，我们可以使用 `mix.exs` 文件中的 `:escript` 选项配置可执行文件。
将 `:escript` 配置添加到现有的 `project/0` 函数中。

我们在 `Greeting` 模块中定义了 `main/1` 函数，因此我们将其作为 `:main_module` 提供。

<!-- livebook:{"force_markdown":true} -->

```elixir
def project do
  # 确保保留现有配置
  escript: [main_module: Greeting]
end
```

现在我们必须从 `greeting` 文件夹构建可执行脚本。

```
$ mix escript.build
```

执行脚本以查看早安消息。

```
$ ./greeting
Good morning!
```

## 解析参数

我们可以使用 `--arg_name` 标志向可执行脚本提供参数。标志可以为空，或者可以有一个值 `--arg_name=true`。

Elixir 提供了一个 [OptionParser](https://hexdocs.pm/elixir/OptionParser.html) 模块来将提供给脚本的参数解析为 Elixir 术语。

```elixir
OptionParser.parse(["--flag=true"], switches: [flag: :boolean])
```

如果给定 `:boolean` 类型，则标志在提供时默认为 true。

```elixir
OptionParser.parse(["--flag=true"], switches: [flag: :boolean])
```

或者我们可以将其设置为 false。

```elixir
OptionParser.parse(["--flag=false"], switches: [flag: :boolean])
```

参数可以具有不同的 [类型](https://hexdocs.pm/elixir/OptionParser.html#parse/2-types)，例如 `:boolean`、`:count`、`:integer`、`:float` 和 `:string`。

```elixir
OptionParser.parse(["--time=hello"], switches: [time: :string])
```

```elixir
OptionParser.parse(["--name=hello"], switches: [name: :string])
```

例如，我们可以使用 `--time` 标志根据一天中的时间更改问候语。

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Greeting do
  def main(args) do
    {opts, _word, _errors} = OptionParser.parse(args, switches: [time: :string])
    IO.puts("Good #{opts[:time] || "morning"}!")
  end
end
```

<!-- livebook:{"break_markdown":true} -->

现在重新构建脚本，您可以使用 `--time` 标志自定义消息。

```
$ mix escript.build
$ ./greeting --time="evening"
Good evening!
```

<!-- livebook:{"break_markdown":true} -->

### 轮到你了

创建一个 `--upcase` 标志，将问候语大写，使得 `"Good morning!"` 变为 `GOOD MORNING!`。

## 提交你的进展

DockYard Academy 现在建议您使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交您的进展。

```
$ git add .
$ git commit -m "finish Executables reading"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供付费课程，您可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Executables">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/games_documentation_and_static_analysis.livemd">游戏：文档与静态分析</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/games_menu.livemd">游戏：菜单</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
