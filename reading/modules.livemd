# 模块

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Modules">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/rock_paper_scissors.livemd">石头剪子布</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/structs.livemd">结构体</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 如何定义一个模块？
* 如何使用公共与私有命名函数？
* 什么是作用域，它与模块有什么关系？
* 什么是函数的元数？
* 如何阅读模块文档并运行文档测试？

## 模块

随着你创建越来越多的函数，组织它们变得必要。这只是使用**模块**的众多原因之一。模块或多或少是一个“函数的集合”。我们用它们来组织和分组相关的函数。

我们使用 `defmodule` 关键字来定义一个模块，如下所示。

```elixir
defmodule MyModule do
end
```

不要担心输出 `{:module, MyModule, <<70, 79, 82, 49, 0, 0, 4, ...>>, nil}`。这只是 Elixir 内部表示模块的方式，对我们的理解并不重要。

让我们分解一下上面的代码。

1. `defmodule` 是一个关键字，意思是“定义模块”。
2. `MyModule` 是这个模块的名称。它可以是任何有效的名称，并且应该是 **CapitalCase**，通常称为 **PascalCase**。
   你会经常听到模块的名称被称为函数组织的 **命名空间**。
3. `do` 是一个关键字，用于分隔模块名称和其内部实现。
4. `end` 是一个关键字，用于结束模块定义。

模块在内部定义函数。每个函数都有一个名称，因此它们被称为 **命名函数**。
你可以使用以下语法在模块内部定义函数。

```elixir
defmodule ModuleName do
  def function_name do
    "return value"
  end
end
```

让我们分解一下上面的命名函数。

1. `def` 这意味着“定义函数”。在这个例子中，函数名称是 `function_name`，但它可以是任何有效的函数名称。
2. `do` 是一个关键字，用于分隔函数头和函数体。
3. `"return value"` 这是函数体。这个函数返回字符串 `"return value"`，但它可以返回任何 Elixir 术语。
4. `end` 是一个关键字，用于结束函数定义。

## 调用命名函数

要调用命名函数，你使用圆括号 `()`。

```elixir
ModuleName.function_name()
```

### 参数与参数

你可以在调用函数时提供 **参数**。这些参数绑定到函数定义中的 **参数**。

```elixir
defmodule ArgsAndParamsExample do
  def call(param) do
    IO.inspect(param, label: "使用以下参数调用")
  end
end

ArgsAndParamsExample.call("argument")
```

### 多个参数与参数

你可以在函数中定义多个参数，每个参数用逗号分隔。参数的命名规则与变量相同。

我们可以使用 `binding()` 来获取所有绑定值的关键字列表。我们通常使用它来方便地检查我们的代码。

```elixir
defmodule MultiParamExample do
  def call(param1, param2, param3) do
    IO.inspect(binding(), label: "使用以下绑定调用")
  end
end
```

### 轮到你了

使用不同的参数调用 `MutliParamExample.call/3` 函数。

```elixir

```

## 内部模块函数

模块可以在不使用模块名称的情况下使用其自己的函数。

```elixir
defmodule InternalExample do
  def internal do
    IO.inspect("内部被调用")
  end

  def public do
    InternalExample.internal()
    internal()
    "公共执行完毕"
  end
end

InternalExample.public()
```

模块外部的世界必须使用模块名称来知道执行哪个函数。

```elixir
InternalExample.public()
```

在模块内部，模块名称是可选的。然而，当在模块外部使用模块的函数时，我们必须包含模块名称。例如，以下将引发错误。

```elixir
public()
```

## 私有函数

模块可以访问其他模块的函数。

```elixir
defmodule Speaker do
  def speak() do
    "嗨，你好"
  end
end

defmodule Listener do
  def listen() do
    "我听到你说: " <> Speaker.speak()
  end
end

Listener.listen()
```

然而，有时模块必须将函数保持为私有，仅供内部使用。这可能出于安全原因，或者因为你认为该函数不应该在任何地方使用，除了内部。
通常它向其他开发者传达如何使用你的模块。

你可以使用 `defp` 而不是 `def` 创建一个私有模块函数。你会注意到下面的 `Speaker.think/0` 函数对外部世界是未定义的。

```elixir
defmodule PrivateThoughts do
  defp think() do
    "我真的想说嗨..."
  end
end

PrivateThoughts.think()
```

我们在模块内部使用私有函数，这意味着公共函数可以暴露它们的值。

```elixir
defmodule ThoughtfulSpeaker do
  defp think() do
    IO.inspect("我真的想说嗨...")
  end

  def speak() do
    think()
    "嗨，你好"
  end
end

ThoughtfulSpeaker.speak()
```

## 回调函数

类似于匿名函数，我们可以将命名函数作为回调函数传递，但我们必须使用捕获运算符 `&` 显式提供函数的元数。

```elixir
defmodule HigherOrder do
  def higher_order_function(callback) do
    callback.()
  end
end

defmodule Callback do
  def callback_function do
    "我被调用了！"
  end
end

HigherOrder.higher_order_function(&Callback.callback_function/0)
```

注意我们不能简单地将 `Callback.callback_function` 作为参数传递。

```elixir
HigherOrder.higher_order_function(Callback.callback_function())
```

另外，我们可以将回调函数包装在匿名函数中。

```elixir
HigherOrder.higher_order_function(fn -> Callback.callback_function() end)
```

## 命名空间

你可以使用模块将函数组织在一个单一的 **命名空间** 下。
这允许你创建许多独特的命名空间，每个命名空间都有自己的函数，以组织
程序的功能。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  A[命名空间]
  B[命名空间]
  C[命名空间]
  A1[函数]
  A2[函数]
  A3[函数]
  B1[函数]
  B2[函数]
  B3[函数]
  C1[函数]
  C2[函数]
  C3[函数]
  A --> A1
  A --> A2
  A --> A3
  B --> B1
  B --> B2
  B --> B3
  C --> C1
  C --> C2
  C --> C3
```

<!-- livebook:{"break_markdown":true} -->

### 子模块

有时你需要进一步拆分模块中的函数。这可能是因为模块太大，或者因为模块有多个独立的责任，分开它们更清晰。

```mermaid
flowchart
  Module --> SubModule
  SubModule --> a[函数]
  SubModule --> b[函数]
  SubModule --> c[函数]
```

要创建子模块，你可以用句点 `.` 分隔模块名称。

```elixir
defmodule Languages.English do
  def greeting do
    "你好"
  end
end

Languages.English.greeting()
```

### 轮到你了

在 `Languages` 模块下创建一个子模块，包含一个 `greeting/0` 函数，返回另一种语言的问候。你可以选择语言和子模块的名称。

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule Languages.Spanish do
  def greeting do
    "Hola"
  end
end
```

</details>

在下面输入你的解决方案。

```elixir

```

### 嵌套模块

虽然不常见，但也可以在另一个模块内部定义模块。这将自动嵌套命名空间。

```elixir
defmodule NestedLanguages do
  defmodule English do
    def greeting do
      "你好"
    end
  end

  defmodule Spanish do
    def greeting do
      "Hola"
    end
  end
end
```

```elixir
NestedLanguages.English.greeting()
```

```elixir
NestedLanguages.Spanish.greeting()
```

## 模块属性

虽然模块主要用于分组函数，但我们也可以在模块中包含 **编译时** 数据，供我们的函数使用。

我们使用 `@` 符号定义编译时模块属性。

```elixir
defmodule Hero do
  @name "蜘蛛侠"
  @nemesis "绿魔"

  def introduce do
    "你好，我的名字是 #{@name}!"
  end

  def catchphrase do
    "我是你友好的邻居 #{@name}!"
  end

  def defeat do
    "我 #{@name} 将打败你 #{@nemesis}!"
  end
end
```

```elixir
Hero.introduce()
```

```elixir
Hero.catchphrase()
```

```elixir
Hero.defeat()
```

我们可以使用模块属性来避免显著的代码重复，其中许多函数都需要使用相同的值。

<!-- livebook:{"break_markdown":true} -->

### 轮到你了

将上面 `Hero` 模块的模块属性更改为你最喜欢的超级英雄和反派。重新评估 `Hero` 模块，然后重新评估每个函数调用以查看输出变化。

## 模块作用域

模块和函数将自己封闭在外部世界。我们称之为 `作用域`。
模块、函数和 Elixir 中许多其他类似构造都是 [词法作用域](https://en.wikipedia.org/wiki/Scope_(computer_science))。

这意味着在一个作用域中定义的变量不能在另一个作用域中访问。

```mermaid
  flowchart
    subgraph 顶级作用域
      A[顶级变量]
      subgraph 模块作用域
        B[模块变量]
        subgraph 函数作用域
          C[函数变量]
        end
      end
    end
```

注意以下示例有一个错误，因为我们无法访问变量 `top_level_scope`。

```elixir
top_level_scope = 1

defmodule ModuleScope1 do
  def function_scope do
    top_level_scope
  end
end
```

模块作用域也是如此。然而，在模块作用域中绑定变量并不常见。通常我们使用模块属性。

```elixir
defmodule ModuleScope2 do
  module_scope = 2

  def function_scope do
    module_scope
  end
end
```

要使用变量，它必须在同一作用域中绑定。

```elixir
top_level_scope = "顶级作用域"
IO.inspect(top_level_scope)

defmodule CorrectModuleScope do
  module_scope = "模块作用域"
  IO.inspect(module_scope)

  def function_scope do
    function_scope = "函数作用域"
    IO.inspect(function_scope)
  end
end

CorrectModuleScope.function_scope()
```

## 多个函数子句

Elixir 允许我们定义多个具有相同名称但期望不同参数的函数，或者具有不同的元数或不同的值。

```elixir
defmodule MultipleFunctionClauses do
  def my_function do
    "元数是 0"
  end

  def my_function(_param1) do
    "元数是 1"
  end

  def my_function(_param1, _param2) do
    "元数是 2"
  end
end

MultipleFunctionClauses.my_function(1)
```

每个函数子句具有不同的 **元数**。我们可以将每个具有不同元数的函数视为完全独立的函数。在 Elixir 中，我们通常通过名称和元数来引用函数。

因此，上面我们定义了 `MultipleFunctionClauses.my_function/0`、`MultipleFunctionClauses.my_function/1` 和 `MultipleFunctionClauses.my_function/2` 函数。

<!-- livebook:{"break_markdown":true} -->

### 轮到你了

创建一个 `Math` 模块，包含 `add/2` 和 `add/3` 函数。每个函数都应将其所有参数相加。

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(2, 5) # 7
Math.add(1, 2, 3) # 6
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
defmodule Math do
  def add(int1, int2, int3) do
    int1 + int2 + int3
  end

  def add(int1, int2) do
    int1 + int2
  end
end
```

</details>

```elixir

```

## 默认参数

你可以使用 `\\` 语法在参数后提供默认参数，然后是默认值。

```elixir
defmodule DefaultArgsExample do
  def call(param \\ "默认参数") do
    param
  end
end

DefaultArgsExample.call()
```

如果需要，你可以覆盖默认值。

```elixir
DefaultArgsExample.call("覆盖的参数")
```

多个参数可以具有默认值。

```elixir
defmodule MultipleDefaultArgs do
  def all_defaults(param1 \\ "默认参数 1", param2 \\ "默认参数 2") do
    binding()
  end

  def some_defaults(param1 \\ "默认参数 1", param2) do
    binding()
  end
end
```

```elixir
MultipleDefaultArgs.all_defaults()
```

我们甚至可以仅为函数中的某些参数提供默认参数。

```elixir
MultipleDefaultArgs.some_defaults("覆盖的参数")
```

这有时会导致函数的元数与传递给函数的参数数量之间的混淆。例如，上面的 `MultipleDefaultArgs.some_defaults/2` 函数的元数为 `2`，尽管只用一个参数调用。

<!-- livebook:{"break_markdown":true} -->

### 轮到你了

在 Elixir 单元中定义一个 `Greeting` 模块，包含一个使用默认参数的 `hello/1` 函数。`hello/1` 函数应返回 `Hello name!`，其中 `name` 是你选择的某个默认值。

<!-- livebook:{"force_markdown":true} -->

```elixir
Greeting.hello()
"Hello Jon!"

Greeting.hello("Andrew")
"Hello Andrew!"
```

```elixir

```

## 文档

我们可以使用 `@doc` 和 `@moduledoc` 模块属性来记录模块，使用多行字符串。

`@moduledoc` 应该高层次地描述模块。`@doc` 应该记录模块中的单个函数。

```elixir
defmodule DocumentedModule do
  @moduledoc """
  文档模块

  模块的解释
  """

  @doc """
  文档函数 1 的解释
  """
  def documented_function1 do
  end

  @doc """
  文档函数 2 的解释
  """
  def documented_function2 do
  end
end
```

### 文档测试

文档中通常包含代码应如何行为的示例。Livebook 会自动运行这些示例，以确保模块正常工作。

通过在文档中的一行前加上 `iex>`，我们声明该代码示例应可执行。这代表了 [IEx Shell](./iex.livemd)，我们将在未来的课程中进一步学习。

我们通常使用这些文档测试为练习提供测试反馈。你会希望熟悉阅读这些反馈。

```elixir
defmodule DoctestExample do
  @moduledoc """
  文档测试示例

  解释文档测试及其示例
  """

  @doc """
  返回一个人的个性化问候。

  ## 示例

    iex> DoctestExample.hello()
    "Hello Jon!"

    iex> DoctestExample.hello("Bill")
    "Hello Bill!"
  """
  def hello(name \\ "Jon") do
    "Hello #{name}!"
  end
end
```

### 失败的文档测试

如果文档测试失败，你会看到失败消息和解释原因。

```elixir
defmodule DoctestFailure do
  @moduledoc """
  文档测试失败

  解释文档测试失败及其示例
  """

  @doc """
  故意失败的文档测试

  ## 示例

    iex> DoctestFailure.test()
    "预期返回值"
  """
  def test do
    "实际返回值"
  end
end
```

结果显示有关测试失败的位置的信息，以及函数的预期与实际结果。

你可以使用这些反馈来调试你的练习。

<!-- livebook:{"break_markdown":true} -->

### 轮到你了

修复失败的 `DoctestFailure` 模块，以使其文档测试通过。

<!-- livebook:{"break_markdown":true} -->

### 崩溃的文档测试

不幸的是，如果文档测试导致代码崩溃，通常不会显示格式良好的测试结果。相反，它将崩溃 Livebook，或导致测试不运行。

如果是这种情况，你要么必须修复代码，要么删除/注释崩溃的文档测试。

### 轮到你了

取消注释以下代码并评估单元，以查看示例。重新注释你的代码，以避免在继续学习时崩溃 Livebook。

```elixir
# defmodule DoctestCrash Do
# @moduledoc """
# 文档测试崩溃

# 解释文档测试崩溃及其示例
# """

# @doc """
# 故意通过无效模式匹配崩溃文档测试

# ## 示例

# iex> {} = DoctestCrash.crash()
# "2"
# """
# def crash do

# end
# end
```

### 轮到你了

使用 `@doc` 和 `@moduledoc` 来记录你之前在本课中创建的 `Math` 模块。

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成模块阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Modules">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/rock_paper_scissors.livemd">石头剪子布</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/structs.livemd">结构体</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>