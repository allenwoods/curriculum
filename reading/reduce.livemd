# 减少

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:smart_animation, github: "brooklinjazz/smart_animation"},
  {:visual, github: "brooklinjazz/visual"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Reduce">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/comprehension_search.livemd">理解产品搜索</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/number_finder.livemd">数字查找器</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

* 何时使用 `map`、`filter` 和 `reduce`？
* 如何使用 reduce 构建一个累积值？

## 概述

Reduce 是一个非常强大的工具，可以在各种情况下使用。

> Reduce（有时称为 fold）是函数式编程中的基本构建块。几乎所有的 Enum 模块中的函数都可以在 reduce 的基础上实现。这些函数通常依赖于其他操作，例如 Enum.reverse/1，这些操作由运行时优化。
> 
> * [HexDocs](https://hexdocs.pm/elixir/Enum.html#reduce/3)

如果你想了解更多关于 reduce 的信息，可以观看 Paul Fioravanti 的 [优秀视频](https://github.com/paulfioravanti/presentations/tree/master/everything_is_reduce)。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=OQrfedclHfk\")","title":"Everything Is Reduce"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=OQrfedclHfk")
```

## 输入 -> 输出

正如我们所看到的，其他 [Enum](https://hexdocs.pm/elixir/Enum.html) 函数，例如 [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) 或 [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2)，将集合作为输入并生成列表作为输出。

```mermaid
flowchart LR
C1[集合] --> Enum.map/2 --> L1[列表]
C2[集合] --> Enum.filter/2 --> L2[列表]
```

Reduce 允许你接受任何集合并生成 **任何** 输出。这是非常强大的。

```mermaid
flowchart LR
C1[集合] --> Enum.reduce/3 --> 任何东西!!!
```

每当你有一个集合，并想生成一个非列表的输出时，[Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 可能是合适的工具。

## 构建累加器

[Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 通过遍历集合并构建一个累加器来工作。我们不是对集合中的每个元素应用更改，而是通过对每个元素应用回调函数来转换累加器。

例如，我们可以在回调函数的主体中简单地返回 `0`，以将此值作为累加器返回。

```elixir
Enum.reduce(1..3, 0, fn _integer, _acc -> 0 end)
```

在 [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 的每一步中，我们创建一个新的累加器 `0`。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart TB
  subgraph 累加器
  direction TB
    A1 --> A2 --> A3
  end
  subgraph 元素
    direction TB
    1 --> 2 --> 3
  end
  A1[0]
  A2[0]
  A3[0]
```

<!-- livebook:{"break_markdown":true} -->

### [字谜](../exercises/anagram.livemd)

让我们看一个更实际的例子，取一个集合并返回一个非列表的输出。

在你之前完成的 [字谜](../exercises/anagram.livemd) 练习中，你构建了一个 `Anagram.anagram?/2` 函数来确定两个字符串是否是字谜。解决这个问题的一种方法是构建一个存储两个字符串字符计数的映射。

例如，要确定 `"state"` 和 `"taste"` 是否是彼此的字谜，我们可以将它们转换为以下映射，记录每个字符的计数，并检查它们是否相等。请记住，映射中的顺序无关紧要。

```elixir
%{"s" => 1, "t" => 2, "a" => 1, "e" => 1} == %{"t" => 2, "a" => 1, "s" => 1, "e" => 1}
```

我们可以使用 [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 将字符串转换为字符计数的映射。对于字符串中的每个字符，我们将构建一个带有更新键的新映射。

以下是我们为字符串 `"aba"` 构建累加器的方式。

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart TB
  A1["%{''a'' => 1}"]
  A2["%{''a'' => 1, ''b'' => 1}"]
  A3["%{''a'' => 2, ''b'' => 1}"]

  subgraph 累加器
    direction TB
    A1 --> A2 --> A3
  end
  subgraph 元素
    direction TB
    a1[a] --> b --> a2[a]
  end
```

<!-- livebook:{"break_markdown":true} -->

我们可以使用 [Map.update/4](https://hexdocs.pm/elixir/Map.html#update/4) 初始化或更新映射中的值。如果没有现有的键，它将使用提供的默认值初始化映射键。

```elixir
updated_map = Map.update(%{}, :key, "default value", fn current -> "updated: #{current}" end)
```

如果有现有的键，则可以使用现有值更新映射键。

```elixir
Map.update(updated_map, :key, "default value", fn current -> "updated: #{current}" end)
```

在将字符串转换为字符计数的映射时，如果没有键，值将为 `1`。如果映射中存在现有键，则值将是当前值加 `1`。以下是我们希望为 [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 函数完成的步骤。

```elixir
initial_accumulator = %{}
```

```elixir
step1 = Map.update(initial_accumulator, "a", 1, fn current_value -> current_value + 1 end)
```

```elixir
step2 = Map.update(step1, "b", 1, fn current_value -> current_value + 1 end)
```

```elixir
step3 = Map.update(step2, "a", 1, fn current_value -> current_value + 1 end)
```

将这一切结合在一起，这里是 [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 函数，让我们将字符串转换为带有字符计数的映射。请注意，我们必须先将字符串拆分为字符列表，以使其可枚举。

```elixir
split_string = String.split("aba", "", trim: true)

Enum.reduce(split_string, %{}, fn char, map_accumulator ->
  Map.update(map_accumulator, char, 1, fn current -> current + 1 end)
end)
```

### 你的回合

使用 [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) 将整数 `1234321` 转换为数字计数的映射。

<!-- livebook:{"force_markdown":true} -->

```elixir
%{1 => 2, 2 => 2, 3 => 2, 4 => 1}
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
digits = Integer.digits(1_234_321)

Enum.reduce(digits, %{}, fn integer, acc ->
  Map.update(acc, integer, 1, fn current -> current + 1 end)
end)
```

</details>

```elixir

```

## 多个累加器

使用集合数据类型来模拟多个累加器是 reduce 的一个技巧。

以下是将范围分为偶数和奇数的示例。

```elixir
Enum.reduce(1..10, {[], []}, fn integer, {evens, odds} ->
  if rem(integer, 2) == 0 do
    {[integer | evens], odds}
  else
    {evens, [integer | odds]}
  end
end)
```

从技术上讲，只有一个实际的累加器，即我们包含两个列表的元组。然而，这种方式可以在 reduce 操作中的每次枚举中跟踪多个值。

## 进一步阅读

考虑以下资源以加深你对该主题的理解。

* [Elixir 学校：Reduce](https://elixirschool.com/en/lessons/basics/enum#reduce-9)
* [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2)
* [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3)

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成 Reduce 阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Reduce">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/comprehension_search.livemd">理解产品搜索</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/number_finder.livemd">数字查找器</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>