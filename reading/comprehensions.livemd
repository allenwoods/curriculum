# 列表推导

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comprehensions">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/non_enumerables.livemd">非可枚举</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/palindrome.livemd">回文</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 何时使用列表推导与 [Enum](https://hexdocs.pm/elixir/Enum.html)？
* 如何使用生成器、过滤器和可收集对象创建列表推导？

## 概述

### 列表推导

列表推导是一种方便的方式，通过迭代现有集合并应用一组变换来创建新的列表、映射或集合。它们类似于 [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2)、[Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) 和 [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) 函数，但语法更简洁。

<!-- livebook:{"break_markdown":true} -->

### 生成器

生成器是一个可枚举对象，列表推导将对其进行枚举以生成一些输出。

```elixir
generator = 1..3

for element <- generator do
  element * 2
end
```

### 过滤器

过滤器是一个真/假条件，生成器使用它来确定哪些元素应该保留。

```elixir
for element <- 1..3, element >= 2 do
  element
end
```

### 可收集对象

默认情况下，列表推导将结果收集到一个列表中。然而，我们可以使用 `:into` 收集器指定收集结果的数据结构。

```elixir
for element <- 1..3, into: "" do
  "#{element}"
end
```

## 列表推导

让我们尝试理解列表推导..抱歉 🤦‍♂️。

但说正经的，如果你来自其他编程语言，你可能会把列表推导误认为是 **for 循环**。情况并非如此！请注意，下面的列表推导返回一个列表。

```elixir
for each <- 1..100 do
  each * 2
end
```

由于列表推导有返回值，因此可以将其绑定到一个变量并在其他地方使用。

```elixir
my_comprehension =
  for each <- 1..10 do
    each * 2
  end

List.to_tuple(my_comprehension)
```

列表推导甚至可以通过管道传递给另一个函数。这通常不是惯用法，但这是可能的。

```elixir
for each <- 1..10 do
  each * 2
end
|> List.to_tuple()
```

在没有不可变性的面向对象编程语言中，通常使用 for 循环来改变某个变量。在 Elixir 中我们不这样做！请注意，下面的 `sum` 仍然是 0。

```elixir
sum = 0

for each <- 1..100 do
  sum = sum + each
end

sum
```

那么，列表推导有什么用呢？目前，我们可以使用 [Enum](https://hexdocs.pm/elixir/Enum.html) 模块实现相同的行为。

```elixir
Enum.map(1..100, fn each -> each * 2 end)
```

列表推导是语法糖。这意味着虽然它看起来更简洁，但并不提供任何额外的行为。[Enum](https://hexdocs.pm/elixir/Enum.html) 模块和列表推导可以实现相同的行为。

列表推导分为三个部分：**生成器**、**过滤器**和**可收集对象**。

## 生成器

在以下示例中，生成器是 `n <- 1..100`，它定义了要枚举的集合。

```elixir
for n <- 1..100 do
  n
end
```

我们还可以在生成器中使用模式匹配来忽略不匹配的值。

```elixir
for {:keep, value} <- [keep: 1, keep: 2, filter: 1, filter: 3] do
  value
end
```

这就是列表推导变得酷炫并停止看起来像循环的地方。你可以在单个列表推导中使用多个以逗号分隔的生成器。

列表推导将每个额外的生成器视为嵌套循环。对于第一个循环中的每个元素，它将枚举第二个循环中的每个元素。

```elixir
for a <- 1..3, b <- 4..6 do
  {a, b}
end
```

```mermaid
flowchart
  subgraph D[生成器 2]
    4a[4]
    5a[5]
    6a[6]
  end
  subgraph C[生成器 2]
    4b[4]
    5b[5]
    6b[6]
  end
  subgraph B[生成器 2]
    4c[4]
    5c[5]
    6c[6]
  end
  subgraph A[生成器 1]
    1 --> B
    2 --> C
    3 --> D
  end

```

<!-- livebook:{"break_markdown":true} -->

我们甚至可以在下一个生成器中使用一个生成器的元素。

```elixir
for a <- 1..3, b <- a..0 do
  {a, b}
end
```

```mermaid
flowchart
  subgraph D[生成器 2]
    1a[1]
    0a[0]
  end
  subgraph C[生成器 2]
    2b[2]
    1b[1]
    0b[0]
  end
  subgraph B[生成器 2]
    3c[3]
    2c[2]
    1c[1]
    0c[0]
  end
  subgraph A[生成器 1]
    1 --> D
    2 --> C
    3 --> B
  end

```

<!-- livebook:{"break_markdown":true} -->

生成器的数量没有实际限制，但每个生成器都会创建另一个嵌套循环，因此会对性能产生显著影响。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

在下面的 Elixir 单元中，使用生成器 `1..50` 创建一个从 `2` 到 `100` 的偶数列表。

```elixir

```

## 过滤器

我们可以在列表推导中使用 **过滤器** 来过滤生成器中的元素。
例如，我们可以省略所有不能被 3 整除的值。

列表推导将过滤掉所有对过滤函数返回 `false` 的值。

```elixir
# 找到 1..100 中所有能被 3 整除的值
for n <- 1..100, rem(n, 3) === 0 do
  n
end
```

我们可以使用多个以逗号分隔的过滤器。

```elixir
for a <- 1..100, rem(a, 3) === 0, rem(a, 5) === 0 do
  a
end
```

我们还可以使用多个以逗号分隔的过滤器和生成器。过滤器和生成器可以按任何顺序排列。
然而，将过滤器组合在生成器之后通常更清晰。

```elixir
for a <- 1..45, b <- 1..5, rem(a, 5) === 0, rem(b, 5) === 0 do
  [a, b]
end
```

也就是说，你可以将生成器和过滤器交替排列。

```elixir
for a <- 1..45, rem(a, 5) === 0, b <- 1..5, rem(b, 5) === 0 do
  [a, b]
end
```

生成器必须按照你希望嵌套的顺序排列，否则你会改变行为。过滤器也必须在它们所依赖的任何生成器之后。例如，`b` 在这里尚未定义。

```elixir
for a <- 1..45, rem(a, 5) === 0, rem(b, 5) === 0, b <- 1..5 do
  [a, b]
end
```

### 你的回合

你有三个生成器，它们是从 `1..7` 的数字范围。

找到每个范围中所有三元组的数字，当它们相加等于七时。

<!-- livebook:{"force_markdown":true} -->

```elixir
# 预期输出
[
  {1, 1, 5},
  {1, 2, 4},
  {1, 3, 3},
  {1, 4, 2},
  {1, 5, 1},
  {2, 1, 4},
  {2, 2, 3},
  {2, 3, 2},
  {2, 4, 1},
  {3, 1, 3},
  {3, 2, 2},
  {3, 3, 1},
  {4, 1, 2},
  {4, 2, 1},
  {5, 1, 1}
]
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
for a <- 1..7, b <- 1..7, c <- 1..7, a + b + c == 7 do
  {a, b, c}
end
```

</details>

```elixir

```

## 可收集对象

默认情况下，列表推导返回一个列表。然而，我们可以使用 `:into` 选项将元素累积到任何值中。`Into` 适用于你习惯使用的任何与 [Enum](https://hexdocs.pm/elixir/Enum.html) 模块一起使用的集合。

<!-- livebook:{"break_markdown":true} -->

即使没有 `:into` 选项，我们也可以创建一个返回关键字列表的列表推导，通过使用元组，其中原子作为第一个元素，任何值作为第二个元素。

```elixir
for n <- 1..5 do
  {:"key_#{n}", n}
end
```

现在，由于映射和关键字列表在底层都是键值元组，我们可以指定 `:into` 选项以返回一个映射。

```elixir
for n <- 1..5, into: %{} do
  {:"key_#{n}", n}
end
```

这个映射可以有默认值。

```elixir
for n <- 1..5, into: %{default: "hello!"} do
  {:"key_#{n}", n}
end
```

而且，它可以是任何实现 [Collectable](https://hexdocs.pm/elixir/Collectable.html) 协议的数据类型。

这包括字符串！

```elixir
for n <- 1..10, do: "#{n}", into: ""
```

使用收集器在我们使用非列表可枚举数据类型的列表推导时非常有用，例如在转换映射时。

```elixir
for {key, value} <- %{a: 1, b: 2}, into: %{} do
  {key, value * 2}
end
```

### 你的回合

给定生成器 `%{a: 1, b: 2}`，使用带有收集器的列表推导将原子键映射转换为字符串键映射。

<!-- livebook:{"force_markdown":true} -->

```elixir
# 输入
%{a: 1, b: 2}
# 输出
%{"a" => 1, "b" => 2}
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>示例解决方案</summary>

```elixir
for {key, value} <- %{a: 1, b: 2}, into: %{} do
  {"#{key}", value}
end
```

</details>

```elixir

```

## 为什么使用列表推导？

[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2)、[Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) 和 [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) 可以实现与列表推导相同的所有功能。一般来说，[Enum](https://hexdocs.pm/elixir/Enum.html) 的使用比列表推导更广泛。

考虑将列表推导作为重构工具，以提高代码的清晰度。它们特别适用于构建和生成数据集合。当 [Enum](https://hexdocs.pm/elixir/Enum.html) 模块可以工作时，通常不建议使用列表推导。

避免过度依赖列表推导，特别是如果你来自面向对象编程背景，并感到想要使用列表推导，因为它们感觉像 for 循环。列表推导不是 for 循环！相反，考虑在你已经编写代码后使用列表推导进行重构和改进。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

在下面的 Elixir 单元中，将以下 `Enum.map` 转换为列表推导。

<!-- livebook:{"force_markdown":true} -->

```elixir
Enum.map(1..5, fn each -> each * 2 end)
```

```elixir

```

在下面的 Elixir 单元中，将以下 `Enum.reduce` 转换为列表推导。

<!-- livebook:{"force_markdown":true} -->

```elixir
Enum.reduce(["a", "b", "c"], fn each, acc -> acc <> each end)
```

```elixir

```

在下面的 Elixir 单元中，将以下嵌套的 `Enum.map` 转换为列表推导。

<!-- livebook:{"force_markdown":true} -->

```elixir
Enum.map(1..3, fn a -> Enum.map(1..3, fn b -> {a, b} end) end)
```

```elixir

```

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成列表推导阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Comprehensions">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/non_enumerables.livemd">非可枚举</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/palindrome.livemd">回文</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>