<!-- livebook:{"file_entries":[{"name":"git_clone_https_github.png","type":"attachment"},{"name":"github_clone_ssh.png","type":"attachment"},{"name":"resolve_conflicts_vsc.png","type":"attachment"}]} -->

# Git

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Git">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/command_line.livemd">命令行</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/livebook.livemd">Livebook</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 概述

### 版本控制

版本控制是一种系统，帮助你跟踪文件随时间的变化。它允许你保存工作不同版本，并高效地与他人协作。通过版本控制，你可以轻松比较、回退和合并更改，确保你有项目所有修改的历史记录，并能够有效地协作和备份代码。

<!-- livebook:{"break_markdown":true} -->

### Git

Git 是一种广泛使用的版本控制系统，帮助你跟踪对文件所做的更改。

<!-- livebook:{"break_markdown":true} -->

### GitHub

GitHub 是一个基于网络的平台，提供软件开发的托管服务，并为开发者提供一个协作和贡献开源及闭源项目的社区。它建立在 Git 之上，并为开发者提供一个用户友好的界面来管理他们的代码。

GitHub 为开发者提供了几个关键功能，包括：

* **代码库**：开发者可以在 GitHub 上创建和托管他们的代码在单独的“代码库”中，这些代码库可以轻松地与其他开发者共享和协作。这些代码库可以是 **公开** 或 **私有** 的。
* **协作**：开发者可以通过“分叉”一个代码库，进行更改，然后通过“拉取请求”将这些更改提交回原始代码库，从而轻松协作。
* **问题**：开发者可以通过在代码库中创建“问题”来跟踪和管理错误、功能请求和其他任务。
* **拉取请求 (PR)**：开发者可以通过创建“拉取请求”向代码库提交更改，这些请求可以由开发团队的其他成员进行审查和批准。
* **分支**：开发者可以创建和在多个分支上工作，允许他们在不影响主代码库的情况下处理不同的功能或错误修复。
* **维基**：开发者可以为他们的代码库创建一个维基，以提供关于代码库的文档和其他信息。

通过 Git 和 GitHub，开发者将更改的 **本地** 版本存储在 git 中，并将这些更改推送到 GitHub 上的 **远程** 版本。

## 安装 Git

Git 是一个在你的计算机上本地安装的程序。Git 在 macOS 和 Linux 操作系统上预装。如果你使用 Windows，你需要 [安装 Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)。

在命令行中输入以下内容以确认你已安装 Git。你应该看到类似的输出，但可能是不同的 git 版本。

```sh
$ git --version
git version 2.25.1
```

为了与本课程的阅读材料和指令保持一致，我们建议使用命令行进行 Git 操作，而不是使用 GitHub Desktop 等程序。

## 你的回合：创建一个 GitHub 账户

如果你还没有，请 [创建一个 GitHub 账户](https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account)。你可能还希望设置 [SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) 或其他授权方法，以便在与 GitHub 交互时不必每次都输入凭据。

## 提出问题

任何人都可以在公共 GitHub 项目上提出问题。例如，你可以通过访问该课程的 [GitHub 页面](https://github.com/DockYard-Academy/curriculum) 的问题标签并点击 **新问题** 来 [提出问题](https://github.com/DockYard-Academy/curriculum/issues)。

如果你在课程中遇到问题，请提出问题或与讲师交谈。

## 初始化本地代码库

Git 使用一个 `.git` 文件夹来存储管理项目源控制所需的文件和文件夹。我们称这个 git 管理的文件夹为 **代码库**。

使用命令行，你可以通过运行以下命令在当前工作目录中初始化 Git：

```sh
$ git init
```

<p style="background-color: orangered; padding: 1rem; color: white; font-weight: bold;">
注意：除非你希望该文件夹成为一个 Git 代码库，否则请不要初始化 Git。
</p>

<p style="background-color: orange; padding: 1rem; font-weight: bold;">
警告：通常你不应该嵌套 Git 代码库。
</p>

<!-- livebook:{"break_markdown":true} -->

### 你的回合

使用命令行创建一个名为 `git_example` 的新的 Git 管理项目。

你可以在 `git_example` 文件夹中使用 `git status` 来验证 Git 是否管理该文件夹。如下所示：

```sh
$ git init
Initialized empty Git repository in ~/github_example/.git/
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
```

## 暂存和提交更改

Git 允许你在提交中保存更改。更改从 **未跟踪** 到 **已暂存** 再到 **已提交**。

```mermaid
flowchart LR
  Untracked --git add--> Staged --git commit--> Committed
```

你将使用一些常用命令来保存 Git 中的更改。

* `git status`：显示 Git 信息并查看未跟踪和已暂存的更改。
* `git add`：暂存当前更改。
* `git commit`：将已暂存的更改保存到提交中。

将所有这些结合在一起，如果从项目文件夹运行，结果如下。`git status` 命令是可选的。

```
$ git status
$ git add .
$ git status
$ git commit -m "example commit message"
$ git status
```

<!-- livebook:{"break_markdown":true} -->

### 你的回合

你将要在 `github_example` 项目中暂存和提交一些更改。

在 `github_example` 中创建一个名为 `finished.txt` 的空文件。

使用 `git add` 和 `git commit` 来暂存和提交该文件。确保在每个步骤之间使用 `git status` 检查状态，以查看终端中如何显示已暂存和未暂存的文件。

## 克隆代码库

你可以克隆远程代码库，以在你的计算机上创建一个本地 Git 项目。

```mermaid
flowchart LR
Remote --git clone--> Local
```

有多种方法可以将远程代码库克隆到你的计算机上。

<!-- livebook:{"break_markdown":true} -->

### 使用命令行克隆

许多开发者更喜欢使用命令行，通过 HTTP、SSH 或 GitHub CLI。

你可以在 GitHub 上找到每种方法的说明：

* [HTTPS](https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls)
* [SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)
* [GitHub CLI](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)

<!-- livebook:{"break_markdown":true} -->

#### HTTPS

HTTPS（超文本传输安全协议）是一种传输数据的方法。在这种情况下，我们用它将文件从 GitHub 远程代码库复制到我们的本地计算机。

更实际地说，这是命令行中最简单的方法，但缺点是它的安全性较低，并且每次使用 `git` 命令时都需要输入 GitHub 凭据。

我们使用 `git clone` 和 GitHub 提供的 URL 通过 HTTPS 克隆代码库。
![](files/git_clone_https_github.png)

```sh
$ git clone https://github.com/BrooklinJazz/github_example.git
```

<!-- livebook:{"break_markdown":true} -->

但是，你需要在每次使用 `git push` 或任何其他与远程代码库交互的 `git` 命令时输入凭据。

```sh
$ git push
Username for 'https://github.com':
Password for 'https://a@github.com':
```

对于你经常使用的项目，HTTP 是繁琐的，除非你设置你的机器记住你的 git 凭据。

<!-- livebook:{"break_markdown":true} -->

### SSH

SSH 比 HTTPS 更安全，不需要用户名或密码进行身份验证。相反，它使用存储在你计算机上的 SSH 密钥。

但是，它的设置更复杂。如果你希望使用 SSH，请按照说明 [连接到 GitHub 的 SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)。

你需要遵循以下说明：

* [关于 SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh)（可选）
* [检查现有 SSH 密钥](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)（可选）
* [生成新的 SSH 密钥并将其添加到 ssh-agent](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)
* [将新的 SSH 密钥添加到你的 GitHub 账户](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
* [测试你的 SSH 连接](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection)
* [处理 SSH 密钥密码短语](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases)（可选）

然后你可以使用提供的 SSH URL 进行 `git clone`。

![](files/github_clone_ssh.png)

```sh
$ git clone git@github.com:BrooklinJazz/github_example.git
```

<!-- livebook:{"break_markdown":true} -->

### GitHub CLI

GitHub CLI 提供了一些在 Git 和 GitHub 上工作的便利功能。它允许你使用命令行完成通常需要 GitHub 的任务。

这超出了本课程的范围，但你可以 [在这里了解更多](https://github.com/cli/cli)。

<!-- livebook:{"break_markdown":true} -->

### 你的回合

将你的 `github_example` 项目克隆到你的计算机上，命名为 `github_example2`。

要在新名称下克隆项目，请为 `git clone` 命令提供一个新名称。

```
$ git clone <url> github_example2
```

## 分支

默认情况下，所有 Git 更改都发生在 `main` 分支上。我们可以创建其他 **本地** 或 **远程** 分支来将更改分组在一起。通常，我们会创建一个功能分支来将相关更改分组在一起。

`git checkout -b` 创建一个新分支。

```
$ git checkout -b example-feature-branch-name
```

它还可以从当前分支切换到另一个现有分支。

```
$ git checkout main
```

<!-- livebook:{"break_markdown":true} -->

```mermaid
---
title: Git
---
gitGraph
   commit
   commit
   branch feature-branch
   checkout feature-branch
   commit
   commit
```

<!-- livebook:{"break_markdown":true} -->

### 合并本地更改

我们可以使用 `git merge` 将一个本地分支的更改合并到另一个分支。

```mermaid
---
title: Git
---
gitGraph
   commit
   commit
   branch feature-branch
   checkout feature-branch
   commit
   commit
   checkout main
   merge feature-branch
   commit
   commit
```

我们必须切换到要合并更改的分支。以下是一个示例流程：

<!-- livebook:{"force_markdown":true} -->

```elixir
$ git checkout -b feature-branch
# 暂存并提交更改
$ git checkout main
$ git merge feature-branch
```

<!-- livebook:{"break_markdown":true} -->

### 推送和拉取更改

我们可以使用 `git pull` 和 `git push` 将更改从本地分支推送到远程分支，并从远程分支拉取更改到本地分支。

```
$ git pull
$ git push
```

第一次推送更改时，我们需要使用 `--set-upstream` 连接本地和远程分支。

<!-- livebook:{"force_markdown":true} -->

```elixir
$ git push --set-upstream origin <branchname>
# 或 -u 作为简写。
$ git push -u origin <branchname>
```

<!-- livebook:{"break_markdown":true} -->

### 合并远程更改（创建拉取请求）

要合并远程分支，我们在 GitHub 上使用 [创建拉取请求](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)，接受拉取请求以将一个远程分支与另一个分支合并。请注意，这不会更新本地分支。这些更改需要拉取到相应的本地分支。

<!-- livebook:{"force_markdown":true} -->

```elixir
$ git checkout -b feature-branch
# 暂存并提交更改
$ git push -u origin feature-branch
# 在 GitHub 上创建拉取请求
# 在 GitHub 上将拉取请求合并到主分支
$ git checkout main
$ git pull
```

以下是完整流程的图示。

```mermaid
sequenceDiagram
participant LM as Local Main
participant LF as Local Feature
participant RF as Remote Feature
participant RM as Remote Main

Note right of LM: git checkout -b feature-branch
LM --> LF: checkout
Note left of LF: git add .
Note left of LF: git commit -m "message"
LF --> LF: commit changes
Note left of RF: git push -u origin feature-branch
LF ->> RF: push changes
Note right of RF: 在 GitHub 上创建 PR
RF --> RF: 创建拉取请求
Note left of RM: 在 GitHub 上接受 PR
RF ->> RM: 合并拉取请求
Note left of RM: git checkout main
Note left of RM: git pull
RM ->> LM: 拉取更改
```

<!-- livebook:{"break_markdown":true} -->

### 你的回合

在你的 `github_example` 项目中创建一个 `feature-branch`。

1. **本地**：暂存、提交并将一些本地更改合并到 `main`。
2. **远程**：暂存、提交并将一些更改推送到远程分支。创建拉取请求并将其合并到远程 `main` 分支。一旦合并，将更改拉取到你的本地 `main` 分支。

## 分支策略

### 主干开发

<!-- livebook:{"break_markdown":true} -->

源控制允许我们存储项目的不同版本。通常有一个主分支用于项目的最新版本。

最简单的源控制策略只使用一个主分支。开发者可以从主分支推送和拉取以获取最新更改。

```mermaid
sequenceDiagram
    actor D1 as 开发者 1
    participant R as 主分支
    actor D2 as 开发者 2
    D1->> R: 推送更改
    R->> D2: 拉取更改
    D2->> R: 推送更改
    R->> D1: 拉取更改
```

这很方便且快速。然而，它缺乏对代码更改的审查系统。因此，对于小型项目与高度信任的团队成员来说，这可能是优秀的，但对于需要代码审查或多个测试阶段的大型项目来说，效果可能较差。

<!-- livebook:{"break_markdown":true} -->

### 开发 -> QA -> 预发布 -> 生产管道

一些公司会对更改进行多个阶段的审查。

没有通用的策略。每个项目可能有不同的管道。然而，一些常见步骤包括：

* **功能分支**：包含一个特定更改的分支。
* **开发**：开发者测试和集成分支。
* **质量保证 (QA)**：质量保证测试分支。
* **预发布**：已批准的更改准备生产但尚未部署。
* **主分支**：项目的最新可用版本。

```mermaid
---
title: Git 管道
---
gitGraph
  commit
  branch development
  commit
  branch feature-branch
  checkout feature-branch
  commit
  commit
  commit
  branch qa
  commit
  branch staging
  commit
  branch production
  commit
  checkout main
  merge production
```

## 合并冲突

源控制允许我们开发自己版本的项目，隔离到我们的本地版本。然而，如果两个开发者编辑同一个文件，可能会发生冲突。

这些冲突需要手动解决。通常使用 [GitHub Desktop 解决冲突](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github) 或 Visual Studio Code 是最简单的。

<!-- livebook:{"break_markdown":true} -->

![](files/resolve_conflicts_vsc.png)

## 深入阅读

考虑以下资源以加深你对该主题的理解。

* [Git 文档和指南](https://git-scm.com/)
* [GitHub 文档和指南](https://docs.github.com/en)

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [发布](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的代码库。

运行 `git status` 确保没有不必要的更改。
然后在 `curriculum` 文件夹中运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成 Git 阅读"
$ git push
```

我们自豪地提供我们的开源课程，任何人都可以免费学习，按照自己的节奏进行。

我们还提供一个付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Git">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/command_line.livemd">命令行</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/livebook.livemd">Livebook</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>