<!-- livebook:{"file_entries":[{"name":"hello_stack_heap.png","type":"attachment"},{"name":"hello_stored_in_memory.png","type":"attachment"},{"name":"memory_blank.png","type":"attachment"},{"name":"memory_consumption_filled_livebook_runtime.png","type":"attachment"},{"name":"memory_consumption_livebook_runtime.png","type":"attachment"},{"name":"stack-overflow-without-tail-recursion.png","type":"attachment"},{"name":"stack_and_heap.png","type":"attachment"},{"name":"stack_frame_steps123.png","type":"attachment"},{"name":"stack_frame_steps4567.png","type":"attachment"}]} -->

# 计算机硬件

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Computer Hardware">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/start_here.livemd">从这里开始</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/command_line.livemd">命令行</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## 复习问题

完成本课后，学生应该能够回答以下问题。

* 计算机的处理器、内存和存储设备如何影响我们程序的性能？
* 程序指令是如何在栈上执行的？

<!-- livebook:{"branch_parent_index":0} -->

## 概述

计算机由多个部分组成。作为程序员，我们主要关注 **处理器** 和 **内存**。

处理器决定了计算机在执行计算时的速度。

内存或 **RAM**（随机存取内存）决定了我们在计算过程中可以存储的数据量。

在软件术语中，这转化为我们程序的 **速度** 和 **内存消耗**。通常在构建软件时，这些是你主要的性能关注点。

本课程的范围不包括对计算机和计算机硬件的深入理解。以下是 Tom Scott 的一段很好的入门视频，帮助你了解计算机在后台做了什么。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=Z5JC9Ve1sfI\")\n","title":"Tom Scott: The Fetch-Execute Cycle: What's Your Computer Actually Doing?"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=Z5JC9Ve1sfI")
```

## 内存

我们在内存中存储信息。我们可以将内存视为一系列单元，每个单元可以存储某个值。

![](files/memory_blank.png)

<!-- livebook:{"break_markdown":true} -->

字符串 "hello" 可能以如下方式存储在内存中。

![](files/hello_stored_in_memory.png)

在底层，内存是以称为位的电信号存储的。

每个位表示 `1` 或 `0`，作为电信号的 `开` 或 `关` 值。

八个位组合在一起形成 **字节**。有关更多信息，请参见 [字符串和二进制](strings_and_binaries.livemd)。

内存通常以千字节（`1024` 字节）、兆字节（`1024` 千字节）和吉字节（`1024` 兆字节）来衡量。

由于它们使用公制系统，你可能期望每个单位以 `1000` 而不是 `1024` 增加。然而，计算机使用二进制数字，因此硬件是基于 `2` 的幂构建的。

### 栈与堆

内存被分为几个部分。

**栈** 存储函数和变量在执行时的状态。

**堆** 是一个自由的内存资源，我们可以在其中放置几乎任何我们想要的值。

![](files/stack_and_heap.png)

<!-- livebook:{"break_markdown":true} -->

例如，当你定义变量 `hello` 并将其绑定到 `"world"` 时，hello 存储在 **栈** 上，并指向堆中内存的位置。

```elixir
hello = "world"
```

![](files/hello_stack_heap.png)

### 栈帧

栈是一个 LIFO（后进先出）队列。
存储在栈上的指令创建 **栈帧**。

当我们执行函数时，它们被存储在栈帧中。

<!-- livebook:{"break_markdown":true} -->

![](files/stack_frame_steps123.png)

<!-- livebook:{"break_markdown":true} -->

最后添加到栈中的函数将是第一个被执行并从栈中移除的函数。

![](files/stack_frame_steps4567.png)

<!-- livebook:{"break_markdown":true} -->

这就是为什么在下面的代码中，`three/0` 先执行，然后是 `two/1`，最后是 `one/1`。

```elixir
one = fn _ -> IO.inspect("one") end
two = fn _ -> IO.inspect("two") end
three = fn -> IO.inspect("three") end

one.(two.(three.()))
```

### 栈溢出

栈的内存分配是有限的。当我们在栈上过度分配内存时，会发生栈溢出。例如，如果我们继续在函数中执行函数，最终栈将（通常）耗尽空间。

![栈溢出](files/stack-overflow-without-tail-recursion.png)

<!-- livebook:{"break_markdown":true} -->

### 内存消耗

每当我们创建一个值时，它会存储在内存中。如果值太大，它可能会消耗超过堆上可用的内存（或分配给程序的内存）。

例如，将大文件的内容加载到内存中是一个性能问题。

你可以在运行时设置面板中查看这个 livebook 消耗的内存。按 `s` 然后 `r` 打开设置面板。

![](files/memory_consumption_livebook_runtime.png)

<!-- livebook:{"break_markdown":true} -->

取消注释下面的行并评估单元格。你会注意到 **进程** 的内存消耗应该增加。这是因为 `list` 必须存储在内存中。

再次注释该行并重新评估单元格，你会注意到内存消耗下降，因为 `list` 不再在内存中。

```elixir
# list = Enum.to_list(1..1000000)
```

![](files/memory_consumption_filled_livebook_runtime.png)

<!-- livebook:{"break_markdown":true} -->

有关内存的更多信息，Crash Course Computer Science 有一段更深入的视频。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=fpnE6UAfbtU\")","title":"Registers and Ram: Crash Course Computer Science"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=fpnE6UAfbtU")
```

### 存储

通常，我们更关心程序的内存消耗。然而，如果我们的应用程序要求用户将大文件下载到他们的计算机上，了解存储是有用的。

文件可以保存到计算机的硬盘（或更现代计算机中的固态硬盘）上。硬盘是一个较慢（但通常较大）的存储设备。与内存不同，它通常用于持久值，而不是仅在程序运行时存在的值。

有关内存和存储的更多信息，你可以观看 Crash Course Computer Science 的这段视频。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=TQCr9RV7twk\")","title":"Memory & Storage: Crash Course Computer Science"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=TQCr9RV7twk")
```

## CPU

CPU（中央处理单元）执行你在程序中创建的指令。

当你执行任何操作，例如 `2 + 2` 时，它由 CPU 处理。

你提供给程序的指令越多，CPU 需要执行的工作就越多。如果指令过多，程序的执行时间将会更长。

例如，执行十次加法操作要比执行一千万次加法操作快得多。

尝试评估下面的两个单元格，注意第一个单元格的执行速度要快得多（几乎是瞬间）。

> 你不需要理解 [Enum](https://hexdocs.pm/elixir/Enum.html) 的具体细节。两个示例之间唯一重要的区别是数据的大小。第一个是 `10` 个元素，第二个是 `10_000_000`。

```elixir
Enum.map(1..10, fn each -> each + 2 end)
```

```elixir
Enum.map(1..10_000_000, fn each -> each + 2 end)
```

有关 CPU 的更多信息，Crash Course Computer Science 有一段很好的视频。

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=FZGugFqdr60\")","title":"The Central Processing Unit (CPU) Crash Course Computer Science"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=FZGugFqdr60")
```

## 结论

性能问题可能会显著影响程序，导致缓慢甚至崩溃。始终考虑程序的处理和内存限制，以及这可能如何影响用户。

此外，性能问题通常对低质量计算机的影响更大。因此，你的程序在个人计算机上可能表现良好，但在低性能硬件上可能会出现问题。

## 提交你的进度

DockYard Academy 现在建议你使用最新的 [Release](https://github.com/DockYard-Academy/curriculum/releases)，而不是分叉或克隆我们的仓库。

运行 `git status` 以确保没有不必要的更改。
然后在 `curriculum` 文件夹中从命令行运行以下命令以提交你的进度。

```
$ git add .
$ git commit -m "完成计算机硬件阅读"
$ git push
```

我们自豪地提供我们的开源课程，供任何人免费学习，按照自己的节奏进行。

我们还提供付费课程，你可以在同伴的陪伴下向讲师学习。
我们将很快接受 2023 年 6 月至 8 月的课程申请。

## 导航

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">首页</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Computer Hardware">报告问题</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/start_here.livemd">从这里开始</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/command_line.livemd">命令行</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>